<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="format-inl_8h" kind="file" language="C++">
    <compoundname>format-inl.h</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">cctype</includes>
    <includes local="no">climits</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdarg</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cwchar</includes>
    <includes local="no">exception</includes>
    <includes refid="format_8h" local="yes">format.h</includes>
    <includes local="no">locale</includes>
    <includedby refid="format_8cc" local="yes">lib/srslog/bundled/fmt/format.cc</includedby>
    <incdepgraph>
      <node id="25">
        <label>locale</label>
      </node>
      <node id="20">
        <label>functional</label>
      </node>
      <node id="14">
        <label>limits</label>
      </node>
      <node id="21">
        <label>iterator</label>
      </node>
      <node id="13">
        <label>cstdint</label>
      </node>
      <node id="1">
        <label>include/srsgnb/srslog/bundled/fmt/format-inl.h</label>
        <link refid="format-inl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cwchar</label>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="16">
        <label>stdexcept</label>
      </node>
      <node id="22">
        <label>string</label>
      </node>
      <node id="6">
        <label>cstdarg</label>
      </node>
      <node id="9">
        <label>exception</label>
      </node>
      <node id="10">
        <label>format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>cstdio</label>
      </node>
      <node id="24">
        <label>vector</label>
      </node>
      <node id="18">
        <label>array</label>
      </node>
      <node id="12">
        <label>cerrno</label>
      </node>
      <node id="3">
        <label>cctype</label>
      </node>
      <node id="4">
        <label>climits</label>
      </node>
      <node id="23">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="17">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structdetail_1_1bits" prot="public">detail::bits</innerclass>
    <innerclass refid="structdetail_1_1boundaries" prot="public">detail::boundaries</innerclass>
    <innerclass refid="classdetail_1_1fp" prot="public">detail::fp</innerclass>
    <innerclass refid="structdetail_1_1accumulator" prot="public">detail::accumulator</innerclass>
    <innerclass refid="classdetail_1_1bigint" prot="public">detail::bigint</innerclass>
    <innerclass refid="structdetail_1_1fixed__handler" prot="public">detail::fixed_handler</innerclass>
    <innerclass refid="structdetail_1_1grisu__shortest__handler" prot="public">detail::grisu_shortest_handler</innerclass>
    <innerclass refid="structformatter_3_01detail_1_1bigint_01_4" prot="public">formatter&lt; detail::bigint &gt;</innerclass>
    <innerclass refid="structstringifier" prot="public">stringifier</innerclass>
    <innernamespace refid="namespacedetail">detail</innernamespace>
    <innernamespace refid="namespacedetail_1_1digits">detail::digits</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="format-inl_8h_1a9a9bb3caa94066b3adc175bb24cb1783" prot="public" static="no">
        <name>FMT_SNPRINTF</name>
        <initializer>snprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="61" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format-inl_8h_1aeff75c93a29bc942ca36b31a4b634fe9" prot="public" static="no">
        <name>FMT_POWERS_OF_10</name>
        <param><defname>factor</defname></param>
        <initializer>  factor * 10, (factor)*100, (factor)*1000, (factor)*10000, (factor)*100000, \
      (factor)*1000000, (factor)*10000000, (factor)*100000000,               \
      (factor)*1000000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="269" column="9" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="format-inl_8h_1ada82b8c8af1a78063bec620bb081d6d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fmt::detail::null</type>
        <definition>fmt::detail::null strerror_r</definition>
        <argsstring>(int, char *,...)</argsstring>
        <name>strerror_r</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="45" column="9" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1aadd40468b68577774ecd94816427b7b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fmt::detail::null</type>
        <definition>fmt::detail::null strerror_s</definition>
        <argsstring>(char *, size_t,...)</argsstring>
        <name>strerror_s</name>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="46" column="9" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1a4d9b8fae3111cc474013ed9bc0cd8c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void format_system_error</definition>
        <argsstring>(detail::buffer&lt; char &gt; &amp;out, int error_code, string_view message) FMT_NOEXCEPT</argsstring>
        <name>format_system_error</name>
        <param>
          <type><ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer</ref>&lt; char &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats an error returned by an operating system or a language runtime, for example a file opening error, and writes it to <emphasis>out</emphasis> in the following form:</para>
<para>.. parsed-literal:: &lt;message&gt;*: *&lt;system-message&gt;*</para>
<para>where *&lt;message&gt;* is the passed message and *&lt;system-message&gt;* is the system message corresponding to the error code. error_code* is a system error code as given by <computeroutput>errno</computeroutput>. If <emphasis><ref refid="classerror__code" kindref="compound">error_code</ref></emphasis> is not a valid error code such as -1, the system message may look like &quot;Unknown error -1&quot; and is platform-dependent. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="1356" column="15" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="1356" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1a82b610312f3005c8480b1d8439b129be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void report_system_error</definition>
        <argsstring>(int error_code, fmt::string_view message) FMT_NOEXCEPT</argsstring>
        <name>report_system_error</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>fmt::string_view</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="1382" column="15" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="1382" bodyend="1385"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1a9d834f6ef5c0553b6c434f8d9ac105bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void vprint</definition>
        <argsstring>(std::FILE *f, string_view format_str, format_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="structformat__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="1412" column="15" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="1412" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1a77fcf4959d4c69c3800b759696f37248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void vprint</definition>
        <argsstring>(string_view format_str, format_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="structformat__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h" line="1443" column="15" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="1443" bodyend="1445"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Formatting<sp/>library<sp/>for<sp/>C++<sp/>-<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_FORMAT_INL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FORMAT_INL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdarg&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::memmove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cwchar&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(FMT_STATIC_THOUSANDS_SEPARATOR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(NOMINMAX)<sp/>&amp;&amp;<sp/>!defined(WIN32_LEAN_AND_MEAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>undef<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>undef<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(disable<sp/>:<sp/>4702)<sp/><sp/>//<sp/>unreachable<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dummy<sp/>implementations<sp/>of<sp/>strerror_r<sp/>and<sp/>strerror_s<sp/>called<sp/>if<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>system<sp/>functions<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fmt::detail::null&lt;&gt;<sp/>strerror_r(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fmt::detail::null&lt;&gt;<sp/>strerror_s(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assert_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>unchecked<sp/>std::fprintf<sp/>to<sp/>avoid<sp/>triggering<sp/>another<sp/>assertion<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>writing<sp/>to<sp/>stderr<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:%d:<sp/>assertion<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>line,<sp/>message);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Chosen<sp/>instead<sp/>of<sp/>std::abort<sp/>to<sp/>satisfy<sp/>Clang<sp/>in<sp/>CUDA<sp/>mode<sp/>during<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>pass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>std::terminate();</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_SNPRINTF<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fmt_snprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>vsnprintf_s(buffer,<sp/>size,<sp/>_TRUNCATE,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_SNPRINTF<sp/>fmt_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>portable<sp/>thread-safe<sp/>version<sp/>of<sp/>strerror.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>buffer<sp/>to<sp/>point<sp/>to<sp/>a<sp/>string<sp/>describing<sp/>the<sp/>error<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>either<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>string<sp/>stored<sp/>in<sp/>buffer,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>pointer<sp/>to<sp/>some<sp/>static<sp/>immutable<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>one<sp/>of<sp/>the<sp/>following<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ERANGE<sp/>-<sp/>buffer<sp/>is<sp/>not<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>the<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>other<sp/><sp/>-<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Buffer<sp/>should<sp/>be<sp/>at<sp/>least<sp/>of<sp/>size<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>safe_strerror(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>buffer,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>FMT_ASSERT(buffer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>buffer_size<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">dispatcher<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code_;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>buffer_;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size_;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>noop<sp/>assignment<sp/>operator<sp/>to<sp/>avoid<sp/>bogus<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dispatcher&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>result<sp/>of<sp/>XSI-compliant<sp/>version<sp/>of<sp/>strerror_r.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handle(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glibc<sp/>versions<sp/>before<sp/>2.13<sp/>return<sp/>result<sp/>in<sp/>errno.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>==<sp/>-1<sp/>?<sp/>errno<sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>result<sp/>of<sp/>GNU-specific<sp/>version<sp/>of<sp/>strerror_r.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_MAYBE_UNUSED</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handle(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>buffer<sp/>is<sp/>full<sp/>then<sp/>the<sp/>message<sp/>is<sp/>probably<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message<sp/>==<sp/>buffer_<sp/>&amp;&amp;<sp/>strlen(buffer_)<sp/>==<sp/>buffer_size_<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ERANGE;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>case<sp/>when<sp/>strerror_r<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_MAYBE_UNUSED</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handle(<ref refid="structdetail_1_1null" kindref="compound">detail::null&lt;&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fallback(strerror_s(buffer_,<sp/>buffer_size_,<sp/>error_code_));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fallback<sp/>to<sp/>strerror_s<sp/>when<sp/>strerror_r<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_MAYBE_UNUSED</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fallback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>buffer<sp/>is<sp/>full<sp/>then<sp/>the<sp/>message<sp/>is<sp/>probably<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>strlen(buffer_)<sp/>==<sp/>buffer_size_<sp/>-<sp/>1<sp/>?<sp/>ERANGE</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>result;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fallback<sp/>to<sp/>strerror<sp/>if<sp/>strerror_r<sp/>and<sp/>strerror_s<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fallback(<ref refid="structdetail_1_1null" kindref="compound">detail::null&lt;&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_<sp/>=<sp/>strerror(error_code_);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errno;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>dispatcher(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_code,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>error_code_(err_code),<sp/>buffer_(buf),<sp/>buffer_size_(buf_size)<sp/>{}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle(strerror_r(error_code_,<sp/>buffer_,<sp/>buffer_size_));<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dispatcher(<ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/>buffer,<sp/>buffer_size).run();</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_error_code(<ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer&lt;char&gt;</ref>&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>error<sp/>code<sp/>making<sp/>sure<sp/>that<sp/>the<sp/>output<sp/>fits<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inline_buffer_size<sp/>to<sp/>avoid<sp/>dynamic<sp/>memory<sp/>allocation<sp/>and<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bad_alloc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>out.resize(0);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>SEP[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ERROR_STR[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>2<sp/>to<sp/>account<sp/>for<sp/>terminating<sp/>null<sp/>characters<sp/>in<sp/>SEP<sp/>and<sp/>ERROR_STR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>error_code_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SEP)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ERROR_STR)<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_or_64_or_128_t&lt;int&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classerror__code" kindref="compound">error_code</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::is_negative(<ref refid="classerror__code" kindref="compound">error_code</ref>))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>++error_code_size;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>error_code_size<sp/>+=<sp/>detail::to_unsigned(detail::count_digits(abs_value));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::back_inserter(out);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.size()<sp/>&lt;=<sp/>inline_buffer_size<sp/>-<sp/>error_code_size)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>format_to(it,<sp/></highlight><highlight class="stringliteral">&quot;{}{}&quot;</highlight><highlight class="normal">,<sp/>message,<sp/>SEP);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>format_to(it,<sp/></highlight><highlight class="stringliteral">&quot;{}{}&quot;</highlight><highlight class="normal">,<sp/>ERROR_STR,<sp/><ref refid="classerror__code" kindref="compound">error_code</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>assert(out.size()<sp/>&lt;=<sp/>inline_buffer_size);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_error(format_func<sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>full_message;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>func(full_message,<sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>use<sp/>fwrite_fully<sp/>because<sp/>the<sp/>latter<sp/>may<sp/>throw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>(void)std::fwrite(full_message.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>full_message.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>(),<sp/>1,<sp/>stderr);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>std::fputc(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>stderr);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>wrapper<sp/>around<sp/>fwrite<sp/>that<sp/>throws<sp/>on<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fwrite_fully(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>written<sp/>=<sp/>std::fwrite(ptr,<sp/>size,<sp/>count,<sp/>stream);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(written<sp/>&lt;<sp/>count)<sp/>FMT_THROW(<ref refid="classsystem__error" kindref="compound">system_error</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>write<sp/>to<sp/>file&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(FMT_STATIC_THOUSANDS_SEPARATOR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Locale&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">locale_ref::locale_ref(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Locale&amp;<sp/>loc)<sp/>:<sp/>locale_(&amp;loc)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>static_assert(std::is_same&lt;Locale,<sp/>std::locale&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Locale&gt;<sp/>Locale<sp/>locale_ref::get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>static_assert(std::is_same&lt;Locale,<sp/>std::locale&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>locale_<sp/>?<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">std::locale*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(locale_)<sp/>:<sp/>std::locale();</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_FUNC<sp/>std::string<sp/>grouping_impl(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::use_facet&lt;std::numpunct&lt;Char&gt;&gt;(loc.get&lt;std::locale&gt;()).grouping();</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_FUNC<sp/>Char<sp/>thousands_sep_impl(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::use_facet&lt;std::numpunct&lt;Char&gt;&gt;(loc.get&lt;std::locale&gt;())</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.thousands_sep();</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_FUNC<sp/>Char<sp/>decimal_point_impl(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::use_facet&lt;std::numpunct&lt;Char&gt;&gt;(loc.get&lt;std::locale&gt;())</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.decimal_point();</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">FMT_FUNC<sp/>std::string<sp/>detail::grouping_impl(locale_ref)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_FUNC<sp/>Char<sp/>detail::thousands_sep_impl(locale_ref)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FMT_STATIC_THOUSANDS_SEPARATOR;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_FUNC<sp/>Char<sp/>detail::decimal_point_impl(locale_ref)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">FMT_API<sp/>FMT_FUNC<sp/>format_error::~format_error()<sp/>FMT_NOEXCEPT<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">FMT_API<sp/>FMT_FUNC<sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>::~<ref refid="classsystem__error" kindref="compound">system_error</ref>()<sp/>FMT_NOEXCEPT<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>::init(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_code,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structformat__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>error_code_<sp/>=<sp/>err_code;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>format_system_error(buffer,<sp/>err_code,<sp/>vformat(format_str,<sp/>args));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>std::runtime_error&amp;<sp/>base<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>base<sp/>=<sp/>std::runtime_error(to_string(buffer));</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>FMT_FUNC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits&lt;4&gt;(<ref refid="structdetail_1_1fallback__uintptr" kindref="compound">detail::fallback_uintptr</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fallback_uintptr<sp/>is<sp/>always<sp/>stored<sp/>in<sp/>little<sp/>endian.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>n.value[i]<sp/>==<sp/>0)<sp/>--i;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>char_digits<sp/>=<sp/>std::numeric_limits&lt;unsigned<sp/>char&gt;::digits<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;=<sp/>0<sp/>?<sp/>i<sp/>*<sp/>char_digits<sp/>+<sp/>count_digits&lt;4,<sp/>unsigned&gt;(n.value[i])<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::digit_pair<sp/>basic_data&lt;T&gt;::digits[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">},<sp/><sp/>{</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::hex_digits[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_POWERS_OF_10(factor)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>10,<sp/>(factor)*100,<sp/>(factor)*1000,<sp/>(factor)*10000,<sp/>(factor)*100000,<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(factor)*1000000,<sp/>(factor)*10000000,<sp/>(factor)*100000000,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(factor)*1000000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>basic_data&lt;T&gt;::powers_of_10_64[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>FMT_POWERS_OF_10(1),<sp/>FMT_POWERS_OF_10(1000000000ULL),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>10000000000000000000ULL};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>basic_data&lt;T&gt;::zero_or_powers_of_10_32[]<sp/>=<sp/>{0,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_POWERS_OF_10(1)};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>basic_data&lt;T&gt;::zero_or_powers_of_10_64[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>FMT_POWERS_OF_10(1),<sp/>FMT_POWERS_OF_10(1000000000ULL),</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>10000000000000000000ULL};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normalized<sp/>64-bit<sp/>significands<sp/>of<sp/>pow(10,<sp/>k),<sp/>for<sp/>k<sp/>=<sp/>-348,<sp/>-340,<sp/>...,<sp/>340.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>generated<sp/>by<sp/>support/compute-powers.py.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>basic_data&lt;T&gt;::pow10_significands[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>0xfa8fd5a0081c0288,<sp/>0xbaaee17fa23ebf76,<sp/>0x8b16fb203055ac76,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>0xcf42894a5dce35ea,<sp/>0x9a6bb0aa55653b2d,<sp/>0xe61acf033d1a45df,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>0xab70fe17c79ac6ca,<sp/>0xff77b1fcbebcdc4f,<sp/>0xbe5691ef416bd60c,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>0x8dd01fad907ffc3c,<sp/>0xd3515c2831559a83,<sp/>0x9d71ac8fada6c9b5,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>0xea9c227723ee8bcb,<sp/>0xaecc49914078536d,<sp/>0x823c12795db6ce57,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>0xc21094364dfb5637,<sp/>0x9096ea6f3848984f,<sp/>0xd77485cb25823ac7,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>0xa086cfcd97bf97f4,<sp/>0xef340a98172aace5,<sp/>0xb23867fb2a35b28e,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>0x84c8d4dfd2c63f3b,<sp/>0xc5dd44271ad3cdba,<sp/>0x936b9fcebb25c996,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>0xdbac6c247d62a584,<sp/>0xa3ab66580d5fdaf6,<sp/>0xf3e2f893dec3f126,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>0xb5b5ada8aaff80b8,<sp/>0x87625f056c7c4a8b,<sp/>0xc9bcff6034c13053,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>0x964e858c91ba2655,<sp/>0xdff9772470297ebd,<sp/>0xa6dfbd9fb8e5b88f,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>0xf8a95fcf88747d94,<sp/>0xb94470938fa89bcf,<sp/>0x8a08f0f8bf0f156b,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>0xcdb02555653131b6,<sp/>0x993fe2c6d07b7fac,<sp/>0xe45c10c42a2b3b06,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>0xaa242499697392d3,<sp/>0xfd87b5f28300ca0e,<sp/>0xbce5086492111aeb,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>0x8cbccc096f5088cc,<sp/>0xd1b71758e219652c,<sp/>0x9c40000000000000,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>0xe8d4a51000000000,<sp/>0xad78ebc5ac620000,<sp/>0x813f3978f8940984,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>0xc097ce7bc90715b3,<sp/>0x8f7e32ce7bea5c70,<sp/>0xd5d238a4abe98068,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>0x9f4f2726179a2245,<sp/>0xed63a231d4c4fb27,<sp/>0xb0de65388cc8ada8,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>0x83c7088e1aab65db,<sp/>0xc45d1df942711d9a,<sp/>0x924d692ca61be758,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>0xda01ee641a708dea,<sp/>0xa26da3999aef774a,<sp/>0xf209787bb47d6b85,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>0xb454e4a179dd1877,<sp/>0x865b86925b9bc5c2,<sp/>0xc83553c5c8965d3d,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>0x952ab45cfa97a0b3,<sp/>0xde469fbd99a05fe3,<sp/>0xa59bc234db398c25,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>0xf6c69a72a3989f5c,<sp/>0xb7dcbf5354e9bece,<sp/>0x88fcf317f22241e2,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>0xcc20ce9bd35c78a5,<sp/>0x98165af37b2153df,<sp/>0xe2a0b5dc971f303a,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>0xa8d9d1535ce3b396,<sp/>0xfb9b7cd9a4a7443c,<sp/>0xbb764c4ca7a44410,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>0x8bab8eefb6409c1a,<sp/>0xd01fef10a657842c,<sp/>0x9b10a4e5e9913129,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>0xe7109bfba19c0c9d,<sp/>0xac2820d9623bf429,<sp/>0x80444b5e7aa7cf85,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>0xbf21e44003acdd2d,<sp/>0x8e679c2f5e44ff8f,<sp/>0xd433179d9c8cb841,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>0x9e19db92b4e31ba9,<sp/>0xeb96bf6ebadf77d9,<sp/>0xaf87023b9bf0ee6b,</highlight></codeline>
<codeline lineno="321"><highlight class="normal">};</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>exponents<sp/>of<sp/>pow(10,<sp/>k),<sp/>for<sp/>k<sp/>=<sp/>-348,<sp/>-340,<sp/>...,<sp/>340,<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>significands<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>basic_data&lt;T&gt;::pow10_exponents[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>-1220,<sp/>-1193,<sp/>-1166,<sp/>-1140,<sp/>-1113,<sp/>-1087,<sp/>-1060,<sp/>-1034,<sp/>-1007,<sp/>-980,<sp/>-954,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>-927,<sp/><sp/>-901,<sp/><sp/>-874,<sp/><sp/>-847,<sp/><sp/>-821,<sp/><sp/>-794,<sp/><sp/>-768,<sp/><sp/>-741,<sp/><sp/>-715,<sp/><sp/>-688,<sp/>-661,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>-635,<sp/><sp/>-608,<sp/><sp/>-582,<sp/><sp/>-555,<sp/><sp/>-529,<sp/><sp/>-502,<sp/><sp/>-475,<sp/><sp/>-449,<sp/><sp/>-422,<sp/><sp/>-396,<sp/>-369,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>-343,<sp/><sp/>-316,<sp/><sp/>-289,<sp/><sp/>-263,<sp/><sp/>-236,<sp/><sp/>-210,<sp/><sp/>-183,<sp/><sp/>-157,<sp/><sp/>-130,<sp/><sp/>-103,<sp/>-77,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>-50,<sp/><sp/><sp/>-24,<sp/><sp/><sp/>3,<sp/><sp/><sp/><sp/><sp/>30,<sp/><sp/><sp/><sp/>56,<sp/><sp/><sp/><sp/>83,<sp/><sp/><sp/><sp/>109,<sp/><sp/><sp/>136,<sp/><sp/><sp/>162,<sp/><sp/><sp/>189,<sp/><sp/>216,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>242,<sp/><sp/><sp/>269,<sp/><sp/><sp/>295,<sp/><sp/><sp/>322,<sp/><sp/><sp/>348,<sp/><sp/><sp/>375,<sp/><sp/><sp/>402,<sp/><sp/><sp/>428,<sp/><sp/><sp/>455,<sp/><sp/><sp/>481,<sp/><sp/>508,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>534,<sp/><sp/><sp/>561,<sp/><sp/><sp/>588,<sp/><sp/><sp/>614,<sp/><sp/><sp/>641,<sp/><sp/><sp/>667,<sp/><sp/><sp/>694,<sp/><sp/><sp/>720,<sp/><sp/><sp/>747,<sp/><sp/><sp/>774,<sp/><sp/>800,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>827,<sp/><sp/><sp/>853,<sp/><sp/><sp/>880,<sp/><sp/><sp/>907,<sp/><sp/><sp/>933,<sp/><sp/><sp/>960,<sp/><sp/><sp/>986,<sp/><sp/><sp/>1013,<sp/><sp/>1039,<sp/><sp/>1066};</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::foreground_color[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\x1b[38;2;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::background_color[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\x1b[48;2;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::reset_color[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\x1b[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::wreset_color[]<sp/>=<sp/>L</highlight><highlight class="stringliteral">&quot;\x1b[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::signs[]<sp/>=<sp/>{0,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::left_padding_shifts[]<sp/>=<sp/>{31,<sp/>31,<sp/>0,<sp/>1,<sp/>0};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_data&lt;T&gt;::right_padding_shifts[]<sp/>=<sp/>{0,<sp/>31,<sp/>0,<sp/>1,<sp/>0};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="structdetail_1_1bits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1bits" kindref="compound">bits</ref><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>std::numeric_limits&lt;unsigned<sp/>char&gt;::digits);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SHIFT<sp/>=<sp/>0&gt;<sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/>normalize(<ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lower<sp/>(upper)<sp/>boundary<sp/>is<sp/>a<sp/>value<sp/>half<sp/>way<sp/>between<sp/>a<sp/>floating-point<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>its<sp/>predecessor<sp/>(successor).<sp/>Boundaries<sp/>have<sp/>the<sp/>same<sp/>exponent<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>so<sp/>only<sp/>significands<sp/>are<sp/>stored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="structdetail_1_1boundaries" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1boundaries" kindref="compound">boundaries</ref><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>uint64_t<sp/>lower;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>uint64_t<sp/>upper;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">};</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>handmade<sp/>floating-point<sp/>number<sp/>f<sp/>*<sp/>pow(2,<sp/>e).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="classdetail_1_1fp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>significand_type<sp/>=<sp/>uint64_t;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>significand_type<sp/>f;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>sizes<sp/>are<sp/>in<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>1<sp/>to<sp/>account<sp/>for<sp/>an<sp/>implicit<sp/>most<sp/>significant<sp/>bit<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normalized<sp/>form.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>double_significand_size<sp/>=</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::digits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>implicit_bit<sp/>=</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1ULL<sp/>&lt;&lt;<sp/>double_significand_size;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>significand_size<sp/>=</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;significand_type&gt;::value</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>()<sp/>:<sp/>f(0),<sp/>e(0)<sp/>{}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>(uint64_t<sp/>f_val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e_val)<sp/>:<sp/>f(f_val),<sp/>e(e_val)<sp/>{}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>fp<sp/>from<sp/>an<sp/>IEEE754<sp/>double.<sp/>It<sp/>is<sp/>a<sp/>template<sp/>to<sp/>prevent<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>errors<sp/>on<sp/>platforms<sp/>where<sp/>double<sp/>is<sp/>not<sp/>IEEE754.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Double&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>(Double<sp/>d)<sp/>{<sp/>assign(d);<sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>d<sp/>to<sp/>this<sp/>and<sp/>return<sp/>true<sp/>iff<sp/>predecessor<sp/>is<sp/>closer<sp/>than<sp/>successor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Double,<sp/>FMT_ENABLE_IF(sizeof(Double)<sp/>==<sp/>sizeof(u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">64_t))&gt;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assign(Double<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>double<sp/>is<sp/>in<sp/>the<sp/>format<sp/>[sign][exponent][significand].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>limits<sp/>=<sp/>std::numeric_limits&lt;Double&gt;;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent_size<sp/>=</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;Double&gt;::value</ref><sp/>-<sp/>double_significand_size<sp/>-<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>for<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>significand_mask<sp/>=<sp/>implicit_bit<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>exponent_mask<sp/>=<sp/>(~0ULL<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>~significand_mask;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent_bias<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>exponent_size)<sp/>-<sp/>limits::max_exponent<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>bit_cast&lt;uint64_t&gt;(d);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>u<sp/>&amp;<sp/>significand_mask;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>biased_e<sp/>=</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((u<sp/>&amp;<sp/>exponent_mask)<sp/>&gt;&gt;<sp/>double_significand_size);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Predecessor<sp/>is<sp/>closer<sp/>if<sp/>d<sp/>is<sp/>a<sp/>normalized<sp/>power<sp/>of<sp/>2<sp/>(f<sp/>==<sp/>0)<sp/>other<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>smallest<sp/>normalized<sp/>number<sp/>(biased_e<sp/>&gt;<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_predecessor_closer<sp/>=<sp/>f<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>biased_e<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(biased_e<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>implicit_bit;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>biased_e<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Subnormals<sp/>use<sp/>biased<sp/>exponent<sp/>1<sp/>(min<sp/>exponent).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>biased_e<sp/>-<sp/>exponent_bias<sp/>-<sp/>double_significand_size;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_predecessor_closer;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Double,<sp/>FMT_ENABLE_IF(sizeof(Double)<sp/>!=<sp/>sizeof(u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">64_t))&gt;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assign(Double)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>d<sp/>to<sp/>this<sp/>together<sp/>with<sp/>computing<sp/>lower<sp/>and<sp/>upper<sp/>boundaries,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>a<sp/>boundary<sp/>is<sp/>a<sp/>value<sp/>half<sp/>way<sp/>between<sp/>the<sp/>number<sp/>and<sp/>its<sp/>predecessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(lower)<sp/>or<sp/>successor<sp/>(upper).<sp/>The<sp/>upper<sp/>boundary<sp/>is<sp/>normalized<sp/>and<sp/>lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>the<sp/>same<sp/>exponent<sp/>but<sp/>may<sp/>be<sp/>not<sp/>normalized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Double&gt;<sp/><ref refid="structdetail_1_1boundaries" kindref="compound">boundaries</ref><sp/>assign_with_boundaries(Double<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_lower_closer<sp/>=<sp/>assign(d);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/>lower<sp/>=</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_lower_closer<sp/>?<sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>((f<sp/>&lt;&lt;<sp/>2)<sp/>-<sp/>1,<sp/>e<sp/>-<sp/>2)<sp/>:<sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>((f<sp/>&lt;&lt;<sp/>1)<sp/>-<sp/>1,<sp/>e<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>in<sp/>normalize<sp/>accounts<sp/>for<sp/>the<sp/>exponent<sp/>shift<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/>upper<sp/>=<sp/>normalize&lt;1&gt;(<ref refid="classdetail_1_1fp" kindref="compound">fp</ref>((f<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>1,<sp/>e<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.f<sp/>&lt;&lt;=<sp/>lower.e<sp/>-<sp/>upper.e;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1boundaries" kindref="compound">boundaries</ref>{lower.f,<sp/>upper.f};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Double&gt;<sp/><ref refid="structdetail_1_1boundaries" kindref="compound">boundaries</ref><sp/>assign_float_with_boundaries(Double<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>assign(d);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_normal_e<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min_exponent<sp/>-</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::digits;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>significand_type<sp/>half_ulp<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(std::numeric_limits&lt;double&gt;::digits<sp/>-</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;float&gt;::digits<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_normal_e<sp/>&gt;<sp/>e)<sp/>half_ulp<sp/>&lt;&lt;=<sp/>min_normal_e<sp/>-<sp/>e;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/>upper<sp/>=<sp/>normalize&lt;0&gt;(<ref refid="classdetail_1_1fp" kindref="compound">fp</ref>(f<sp/>+<sp/>half_ulp,<sp/>e));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/>lower<sp/>=<sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref>(</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>-<sp/>(half_ulp<sp/>&gt;&gt;<sp/>((f<sp/>==<sp/>implicit_bit<sp/>&amp;&amp;<sp/>e<sp/>&gt;<sp/>min_normal_e)<sp/>?<sp/>1<sp/>:<sp/>0)),<sp/>e);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.f<sp/>&lt;&lt;=<sp/>lower.e<sp/>-<sp/>upper.e;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1boundaries" kindref="compound">boundaries</ref>{lower.f,<sp/>upper.f};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal">};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normalizes<sp/>the<sp/>value<sp/>converted<sp/>from<sp/>double<sp/>and<sp/>multiplied<sp/>by<sp/>(1<sp/>&lt;&lt;<sp/>SHIFT).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SHIFT&gt;<sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/>normalize(<ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>subnormals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted_implicit_bit<sp/>=<sp/>fp::implicit_bit<sp/>&lt;&lt;<sp/>SHIFT;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="classdetail_1_1value" kindref="compound">value</ref>.f<sp/>&amp;<sp/>shifted_implicit_bit)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.f<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="classdetail_1_1value" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>1<sp/>to<sp/>account<sp/>for<sp/>hidden<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fp::significand_size<sp/>-<sp/>fp::double_significand_size<sp/>-<sp/>SHIFT<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>value.f<sp/>&lt;&lt;=<sp/>offset;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>value.e<sp/>-=<sp/>offset;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(fp<sp/>x,<sp/>fp<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.f<sp/>==<sp/>y.f<sp/>&amp;&amp;<sp/>x.e<sp/>==<sp/>y.e;<sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>lhs<sp/>*<sp/>rhs<sp/>/<sp/>pow(2,<sp/>64)<sp/>rounded<sp/>to<sp/>nearest<sp/>with<sp/>half-up<sp/>tie<sp/>breaking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>multiply(uint64_t<sp/>lhs,<sp/>uint64_t<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>product<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">__uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>*<sp/>rhs;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(product<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(product)<sp/>&amp;<sp/>(1ULL<sp/>&lt;&lt;<sp/>63))<sp/>!=<sp/>0<sp/>?<sp/>f<sp/>+<sp/>1<sp/>:<sp/>f;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>32-bit<sp/>parts<sp/>of<sp/>significands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mask<sp/>=<sp/>(1ULL<sp/>&lt;&lt;<sp/>32)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>uint64_t<sp/>a<sp/>=<sp/>lhs<sp/>&gt;&gt;<sp/>32,<sp/>b<sp/>=<sp/>lhs<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>uint64_t<sp/>c<sp/>=<sp/>rhs<sp/>&gt;&gt;<sp/>32,<sp/>d<sp/>=<sp/>rhs<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ac<sp/>=<sp/>a<sp/>*<sp/>c,<sp/>bc<sp/>=<sp/>b<sp/>*<sp/>c,<sp/>ad<sp/>=<sp/>a<sp/>*<sp/>d,<sp/>bd<sp/>=<sp/>b<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>mid<sp/>64-bit<sp/>of<sp/>result<sp/>and<sp/>round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mid<sp/>=<sp/>(bd<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(ad<sp/>&amp;<sp/>mask)<sp/>+<sp/>(bc<sp/>&amp;<sp/>mask)<sp/>+<sp/>(1U<sp/>&lt;&lt;<sp/>31);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ac<sp/>+<sp/>(ad<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(bc<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(mid<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fp<sp/>operator*(fp<sp/>x,<sp/>fp<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{multiply(x.f,<sp/>y.f),<sp/>x.e<sp/>+<sp/>y.e<sp/>+<sp/>64};<sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>cached<sp/>power<sp/>of<sp/>10<sp/>`c_k<sp/>=<sp/>c_k.f<sp/>*<sp/>pow(2,<sp/>c_k.e)`<sp/>such<sp/>that<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(binary)<sp/>exponent<sp/>satisfies<sp/>`min_exponent<sp/>&lt;=<sp/>c_k.e<sp/>&lt;=<sp/>min_exponent<sp/>+<sp/>28`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fp<sp/>get_cached_power(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_exponent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>pow10_exponent)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>one_over_log2_10<sp/>=<sp/>0x4d104d42;<sp/><sp/></highlight><highlight class="comment">//<sp/>round(pow(2,<sp/>32)<sp/>/<sp/>log2(10))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((min_exponent<sp/>+<sp/>fp::significand_size<sp/>-<sp/>1)<sp/>*<sp/>one_over_log2_10<sp/>+</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((int64_t(1)<sp/>&lt;&lt;<sp/>32)<sp/>-<sp/>1))<sp/><sp/></highlight><highlight class="comment">//<sp/>ceil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arithmetic<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decimal<sp/>exponent<sp/>of<sp/>the<sp/>first<sp/>(smallest)<sp/>cached<sp/>power<sp/>of<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_dec_exp<sp/>=<sp/>-348;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>between<sp/>2<sp/>consecutive<sp/>decimal<sp/>exponents<sp/>in<sp/>cached<sp/>powers<sp/>of<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dec_exp_step<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>(index<sp/>-<sp/>first_dec_exp<sp/>-<sp/>1)<sp/>/<sp/>dec_exp_step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>pow10_exponent<sp/>=<sp/>first_dec_exp<sp/>+<sp/>index<sp/>*<sp/>dec_exp_step;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{data::pow10_significands[index],<sp/>data::pow10_exponents[index]};</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>simple<sp/>accumulator<sp/>to<sp/>hold<sp/>the<sp/>sums<sp/>of<sp/>terms<sp/>in<sp/>bigint::square<sp/>if<sp/>uint128_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="structdetail_1_1accumulator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1accumulator" kindref="compound">accumulator</ref><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>uint64_t<sp/>lower;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>uint64_t<sp/>upper;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1accumulator" kindref="compound">accumulator</ref>()<sp/>:<sp/>lower(0),<sp/>upper(0)<sp/>{}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>uint32_t()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lower);<sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator+=(uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lower<sp/>&lt;<sp/>n)<sp/>++upper;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&gt;&gt;=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(shift<sp/>==<sp/>32);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)shift;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>=<sp/>(upper<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>(lower<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>upper<sp/>&gt;&gt;=<sp/>32;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal">};</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classdetail_1_1bigint" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>bigint<sp/>is<sp/>stored<sp/>as<sp/>an<sp/>array<sp/>of<sp/>bigits<sp/>(big<sp/>digits),<sp/>with<sp/>bigit<sp/>at<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>being<sp/>the<sp/>least<sp/>significant<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>bigit<sp/>=<sp/>uint32_t;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>double_bigit<sp/>=<sp/>uint64_t;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>bigits_capacity<sp/>=<sp/>32<sp/>};</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;bigit, bigits_capacity&gt;</ref><sp/>bigits_;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp_;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>bigit<sp/>operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bigits_[to_unsigned(index)];<sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>bigit&amp;<sp/>operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bigits_[to_unsigned(index)];<sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bigit_bits<sp/>=<sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;bigit&gt;::value</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;<ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&gt;;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract_bigits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>bigit<sp/>other,<sp/>bigit&amp;<sp/>borrow)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((*this)[index])<sp/>-<sp/>other<sp/>-<sp/>borrow;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>borrow<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result<sp/>&gt;&gt;<sp/>(bigit_bits<sp/>*<sp/>2<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_leading_zeros()<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bigits<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[num_bigits]<sp/>==<sp/>0)<sp/>--num_bigits;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(to_unsigned(num_bigits<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>*this<sp/>-=<sp/>other<sp/>assuming<sp/>aligned<sp/>bigints<sp/>and<sp/>*this<sp/>&gt;=<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract_aligned(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(other.exp_<sp/>&gt;=<sp/>exp_,<sp/></highlight><highlight class="stringliteral">&quot;unaligned<sp/>bigints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(compare(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>other)<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>bigit<sp/>borrow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>other.exp_<sp/>-<sp/>exp_;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>other.bigits_.size();<sp/>j<sp/>!=<sp/>n;<sp/>++i,<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subtract_bigits(i,<sp/>other.bigits_[j],<sp/>borrow);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(borrow<sp/>&gt;<sp/>0)<sp/>subtract_bigits(i,<sp/>0,<sp/>borrow);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_leading_zeros();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multiply(uint32_t<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double_bigit<sp/>wide_value<sp/>=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>bigit<sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_bigit<sp/>result<sp/>=<sp/>bigits_[i]<sp/>*<sp/>wide_value<sp/>+<sp/>carry;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result<sp/>&gt;&gt;<sp/>bigit_bits);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(carry<sp/>!=<sp/>0)<sp/>bigits_.push_back(carry);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multiply(uint64_t<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bigit<sp/>mask<sp/>=<sp/>~bigit(0);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double_bigit<sp/>lower<sp/>=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double_bigit<sp/>upper<sp/>=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>&gt;&gt;<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>double_bigit<sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_bigit<sp/>result<sp/>=<sp/>bigits_[i]<sp/>*<sp/>lower<sp/>+<sp/>(carry<sp/>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>*<sp/>upper<sp/>+<sp/>(result<sp/>&gt;&gt;<sp/>bigit_bits)<sp/>+<sp/>(carry<sp/>&gt;&gt;<sp/>bigit_bits);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(carry<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_.push_back(carry<sp/>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>&gt;&gt;=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>()<sp/>:<sp/>exp_(0)<sp/>{}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>(uint64_t<sp/>n)<sp/>{<sp/>assign(n);<sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>~<ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>()<sp/>{<sp/>assert(bigits_.<ref refid="classdetail_1_1buffer_1a052710e423be8292ca133c6fc1acce94" kindref="member">capacity</ref>()<sp/>&lt;=<sp/>bigits_capacity);<sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>other.bigits_.size();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(size);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1data" kindref="compound">data</ref><sp/>=<sp/>other.bigits_.data();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(<ref refid="structdetail_1_1data" kindref="compound">data</ref>,<sp/><ref refid="structdetail_1_1data" kindref="compound">data</ref><sp/>+<sp/>size,<sp/>make_checked(bigits_.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>size));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>=<sp/>other.exp_;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[num_bigits++]<sp/>=<sp/>n<sp/>&amp;<sp/>~bigit(0);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&gt;&gt;=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(num_bigits);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>())<sp/>+<sp/>exp_;<sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>FMT_NOINLINE<sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>operator&lt;&lt;=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(shift<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>+=<sp/>shift<sp/>/<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>%=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>bigit<sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigit<sp/>c<sp/>=<sp/>bigits_[i]<sp/>&gt;&gt;<sp/>(bigit_bits<sp/>-<sp/>shift);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>=<sp/>(bigits_[i]<sp/>&lt;&lt;<sp/>shift)<sp/>+<sp/>carry;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(carry<sp/>!=<sp/>0)<sp/>bigits_.push_back(carry);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;<sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>operator*=(Int<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(<ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>multiply(uint32_or_64_or_128_t&lt;Int&gt;(<ref refid="classdetail_1_1value" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_lhs_bigits<sp/>=<sp/>lhs.num_bigits(),<sp/>num_rhs_bigits<sp/>=<sp/>rhs.num_bigits();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_lhs_bigits<sp/>!=<sp/>num_rhs_bigits)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_lhs_bigits<sp/>&gt;<sp/>num_rhs_bigits<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs.bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs.bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>i<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>0)<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&gt;=<sp/>end;<sp/>--i,<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigit<sp/>lhs_bigit<sp/>=<sp/>lhs[i],<sp/>rhs_bigit<sp/>=<sp/>rhs[j];</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_bigit<sp/>!=<sp/>rhs_bigit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs_bigit<sp/>&gt;<sp/>rhs_bigit<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>j)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;<sp/>j<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>compare(lhs1<sp/>+<sp/>lhs2,<sp/>rhs).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>add_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>lhs1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>lhs2,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_lhs_bigits<sp/>=<sp/>(std::max)(lhs1.num_bigits(),<sp/>lhs2.num_bigits());</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rhs_bigits<sp/>=<sp/>rhs.num_bigits();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_lhs_bigits<sp/>+<sp/>1<sp/>&lt;<sp/>num_rhs_bigits)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_lhs_bigits<sp/>&gt;<sp/>num_rhs_bigits)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_bigit<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>-&gt;<sp/>bigit<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;=<sp/>n.exp_<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>n.num_bigits()<sp/>?<sp/>n[i<sp/>-<sp/>n.exp_]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>double_bigit<sp/>borrow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_exp<sp/>=<sp/>(std::min)((std::min)(lhs1.exp_,<sp/>lhs2.exp_),<sp/>rhs.exp_);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_rhs_bigits<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>min_exp;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_bigit<sp/>sum<sp/>=</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(get_bigit(lhs1,<sp/>i))<sp/>+<sp/>get_bigit(lhs2,<sp/>i);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigit<sp/>rhs_bigit<sp/>=<sp/>get_bigit(rhs,<sp/>i);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum<sp/>&gt;<sp/>rhs_bigit<sp/>+<sp/>borrow)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>borrow<sp/>=<sp/>rhs_bigit<sp/>+<sp/>borrow<sp/>-<sp/>sum;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(borrow<sp/>&gt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>borrow<sp/>&lt;&lt;=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>borrow<sp/>!=<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>pow(10,<sp/>exp)<sp/>to<sp/>this<sp/>bigint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_pow10(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(exp<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign(1);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>top<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitmask<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;=<sp/>bitmask)<sp/>bitmask<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pow(10,<sp/>exp)<sp/>=<sp/>pow(5,<sp/>exp)<sp/>*<sp/>pow(2,<sp/>exp).<sp/>First<sp/>compute<sp/>pow(5,<sp/>exp)<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>repeated<sp/>squaring<sp/>and<sp/>multiplication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>assign(5);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bitmask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>square();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((exp<sp/>&amp;<sp/>bitmask)<sp/>!=<sp/>0)<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>*=<sp/>5;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;=<sp/>exp;<sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>pow(2,<sp/>exp)<sp/>by<sp/>shifting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>square()<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;bigit, bigits_capacity&gt;</ref><sp/>n(std::move(bigits_));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_result_bigits<sp/>=<sp/>2<sp/>*<sp/>num_bigits;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(to_unsigned(num_result_bigits));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>accumulator_t<sp/>=<sp/>conditional_t&lt;FMT_USE_INT128,<sp/>uint128_t,<sp/>accumulator&gt;;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>accumulator_t();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bigit_index<sp/>=<sp/>0;<sp/>bigit_index<sp/>&lt;<sp/>num_bigits;<sp/>++bigit_index)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>bigit<sp/>at<sp/>position<sp/>bigit_index<sp/>of<sp/>the<sp/>result<sp/>by<sp/>adding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cross-product<sp/>terms<sp/>n[i]<sp/>*<sp/>n[j]<sp/>such<sp/>that<sp/>i<sp/>+<sp/>j<sp/>==<sp/>bigit_index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>bigit_index;<sp/>j<sp/>&gt;=<sp/>0;<sp/>++i,<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Most<sp/>terms<sp/>are<sp/>multiplied<sp/>twice<sp/>which<sp/>can<sp/>be<sp/>optimized<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n[i])<sp/>*<sp/>n[j];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[bigit_index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sum);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>&gt;&gt;=<sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;bigit&gt;::value</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>carry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>same<sp/>for<sp/>the<sp/>top<sp/>half.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bigit_index<sp/>=<sp/>num_bigits;<sp/>bigit_index<sp/>&lt;<sp/>num_result_bigits;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++bigit_index)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>num_bigits<sp/>-<sp/>1,<sp/>i<sp/>=<sp/>bigit_index<sp/>-<sp/>j;<sp/>i<sp/>&lt;<sp/>num_bigits;)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n[i++])<sp/>*<sp/>n[j--];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[bigit_index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sum);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>&gt;&gt;=<sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;bigit&gt;::value</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>--num_result_bigits;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_leading_zeros();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divides<sp/>this<sp/>bignum<sp/>by<sp/>divisor,<sp/>assigning<sp/>the<sp/>remainder<sp/>to<sp/>this<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returning<sp/>the<sp/>quotient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divmod_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>divisor)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>divisor)<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(divisor.bigits_[divisor.bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>()<sp/>-<sp/>1u]<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp_difference<sp/>=<sp/>exp_<sp/>-<sp/>divisor.exp_;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp_difference<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Align<sp/>bigints<sp/>by<sp/>adding<sp/>trailing<sp/>zeros<sp/>to<sp/>simplify<sp/>subtraction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(to_unsigned(num_bigits<sp/>+<sp/>exp_difference));</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_bigits<sp/>-<sp/>1,<sp/>j<sp/>=<sp/>i<sp/>+<sp/>exp_difference;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i,<sp/>--j)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[j]<sp/>=<sp/>bigits_[i];</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(bigits_.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>exp_difference,<sp/>0);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exp_<sp/>-=<sp/>exp_difference;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subtract_aligned(divisor);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++quotient;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(compare(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>divisor)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quotient;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal">};</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>round_direction<sp/>{<sp/>unknown,<sp/>up,<sp/>down<sp/>};</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>divisor<sp/>(normally<sp/>a<sp/>power<sp/>of<sp/>10),<sp/>the<sp/>remainder<sp/>=<sp/>v<sp/>%<sp/>divisor<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>number<sp/>v<sp/>and<sp/>the<sp/>error,<sp/>returns<sp/>whether<sp/>v<sp/>should<sp/>be<sp/>rounded<sp/>up,<sp/>down,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whether<sp/>the<sp/>rounding<sp/>direction<sp/>can&apos;t<sp/>be<sp/>determined<sp/>due<sp/>to<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>should<sp/>be<sp/>less<sp/>than<sp/>divisor<sp/>/<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>round_direction<sp/>get_round_direction(uint64_t<sp/>divisor,<sp/>uint64_t<sp/>remainder,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>FMT_ASSERT(remainder<sp/>&lt;<sp/>divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>divisor<sp/>-<sp/>remainder<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>FMT_ASSERT(error<sp/>&lt;<sp/>divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>divisor<sp/>-<sp/>error<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>FMT_ASSERT(error<sp/>&lt;<sp/>divisor<sp/>-<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>*<sp/>2<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>down<sp/>if<sp/>(remainder<sp/>+<sp/>error)<sp/>*<sp/>2<sp/>&lt;=<sp/>divisor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&lt;=<sp/>divisor<sp/>-<sp/>remainder<sp/>&amp;&amp;<sp/>error<sp/>*<sp/>2<sp/>&lt;=<sp/>divisor<sp/>-<sp/>remainder<sp/>*<sp/>2)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round_direction::down;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>up<sp/>if<sp/>(remainder<sp/>-<sp/>error)<sp/>*<sp/>2<sp/>&gt;=<sp/>divisor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&gt;=<sp/>error<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remainder<sp/>-<sp/>error<sp/>&gt;=<sp/>divisor<sp/>-<sp/>(remainder<sp/>-<sp/>error))<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round_direction::up;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round_direction::unknown;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">digits<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>result<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>more,<sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>more<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>done,<sp/><sp/></highlight><highlight class="comment">//<sp/>Done<sp/>generating<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>error<sp/><sp/></highlight><highlight class="comment">//<sp/>Digit<sp/>generation<sp/>cancelled<sp/>due<sp/>to<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal">};</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>version<sp/>of<sp/>count_digits<sp/>optimized<sp/>for<sp/>grisu_gen_digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grisu_count_digits(uint32_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>100)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>100000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1000000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10000000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>7;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>100000000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1000000000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>output<sp/>using<sp/>the<sp/>Grisu<sp/>digit-gen<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error:<sp/>the<sp/>size<sp/>of<sp/>the<sp/>region<sp/>(lower,<sp/>upper)<sp/>outside<sp/>of<sp/>which<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definitely<sp/>do<sp/>not<sp/>round<sp/>to<sp/>value<sp/>(Delta<sp/>in<sp/>Grisu3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="809"><highlight class="normal">FMT_ALWAYS_INLINE<sp/>digits::result<sp/>grisu_gen_digits(fp<sp/>value,<sp/>uint64_t<sp/>error,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>exp,<sp/>Handler&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fp<sp/>one(1ULL<sp/>&lt;&lt;<sp/>-value.e,<sp/>value.e);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>integral<sp/>part<sp/>of<sp/>scaled<sp/>value<sp/>(p1<sp/>in<sp/>Grisu)<sp/>=<sp/>value<sp/>/<sp/>one.<sp/>It<sp/>cannot<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>because<sp/>it<sp/>contains<sp/>a<sp/>product<sp/>of<sp/>two<sp/>64-bit<sp/>numbers<sp/>with<sp/>MSB<sp/>set<sp/>(due</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>normalization)<sp/>-<sp/>1,<sp/>shifted<sp/>right<sp/>by<sp/>at<sp/>most<sp/>60<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value.f<sp/>&gt;&gt;<sp/>-one.e);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>FMT_ASSERT(integral<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>FMT_ASSERT(integral<sp/>==<sp/>value.f<sp/>&gt;&gt;<sp/>-one.e,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>fractional<sp/>part<sp/>of<sp/>scaled<sp/>value<sp/>(p2<sp/>in<sp/>Grisu)<sp/>c<sp/>=<sp/>value<sp/>%<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>uint64_t<sp/>fractional<sp/>=<sp/>value.f<sp/>&amp;<sp/>(one.f<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>exp<sp/>=<sp/>grisu_count_digits(integral);<sp/><sp/></highlight><highlight class="comment">//<sp/>kappa<sp/>in<sp/>Grisu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>10<sp/>to<sp/>prevent<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>handler.on_start(data::powers_of_10_64[exp<sp/>-<sp/>1]<sp/>&lt;&lt;<sp/>-one.e,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.f<sp/>/<sp/>10,<sp/>error<sp/>*<sp/>10,<sp/>exp);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>digits::more)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>digits<sp/>for<sp/>the<sp/>integral<sp/>part.<sp/>This<sp/>can<sp/>produce<sp/>up<sp/>to<sp/>10<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>digit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>divmod_integral<sp/>=<sp/>[&amp;](uint32_t<sp/>divisor)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>integral<sp/>/<sp/>divisor;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>integral<sp/>%=<sp/>divisor;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>optimization<sp/>by<sp/>Milo<sp/>Yip<sp/>reduces<sp/>the<sp/>number<sp/>of<sp/>integer<sp/>divisions<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>per<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(exp)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(1000000000);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(100000000);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(10000000);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(1000000);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(100000);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(10000);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(1000);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(100);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(10);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>integral;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>integral<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>number<sp/>of<sp/>digits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>--exp;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>remainder<sp/>=</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(integral)<sp/>&lt;&lt;<sp/>-one.e)<sp/>+<sp/>fractional;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>handler.on_digit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit),</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data::powers_of_10_64[exp]<sp/>&lt;&lt;<sp/>-one.e,<sp/>remainder,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error,<sp/>exp,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>digits::more)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>digits<sp/>for<sp/>the<sp/>fractional<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>fractional<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>digit<sp/>=</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fractional<sp/>&gt;&gt;<sp/>-one.e));</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>fractional<sp/>&amp;=<sp/>one.f<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>--exp;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>handler.on_digit(digit,<sp/>one.f,<sp/>fractional,<sp/>error,<sp/>exp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>digits::more)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>fixed<sp/>precision<sp/>digit<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="structdetail_1_1fixed__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1fixed__handler" kindref="compound">fixed_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp10;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>digits::result<sp/>on_start(uint64_t<sp/>divisor,<sp/>uint64_t<sp/>remainder,<sp/>uint64_t<sp/>error,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>exp)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-fixed<sp/>formats<sp/>require<sp/>at<sp/>least<sp/>one<sp/>digit<sp/>and<sp/>no<sp/>precision<sp/>adjustment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fixed)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::more;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>fixed<sp/>precision<sp/>by<sp/>exponent<sp/>because<sp/>it<sp/>is<sp/>relative<sp/>to<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>precision<sp/>+=<sp/>exp<sp/>+<sp/>exp10;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>precision<sp/>is<sp/>satisfied<sp/>just<sp/>by<sp/>leading<sp/>zeros,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>format(&quot;{:.2f}&quot;,<sp/>0.001)<sp/>gives<sp/>&quot;0.00&quot;<sp/>without<sp/>generating<sp/>any<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::more;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::done;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>get_round_direction(divisor,<sp/>remainder,<sp/>error);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>==<sp/>round_direction::unknown)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::error;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[size++]<sp/>=<sp/>dir<sp/>==<sp/>round_direction::up<sp/>?<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::done;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>digits::result<sp/>on_digit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>digit,<sp/>uint64_t<sp/>divisor,<sp/>uint64_t<sp/>remainder,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>integral)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(remainder<sp/>&lt;<sp/>divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[size++]<sp/>=<sp/>digit;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>precision)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::more;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!integral)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>error<sp/>*<sp/>2<sp/>&lt;<sp/>divisor<sp/>with<sp/>overflow<sp/>prevention.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>check<sp/>is<sp/>not<sp/>needed<sp/>for<sp/>the<sp/>integral<sp/>part<sp/>because<sp/>error<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>divisor<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>32)<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>&gt;=<sp/>divisor<sp/>||<sp/>error<sp/>&gt;=<sp/>divisor<sp/>-<sp/>error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::error;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(error<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>divisor<sp/>&gt;<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>get_round_direction(divisor,<sp/>remainder,<sp/>error);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>!=<sp/>round_direction::up)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dir<sp/>==<sp/>round_direction::down<sp/>?<sp/>digits::done<sp/>:<sp/>digits::error;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>++buf[size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>size<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>buf[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++buf[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[0]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::done;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal">};</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>shortest<sp/>representation<sp/>digit<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="structdetail_1_1grisu__shortest__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1grisu__shortest__handler" kindref="compound">grisu_shortest_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Distance<sp/>between<sp/>scaled<sp/>value<sp/>and<sp/>upper<sp/>bound<sp/>(wp_W<sp/>in<sp/>Grisu3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>uint64_t<sp/>diff;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>digits::result<sp/>on_start(uint64_t,<sp/>uint64_t,<sp/>uint64_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::more;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>the<sp/>generated<sp/>number<sp/>approaching<sp/>value<sp/>from<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>round(uint64_t<sp/>d,<sp/>uint64_t<sp/>divisor,<sp/>uint64_t&amp;<sp/>remainder,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainder<sp/>&lt;<sp/>d<sp/>&amp;&amp;<sp/>error<sp/>-<sp/>remainder<sp/>&gt;=<sp/>divisor<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(remainder<sp/>+<sp/>divisor<sp/>&lt;<sp/>d<sp/>||<sp/>d<sp/>-<sp/>remainder<sp/>&gt;=<sp/>remainder<sp/>+<sp/>divisor<sp/>-<sp/>d))<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--buf[size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remainder<sp/>+=<sp/>divisor;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>Grisu&apos;s<sp/>round_weed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>digits::result<sp/>on_digit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>digit,<sp/>uint64_t<sp/>divisor,<sp/>uint64_t<sp/>remainder,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>integral)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[size++]<sp/>=<sp/>digit;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&gt;=<sp/>error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::more;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>unit<sp/>=<sp/>integral<sp/>?<sp/>1<sp/>:<sp/>data::powers_of_10_64[-exp];</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>up<sp/>=<sp/>(diff<sp/>-<sp/>1)<sp/>*<sp/>unit;<sp/><sp/></highlight><highlight class="comment">//<sp/>wp_Wup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>round(up,<sp/>divisor,<sp/>remainder,<sp/>error);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>down<sp/>=<sp/>(diff<sp/>+<sp/>1)<sp/>*<sp/>unit;<sp/><sp/></highlight><highlight class="comment">//<sp/>wp_Wdown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&lt;<sp/>down<sp/>&amp;&amp;<sp/>error<sp/>-<sp/>remainder<sp/>&gt;=<sp/>divisor<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(remainder<sp/>+<sp/>divisor<sp/>&lt;<sp/>down<sp/>||</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down<sp/>-<sp/>remainder<sp/>&gt;<sp/>remainder<sp/>+<sp/>divisor<sp/>-<sp/>down))<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::error;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>unit<sp/>&lt;=<sp/>remainder<sp/>&amp;&amp;<sp/>remainder<sp/>&lt;=<sp/>error<sp/>-<sp/>4<sp/>*<sp/>unit</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>digits::done</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>digits::error;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal">};</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>value<sp/>using<sp/>a<sp/>variation<sp/>of<sp/>the<sp/>Fixed-Precision<sp/>Positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Floating-Point<sp/>Printout<sp/>((FPP)^2)<sp/>algorithm<sp/>by<sp/>Steele<sp/>&amp;<sp/>White:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://fmt.dev/p372-steele.pdf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Double&gt;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fallback_format(Double<sp/>d,<sp/><ref refid="classdetail_1_1buffer" kindref="compound">buffer&lt;char&gt;</ref>&amp;<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>exp10)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref><sp/>numerator;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>*<sp/>R<sp/>in<sp/>(FPP)^2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref><sp/>denominator;<sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>*<sp/>S<sp/>in<sp/>(FPP)^2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lower<sp/>and<sp/>upper<sp/>are<sp/>differences<sp/>between<sp/>value<sp/>and<sp/>corresponding<sp/>boundaries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref><sp/>lower;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(M^-<sp/>in<sp/>(FPP)^2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref><sp/>upper_store;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upper&apos;s<sp/>value<sp/>if<sp/>different<sp/>from<sp/>lower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>*<sp/>upper<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>(M^+<sp/>in<sp/>(FPP)^2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1fp" kindref="compound">fp</ref><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>numerator<sp/>and<sp/>denominator<sp/>by<sp/>an<sp/>extra<sp/>bit<sp/>or<sp/>two<sp/>(if<sp/>lower<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>closer)<sp/>to<sp/>make<sp/>lower<sp/>and<sp/>upper<sp/>integers.<sp/>This<sp/>eliminates<sp/>multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>2<sp/>during<sp/>later<sp/>computations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.assign(d)<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>uint64_t<sp/>significand<sp/>=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.f<sp/>&lt;&lt;<sp/>shift;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdetail_1_1value" kindref="compound">value</ref>.e<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator.assign(significand);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator<sp/>&lt;&lt;=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.assign(1);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>&lt;&lt;=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store.assign(1);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store<sp/>&lt;&lt;=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.e<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>&amp;upper_store;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator.assign_pow10(exp10);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp10<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator.assign_pow10(-exp10);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.assign(numerator);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store.assign(numerator);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>&amp;upper_store;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator<sp/>*=<sp/>significand;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator.assign(1);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>&lt;&lt;=<sp/>shift<sp/>-<sp/>value.e;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator.assign(significand);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator.assign_pow10(exp10);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>&lt;&lt;=<sp/>shift<sp/>-<sp/>value.e;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.assign(1);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store.assign(1ULL<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>&amp;upper_store;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!upper)<sp/>upper<sp/>=<sp/>&amp;lower;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invariant:<sp/>value<sp/>==<sp/>(numerator<sp/>/<sp/>denominator)<sp/>*<sp/>pow(10,<sp/>exp10).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>even<sp/>=<sp/>(value.f<sp/>&amp;<sp/>1)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>buf.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>numerator.divmod_assign(denominator);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>compare(numerator,<sp/>lower)<sp/>-<sp/>even<sp/>&lt;<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>numerator<sp/>&lt;[=]<sp/>lower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numerator<sp/>+<sp/>upper<sp/>&gt;[=]<sp/>pow10:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>add_compare(numerator,<sp/>*upper,<sp/>denominator)<sp/>+<sp/>even<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>data[num_digits++]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>||<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!low)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++data[num_digits<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>add_compare(numerator,<sp/>numerator,<sp/>denominator);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>half<sp/>to<sp/>even.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>0<sp/>||<sp/>(result<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(digit<sp/>%<sp/>2)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++data[num_digits<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(to_unsigned(num_digits));</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exp10<sp/>-=<sp/>num_digits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upper<sp/>!=<sp/>&amp;lower)<sp/>*upper<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>value<sp/>using<sp/>the<sp/>Grisu<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(https://www.cs.tufts.edu/~nr/cs257/archive/florian-loitsch/printf.pdf)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>T<sp/>is<sp/>a<sp/>IEEE754<sp/>binary32<sp/>or<sp/>binary64<sp/>and<sp/>snprintf<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format_float(T<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/>float_specs<sp/>specs,<sp/>buffer&lt;char&gt;&amp;<sp/>buf)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>static_assert(!std::is_same&lt;T,<sp/>float&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>FMT_ASSERT(value<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>is<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed<sp/>=<sp/>specs.format<sp/>==<sp/>float_format::fixed;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;=<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;=<sp/>instead<sp/>of<sp/>==<sp/>to<sp/>silence<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&lt;=<sp/>0<sp/>||<sp/>!fixed)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.push_back(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.resize(to_unsigned(precision));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(buf.data(),<sp/>precision,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-precision;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!specs.use_grisu)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>snprintf_float(value,<sp/>precision,<sp/>specs,<sp/>buf);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_exp<sp/>=<sp/>-60;<sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>in<sp/>Grisu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cached_exp10<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>K<sp/>in<sp/>Grisu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>fp_value;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>boundaries<sp/>=<sp/>specs.binary32</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>fp_value.assign_float_with_boundaries(value)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>fp_value.assign_with_boundaries(value);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>fp_value<sp/>=<sp/>normalize(fp_value);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>cached<sp/>power<sp/>of<sp/>10<sp/>such<sp/>that<sp/>multiplying<sp/>value<sp/>by<sp/>it<sp/>will<sp/>bring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>exponent<sp/>in<sp/>the<sp/>range<sp/>[min_exp,<sp/>-32].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fp<sp/>cached_pow<sp/>=<sp/>get_cached_power(</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_exp<sp/>-<sp/>(fp_value.e<sp/>+<sp/>fp::significand_size),<sp/>cached_exp10);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>value<sp/>and<sp/>boundaries<sp/>by<sp/>the<sp/>cached<sp/>power<sp/>of<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>fp_value<sp/>=<sp/>fp_value<sp/>*<sp/>cached_pow;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaries.lower<sp/>=<sp/>multiply(boundaries.lower,<sp/>cached_pow.f);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaries.upper<sp/>=<sp/>multiply(boundaries.upper,<sp/>cached_pow.f);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(min_exp<sp/>&lt;=<sp/>fp_value.e<sp/>&amp;&amp;<sp/>fp_value.e<sp/>&lt;=<sp/>-32);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>--boundaries.lower;<sp/><sp/></highlight><highlight class="comment">//<sp/>\tilde{M}^-<sp/>-<sp/>1<sp/>ulp<sp/>-&gt;<sp/>M^-_{\downarrow}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>++boundaries.upper;<sp/><sp/></highlight><highlight class="comment">//<sp/>\tilde{M}^+<sp/>+<sp/>1<sp/>ulp<sp/>-&gt;<sp/>M^+_{\uparrow}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Numbers<sp/>outside<sp/>of<sp/>(lower,<sp/>upper)<sp/>definitely<sp/>do<sp/>not<sp/>round<sp/>to<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>grisu_shortest_handler<sp/>handler{buf.data(),<sp/>0,</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaries.upper<sp/>-<sp/>fp_value.f};</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grisu_gen_digits(fp(boundaries.upper,<sp/>fp_value.e),</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaries.upper<sp/>-<sp/>boundaries.lower,<sp/>exp,<sp/>handler);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>digits::error)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exp<sp/>+=<sp/>handler.size<sp/>-<sp/>cached_exp10<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fallback_format(value,<sp/>buf,<sp/>exp);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.resize(to_unsigned(handler.size));</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&gt;<sp/>17)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>snprintf_float(value,<sp/>precision,<sp/>specs,<sp/>buf);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>normalized<sp/>=<sp/>normalize(fp(value));</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cached_pow<sp/>=<sp/>get_cached_power(</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_exp<sp/>-<sp/>(normalized.e<sp/>+<sp/>fp::significand_size),<sp/>cached_exp10);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>normalized<sp/>=<sp/>normalized<sp/>*<sp/>cached_pow;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>fixed_handler<sp/>handler{buf.data(),<sp/>0,<sp/>precision,<sp/>-cached_exp10,<sp/>fixed};</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grisu_gen_digits(normalized,<sp/>1,<sp/>exp,<sp/>handler)<sp/>==<sp/>digits::error)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>snprintf_float(value,<sp/>precision,<sp/>specs,<sp/>buf);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>handler.size;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fixed)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_digits<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>buf[num_digits<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--num_digits;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++exp;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.resize(to_unsigned(num_digits));</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp<sp/>-<sp/>cached_exp10;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snprintf_float(T<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/>float_specs<sp/>specs,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer&lt;char&gt;&amp;<sp/>buf)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>capacity<sp/>must<sp/>be<sp/>non-zero,<sp/>otherwise<sp/>MSVC&apos;s<sp/>vsnprintf_s<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>FMT_ASSERT(buf.capacity()<sp/>&gt;<sp/>buf.size(),<sp/></highlight><highlight class="stringliteral">&quot;empty<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>static_assert(!std::is_same&lt;T,<sp/>float&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>1<sp/>to<sp/>account<sp/>for<sp/>the<sp/>difference<sp/>in<sp/>precision<sp/>since<sp/>we<sp/>use<sp/>%e<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>general<sp/>and<sp/>exponent<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.format<sp/>==<sp/>float_format::general<sp/>||</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.format<sp/>==<sp/>float_format::exp)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>(precision<sp/>&gt;=<sp/>0<sp/>?<sp/>precision<sp/>:<sp/>6)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>the<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>max_format_size<sp/>=<sp/>7<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>longest<sp/>format<sp/>is<sp/>&quot;%#.*Le&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>format[max_format_size];</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format_ptr<sp/>=<sp/>format;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.showpoint<sp/>&amp;&amp;<sp/>specs.format<sp/>==<sp/>float_format::hex)<sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>long<sp/>double&gt;())<sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>*format_ptr++<sp/>=<sp/>specs.format<sp/>!=<sp/>float_format::hex</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(specs.format<sp/>==<sp/>float_format::fixed<sp/>?<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(specs.upper<sp/>?<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>*format_ptr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>using<sp/>snprintf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>buf.size();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>buf.data()<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>capacity<sp/>=<sp/>buf.capacity()<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_FUZZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&gt;<sp/>100000)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fuzz<sp/>mode<sp/>-<sp/>avoid<sp/>large<sp/>allocation<sp/>inside<sp/>snprintf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Suppress<sp/>the<sp/>warning<sp/>about<sp/>a<sp/>nonliteral<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>use<sp/>auto<sp/>because<sp/>of<sp/>a<sp/>bug<sp/>in<sp/>MinGW<sp/>(#1532).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*snprintf_ptr)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>...)<sp/>=<sp/>FMT_SNPRINTF;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>precision<sp/>&gt;=<sp/>0</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>snprintf_ptr(begin,<sp/>capacity,<sp/>format,<sp/>precision,<sp/>value)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>snprintf_ptr(begin,<sp/>capacity,<sp/>format,<sp/>value);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.reserve(buf.capacity()<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>will<sp/>grow<sp/>exponentially.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>to_unsigned(result);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>equal<sp/>to<sp/>capacity<sp/>means<sp/>that<sp/>the<sp/>last<sp/>character<sp/>was<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;=<sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.reserve(size<sp/>+<sp/>offset<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>1<sp/>for<sp/>the<sp/>terminating<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_digit<sp/>=<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.format<sp/>==<sp/>float_format::fixed)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.resize(size);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>and<sp/>remove<sp/>the<sp/>decimal<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>begin<sp/>+<sp/>size,<sp/>p<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--p;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(is_digit(*p));</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fraction_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(end<sp/>-<sp/>p<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memmove(p,<sp/>p<sp/>+<sp/>1,<sp/>to_unsigned(fraction_size));</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.resize(size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-fraction_size;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.format<sp/>==<sp/>float_format::hex)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.resize(size<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>and<sp/>parse<sp/>the<sp/>exponent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>begin<sp/>+<sp/>size,<sp/>exp_pos<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--exp_pos;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*exp_pos<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>exp_pos[1];</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sign<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||<sp/>sign<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>exp_pos<sp/>+<sp/>2;<sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>&apos;e&apos;<sp/>and<sp/>sign.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(is_digit(*p));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exp<sp/>=<sp/>exp<sp/>*<sp/>10<sp/>+<sp/>(*p++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>end);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>exp<sp/>=<sp/>-exp;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fraction_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp_pos<sp/>!=<sp/>begin<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fraction_end<sp/>=<sp/>exp_pos<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fraction_end<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>--fraction_end;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>fractional<sp/>part<sp/>left<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>decimal<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fraction_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fraction_end<sp/>-<sp/>begin<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memmove(begin<sp/>+<sp/>1,<sp/>begin<sp/>+<sp/>2,<sp/>to_unsigned(fraction_size));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.resize(to_unsigned(fraction_size)<sp/>+<sp/>offset<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp<sp/>-<sp/>fraction_size;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>public<sp/>domain<sp/>branchless<sp/>UTF-8<sp/>decoder<sp/>by<sp/>Christopher<sp/>Wellons:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/skeeto/branchless-utf8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>the<sp/>next<sp/>character,<sp/>c,<sp/>from<sp/>buf,<sp/>reporting<sp/>errors<sp/>in<sp/>e.</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/>*<sp/>Since<sp/>this<sp/>is<sp/>a<sp/>branchless<sp/>decoder,<sp/>four<sp/>bytes<sp/>will<sp/>be<sp/>read<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/>*<sp/>buffer<sp/>regardless<sp/>of<sp/>the<sp/>actual<sp/>length<sp/>of<sp/>the<sp/>next<sp/>character.<sp/>This</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/>*<sp/>means<sp/>the<sp/>buffer<sp/>_must_<sp/>have<sp/>at<sp/>least<sp/>three<sp/>bytes<sp/>of<sp/>zero<sp/>padding</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/>*<sp/>following<sp/>the<sp/>end<sp/>of<sp/>the<sp/>data<sp/>stream.</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/>*<sp/>Errors<sp/>are<sp/>reported<sp/>in<sp/>e,<sp/>which<sp/>will<sp/>be<sp/>non-zero<sp/>if<sp/>the<sp/>parsed</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/>*<sp/>character<sp/>was<sp/>somehow<sp/>invalid:<sp/>invalid<sp/>byte<sp/>sequence,<sp/>non-canonical</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/>*<sp/>encoding,<sp/>or<sp/>a<sp/>surrogate<sp/>half.</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>character.<sp/>When<sp/>an<sp/>error</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/>*<sp/>occurs,<sp/>this<sp/>pointer<sp/>will<sp/>be<sp/>a<sp/>guess<sp/>that<sp/>depends<sp/>on<sp/>the<sp/>particular</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/>*<sp/>error,<sp/>but<sp/>it<sp/>will<sp/>always<sp/>advance<sp/>at<sp/>least<sp/>one<sp/>byte.</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>utf8_decode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf,<sp/>uint32_t*<sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lengths[]<sp/>=<sp/>{1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>0};</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>masks[]<sp/>=<sp/>{0x00,<sp/>0x7f,<sp/>0x1f,<sp/>0x0f,<sp/>0x07};</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mins[]<sp/>=<sp/>{4194304,<sp/>0,<sp/>128,<sp/>2048,<sp/>65536};</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shiftc[]<sp/>=<sp/>{0,<sp/>18,<sp/>12,<sp/>6,<sp/>0};</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shifte[]<sp/>=<sp/>{0,<sp/>6,<sp/>4,<sp/>2,<sp/>0};</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buf);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>lengths[s[0]<sp/>&gt;&gt;<sp/>3];</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>character<sp/>early<sp/>so<sp/>that<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iteration<sp/>can<sp/>start<sp/>working<sp/>on<sp/>the<sp/>next<sp/>character.<sp/>Neither<sp/>Clang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nor<sp/>GCC<sp/>figure<sp/>out<sp/>this<sp/>reordering<sp/>on<sp/>their<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>next<sp/>=<sp/>buf<sp/>+<sp/>len<sp/>+<sp/>!len;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>a<sp/>four-byte<sp/>character<sp/>and<sp/>load<sp/>four<sp/>bytes.<sp/>Unused<sp/>bits<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shifted<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>*c<sp/>=<sp/>uint32_t(s[0]<sp/>&amp;<sp/>masks[len])<sp/>&lt;&lt;<sp/>18;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>*c<sp/>|=<sp/>uint32_t(s[1]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>*c<sp/>|=<sp/>uint32_t(s[2]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>*c<sp/>|=<sp/>uint32_t(s[3]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>0;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>*c<sp/>&gt;&gt;=<sp/>shiftc[len];</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accumulate<sp/>the<sp/>various<sp/>error<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>*e<sp/>=<sp/>(*c<sp/>&lt;<sp/>mins[len])<sp/>&lt;&lt;<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-canonical<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>*e<sp/>|=<sp/>((*c<sp/>&gt;&gt;<sp/>11)<sp/>==<sp/>0x1b)<sp/>&lt;&lt;<sp/>7;<sp/><sp/></highlight><highlight class="comment">//<sp/>surrogate<sp/>half?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>*e<sp/>|=<sp/>(*c<sp/>&gt;<sp/>0x10FFFF)<sp/>&lt;&lt;<sp/>8;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>range?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>*e<sp/>|=<sp/>(s[1]<sp/>&amp;<sp/>0xc0)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>*e<sp/>|=<sp/>(s[2]<sp/>&amp;<sp/>0xc0)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>*e<sp/>|=<sp/>(s[3])<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>*e<sp/>^=<sp/>0x2a;<sp/><sp/></highlight><highlight class="comment">//<sp/>top<sp/>two<sp/>bits<sp/>of<sp/>each<sp/>tail<sp/>byte<sp/>correct?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>*e<sp/>&gt;&gt;=<sp/>shifte[len];</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301" refid="structformatter_3_01detail_1_1bigint_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;detail::bigint&gt;<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>format_parse_context::iterator<sp/>parse(<ref refid="classbasic__format__parse__context" kindref="compound">format_parse_context</ref>&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.<ref refid="classbasic__format__parse__context_1a3aedbd66520975bb680d427778f636a5" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>format_context::iterator<sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">detail::bigint</ref>&amp;<sp/>n,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">format_context</ref>&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>ctx.out();</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>n.bigits_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>();<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>n.bigits_[i<sp/>-<sp/>1u];</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/></highlight><highlight class="stringliteral">&quot;{:x}&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/></highlight><highlight class="stringliteral">&quot;{:08x}&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n.exp_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/></highlight><highlight class="stringliteral">&quot;p{}&quot;</highlight><highlight class="normal">,<sp/>n.exp_<sp/>*<sp/>detail::bigint::bigit_bits);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">FMT_FUNC<sp/>detail::utf8_to_utf16::utf8_to_utf16(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transcode<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>uint32_t();</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>utf8_decode(p,<sp/>&amp;cp,<sp/>&amp;error);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/>0)<sp/>FMT_THROW(std::runtime_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>utf8&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>0xFFFF)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cp));</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>-=<sp/>0x10000;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xD800<sp/>+<sp/>(cp<sp/>&gt;&gt;<sp/>10)));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xDC00<sp/>+<sp/>(cp<sp/>&amp;<sp/>0x3FF)));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>block_size<sp/>=<sp/>4;<sp/><sp/></highlight><highlight class="comment">//<sp/>utf8_decode<sp/>always<sp/>reads<sp/>blocks<sp/>of<sp/>4<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()<sp/>&gt;=<sp/>block_size)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>p<sp/>+<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()<sp/>-<sp/>block_size<sp/>+<sp/>1;<sp/>p<sp/>&lt;<sp/>end;)<sp/>p<sp/>=<sp/>transcode(p);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_chars_left<sp/>=<sp/>s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>()<sp/>+<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()<sp/>-<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[2<sp/>*<sp/>block_size<sp/>-<sp/>1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>p,<sp/>to_unsigned(num_chars_left));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>transcode(p);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>-<sp/>buf<sp/>&lt;<sp/>num_chars_left);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>buffer_.push_back(0);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_system_error(<ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer&lt;char&gt;</ref>&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>FMT_TRY<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buf;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(inline_buffer_size);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>system_message<sp/>=<sp/>&amp;buf[0];</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::safe_strerror(<ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/>system_message,<sp/>buf.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_to(std::back_inserter(out),<sp/></highlight><highlight class="stringliteral">&quot;{}:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>message,<sp/>system_message);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>ERANGE)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>get<sp/>error<sp/>message,<sp/>report<sp/>error<sp/>code<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(buf.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>FMT_CATCH(...)<sp/>{}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>format_error_code(out,<sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detail::error_handler::on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(message));</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_system_error(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::string_view<sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>report_error(format_system_error,<sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387" refid="structstringifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstringifier" kindref="compound">stringifier</ref><sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>FMT_INLINE<sp/>std::string<sp/>operator()(T<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(value);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>std::string<sp/>operator()(<ref refid="classbasic__format__arg_1_1handle" kindref="compound">basic_format_arg&lt;format_context&gt;::handle</ref><sp/>h)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buf;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer&lt;char&gt;</ref>&amp;<sp/>base<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">format_parse_context</ref><sp/>parse_ctx({});</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">format_context</ref><sp/>format_ctx(std::back_inserter(base),<sp/>{},<sp/>{});</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>h.format(parse_ctx,<sp/>format_ctx);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(buf);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal">FMT_FUNC<sp/>std::string<sp/>detail::vformat(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,<sp/><ref refid="structformat__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format_str.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>equal2(format_str.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>args.<ref refid="classbasic__format__args_1a1b8d2230711409b52799cf4b4c3327fe" kindref="member">get</ref>(0);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg)<sp/>error_handler().on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visit_format_arg(<ref refid="structstringifier" kindref="compound">stringifier</ref>(),<sp/>arg);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>detail::vformat_to(buffer,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(buffer);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(std::FILE*<sp/>f,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,<sp/><ref refid="structformat__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>detail::vformat_to(buffer,<sp/>format_str,</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__format__context" kindref="compound">buffer_context&lt;char&gt;</ref>&gt;(args));</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>_fileno(f);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_isatty(fd))<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1utf8__to__utf16" kindref="compound">detail::utf8_to_utf16</ref><sp/>u16(<ref refid="classbasic__string__view" kindref="compound">string_view</ref>(buffer.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>buffer.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>written<sp/>=<sp/>DWORD();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!WriteConsoleW(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">HANDLE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_get_osfhandle(fd)),</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u16.c_str(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(u16.size()),<sp/>&amp;written,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>write<sp/>to<sp/>console&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>detail::fwrite_fully(buffer.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>1,<sp/>buffer.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>(),<sp/>f);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>assuming<sp/>legacy<sp/>(non-Unicode)<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detail::vprint_mojibake(std::FILE*<sp/>f,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structformat__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>detail::vformat_to(buffer,<sp/>format_str,</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__format__context" kindref="compound">buffer_context&lt;char&gt;</ref>&gt;(args));</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>fwrite_fully(buffer.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>1,<sp/>buffer.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>(),<sp/>f);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,<sp/><ref refid="structformat__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>vprint(stdout,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_FORMAT_INL_H_</highlight></codeline>
    </programlisting>
    <location file="include/srsgnb/srslog/bundled/fmt/format-inl.h"/>
  </compounddef>
</doxygen>
