<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1short__block__detector__impl" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::short_block_detector_impl</compoundname>
    <basecompoundref refid="classsrsgnb_1_1short__block__detector" prot="public" virt="non-virtual">srsgnb::short_block_detector</basecompoundref>
    <includes refid="short__block__detector__impl_8h" local="no">short_block_detector_impl.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1short__block__detector__impl_1a83d9ae23c97ebfe59a6ae8ce3356113b" prot="private" static="yes" mutable="no">
        <type>const std::array&lt; std::array&lt; int8_t, <ref refid="namespacesrsgnb_1a298d4b4cba8e73d72f82581db0efecc6" kindref="member">MAX_BLOCK_LENGTH</ref> &gt;, <ref refid="namespacesrsgnb_1a7a6d5adc63a0b40aa84ea68f280e9312" kindref="member">MAX_NOF_CODEWORDS_2</ref> &gt;</type>
        <definition>const std::array&lt; std::array&lt; int8_t, MAX_BLOCK_LENGTH &gt;, MAX_NOF_CODEWORDS_2 &gt; short_block_detector_impl::DETECT_TABLE</definition>
        <argsstring></argsstring>
        <name>DETECT_TABLE</name>
        <initializer>=
    create_lut()</initializer>
        <briefdescription>
<para>Look-up table of possible transmitted sequences of 32 bits. </para>
        </briefdescription>
        <detaileddescription>
<para>Row <formula id="219">$r$</formula> corresponds to the codeword obtained by encoding the binary expansion of <formula id="220">$2r$</formula> as described in TS 38.211 Section 5.3.3.3. <simplesect kind="note"><para>The codeword corresponding to the binary expansion of <formula id="221">$ 2r + 1 $</formula> can be obtained from the codeword with index <formula id="222">$ r $</formula> by inverting all the signs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" line="50" column="27" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" bodystart="50" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" compoundref="short__block__detector__impl_8cpp" startline="107" endline="135">detect_3_11</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1short__block__detector__impl_1a19623e946a11e01acf68e233517b5816" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool short_block_detector_impl::detect</definition>
        <argsstring>(span&lt; uint8_t &gt; output, span&lt; const log_likelihood_ratio &gt; input, modulation_scheme mod) override</argsstring>
        <name>detect</name>
        <reimplements refid="classsrsgnb_1_1short__block__detector_1ab20d74592fe8574cb8c1547ea2c62e34">detect</reimplements>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="classsrsgnb_1_1log__likelihood__ratio" kindref="compound">log_likelihood_ratio</ref> &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4" kindref="member">modulation_scheme</ref></type>
          <declname>mod</declname>
        </param>
        <briefdescription>
<para>Detection, decoding and rate-dematching of short blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the provided signal contains a codeblock and, if so, decodes its content assuming the encoding followed TS38.212 Section 5.3.3 and the rate-matching scheme of TS38.212 Section 5.4.3. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Detected message (one bit per entry). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Received codeblock (log-likelihood ratios). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mod</parametername>
</parameternamelist>
<parameterdescription>
<para>Modulation scheme. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if <computeroutput>input</computeroutput> passes a detection test. </para>
</simplesect>
<simplesect kind="remark"><para>When the detection test fails, the function returns <computeroutput>false</computeroutput> and the content of <computeroutput>output</computeroutput> is unreliable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" line="34" column="8" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.cpp" bodystart="150" bodyend="183"/>
        <references refid="namespacesrsgnb_1a0d8c69bda1d828c45f83f9e92e23b0b1" compoundref="modulation__scheme_8h" startline="63" endline="76">srsgnb::get_bits_per_symbol</references>
        <references refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" compoundref="span_8h" startline="143" endline="143">srsgnb::span&lt; T &gt;::size</references>
        <references refid="namespacesrsgnb_1a298d4b4cba8e73d72f82581db0efecc6" compoundref="short__block__detector__impl_8h" startline="21">srsgnb::MAX_BLOCK_LENGTH</references>
        <references refid="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" compoundref="short__block__detector__impl_8cpp" startline="107" endline="135">detect_3_11</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double short_block_detector_impl::detect_3_11</definition>
        <argsstring>(span&lt; uint8_t &gt; output, span&lt; const log_likelihood_ratio &gt; input)</argsstring>
        <name>detect_3_11</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="classsrsgnb_1_1log__likelihood__ratio" kindref="compound">log_likelihood_ratio</ref> &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Brute force ML detection for messages of length 3-11 bits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>The detected message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>The received codeword (represented as a sequence of 32 LLRs). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the GLRT detection metric. </para>
</simplesect>
<simplesect kind="remark"><para>The size of <computeroutput>output</computeroutput> must match the length of the expected message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" line="42" column="17" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.cpp" bodystart="107" bodyend="135"/>
        <references refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" compoundref="span_8h" startline="143" endline="143">srsgnb::span&lt; T &gt;::size</references>
        <references refid="classsrsgnb_1_1log__likelihood__ratio_1a562c0e7511c6caabab9b6c42fad9bcb1" compoundref="log__likelihood__ratio_8h" startline="275" endline="285">srsgnb::log_likelihood_ratio::dot_prod</references>
        <references refid="classsrsgnb_1_1short__block__detector__impl_1a83d9ae23c97ebfe59a6ae8ce3356113b" compoundref="short__block__detector__impl_8h" startline="50">DETECT_TABLE</references>
        <references refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" compoundref="span_8h" startline="179" endline="179">srsgnb::span&lt; T &gt;::begin</references>
        <references refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" compoundref="span_8h" startline="182" endline="182">srsgnb::span&lt; T &gt;::end</references>
        <references refid="classsrsgnb_1_1log__likelihood__ratio_1a051ed46be9ce83eb6840ce03773964b6" compoundref="log__likelihood__ratio_8h" startline="297" endline="302">srsgnb::log_likelihood_ratio::norm_squared</references>
        <references refid="namespacesrsgnb_1a298d4b4cba8e73d72f82581db0efecc6" compoundref="short__block__detector__impl_8h" startline="21">srsgnb::MAX_BLOCK_LENGTH</references>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a19623e946a11e01acf68e233517b5816" compoundref="short__block__detector__impl_8cpp" startline="150" endline="183">detect</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic implementation of the short-block detector. </para>
    </briefdescription>
    <detaileddescription>
<para>Implements a brute-force, maximum-likelihood detector for short-block codes (up to 11 information bits). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>srsgnb::short_block_detector</label>
        <link refid="classsrsgnb_1_1short__block__detector"/>
      </node>
      <node id="1">
        <label>srsgnb::short_block_detector_impl</label>
        <link refid="classsrsgnb_1_1short__block__detector__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>srsgnb::short_block_detector</label>
        <link refid="classsrsgnb_1_1short__block__detector"/>
      </node>
      <node id="1">
        <label>srsgnb::short_block_detector_impl</label>
        <link refid="classsrsgnb_1_1short__block__detector__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" line="31" column="1" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" bodystart="30" bodyend="51"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1short__block__detector__impl_1a19623e946a11e01acf68e233517b5816" prot="public" virt="virtual"><scope>srsgnb::short_block_detector_impl</scope><name>detect</name></member>
      <member refid="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" prot="private" virt="non-virtual"><scope>srsgnb::short_block_detector_impl</scope><name>detect_3_11</name></member>
      <member refid="classsrsgnb_1_1short__block__detector__impl_1a83d9ae23c97ebfe59a6ae8ce3356113b" prot="private" virt="non-virtual"><scope>srsgnb::short_block_detector_impl</scope><name>DETECT_TABLE</name></member>
      <member refid="classsrsgnb_1_1short__block__detector_1ab0f8dbc36a13153af9e264fbfcfe7f38" prot="public" virt="virtual"><scope>srsgnb::short_block_detector_impl</scope><name>~short_block_detector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
