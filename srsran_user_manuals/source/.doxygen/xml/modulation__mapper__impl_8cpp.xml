<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="modulation__mapper__impl_8cpp" kind="file" language="C++">
    <compoundname>modulation_mapper_impl.cpp</compoundname>
    <includes refid="modulation__mapper__impl_8h" local="yes">modulation_mapper_impl.h</includes>
    <includes refid="bit_8h" local="yes">srsgnb/srsvec/bit.h</includes>
    <includes refid="dot__prod_8h" local="yes">srsgnb/srsvec/dot_prod.h</includes>
    <includes refid="sc__prod_8h" local="yes">srsgnb/srsvec/sc_prod.h</includes>
    <incdepgraph>
      <node id="47">
        <label>atomic</label>
      </node>
      <node id="1">
        <label>lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp</label>
        <link refid="modulation__mapper__impl_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="18">
        <label>iterator</label>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="41">
        <label>srsgnb/srslog/detail/support/memory_buffer.h</label>
        <link refid="memory__buffer_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="24">
        <label>cassert</label>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="53">
        <label>numeric</label>
      </node>
      <node id="43">
        <label>srsgnb/srslog/context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="27">
        <label>srsgnb_assert.h</label>
        <link refid="srsgnb__assert_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>srsgnb/ran/modulation_scheme.h</label>
        <link refid="modulation__scheme_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>map</label>
      </node>
      <node id="40">
        <label>srsgnb/srslog/detail/support/error_string.h</label>
        <link refid="error__string_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>srsgnb/phy/upper/channel_modulation/modulation_mapper.h</label>
        <link refid="modulation__mapper_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>srsgnb/srsvec/dot_prod.h</label>
        <link refid="dot__prod_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>srsgnb/srslog/detail/log_entry.h</label>
        <link refid="log__entry_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>modulation_mapper_impl.h</label>
        <link refid="modulation__mapper__impl_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>srsgnb/srsvec/detail/traits.h</label>
        <link refid="traits_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>srsgnb/srslog/shared_types.h</label>
        <link refid="shared__types_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>srsgnb/srslog/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>srsgnb/support/math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>pthread.h</label>
      </node>
      <node id="4">
        <label>srsgnb/adt/complex.h</label>
        <link refid="complex_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cstdio</label>
      </node>
      <node id="46">
        <label>tuple</label>
      </node>
      <node id="31">
        <label>srsgnb/srslog/log_channel.h</label>
        <link refid="log__channel_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
      <node id="37">
        <label>srsgnb/srslog/detail/support/thread_utils.h</label>
        <link refid="thread__utils_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>array</label>
      </node>
      <node id="44">
        <label>srsgnb/srslog/detail/support/tmpl_utils.h</label>
        <link refid="tmpl__utils_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cerrno</label>
      </node>
      <node id="23">
        <label>srsgnb/adt/span.h</label>
        <link refid="span_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>cstddef</label>
      </node>
      <node id="49">
        <label>srsgnb/srsvec/bit.h</label>
        <link refid="bit_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>chrono</label>
      </node>
      <node id="32">
        <label>srsgnb/srslog/detail/log_backend.h</label>
        <link refid="log__backend_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>srsgnb/srslog/detail/log_entry_metadata.h</label>
        <link refid="log__entry__metadata_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>srsgnb/srslog/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>srsgnb/srslog/srslog.h</label>
        <link refid="srslog_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>srsgnb/srsvec/sc_prod.h</label>
        <link refid="sc__prod_8h_source"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>srsgnb/srsvec/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="22">
        <label>complex</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="29">
        <label>srsgnb/srslog/detail/support/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
      <node id="42">
        <label>srsgnb/srslog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmodulator__table__s" prot="public">modulator_table_s</innerclass>
    <innerclass refid="structmodulator__table__bpsk" prot="public">modulator_table_bpsk</innerclass>
    <innerclass refid="structmodulator__table__pi__2__bpsk" prot="public">modulator_table_pi_2_bpsk</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="modulation__mapper__impl_8cpp_1a0a755258efd79df80786bb8fd7842b25" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structmodulator__table__pi__2__bpsk" kindref="compound">modulator_table_pi_2_bpsk</ref></type>
        <definition>const modulator_table_pi_2_bpsk pi_2_bpsk_modulator</definition>
        <argsstring></argsstring>
        <name>pi_2_bpsk_modulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" line="134" column="40" bodyfile="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modulation__mapper__impl_8cpp_1a39df7ec2ddb031ea437972323ba33df0" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structmodulator__table__bpsk" kindref="compound">modulator_table_bpsk</ref></type>
        <definition>const modulator_table_bpsk bpsk_modulator</definition>
        <argsstring></argsstring>
        <name>bpsk_modulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" line="135" column="40" bodyfile="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modulation__mapper__impl_8cpp_1a28ed8f3918ce2a85d360652a4d8a9be8" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structmodulator__table__s" kindref="compound">modulator_table_s</ref>&lt; 2 &gt;</type>
        <definition>const modulator_table_s&lt;2&gt; qpsk_modulator</definition>
        <argsstring></argsstring>
        <name>qpsk_modulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" line="136" column="37" bodyfile="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modulation__mapper__impl_8cpp_1a2c5297c615e89994e383452dad9dbe35" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structmodulator__table__s" kindref="compound">modulator_table_s</ref>&lt; 4 &gt;</type>
        <definition>const modulator_table_s&lt;4&gt; qam16_modulator</definition>
        <argsstring></argsstring>
        <name>qam16_modulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" line="137" column="37" bodyfile="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modulation__mapper__impl_8cpp_1a9e50bf381bc11d6241bbc8c78d0f2958" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structmodulator__table__s" kindref="compound">modulator_table_s</ref>&lt; 6 &gt;</type>
        <definition>const modulator_table_s&lt;6&gt; qam64_modulator</definition>
        <argsstring></argsstring>
        <name>qam64_modulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" line="138" column="37" bodyfile="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modulation__mapper__impl_8cpp_1a4c626865e9cb415065047c87e5a2179d" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structmodulator__table__s" kindref="compound">modulator_table_s</ref>&lt; 8 &gt;</type>
        <definition>const modulator_table_s&lt;8&gt; qam256_modulator</definition>
        <argsstring></argsstring>
        <name>qam256_modulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" line="139" column="37" bodyfile="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;modulation_mapper_impl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srsvec/bit.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dot__prod_8h" kindref="compound">srsgnb/srsvec/dot_prod.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srsvec/sc_prod.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;immintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesrsgnb" kindref="compound">srsgnb</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generic<sp/>optimized<sp/>modulator<sp/>for<sp/>any<sp/>modulation<sp/>order<sp/>QM<sp/>&gt;<sp/>2<sp/>and<sp/>QM<sp/>%<sp/>2<sp/>==<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>QM&gt;</highlight></codeline>
<codeline lineno="24" refid="structmodulator__table__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulator__table__s" kindref="compound">modulator_table_s</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>indexing<sp/>provides<sp/>the<sp/>complex<sp/>symbol<sp/>corresponding<sp/>to<sp/>the<sp/>binary<sp/>expansion<sp/>of<sp/>the<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::array&lt;<ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref>,<sp/><ref refid="namespacesrsgnb_1aa6e983e2bf0e5ec931e8323c27ab5032" kindref="member">pow2</ref>(QM)&gt;<sp/>table;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>the<sp/>Look-up<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="structmodulator__table__s" kindref="compound">modulator_table_s</ref>()</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>TS38.211<sp/>Section<sp/>5.1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0,<sp/>i_end<sp/>=<sp/><ref refid="namespacesrsgnb_1aa6e983e2bf0e5ec931e8323c27ab5032" kindref="member">pow2</ref>(QM);<sp/>i<sp/>!=<sp/>i_end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>real<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>imag<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0,<sp/>j_end<sp/>=<sp/>QM<sp/>/<sp/>2;<sp/>j<sp/>!=<sp/>j_end;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>+=<sp/>offset;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag<sp/>+=<sp/>offset;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>*=<sp/>((i<sp/>&amp;<sp/>(1U<sp/>&lt;&lt;<sp/>(2U<sp/>*<sp/>j<sp/>+<sp/>1U)))<sp/>!=<sp/>0)<sp/>?<sp/>+1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag<sp/>*=<sp/>((i<sp/>&amp;<sp/>(1U<sp/>&lt;&lt;<sp/>(2U<sp/>*<sp/>j<sp/>+<sp/>0U)))<sp/>!=<sp/>0)<sp/>?<sp/>+1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>table[i]<sp/>=<sp/>{real,<sp/>imag};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>average<sp/>power<sp/>to<sp/>calculate<sp/>scaling<sp/>for<sp/>having<sp/>a<sp/>power<sp/>average<sp/>of<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg_power<sp/>=<sp/>srsvec::average_power(table);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>srsgnb_assert(std::isnormal(avg_power),<sp/></highlight><highlight class="stringliteral">&quot;Corrupted<sp/>modulation<sp/>average<sp/>power.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>scaling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaling<sp/>=<sp/>std::sqrt(1<sp/>/<sp/>avg_power);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>srsvec::sc_prod(table,<sp/>scaling,<sp/>table);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Modulates<sp/>the<sp/>input<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modulate(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref>&amp;<sp/>input,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;cf_t&gt;</ref><sp/>symbols)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="58"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symbols.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>&gt;<sp/><ref refid="namespacesrsgnb_1a6026a6056e7f39c043a2bba26daab476" kindref="member">divide_ceil</ref>(8,<sp/>QM))<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nof_symbols_sse<sp/>=<sp/>symbols.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>-<sp/><ref refid="namespacesrsgnb_1a6026a6056e7f39c043a2bba26daab476" kindref="member">divide_ceil</ref>(8,<sp/>QM);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref>&amp;<sp/>symbol<sp/>:<sp/>symbols.<ref refid="classsrsgnb_1_1span_1aadc9956ed7b3870d1e25e82e4f34e782" kindref="member">first</ref>(nof_symbols_sse))<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>8<sp/>bytes<sp/>in<sp/>an<sp/>MMX<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m64<sp/>mask<sp/>=<sp/>*((__m64*)input.<ref refid="classsrsgnb_1_1span_1aba4308bbfa76f662c5e7cf1b4afd78c5" kindref="member">data</ref>());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>all<sp/>ones<sp/>if<sp/>greater<sp/>than<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>_mm_cmpgt_pi8(mask,<sp/>_mm_setzero_si64());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pack<sp/>all<sp/>bytes<sp/>MSB<sp/>into<sp/>a<sp/>single<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>_mm_movemask_pi8(mask);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reverse<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/><ref refid="namespacesrsgnb_1a68609cb80f5f8f752b020809bdc050f0" kindref="member">reverse_byte</ref>(index);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>the<sp/>bits<sp/>of<sp/>interest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>index<sp/>&gt;&gt;<sp/>(8<sp/>-<sp/>QM);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>input<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.<ref refid="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" kindref="member">last</ref>(input.size()<sp/>-<sp/>QM);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>symbol<sp/>from<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>=<sp/>table[index];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>symbols<sp/>=<sp/>symbols.<ref refid="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" kindref="member">last</ref>(symbols.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>-<sp/>nof_symbols_sse);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref>&amp;<sp/>symbol<sp/>:<sp/>symbols)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Packs<sp/>the<sp/>next<sp/>QM<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>QM;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>|=<sp/>(unsigned)input[i]<sp/>&lt;&lt;<sp/>(QM<sp/>-<sp/>i<sp/>-<sp/>1U);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>input<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.<ref refid="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" kindref="member">last</ref>(input.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>-<sp/>QM);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>symbol<sp/>from<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>=<sp/>table[index];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>srsgnb_assert(input.<ref refid="classsrsgnb_1_1span_1a595cf1b0fe0385603307ba67012f820c" kindref="member">empty</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>full<sp/>consumption<sp/>of<sp/>the<sp/>input<sp/>data.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generic<sp/>optimized<sp/>modulator<sp/>for<sp/>BSPK.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="structmodulator__table__bpsk" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulator__table__bpsk" kindref="compound">modulator_table_bpsk</ref><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>indexing<sp/>provides<sp/>the<sp/>complex<sp/>symbol<sp/>corresponding<sp/>to<sp/>the<sp/>binary<sp/>expansion<sp/>of<sp/>the<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;cf_t,<sp/>2&gt;<sp/>table<sp/>=<sp/>{{{M_SQRT1_2,<sp/>M_SQRT1_2},<sp/>{-M_SQRT1_2,<sp/>-M_SQRT1_2}}};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Modulates<sp/>the<sp/>input<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modulate(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref>&amp;<sp/>input,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;cf_t&gt;</ref><sp/>symbols)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="113"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(input.<ref refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" kindref="member">begin</ref>(),<sp/>input.<ref refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" kindref="member">end</ref>(),<sp/>symbols.<ref refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" kindref="member">begin</ref>(),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](uint8_t<sp/>bit)<sp/>{<sp/>return<sp/>table[bit];<sp/>});</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generic<sp/>optimized<sp/>modulator<sp/>for<sp/>π/2-BPSK.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="structmodulator__table__pi__2__bpsk" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulator__table__pi__2__bpsk" kindref="compound">modulator_table_pi_2_bpsk</ref><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>indexing<sp/>provides<sp/>the<sp/>complex<sp/>symbol<sp/>corresponding<sp/>to<sp/>the<sp/>binary<sp/>expansion<sp/>of<sp/>the<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;cf_t,<sp/>2&gt;<sp/>table_even<sp/>=<sp/>{{{M_SQRT1_2,<sp/>M_SQRT1_2},<sp/>{-M_SQRT1_2,<sp/>-M_SQRT1_2}}};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;cf_t,<sp/>2&gt;<sp/>table_odd<sp/><sp/>=<sp/>{{{-M_SQRT1_2,<sp/>M_SQRT1_2},<sp/>{M_SQRT1_2,<sp/>-M_SQRT1_2}}};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Modulates<sp/>the<sp/>input<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modulate(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref>&amp;<sp/>input,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;cf_t&gt;</ref><sp/>symbols)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="126"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(input.<ref refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" kindref="member">begin</ref>(),<sp/>input.<ref refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" kindref="member">end</ref>(),<sp/>symbols.<ref refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" kindref="member">begin</ref>(),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>n<sp/>=<sp/>0](uint8_t<sp/>bit)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(n++<sp/>&amp;<sp/>1U)<sp/>?<sp/>table_odd[bit]<sp/>:<sp/>table_even[bit];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modulation<sp/>tables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulator__table__pi__2__bpsk" kindref="compound">modulator_table_pi_2_bpsk</ref><sp/>pi_2_bpsk_modulator;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulator__table__bpsk" kindref="compound">modulator_table_bpsk</ref><sp/><sp/><sp/><sp/><sp/><sp/>bpsk_modulator;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulator__table__s" kindref="compound">modulator_table_s&lt;2&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/>qpsk_modulator;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulator__table__s" kindref="compound">modulator_table_s&lt;4&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/>qam16_modulator;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulator__table__s" kindref="compound">modulator_table_s&lt;6&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/>qam64_modulator;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulator__table__s" kindref="compound">modulator_table_s&lt;8&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/>qam256_modulator;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classsrsgnb_1_1modulation__mapper__impl_1a6b15ec922595693c948d3c5eae8f0497" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1modulation__mapper__impl_1a6b15ec922595693c948d3c5eae8f0497" kindref="member">modulation_mapper_impl::modulate</ref>(<ref refid="classsrsgnb_1_1span" kindref="compound">srsgnb::span&lt;const uint8_t&gt;</ref><sp/>input,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1span" kindref="compound">srsgnb::span&lt;srsgnb::cf_t&gt;</ref><sp/><sp/>symbols,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4" kindref="member">srsgnb::modulation_scheme</ref><sp/><sp/><sp/>scheme)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>srsgnb_assert(input.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>==<sp/><ref refid="namespacesrsgnb_1a0d8c69bda1d828c45f83f9e92e23b0b1" kindref="member">get_bits_per_symbol</ref>(scheme)<sp/>*<sp/>symbols.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>bits<sp/>{}<sp/>is<sp/>not<sp/>consistent<sp/>with<sp/>the<sp/>number<sp/>of<sp/>symbols<sp/>{}<sp/>for<sp/>modulation<sp/>scheme<sp/>{}.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbols.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scheme);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(scheme)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a68b5dd822c6ef8ad44f98f56dfbe016e" kindref="member">modulation_scheme::PI_2_BPSK</ref>:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi_2_bpsk_modulator.modulate(input,<sp/>symbols);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4acfd8f331d281b0da79e7c6ed6988243c" kindref="member">modulation_scheme::BPSK</ref>:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bpsk_modulator.modulate(input,<sp/>symbols);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a4539d029e1781f9347b6d7d173c04a6a" kindref="member">modulation_scheme::QPSK</ref>:</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qpsk_modulator.modulate(input,<sp/>symbols);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a03029a441fe46ebecd2135ba5d8b330f" kindref="member">modulation_scheme::QAM16</ref>:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qam16_modulator.modulate(input,<sp/>symbols);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a5e0dd7cb58cf81fd6bed561c7e4b351b" kindref="member">modulation_scheme::QAM64</ref>:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qam64_modulator.modulate(input,<sp/>symbols);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a69a2bdd96ac2c6035d0c8ca23563aec9" kindref="member">modulation_scheme::QAM256</ref>:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qam256_modulator.modulate(input,<sp/>symbols);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/phy/upper/channel_modulation/modulation_mapper_impl.cpp"/>
  </compounddef>
</doxygen>
