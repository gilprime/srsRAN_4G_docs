<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdetail_1_1counting__iterator" kind="class" language="C++" prot="public">
    <compoundname>detail::counting_iterator</compoundname>
    <innerclass refid="structdetail_1_1counting__iterator_1_1value__type" prot="public">detail::counting_iterator::value_type</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdetail_1_1counting__iterator_1acfcf8c736ed785b53fe4fa89bffc2a8c" prot="public" static="no">
        <type>std::output_iterator_tag</type>
        <definition>using detail::counting_iterator::iterator_category =  std::output_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="400" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1counting__iterator_1ab38fb05009ff6d308e752fe82bb2ae9d" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using detail::counting_iterator::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="401" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1counting__iterator_1a6d99b75b9dac1f72e03e60da0d2051c6" prot="public" static="no">
        <type>void</type>
        <definition>using detail::counting_iterator::pointer =  void</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="402" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1counting__iterator_1af19e9f5a9b584d1bff8af6fc3ea1b6cb" prot="public" static="no">
        <type>void</type>
        <definition>using detail::counting_iterator::reference =  void</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="403" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1counting__iterator_1a872f70196669f7dc99f1eb23bd43ec89" prot="public" static="no">
        <type><ref refid="classdetail_1_1counting__iterator" kindref="compound">counting_iterator</ref></type>
        <definition>using detail::counting_iterator::_Unchecked_type =  counting_iterator</definition>
        <argsstring></argsstring>
        <name>_Unchecked_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="404" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdetail_1_1counting__iterator_1a3b492a61648b9a625575983e22ce8db0" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t detail::counting_iterator::count_</definition>
        <argsstring></argsstring>
        <name>count_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="397" column="10" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdetail_1_1counting__iterator_1aebe1bbada86b5e96eaf27a8d42592ffe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>detail::counting_iterator::counting_iterator</definition>
        <argsstring>()</argsstring>
        <name>counting_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="410" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="410" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1counting__iterator_1a511a376d0ec9e7dd0a36d229e44ab3ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t detail::counting_iterator::count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="412" column="10" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="412" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1counting__iterator_1af3aa635e90072290bbda5068332b0f17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1counting__iterator" kindref="compound">counting_iterator</ref> &amp;</type>
        <definition>counting_iterator&amp; detail::counting_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="414" column="21" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1counting__iterator_1a32ad422c0fde444538727ee8738db8b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1counting__iterator" kindref="compound">counting_iterator</ref></type>
        <definition>counting_iterator detail::counting_iterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="419" column="21" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="419" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1counting__iterator_1a9bcd0ce51c9f1555a045b3899c406d36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdetail_1_1counting__iterator_1_1value__type" kindref="compound">value_type</ref></type>
        <definition>value_type detail::counting_iterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="425" column="14" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="425" bodyend="425"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>detail::counting_iterator</label>
        <link refid="classdetail_1_1counting__iterator"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="395" column="24" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="395" bodyend="426"/>
    <listofallmembers>
      <member refid="classdetail_1_1counting__iterator_1a872f70196669f7dc99f1eb23bd43ec89" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>_Unchecked_type</name></member>
      <member refid="classdetail_1_1counting__iterator_1a511a376d0ec9e7dd0a36d229e44ab3ae" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>count</name></member>
      <member refid="classdetail_1_1counting__iterator_1a3b492a61648b9a625575983e22ce8db0" prot="private" virt="non-virtual"><scope>detail::counting_iterator</scope><name>count_</name></member>
      <member refid="classdetail_1_1counting__iterator_1aebe1bbada86b5e96eaf27a8d42592ffe" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>counting_iterator</name></member>
      <member refid="classdetail_1_1counting__iterator_1ab38fb05009ff6d308e752fe82bb2ae9d" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>difference_type</name></member>
      <member refid="classdetail_1_1counting__iterator_1acfcf8c736ed785b53fe4fa89bffc2a8c" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>iterator_category</name></member>
      <member refid="classdetail_1_1counting__iterator_1a9bcd0ce51c9f1555a045b3899c406d36" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>operator*</name></member>
      <member refid="classdetail_1_1counting__iterator_1af3aa635e90072290bbda5068332b0f17" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>operator++</name></member>
      <member refid="classdetail_1_1counting__iterator_1a32ad422c0fde444538727ee8738db8b4" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>operator++</name></member>
      <member refid="classdetail_1_1counting__iterator_1a6d99b75b9dac1f72e03e60da0d2051c6" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>pointer</name></member>
      <member refid="classdetail_1_1counting__iterator_1af19e9f5a9b584d1bff8af6fc3ea1b6cb" prot="public" virt="non-virtual"><scope>detail::counting_iterator</scope><name>reference</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
