<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1slot__vector" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::slot_vector</compoundname>
    <basecompoundref refid="classsrsgnb_1_1detail_1_1base__slot__array" prot="private" virt="non-virtual">srsgnb::detail::base_slot_array&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;</basecompoundref>
    <includes refid="slot__array_8h" local="no">slot_array.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classsrsgnb_1_1slot__vector_1a62627b21d959dcaa4a96b4a9e14cb0d9" prot="private" static="no">
        <type><ref refid="classsrsgnb_1_1detail_1_1base__slot__array" kindref="compound">detail::base_slot_array</ref>&lt; std::vector&lt; <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &gt;&gt;</type>
        <definition>using srsgnb::slot_vector&lt; T &gt;::base_t =  detail::base_slot_array&lt;std::vector&lt;optional&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>base_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="235" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsrsgnb_1_1slot__vector_1a1c78167f9cfa5f33e599f734a55a5f54" prot="public" static="no">
        <type>typename base_t::value_type</type>
        <definition>using srsgnb::slot_vector&lt; T &gt;::value_type =  typename base_t::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="238" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1slot__vector_1a84047fc7b2acf6e9def14828418614d4" prot="public" static="no">
        <type>typename base_t::iterator</type>
        <definition>using srsgnb::slot_vector&lt; T &gt;::iterator =  typename base_t::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="239" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1slot__vector_1aa9878abeaa017b11f5ba3abfbebb6a7e" prot="public" static="no">
        <type>typename base_t::const_iterator</type>
        <definition>using srsgnb::slot_vector&lt; T &gt;::const_iterator =  typename base_t::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="240" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1slot__vector_1aff7270a0fd5a4ad7974e88b401c96f5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::slot_vector&lt; T &gt;::insert</definition>
        <argsstring>(size_t idx, U &amp;&amp;u)</argsstring>
        <name>insert</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>May allocate and cause pointer invalidation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="256" column="8" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="256" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__vector_1a9e8442a1ea7d939dff38cf64ca5a5a6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::slot_vector&lt; T &gt;::emplace</definition>
        <argsstring>(size_t idx, Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>May allocate and cause pointer invalidation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="266" column="8" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="266" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__vector_1a77e33dca924591df1d2433663184e405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>base_slot_array &amp;</type>
        <definition>base_slot_array&amp; srsgnb::detail::base_slot_array&lt; Vec &gt;::operator=</definition>
        <argsstring>(const base_slot_array &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const base_slot_array &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="243" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__vector_1a3064a53810baa45087599ac9d4c9ea49" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>base_slot_array &amp;</type>
        <definition>base_slot_array&amp; srsgnb::detail::base_slot_array&lt; Vec &gt;::operator=</definition>
        <argsstring>(base_slot_array &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>base_slot_array &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="243" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__vector_1aa88d7bdf4e774213c4c993e353d96825" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::detail::base_slot_array&lt; Vec &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear all elements of the container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="247" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="149" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__vector_1a8f1a14bba248207519a9b273fe61cb24" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::detail::base_slot_array&lt; Vec &gt;::erase</definition>
        <argsstring>(size_t idx) noexcept</argsstring>
        <name>erase</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Erase object pointed by the given index <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the erased element in the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="250" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__vector_1aaf2e7481bcf1672ed29189a895c0a1c6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::detail::base_slot_array&lt; Vec &gt;::erase</definition>
        <argsstring>(iterator it) noexcept</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Erase object pointed by the given iterator. Iterator must point to valid element <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>container iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="250" column="3" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="170" bodyend="170"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contrarily to <ref refid="classsrsgnb_1_1slot__array" kindref="compound">slot_array</ref>, this class may allocate and cause pointer/reference/iterator invalidation. However, the indexes will remain valid. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>srsgnb::detail::base_slot_array&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;</label>
        <link refid="classsrsgnb_1_1detail_1_1base__slot__array"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>srsgnb::detail::base_slot_array_view&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;</label>
        <link refid="classsrsgnb_1_1detail_1_1base__slot__array__view"/>
      </node>
      <node id="1">
        <label>srsgnb::slot_vector&lt; T &gt;</label>
        <link refid="classsrsgnb_1_1slot__vector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>srsgnb::detail::base_slot_array&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;</label>
        <link refid="classsrsgnb_1_1detail_1_1base__slot__array"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>srsgnb::detail::base_slot_array_view&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;</label>
        <link refid="classsrsgnb_1_1detail_1_1base__slot__array__view"/>
      </node>
      <node id="1">
        <label>srsgnb::slot_vector&lt; T &gt;</label>
        <link refid="classsrsgnb_1_1slot__vector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/adt/slot_array.h" line="234" column="1" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="233" bodyend="273"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array_1a2c603ba781810146ec05b7a2abd02bff" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>base_slot_array</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array_1a441e170ceb1d51c5931c0ff05bdda849" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>base_slot_array</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array_1a75ad73e318bfdf9aa768c861ddfe314f" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>base_slot_array</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a511578084f3370e7febe6d82331d3322" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>base_slot_array_view</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a93cc7cce146969644359ea2fe86b180d" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>base_slot_array_view</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a2c3d2e22e68a3da226e2db73b1a5d437" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>base_slot_array_view</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1a62627b21d959dcaa4a96b4a9e14cb0d9" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>base_t</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1acb33e9554bcdbc3a9a90184f2673180e" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>begin</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a1e1e3bfbc9126e558864c3723c28b9a8" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>begin</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1aa88d7bdf4e774213c4c993e353d96825" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>clear</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1aa9878abeaa017b11f5ba3abfbebb6a7e" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>const_iterator</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1af5e1274cae00781288e56c70f5f623af" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>contains</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1a9e8442a1ea7d939dff38cf64ca5a5a6c" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>emplace</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a550965dcc189d70e2109f8980190ea31" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>empty</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a2dcd6db4e502f0ab84eef5b8dd4f16b5" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>end</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1af012079116b025f3a4a56fe615153af3" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>end</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1a8f1a14bba248207519a9b273fe61cb24" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>erase</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1aaf2e7481bcf1672ed29189a895c0a1c6" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>erase</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array_1a8f1a14bba248207519a9b273fe61cb24" prot="private" virt="non-virtual" ambiguityscope="base_slot_array&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;::"><scope>srsgnb::slot_vector</scope><name>erase</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array_1aaf2e7481bcf1672ed29189a895c0a1c6" prot="private" virt="non-virtual" ambiguityscope="base_slot_array&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;::"><scope>srsgnb::slot_vector</scope><name>erase</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1ada85131beaaee426e66af82f34f503b3" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>extract_iterator_index</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a027b9d3d77776885e46747e3b8b6441c" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>find_first_empty</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1aff7270a0fd5a4ad7974e88b401c96f5d" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>insert</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1a84047fc7b2acf6e9def14828418614d4" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>iterator</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1ab31cf33b4b70697ba8597ee2297823c5" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>nof_elems</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1a77e33dca924591df1d2433663184e405" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1a3064a53810baa45087599ac9d4c9ea49" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array_1a77e33dca924591df1d2433663184e405" prot="private" virt="non-virtual" ambiguityscope="base_slot_array&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;::"><scope>srsgnb::slot_vector</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array_1a3064a53810baa45087599ac9d4c9ea49" prot="private" virt="non-virtual" ambiguityscope="base_slot_array&lt; std::vector&lt; optional&lt; T &gt; &gt; &gt;::"><scope>srsgnb::slot_vector</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a3d6d62bddcd51b063e41fc58f8732d17" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>operator[]</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1ab8f2d706ab6a315ed7515a5a35b81fab" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>operator[]</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1acd9616198c16d2e37675c808477d8805" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>size</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a8f2d62c62cb467c63b051187ca14a7a7" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>T</name></member>
      <member refid="classsrsgnb_1_1slot__vector_1a1c78167f9cfa5f33e599f734a55a5f54" prot="public" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>value_type</name></member>
      <member refid="classsrsgnb_1_1detail_1_1base__slot__array__view_1a806636ffd9c84c7473198425c3aa8419" prot="private" virt="non-virtual"><scope>srsgnb::slot_vector</scope><name>vec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
