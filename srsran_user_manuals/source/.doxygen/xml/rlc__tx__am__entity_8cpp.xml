<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="rlc__tx__am__entity_8cpp" kind="file" language="C++">
    <compoundname>rlc_tx_am_entity.cpp</compoundname>
    <includes refid="rlc__tx__am__entity_8h" local="yes">rlc_tx_am_entity.h</includes>
    <incdepgraph>
      <node id="54">
        <label>list</label>
      </node>
      <node id="66">
        <label>srsgnb/rlc/rlc_config_messages.h</label>
        <link refid="rlc__config__messages_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>srsgnb/adt/unique_function.h</label>
        <link refid="unique__function_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>atomic</label>
      </node>
      <node id="65">
        <label>srsgnb/ran/lcid.h</label>
        <link refid="lcid_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>srsgnb/adt/circular_map.h</label>
        <link refid="circular__map_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>system_error</label>
      </node>
      <node id="19">
        <label>functional</label>
      </node>
      <node id="12">
        <label>limits</label>
      </node>
      <node id="20">
        <label>iterator</label>
      </node>
      <node id="62">
        <label>srsgnb/adt/byte_buffer_slice_chain.h</label>
        <link refid="byte__buffer__slice__chain_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="39">
        <label>srsgnb/srslog/detail/support/memory_buffer.h</label>
        <link refid="memory__buffer_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>srsgnb/adt/intrusive_list.h</label>
        <link refid="intrusive__list_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>stdint.h</label>
      </node>
      <node id="47">
        <label>rlc_pdu_window.h</label>
        <link refid="rlc__pdu__window_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>srsgnb/rlc/rlc.h</label>
        <link refid="rlc_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>srsgnb/support/error_handling.h</label>
        <link refid="error__handling_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>srsgnb/adt/byte_buffer.h</label>
        <link refid="byte__buffer_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>cassert</label>
      </node>
      <node id="49">
        <label>detail/type_storage.h</label>
        <link refid="type__storage_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="41">
        <label>srsgnb/srslog/context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rlc_tx_am_entity.h</label>
        <link refid="rlc__tx__am__entity_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>srsgnb/rlc/rlc_metrics.h</label>
        <link refid="rlc__metrics_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="25">
        <label>srsgnb/support/srsgnb_assert.h</label>
        <link refid="srsgnb__assert_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/rlc/rlc_tx_am_entity.cpp</label>
        <link refid="rlc__tx__am__entity_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>cinttypes</label>
      </node>
      <node id="38">
        <label>srsgnb/srslog/detail/support/error_string.h</label>
        <link refid="error__string_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>srsgnb/ran/bearer_logger.h</label>
        <link refid="bearer__logger_8h_source"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>srsgnb/adt/detail/operator.h</label>
        <link refid="operator_8h_source"/>
      </node>
      <node id="71">
        <label>srsgnb/support/timers.h</label>
        <link refid="timers_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>srsgnb/rlc/rlc_config.h</label>
        <link refid="rlc__config_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>srsgnb/srslog/detail/log_entry.h</label>
        <link refid="log__entry_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>rlc_sdu_queue.h</label>
        <link refid="rlc__sdu__queue_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>srsgnb/srslog/shared_types.h</label>
        <link refid="shared__types_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>rlc_retx_queue.h</label>
        <link refid="rlc__retx__queue_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>srsgnb/srslog/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>condition_variable</label>
      </node>
      <node id="36">
        <label>pthread.h</label>
      </node>
      <node id="17">
        <label>cstdio</label>
      </node>
      <node id="51">
        <label>expected.h</label>
        <link refid="expected_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>tuple</label>
      </node>
      <node id="29">
        <label>srsgnb/srslog/log_channel.h</label>
        <link refid="log__channel_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>vector</label>
      </node>
      <node id="50">
        <label>utility</label>
      </node>
      <node id="35">
        <label>srsgnb/srslog/detail/support/thread_utils.h</label>
        <link refid="thread__utils_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>array</label>
      </node>
      <node id="67">
        <label>rlc_tx_entity.h</label>
        <link refid="rlc__tx__entity_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>srsgnb/srslog/detail/support/tmpl_utils.h</label>
        <link refid="tmpl__utils_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cerrno</label>
      </node>
      <node id="75">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>srsgnb/adt/span.h</label>
        <link refid="span_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>cstddef</label>
      </node>
      <node id="63">
        <label>deque</label>
      </node>
      <node id="56">
        <label>srsgnb/adt/circular_buffer.h</label>
        <link refid="circular__buffer_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>mutex</label>
      </node>
      <node id="34">
        <label>chrono</label>
      </node>
      <node id="30">
        <label>srsgnb/srslog/detail/log_backend.h</label>
        <link refid="log__backend_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>srsgnb/srslog/detail/log_entry_metadata.h</label>
        <link refid="log__entry__metadata_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>srsgnb/srslog/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>thread</label>
      </node>
      <node id="26">
        <label>srsgnb/srslog/srslog.h</label>
        <link refid="srslog_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>rlc_am_interconnect.h</label>
        <link refid="rlc__am__interconnect_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>type_traits</label>
      </node>
      <node id="64">
        <label>srsgnb/ran/du_types.h</label>
        <link refid="du__types_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>rlc_am_pdu.h</label>
        <link refid="rlc__am__pdu_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>algorithm</label>
      </node>
      <node id="27">
        <label>srsgnb/srslog/detail/support/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>srsgnb/support/format_utils.h</label>
        <link refid="format__utils_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cstring</label>
      </node>
      <node id="40">
        <label>srsgnb/srslog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rlc_tx_am_entity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesrsgnb" kindref="compound">srsgnb</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">rlc_tx_am_entity::rlc_tx_am_entity(<ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>du_index,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339e" kindref="member">lcid_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcid,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrsgnb_1_1rlc__tx__am__config" kindref="compound">rlc_tx_am_config</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1rlc__tx__upper__layer__control__notifier" kindref="compound">rlc_tx_upper_layer_control_notifier</ref>&amp;<sp/>upper_cn,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1rlc__tx__buffer__state__update__notifier" kindref="compound">rlc_tx_buffer_state_update_notifier</ref>&amp;<sp/>buffer_state_notif,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager" kindref="compound">timer_manager</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timers)<sp/>:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1rlc__tx__entity" kindref="compound">rlc_tx_entity</ref>(du_index,<sp/>lcid,<sp/>upper_cn,<sp/>buffer_state_notif),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>cfg(config),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>mod(<ref refid="namespacesrsgnb_1a1eaed18b62e5e415ab28856a8b091e25" kindref="member">cardinality</ref>(to_number(cfg.sn_field_length))),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>tx_window_size(<ref refid="namespacesrsgnb_1ad93ba81b397ec62192f1fa75e6540a0b" kindref="member">window_size</ref>(to_number(cfg.sn_field_length))),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>tx_window(create_tx_window(cfg.sn_field_length)),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>head_min_size(rlc_am_pdu_header_min_size(cfg.sn_field_length)),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>head_max_size(rlc_am_pdu_header_max_size(cfg.sn_field_length)),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>poll_retransmit_timer(timers.create_unique_timer())</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>timer<sp/>t_poll_retransmission<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>srsgnb_assert(poll_retransmit_timer.is_valid(),<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>RLC<sp/>RX<sp/>AM:<sp/>timers<sp/>not<sp/>configured&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>configure<sp/>t_poll_retransmission<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg.t_poll_retx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>poll_retransmit_timer.set(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cfg.t_poll_retx),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](uint32_t<sp/>timerid)<sp/>{<sp/>timer_expired(timerid);<sp/>});</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TS<sp/>38.322<sp/>v16.2.0<sp/>Sec.<sp/>5.2.3.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classsrsgnb_1_1rlc__tx__am__entity_1aefd48f6a90b1f4de6f701feea72d50b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1aefd48f6a90b1f4de6f701feea72d50b9" kindref="member">rlc_tx_am_entity::handle_sdu</ref>(<ref refid="structsrsgnb_1_1rlc__sdu" kindref="compound">rlc_sdu</ref><sp/>sdu)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sdu_length<sp/>=<sp/>sdu.buf.length();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>logger.log_info(sdu.buf.begin(),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdu.buf.end(),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Tx<sp/>SDU<sp/>(length:<sp/>{}<sp/>B,<sp/>PDCP<sp/>SN:<sp/>{},<sp/>enqueued<sp/>SDUs:<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdu.buf.length(),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdu.pdcp_sn,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdu_queue.size_sdus());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdu_queue.write(sdu))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics_add_sdus(1,<sp/>sdu_length);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_warning(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Dropped<sp/>Tx<sp/>SDU<sp/>(length:<sp/>{}<sp/>B,<sp/>PDCP<sp/>SN:<sp/>{},<sp/>enqueued<sp/>SDUs:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>sdu_length,<sp/>sdu.pdcp_sn,<sp/>sdu_queue.size_sdus());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics_add_lost_sdus(1);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TS<sp/>38.322<sp/>v16.2.0<sp/>Sec.<sp/>5.2.3.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classsrsgnb_1_1rlc__tx__am__entity_1a722242b95fd712889bb30761bf9383c8" refkind="member"><highlight class="normal"><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a722242b95fd712889bb30761bf9383c8" kindref="member">rlc_tx_am_entity::pull_pdu</ref>(uint32_t<sp/>nof_bytes)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;MAC<sp/>opportunity<sp/>-<sp/>bytes={},<sp/>tx_window<sp/>size={}<sp/>PDUs&quot;</highlight><highlight class="normal">,<sp/>nof_bytes,<sp/>tx_window-&gt;size());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tx<sp/>STATUS<sp/>if<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_provider-&gt;status_report_required())<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1rlc__am__status__pdu" kindref="compound">rlc_am_status_pdu</ref><sp/>status_pdu<sp/>=<sp/>status_provider-&gt;get_status_pdu();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdu;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>status_pdu.pack(pdu);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Status<sp/>PDU<sp/>built<sp/>-<sp/>{}<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>pdu.<ref refid="classsrsgnb_1_1byte__buffer_1a69d1b655e9e1cd9997eac6dce6afc23b" kindref="member">length</ref>());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref>(std::move(pdu));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retransmit<sp/>if<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>retx_queue.empty())<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_info(</highlight><highlight class="stringliteral">&quot;Re-transmission<sp/>required.<sp/>Retransmission<sp/>queue<sp/>size:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>retx_queue.size());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>build_retx_pdu(nof_bytes);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>remaining<sp/>segment,<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sn_under_segmentation<sp/>!=<sp/><ref refid="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" kindref="member">INVALID_RLC_SN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_window-&gt;has_sn(sn_under_segmentation))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>build_continuation_sdu_segment((*tx_window)[sn_under_segmentation],<sp/>nof_bytes);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sn_under_segmentation<sp/>=<sp/><ref refid="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" kindref="member">INVALID_RLC_SN</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger.log_error(</highlight><highlight class="stringliteral">&quot;SDU<sp/>currently<sp/>being<sp/>segmented<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>tx_window.<sp/>Aborting<sp/>segmentation<sp/>SN={}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn_under_segmentation);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attempt<sp/>to<sp/>send<sp/>next<sp/>SDU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>there<sp/>is<sp/>something<sp/>to<sp/>TX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdu_queue.is_empty())<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;No<sp/>data<sp/>available<sp/>to<sp/>be<sp/>sent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1af8fa36c12d7476fb613faa0ca8f447fa" kindref="member">build_new_pdu</ref>(nof_bytes);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classsrsgnb_1_1rlc__tx__am__entity_1af8fa36c12d7476fb613faa0ca8f447fa" refkind="member"><highlight class="normal"><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1af8fa36c12d7476fb613faa0ca8f447fa" kindref="member">rlc_tx_am_entity::build_new_pdu</ref>(uint32_t<sp/>nof_bytes)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nof_bytes<sp/>&lt;=<sp/>head_min_size)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>for<sp/>payload<sp/>plus<sp/>header.<sp/>nof_bytes={}&quot;</highlight><highlight class="normal">,<sp/>nof_bytes);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>build<sp/>any<sp/>more<sp/>PDU<sp/>if<sp/>window<sp/>is<sp/>already<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_window-&gt;full())<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_warning(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>build<sp/>data<sp/>PDU<sp/>-<sp/>Tx<sp/>window<sp/>full.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>new<sp/>SDU<sp/>from<sp/>TX<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1rlc__sdu" kindref="compound">rlc_sdu</ref><sp/>sdu;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>from<sp/>RLC<sp/>SDU<sp/>queue.<sp/>Queue<sp/>size<sp/>{}<sp/>SDUs<sp/>({}<sp/>bytes)&quot;</highlight><highlight class="normal">,<sp/>sdu_queue.size_sdus(),<sp/>sdu_queue.size_bytes());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>sdu_queue.read(sdu))<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;No<sp/>SDUs<sp/>left<sp/>in<sp/>the<sp/>tx<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Read<sp/>RLC<sp/>SDU<sp/>-<sp/>RLC_SN={},<sp/>PDCP_SN={},<sp/>{}<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>,<sp/>sdu.pdcp_sn,<sp/>sdu.buf.length());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>newly<sp/>assigned<sp/>SN<sp/>into<sp/>window<sp/>and<sp/>use<sp/>reference<sp/>for<sp/>in-place<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>from<sp/>now<sp/>on,<sp/>we<sp/>can&apos;t<sp/>return<sp/>from<sp/>this<sp/>function<sp/>anymore<sp/>before<sp/>increasing<sp/>tx_next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1rlc__tx__amd__pdu__box" kindref="compound">rlc_tx_amd_pdu_box</ref>&amp;<sp/>tx_pdu<sp/>=<sp/>tx_window-&gt;add_pdu(st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>tx_pdu.pdcp_sn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sdu.pdcp_sn;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>tx_pdu.sdu<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::move(sdu.buf);<sp/></highlight><highlight class="comment">//<sp/>Move<sp/>SDU<sp/>into<sp/>TX<sp/>window<sp/>SDU<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Segment<sp/>new<sp/>SDU<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_pdu.sdu.length()<sp/>+<sp/>head_min_size<sp/>&gt;<sp/>nof_bytes)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_info(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>build<sp/>PDU<sp/>segment<sp/>from<sp/>SDU.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1af71491ffa5dda713543171811ade22fb" kindref="member">build_new_sdu_segment</ref>(tx_pdu,<sp/>nof_bytes);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>logger.log_info(</highlight><highlight class="stringliteral">&quot;Creating<sp/>PDU.<sp/>Tx<sp/>SDU<sp/>({}<sp/>B),<sp/>nof_bytes={}<sp/>B<sp/>&quot;</highlight><highlight class="normal">,<sp/>tx_pdu.sdu.length(),<sp/>nof_bytes);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1rlc__am__pdu__header" kindref="compound">rlc_am_pdu_header</ref><sp/>hdr<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a1e660013e830afa28cc362eb05251478" kindref="member">dc</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rlc_dc_field::data;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a601db6dfe465de0f2f088d669bd2c5bc" kindref="member">p</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a2bba6bbf36fd7f28fd9aeb624fa3f085" kindref="member">get_polling_bit</ref>(st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sdu.buf.length());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1af26c05583708bb42e7647b5a76f895fc" kindref="member">si</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rlc_si_field::full_sdu;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a1efc527a5fc9c5267ef8bd72c331e5d6" kindref="member">sn_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1a90c5f7e2936cd601022ae08f3ddd73c6" kindref="member">sn_field_length</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a72bc6667f91be6889923fd3253edde3b" kindref="member">sn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>tx_pdu.header<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>hdr;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;AMD<sp/>PDU<sp/>header:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>hdr);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pack<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref><sp/>header_buf<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rlc_am_write_data_pdu_header(hdr,<sp/>header_buf))<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>actually,<sp/>pack<sp/>function<sp/>always<sp/>returns<sp/>true,<sp/>so<sp/>we<sp/>never<sp/>come<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>pack<sp/>AMD<sp/>PDU<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assemble<sp/>PDU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/>pdu_buf<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>pdu_buf.push_front(std::move(header_buf));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>pdu_buf.push_back(sdu.buf);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Created<sp/>RLC<sp/>PDU<sp/>-<sp/>{}<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>pdu_buf.length());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>TX<sp/>Next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref><sp/>=<sp/>(st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref><sp/>+<sp/>1)<sp/>%<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a39f9ed8e5334a9e25d4dcd6f624e8803" kindref="member">mod</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pdu_buf;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classsrsgnb_1_1rlc__tx__am__entity_1af71491ffa5dda713543171811ade22fb" refkind="member"><highlight class="normal"><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1af71491ffa5dda713543171811ade22fb" kindref="member">rlc_tx_am_entity::build_new_sdu_segment</ref>(<ref refid="structsrsgnb_1_1rlc__tx__amd__pdu__box" kindref="compound">rlc_tx_amd_pdu_box</ref>&amp;<sp/>tx_pdu,<sp/>uint32_t<sp/>nof_bytes)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>logger.log_info(</highlight><highlight class="stringliteral">&quot;Creating<sp/>new<sp/>PDU<sp/>segment.<sp/>Tx<sp/>SDU<sp/>({}<sp/>B),<sp/>nof_bytes={}<sp/>B<sp/>&quot;</highlight><highlight class="normal">,<sp/>tx_pdu.sdu.length(),<sp/>nof_bytes);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check:<sp/>can<sp/>this<sp/>SDU<sp/>be<sp/>sent<sp/>this<sp/>in<sp/>a<sp/>single<sp/>PDU?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tx_pdu.sdu.length()<sp/>+<sp/>head_min_size)<sp/>&lt;=<sp/>nof_bytes)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_error(</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>build_new_sdu_segment(),<sp/>but<sp/>there<sp/>are<sp/>enough<sp/>bytes<sp/>to<sp/>tx<sp/>in<sp/>a<sp/>single<sp/>PDU.<sp/>Tx<sp/>SDU<sp/>({}<sp/>B),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nof_bytes={}<sp/>B&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx_pdu.sdu.length(),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nof_bytes);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check:<sp/>can<sp/>this<sp/>SDU<sp/>be<sp/>sent<sp/>considering<sp/>header<sp/>overhead?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nof_bytes<sp/>&lt;=<sp/>head_min_size)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Small<sp/>header,<sp/>since<sp/>first<sp/>segment<sp/>has<sp/>no<sp/>SO<sp/>field,<sp/>ref:<sp/>TS<sp/>38.322<sp/>Sec.<sp/>6.2.2.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_info(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>build<sp/>new<sp/>sdu_segment,<sp/>there<sp/>are<sp/>not<sp/>enough<sp/>bytes<sp/>allocated<sp/>to<sp/>tx<sp/>header<sp/>plus<sp/>data.<sp/>nof_bytes={},<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;head_min_size={}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nof_bytes,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head_min_size);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>uint32_t<sp/>segment_payload_len<sp/>=<sp/>nof_bytes<sp/>-<sp/>head_min_size;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>SN<sp/>of<sp/>SDU<sp/>under<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>before<sp/>calculating<sp/>the<sp/>polling<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>make<sp/>sure<sp/>we<sp/>check<sp/>correctly<sp/>that<sp/>the<sp/>buffers<sp/>are<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>sn_under_segmentation<sp/>=<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1rlc__am__pdu__header" kindref="compound">rlc_am_pdu_header</ref><sp/>hdr<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a1e660013e830afa28cc362eb05251478" kindref="member">dc</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rlc_dc_field::data;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a601db6dfe465de0f2f088d669bd2c5bc" kindref="member">p</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a2bba6bbf36fd7f28fd9aeb624fa3f085" kindref="member">get_polling_bit</ref>(st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>segment_payload_len);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1af26c05583708bb42e7647b5a76f895fc" kindref="member">si</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rlc_si_field::first_segment;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a1efc527a5fc9c5267ef8bd72c331e5d6" kindref="member">sn_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1a90c5f7e2936cd601022ae08f3ddd73c6" kindref="member">sn_field_length</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a72bc6667f91be6889923fd3253edde3b" kindref="member">sn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1aa57a130dedebfec1c0666142afd6eb85" kindref="member">so</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>tx_pdu.next_so;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>tx_pdu.header<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>hdr;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;AMD<sp/>PDU<sp/>header:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>hdr);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pack<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref><sp/>header_buf<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rlc_am_write_data_pdu_header(hdr,<sp/>header_buf))<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>actually,<sp/>pack<sp/>function<sp/>always<sp/>returns<sp/>true,<sp/>so<sp/>we<sp/>never<sp/>come<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>pack<sp/>AMD<sp/>PDU<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assemble<sp/>PDU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/>pdu_buf<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>pdu_buf.push_front(std::move(header_buf));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>pdu_buf.push_back(tx_pdu.sdu.<ref refid="classsrsgnb_1_1byte__buffer__slice_1aaf4046087e8623465b0f957fd193b1e8" kindref="member">make_slice</ref>(hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1aa57a130dedebfec1c0666142afd6eb85" kindref="member">so</ref>,<sp/>segment_payload_len));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Created<sp/>RLC<sp/>PDU<sp/>segment<sp/>-<sp/>{}<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>pdu_buf.length());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>segmentation<sp/>progress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>tx_pdu.next_so<sp/>+=<sp/>segment_payload_len;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pdu_buf;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/>rlc_tx_am_entity::build_continuation_sdu_segment(<ref refid="structsrsgnb_1_1rlc__tx__amd__pdu__box" kindref="compound">rlc_tx_amd_pdu_box</ref>&amp;<sp/>tx_pdu,<sp/>uint32_t<sp/>nof_bytes)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>logger.log_info(</highlight><highlight class="stringliteral">&quot;Creating<sp/>continued<sp/>PDU<sp/>segment.<sp/>Tx<sp/>SDU<sp/>({}<sp/>B),<sp/>nof_bytes={}<sp/>B<sp/>&quot;</highlight><highlight class="normal">,<sp/>tx_pdu.sdu.length(),<sp/>nof_bytes);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check:<sp/>is<sp/>there<sp/>an<sp/>initial<sp/>SDU<sp/>segment?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_pdu.next_so<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_error(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;build_continuation_sdu_segment<sp/>was<sp/>called,<sp/>but<sp/>there<sp/>was<sp/>no<sp/>initial<sp/>segment.<sp/>SN={},<sp/>Tx<sp/>SDU<sp/>({}<sp/>B),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nof_bytes={}<sp/>B<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn_under_segmentation,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx_pdu.sdu.length(),</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nof_bytes);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>sn_under_segmentation<sp/>=<sp/><ref refid="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" kindref="member">INVALID_RLC_SN</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;continuing<sp/>SDU<sp/>segment.<sp/>SN={},<sp/>next_so={}&quot;</highlight><highlight class="normal">,<sp/>sn_under_segmentation,<sp/>tx_pdu.next_so);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check:<sp/>last<sp/>byte<sp/>must<sp/>be<sp/>smaller<sp/>than<sp/>SDU<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_pdu.next_so<sp/>&gt;=<sp/>tx_pdu.sdu.length())<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_error(</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;segmentation<sp/>progress<sp/>exceeds<sp/>SDU<sp/>length.<sp/>SDU<sp/>len={}<sp/>B,<sp/>next_so={}<sp/>B&quot;</highlight><highlight class="normal">,<sp/>tx_pdu.sdu.length(),<sp/>tx_pdu.next_so);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>sn_under_segmentation<sp/>=<sp/><ref refid="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" kindref="member">INVALID_RLC_SN</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check:<sp/>can<sp/>this<sp/>SDU<sp/>be<sp/>sent<sp/>considering<sp/>header<sp/>overhead?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nof_bytes<sp/>&lt;=<sp/>head_max_size)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Large<sp/>header,<sp/>since<sp/>continued<sp/>segment<sp/>has<sp/>SO<sp/>field,<sp/>ref:<sp/>TS<sp/>38.322<sp/>Sec.<sp/>6.2.2.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_info(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>build<sp/>new<sp/>sdu_segment,<sp/>there<sp/>are<sp/>not<sp/>enough<sp/>bytes<sp/>allocated<sp/>to<sp/>tx<sp/>header<sp/>plus<sp/>data.<sp/>nof_bytes={},<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;head_max_size={}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nof_bytes,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head_max_size);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>segment_payload_len<sp/>=<sp/>tx_pdu.sdu.length()<sp/>-<sp/>tx_pdu.next_so;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="namespacesrsgnb_1a0a246fa8059639a178e17af4df90c173" kindref="member">rlc_si_field</ref><sp/>si<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment_payload_len<sp/>+<sp/>head_max_size<sp/>&gt;<sp/>nof_bytes)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_info(</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;grant<sp/>is<sp/>not<sp/>large<sp/>enough<sp/>for<sp/>remaining<sp/>SDU<sp/>bytes.<sp/>SDU<sp/>bytes<sp/>left<sp/>{},<sp/>head_max_size={},<sp/>nof_bytes<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_payload_len,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head_max_size,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nof_bytes);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>si<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rlc_si_field::middle_segment;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_payload_len<sp/>=<sp/>nof_bytes<sp/>-<sp/>head_max_size;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_info(</highlight><highlight class="stringliteral">&quot;grant<sp/>is<sp/>large<sp/>enough<sp/>for<sp/>remaining<sp/>SDU<sp/>bytes.<sp/>SDU<sp/>bytes<sp/>left<sp/>{},<sp/>head_max_size={},<sp/>nof_bytes<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_payload_len,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head_max_size,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nof_bytes);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>si<sp/>=<sp/>rlc_si_field::last_segment;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>SN<sp/>of<sp/>SDU<sp/>under<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>sn_under_segmentation<sp/>=<sp/><ref refid="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" kindref="member">INVALID_RLC_SN</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1rlc__am__pdu__header" kindref="compound">rlc_am_pdu_header</ref><sp/>hdr<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a1e660013e830afa28cc362eb05251478" kindref="member">dc</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rlc_dc_field::data;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a601db6dfe465de0f2f088d669bd2c5bc" kindref="member">p</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a2bba6bbf36fd7f28fd9aeb624fa3f085" kindref="member">get_polling_bit</ref>(st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>segment_payload_len);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1af26c05583708bb42e7647b5a76f895fc" kindref="member">si</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>si;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a1efc527a5fc9c5267ef8bd72c331e5d6" kindref="member">sn_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1a90c5f7e2936cd601022ae08f3ddd73c6" kindref="member">sn_field_length</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1a72bc6667f91be6889923fd3253edde3b" kindref="member">sn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1aa57a130dedebfec1c0666142afd6eb85" kindref="member">so</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>tx_pdu.next_so;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>tx_pdu.header<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>hdr;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;AMD<sp/>PDU<sp/>header:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>hdr);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pack<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref><sp/>header_buf<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rlc_am_write_data_pdu_header(hdr,<sp/>header_buf))<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>actually,<sp/>pack<sp/>function<sp/>always<sp/>returns<sp/>true,<sp/>so<sp/>we<sp/>never<sp/>come<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>pack<sp/>AMD<sp/>PDU<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assemble<sp/>PDU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/>pdu_buf<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>pdu_buf.push_front(std::move(header_buf));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>pdu_buf.push_back(tx_pdu.sdu.<ref refid="classsrsgnb_1_1byte__buffer__slice_1aaf4046087e8623465b0f957fd193b1e8" kindref="member">make_slice</ref>(hdr.<ref refid="structsrsgnb_1_1rlc__am__pdu__header_1aa57a130dedebfec1c0666142afd6eb85" kindref="member">so</ref>,<sp/>segment_payload_len));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Created<sp/>RLC<sp/>PDU<sp/>segment<sp/>-<sp/>{}<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>pdu_buf.length());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>segmentation<sp/>progress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>tx_pdu.next_so<sp/>+=<sp/>segment_payload_len;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>TX<sp/>Next<sp/>(when<sp/>segmentation<sp/>has<sp/>finished)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si<sp/>==<sp/>rlc_si_field::last_segment)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref><sp/>=<sp/>(st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1af8b0fd72d1b866b8e8305251f46986e9" kindref="member">tx_next</ref><sp/>+<sp/>1)<sp/>%<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a39f9ed8e5334a9e25d4dcd6f624e8803" kindref="member">mod</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pdu_buf;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/>rlc_tx_am_entity::build_retx_pdu(uint32_t<sp/>nof_bytes)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/>rlc_tx_am_entity::build_retx_pdu_without_segmentation(<ref refid="structsrsgnb_1_1rlc__tx__amd__retx" kindref="compound">rlc_tx_amd_retx</ref>&amp;<sp/>retx,<sp/>uint32_t<sp/>nof_bytes)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><ref refid="classsrsgnb_1_1byte__buffer__slice__chain" kindref="compound">byte_buffer_slice_chain</ref><sp/>rlc_tx_am_entity::build_retx_pdu_with_segmentation(<ref refid="structsrsgnb_1_1rlc__tx__amd__retx" kindref="compound">rlc_tx_amd_retx</ref>&amp;<sp/>retx,<sp/>uint32_t<sp/>nof_bytes)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TS<sp/>38.322<sp/>v16.2.0<sp/>Sec<sp/>5.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classsrsgnb_1_1rlc__tx__am__entity_1ac610ab8a5e2fd8da6bfcf7e5007988a7" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1ac610ab8a5e2fd8da6bfcf7e5007988a7" kindref="member">rlc_tx_am_entity::get_buffer_state</ref>()</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_buffer_state_nolock();</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classsrsgnb_1_1rlc__tx__am__entity_1a731ccd62cbf00ca2032822816af7cf9b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a731ccd62cbf00ca2032822816af7cf9b" kindref="member">rlc_tx_am_entity::handle_buffer_state_update</ref>()</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbytes" kindref="compound">bytes</ref><sp/>=<sp/>get_buffer_state_nolock();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>buffer_state_notifier.<ref refid="classsrsgnb_1_1rlc__tx__buffer__state__update__notifier_1a928e0d6dcbfb7a0a3320cae973e17932" kindref="member">on_buffer_state_update</ref>(<ref refid="classbytes" kindref="compound">bytes</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">uint32_t<sp/>rlc_tx_am_entity::get_buffer_state_nolock()</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>bytes<sp/>needed<sp/>to<sp/>tx<sp/>all<sp/>queued<sp/>SDUs<sp/>+<sp/>each<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>uint32_t<sp/>queue_bytes<sp/>=<sp/>sdu_queue.size_bytes()<sp/>+<sp/>sdu_queue.size_sdus()<sp/>*<sp/>head_min_size;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>bytes<sp/>needed<sp/>to<sp/>tx<sp/>SDU<sp/>under<sp/>segmentation<sp/>+<sp/>header<sp/>(if<sp/>applicable)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>uint32_t<sp/>segment_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sn_under_segmentation<sp/>!=<sp/><ref refid="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" kindref="member">INVALID_RLC_SN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_window-&gt;has_sn(sn_under_segmentation))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsrsgnb_1_1rlc__tx__amd__pdu__box" kindref="compound">rlc_tx_amd_pdu_box</ref>&amp;<sp/>tx_pdu<sp/>=<sp/>(*tx_window)[sn_under_segmentation];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segment_bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>tx_pdu.sdu.length()<sp/>-<sp/>tx_pdu.next_so<sp/>+<sp/>head_max_size;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger.log_info(</highlight><highlight class="stringliteral">&quot;Buffer<sp/>state:<sp/>ignore<sp/>SN<sp/>under<sp/>segmentation:<sp/>SN={}<sp/>not<sp/>in<sp/>tx_window&quot;</highlight><highlight class="normal">,<sp/>sn_under_segmentation);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>SDU<sp/>under<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>retx<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>uint32_t<sp/>retx_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>status<sp/>report<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>uint32_t<sp/>status_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queue_bytes<sp/>+<sp/>segment_bytes<sp/>+<sp/>retx_bytes<sp/>+<sp/>status_bytes;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="classsrsgnb_1_1rlc__tx__am__entity_1a2bba6bbf36fd7f28fd9aeb624fa3f085" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a2bba6bbf36fd7f28fd9aeb624fa3f085" kindref="member">rlc_tx_am_entity::get_polling_bit</ref>(uint32_t<sp/>sn,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_retx,<sp/>uint32_t<sp/>payload_size)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Checking<sp/>poll<sp/>bit<sp/>requirements<sp/>for<sp/>PDU.<sp/>SN={},<sp/>retx={},<sp/>sdu_bytes={},<sp/>POLL_SN={}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_retx<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>payload_size,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e87e66de39bba1da8cd8ca248a7050f" kindref="member">poll_sn</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>AMD<sp/>PDU<sp/>or<sp/>AMD<sp/>PDU<sp/>segment<sp/>that<sp/>has<sp/>not<sp/>been<sp/>previoulsy<sp/>tranmitted:</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>increment<sp/>PDU_WITHOUT_POLL<sp/>by<sp/>one;</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>increment<sp/>BYTE_WITHOUT_POLL<sp/>by<sp/>every<sp/>new<sp/>byte<sp/>of<sp/>Data<sp/>field<sp/>element<sp/>that<sp/>it<sp/>maps<sp/>to<sp/>the<sp/>Data<sp/>field<sp/>of<sp/>the<sp/>AMD</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/>*<sp/>PDU;</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>if<sp/>PDU_WITHOUT_POLL<sp/>&gt;=<sp/>pollPDU;<sp/>or</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>if<sp/>BYTE_WITHOUT_POLL<sp/>&gt;=<sp/>pollByte:</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>-<sp/>include<sp/>a<sp/>poll<sp/>in<sp/>the<sp/>AMD<sp/>PDU<sp/>as<sp/>described<sp/>below.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>uint8_t<sp/>poll<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_retx)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e34da4b2c7e833578f915e42049f8e4" kindref="member">pdu_without_poll</ref>++;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a4031913b049f7f519501c04410368083" kindref="member">byte_without_poll</ref><sp/>+=<sp/>payload_size;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1ae6a78fba579e6344bd50c2df663bd999" kindref="member">poll_pdu</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e34da4b2c7e833578f915e42049f8e4" kindref="member">pdu_without_poll</ref><sp/>&gt;=<sp/>(uint32_t)cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1ae6a78fba579e6344bd50c2df663bd999" kindref="member">poll_pdu</ref>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>poll<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Setting<sp/>poll<sp/>bit<sp/>due<sp/>to<sp/>PollPDU.<sp/>SN={},<sp/>POLL_SN={}&quot;</highlight><highlight class="normal">,<sp/>sn,<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e87e66de39bba1da8cd8ca248a7050f" kindref="member">poll_sn</ref>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1ae1e65c0214f5dc55d1d0cf8387d25085" kindref="member">poll_byte</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a4031913b049f7f519501c04410368083" kindref="member">byte_without_poll</ref><sp/>&gt;=<sp/>(uint32_t)cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1ae1e65c0214f5dc55d1d0cf8387d25085" kindref="member">poll_byte</ref>)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>poll<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Setting<sp/>poll<sp/>bit<sp/>due<sp/>to<sp/>PollBYTE.<sp/>SN={},<sp/>POLL_SN={}&quot;</highlight><highlight class="normal">,<sp/>sn,<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e87e66de39bba1da8cd8ca248a7050f" kindref="member">poll_sn</ref>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>if<sp/>both<sp/>the<sp/>transmission<sp/>buffer<sp/>and<sp/>the<sp/>retransmission<sp/>buffer<sp/>becomes<sp/>empty</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>(excluding<sp/>transmitted<sp/>RLC<sp/>SDUs<sp/>or<sp/>RLC<sp/>SDU<sp/>segments<sp/>awaiting<sp/>acknowledgements)</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>after<sp/>the<sp/>transmission<sp/>of<sp/>the<sp/>AMD<sp/>PDU;<sp/>or</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>if<sp/>no<sp/>new<sp/>RLC<sp/>SDU<sp/>can<sp/>be<sp/>transmitted<sp/>after<sp/>the<sp/>transmission<sp/>of<sp/>the<sp/>AMD<sp/>PDU<sp/>(e.g.<sp/>due<sp/>to<sp/>window<sp/>stalling);</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>include<sp/>a<sp/>poll<sp/>in<sp/>the<sp/>AMD<sp/>PDU<sp/>as<sp/>described<sp/>below.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sdu_queue.is_empty()<sp/>&amp;&amp;<sp/>retx_queue.empty()<sp/>&amp;&amp;<sp/>sn_under_segmentation<sp/>==<sp/><ref refid="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" kindref="member">INVALID_RLC_SN</ref>)<sp/>||<sp/>tx_window-&gt;full())<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Setting<sp/>poll<sp/>bit<sp/>due<sp/>to<sp/>empty<sp/>buffers/inablity<sp/>to<sp/>TX.<sp/>SN={},<sp/>POLL_SN={}&quot;</highlight><highlight class="normal">,<sp/>sn,<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e87e66de39bba1da8cd8ca248a7050f" kindref="member">poll_sn</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>poll<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>If<sp/>poll<sp/>bit<sp/>is<sp/>included:</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>set<sp/>PDU_WITHOUT_POLL<sp/>to<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>set<sp/>BYTE_WITHOUT_POLL<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poll<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e34da4b2c7e833578f915e42049f8e4" kindref="member">pdu_without_poll</ref><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a4031913b049f7f519501c04410368083" kindref="member">byte_without_poll</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>set<sp/>POLL_SN<sp/>to<sp/>the<sp/>highest<sp/>SN<sp/>of<sp/>the<sp/>AMD<sp/>PDU<sp/>among<sp/>the<sp/>AMD<sp/>PDUs<sp/>submitted<sp/>to<sp/>lower<sp/>layer;</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>if<sp/>t-PollRetransmit<sp/>is<sp/>not<sp/>running:</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>start<sp/>t-PollRetransmit.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>else:</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>restart<sp/>t-PollRetransmit.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_retx)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>an<sp/>RETX,<sp/>but<sp/>a<sp/>new<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>such<sp/>it<sp/>should<sp/>be<sp/>the<sp/>highest<sp/>SN<sp/>submitted<sp/>to<sp/>the<sp/>lower<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e87e66de39bba1da8cd8ca248a7050f" kindref="member">poll_sn</ref><sp/>=<sp/>sn;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Setting<sp/>new<sp/>POLL_SN.<sp/>POLL_SN={}&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg.<ref refid="structsrsgnb_1_1rlc__tx__am__config_1a4b625f0ba778414cd0821c7df4308b2c" kindref="member">t_poll_retx</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1ac74e43272e640075fe9a5aa607fffa93" kindref="member">poll_retransmit_timer</ref>.<ref refid="classsrsgnb_1_1unique__timer_1acfc060efe96ca206383e824697101d92" kindref="member">is_running</ref>())<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1ac74e43272e640075fe9a5aa607fffa93" kindref="member">poll_retransmit_timer</ref>.<ref refid="classsrsgnb_1_1unique__timer_1a4b169309f8b5fd965a0dec15544ae2bc" kindref="member">run</ref>();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1ac74e43272e640075fe9a5aa607fffa93" kindref="member">poll_retransmit_timer</ref>.<ref refid="classsrsgnb_1_1unique__timer_1aaf7fbaf8c33be557b958f50f7ce09cf0" kindref="member">stop</ref>();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1ac74e43272e640075fe9a5aa607fffa93" kindref="member">poll_retransmit_timer</ref>.<ref refid="classsrsgnb_1_1unique__timer_1a4b169309f8b5fd965a0dec15544ae2bc" kindref="member">run</ref>();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger.log_debug(</highlight><highlight class="stringliteral">&quot;Started<sp/>t-PollRetransmit.<sp/>POLL_SN={}&quot;</highlight><highlight class="normal">,<sp/>st.<ref refid="structsrsgnb_1_1rlc__tx__am__state_1a5e87e66de39bba1da8cd8ca248a7050f" kindref="member">poll_sn</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>poll;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rlc_tx_am_entity::timer_expired(uint32_t<sp/>timeout_id)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="classsrsgnb_1_1rlc__tx__am__entity_1a153aa2dbe17e0bd6bdf1230921fd40d6" refkind="member"><highlight class="normal">std::unique_ptr&lt;rlc_pdu_window_base&lt;rlc_tx_amd_pdu_box&gt;&gt;<sp/><ref refid="classsrsgnb_1_1rlc__tx__am__entity_1a153aa2dbe17e0bd6bdf1230921fd40d6" kindref="member">rlc_tx_am_entity::create_tx_window</ref>(<ref refid="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241" kindref="member">rlc_am_sn_size</ref><sp/>sn_size)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;rlc_pdu_window_base&lt;rlc_tx_amd_pdu_box&gt;&gt;<sp/>tx_window;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(sn_size)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>rlc_am_sn_size::size12bits:</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx_window<sp/>=</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;<ref refid="structsrsgnb_1_1rlc__pdu__window" kindref="compound">rlc_pdu_window</ref>&lt;<ref refid="structsrsgnb_1_1rlc__tx__amd__pdu__box" kindref="compound">rlc_tx_amd_pdu_box</ref>,<sp/><ref refid="namespacesrsgnb_1ad93ba81b397ec62192f1fa75e6540a0b" kindref="member">window_size</ref>(to_number(rlc_am_sn_size::size12bits))&gt;&gt;();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>rlc_am_sn_size::size18bits:</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx_window<sp/>=</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;<ref refid="structsrsgnb_1_1rlc__pdu__window" kindref="compound">rlc_pdu_window</ref>&lt;<ref refid="structsrsgnb_1_1rlc__tx__amd__pdu__box" kindref="compound">rlc_tx_amd_pdu_box</ref>,<sp/><ref refid="namespacesrsgnb_1ad93ba81b397ec62192f1fa75e6540a0b" kindref="member">window_size</ref>(to_number(rlc_am_sn_size::size18bits))&gt;&gt;();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srsgnb_assertion_failure(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>tx_window:<sp/>unsupported<sp/>SN<sp/>field<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx_window;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/rlc/rlc_tx_am_entity.cpp"/>
  </compounddef>
</doxygen>
