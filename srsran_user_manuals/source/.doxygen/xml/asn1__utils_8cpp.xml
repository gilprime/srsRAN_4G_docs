<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="asn1__utils_8cpp" kind="file" language="C++">
    <compoundname>asn1_utils.cpp</compoundname>
    <includes local="yes">srsgnb/asn1/asn1_utils.h</includes>
    <incdepgraph>
      <node id="1">
        <label>lib/asn1/asn1_utils.cpp</label>
        <link refid="asn1__utils_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>srsgnb/asn1/asn1_utils.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceasn1">asn1</innernamespace>
    <innernamespace refid="namespaceasn1_1_1bitstring__utils">asn1::bitstring_utils</innernamespace>
    <innernamespace refid="namespaceasn1_1_1asn__string__utils">asn1::asn_string_utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/asn1/asn1_utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asn1<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging</highlight></codeline>
<codeline lineno="17"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>warn_assert(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>log_warning(</highlight><highlight class="stringliteral">&quot;Assertion<sp/>in<sp/>[{}][{}]<sp/>failed.&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/>lineno);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invalid_enum_number(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>provided<sp/>enum<sp/>value={}<sp/>of<sp/>type<sp/>{}<sp/>cannot<sp/>be<sp/>translated<sp/>into<sp/>a<sp/>number&quot;</highlight><highlight class="normal">,<sp/>value,<sp/>name);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assert_choice_type(uint32_t<sp/>val,<sp/>uint32_t<sp/>choice_id)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srsgnb_unlikely(val<sp/>!=<sp/>choice_id))<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>log_invalid_access_choice_id(val,<sp/>choice_id);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>error<sp/>handling</highlight></codeline>
<codeline lineno="40"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_error_code(SRSASN_CODE<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;[{}][{}]<sp/>Encoding<sp/>failure.&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/>line);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;[{}][{}]<sp/>Decoding<sp/>failure.&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/>line);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_warning(</highlight><highlight class="stringliteral">&quot;[{}][{}]<sp/>SRSASN_CODE={}<sp/>not<sp/>recognized.&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/>line,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)code);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>convert_enum_idx(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>array[],<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enum_val<sp/>&gt;=<sp/>nof_types)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enum_val<sp/>==<sp/>nof_types)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>enum<sp/>of<sp/>type<sp/>{}<sp/>was<sp/>not<sp/>initialized.&quot;</highlight><highlight class="normal">,<sp/>enum_type);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>enum<sp/>value={}<sp/>of<sp/>type<sp/>{}<sp/>is<sp/>not<sp/>valid.&quot;</highlight><highlight class="normal">,<sp/>enum_val,<sp/>enum_type);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array[enum_val];</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ItemType&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">ItemType<sp/>map_enum_number(ItemType*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enum_val<sp/>&gt;=<sp/>nof_types)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enum_val<sp/>==<sp/>nof_types)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>enum<sp/>of<sp/>type<sp/>{}<sp/>is<sp/>not<sp/>initialized.&quot;</highlight><highlight class="normal">,<sp/>enum_type);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>enum<sp/>value={}<sp/>of<sp/>type<sp/>{}<sp/>cannot<sp/>be<sp/>converted<sp/>to<sp/>a<sp/>number.&quot;</highlight><highlight class="normal">,<sp/>enum_val,<sp/>enum_type);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array[enum_val];</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t</highlight></codeline>
<codeline lineno="83"><highlight class="normal">map_enum_number&lt;const<sp/>uint8_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t</highlight></codeline>
<codeline lineno="85"><highlight class="normal">map_enum_number&lt;const<sp/>uint16_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="87"><highlight class="normal">map_enum_number&lt;const<sp/>uint32_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t</highlight></codeline>
<codeline lineno="89"><highlight class="normal">map_enum_number&lt;const<sp/>uint64_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t</highlight></codeline>
<codeline lineno="91"><highlight class="normal">map_enum_number&lt;const<sp/>int8_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t</highlight></codeline>
<codeline lineno="93"><highlight class="normal">map_enum_number&lt;const<sp/>int16_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t</highlight></codeline>
<codeline lineno="95"><highlight class="normal">map_enum_number&lt;const<sp/>int32_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t</highlight></codeline>
<codeline lineno="97"><highlight class="normal">map_enum_number&lt;const<sp/>int64_t&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">map_enum_number&lt;const<sp/>float&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>array,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>enum_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>enum_type);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_ref</highlight></codeline>
<codeline lineno="103"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_ref::distance_bytes()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="106"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(writer.length());</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_ref::distance()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="111"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8<sp/>*<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(writer.length())<sp/>-<sp/>(offset<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>1))<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">SRSASN_CODE<sp/>bit_ref::pack(uint64_t<sp/>val,<sp/>uint32_t<sp/>n_bits)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>srsgnb_assert(n_bits<sp/>&lt;<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>bits<sp/>passed<sp/>to<sp/>pack()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n_bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer.append(0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>mask<sp/>=<sp/>((1ul<sp/>&lt;&lt;<sp/>n_bits)<sp/>-<sp/>1ul);<sp/></highlight><highlight class="comment">//<sp/>bitmap<sp/>of<sp/>n_bits<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>val<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(8U<sp/>-<sp/>offset)<sp/>&gt;<sp/>n_bits)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>n_bits<sp/>&lt;<sp/>number<sp/>of<sp/>bits<sp/>left<sp/>in<sp/>current<sp/>byte<sp/>(ie,<sp/>last<sp/>iteration).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted_val<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val<sp/>&lt;&lt;<sp/>(8u<sp/>-<sp/>offset<sp/>-<sp/>n_bits));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer.back()<sp/>+=<sp/>shifted_val;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>n_bits;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case,<sp/>space<sp/>in<sp/>current<sp/>byte<sp/>is<sp/>lower<sp/>or<sp/>equal<sp/>to<sp/>n_bits<sp/>(ie,<sp/>not<sp/>the<sp/>last<sp/>iteration).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted_val<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val<sp/>&gt;&gt;<sp/>(n_bits<sp/>-<sp/>8u<sp/>+<sp/>offset));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer.back()<sp/>+=<sp/>shifted_val;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_bits<sp/>-=<sp/>8U<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">SRSASN_CODE<sp/>bit_ref::pack_bytes(<ref refid="classsrsgnb_1_1span" kindref="compound">srsgnb::span&lt;const uint8_t&gt;</ref><sp/><ref refid="classbytes" kindref="compound">bytes</ref>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbytes" kindref="compound">bytes</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aligned<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.append(<ref refid="classbytes" kindref="compound">bytes</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>:<sp/><ref refid="classbytes" kindref="compound">bytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pack(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">,<sp/>8U);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">SRSASN_CODE<sp/>bit_ref::pack_bytes(<ref refid="classsrsgnb_1_1byte__buffer__view" kindref="compound">srsgnb::byte_buffer_view</ref><sp/><ref refid="classbytes" kindref="compound">bytes</ref>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbytes" kindref="compound">bytes</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aligned<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.append(<ref refid="classbytes" kindref="compound">bytes</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>:<sp/><ref refid="classbytes" kindref="compound">bytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pack(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">,<sp/>8U);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">SRSASN_CODE<sp/>bit_ref::align_bytes_zero()</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cbit_ref::distance_bytes()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="180"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it<sp/>-<sp/>buffer.begin())<sp/>+<sp/>(offset<sp/>!=<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cbit_ref::distance()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="185"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)offset<sp/>+<sp/>8<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it<sp/>-<sp/>buffer.begin());</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cbit_ref::distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cbit_ref&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="190"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distance()<sp/>-<sp/>other.distance();</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">SRSASN_CODE<sp/>cbit_ref::unpack(T&amp;<sp/>val,<sp/>uint32_t<sp/>n_bits)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>srsgnb_assert(n_bits<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;unpack_bits()<sp/>only<sp/>supports<sp/>up<sp/>to<sp/>{}<sp/>bits&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n_bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uint32_t)(8<sp/>-<sp/>offset)<sp/>&gt;<sp/>n_bits)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>mask<sp/>=<sp/>(uint8_t)(1u<sp/>&lt;&lt;<sp/>(8u<sp/>-<sp/>offset))<sp/>-<sp/>(uint8_t)(1u<sp/>&lt;&lt;<sp/>(8u<sp/>-<sp/>offset<sp/>-<sp/>n_bits));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>((uint32_t)((*it)<sp/>&amp;<sp/>mask))<sp/>&gt;&gt;<sp/>(8u<sp/>-<sp/>offset<sp/>-<sp/>n_bits);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>n_bits;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((1u<sp/>&lt;&lt;<sp/>(8u<sp/>-<sp/>offset))<sp/>-<sp/>1u);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>((uint32_t)((*it)<sp/>&amp;<sp/>mask))<sp/>&lt;&lt;<sp/>(n_bits<sp/>-<sp/>8<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_bits<sp/>-=<sp/>8<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>buffer.end())<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;{}:<sp/>Buffer<sp/>size<sp/>limit<sp/>{}<sp/>was<sp/>achieved.&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>buffer.length());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>cbit_ref::unpack&lt;bool&gt;(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;,<sp/>uint32_t<sp/>n_bits);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>cbit_ref::unpack&lt;uint8_t&gt;(uint8_t&amp;,<sp/>uint32_t<sp/>n_bits);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>cbit_ref::unpack&lt;uint16_t&gt;(uint16_t&amp;,<sp/>uint32_t<sp/>n_bits);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>cbit_ref::unpack&lt;uint32_t&gt;(uint32_t&amp;,<sp/>uint32_t<sp/>n_bits);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>cbit_ref::unpack&lt;uint64_t&gt;(uint64_t&amp;,<sp/>uint32_t<sp/>n_bits);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">SRSASN_CODE<sp/>cbit_ref::unpack_bytes(<ref refid="classsrsgnb_1_1span" kindref="compound">srsgnb::span&lt;uint8_t&gt;</ref><sp/><ref refid="classbytes" kindref="compound">bytes</ref>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbytes" kindref="compound">bytes</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ptrdiff_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classbytes" kindref="compound">bytes</ref>.size())<sp/>&gt;<sp/>buffer.end()<sp/>-<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;unpack_bytes:<sp/>Buffer<sp/>size<sp/>limit<sp/>was<sp/>achieved&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aligned<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(buffer.begin(),<sp/>buffer.end(),<sp/><ref refid="classbytes" kindref="compound">bytes</ref>.begin());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>+=<sp/><ref refid="classbytes" kindref="compound">bytes</ref>.size();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unaligned<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classbytes" kindref="compound">bytes</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(unpack(<ref refid="classbytes" kindref="compound">bytes</ref>[i],<sp/>8));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">SRSASN_CODE<sp/>cbit_ref::align_bytes()</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>buffer.end())<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;{}:<sp/>Buffer<sp/>size<sp/>limit<sp/>{}<sp/>was<sp/>achieved.&quot;</highlight><highlight class="normal">,<sp/>__FUNCTION__,<sp/>buffer.length());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">SRSASN_CODE<sp/>cbit_ref::advance_bits(uint32_t<sp/>n_bits)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>uint32_t<sp/>extra_bits<sp/><sp/><sp/><sp/><sp/>=<sp/>(offset<sp/>+<sp/>n_bits)<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bytes_required<sp/>=<sp/>ceil_frac(offset<sp/>+<sp/>n_bits,<sp/>8U);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bytes_offset<sp/><sp/><sp/>=<sp/>(offset<sp/>+<sp/>n_bits)<sp/>/<sp/>8U;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_required<sp/>&gt;<sp/>buffer.end()<sp/>-<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;advance_bytes:<sp/>Buffer<sp/>size<sp/>limit<sp/>was<sp/>achieved&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>it<sp/>+=<sp/>bytes_offset;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>offset<sp/>=<sp/>extra_bits;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>ext<sp/>packing</highlight></codeline>
<codeline lineno="277"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">SRSASN_CODE<sp/>pack_unsupported_ext_flag(bit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ext)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bref.pack(ext,<sp/>1));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ext)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;ASN<sp/>extensions<sp/>not<sp/>currently<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">SRSASN_CODE<sp/>unpack_unsupported_ext_flag(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>ext,<sp/>cbit_ref&amp;<sp/>bref)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>SRSASN_CODE<sp/>ret<sp/>=<sp/>bref.unpack(ext,<sp/>1);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ext)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;ASN<sp/>extensions<sp/>not<sp/>currently<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>enum<sp/>packing</highlight></codeline>
<codeline lineno="301"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pack<sp/>without<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">SRSASN_CODE<sp/>pack_enum(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>enum_val,<sp/>uint32_t<sp/>nbits)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bref.pack(enum_val,<sp/>nbits);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pack<sp/>with<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">SRSASN_CODE<sp/>pack_enum(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>enum_val,<sp/>uint32_t<sp/>nbits,<sp/>uint32_t<sp/>nof_noext)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ext<sp/>=<sp/>enum_val<sp/>&gt;=<sp/>nof_noext;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bref.pack((</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)ext,<sp/>1));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>SRSASN_CODE<sp/>ret;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ext)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.pack(enum_val,<sp/>nbits);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>pack_norm_small_non_neg_whole_number(bref,<sp/>enum_val<sp/>-<sp/>nof_noext);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">SRSASN_CODE<sp/>pack_enum(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>e,<sp/>uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>nof_exts,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&gt;=<sp/>nof_types)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>provided<sp/>enum<sp/>is<sp/>not<sp/>within<sp/>the<sp/>range<sp/>of<sp/>possible<sp/>values<sp/>({}&gt;={})&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)e,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)nof_types);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>SRSASN_CODE<sp/>ret;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_ext)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nof_bits<sp/>=<sp/>(uint32_t)ceilf(log2f(nof_types<sp/>-<sp/>nof_exts));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pack_enum(bref,<sp/>e,<sp/>nof_bits,<sp/>nof_types<sp/>-<sp/>nof_exts);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nof_bits<sp/>=<sp/>(uint32_t)ceilf(log2f(nof_types));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pack_enum(bref,<sp/>e,<sp/>nof_bits);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">ValOrError<sp/>unpack_enum(uint32_t<sp/>nof_types,<sp/>uint32_t<sp/>nof_exts,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/>cbit_ref&amp;<sp/>bref)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>ValOrError<sp/>ret;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_ext)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nof_bits<sp/>=<sp/>(uint32_t)ceilf(log2f(nof_types<sp/>-<sp/>nof_exts));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ext;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.code<sp/>=<sp/>bref.unpack(ext,<sp/>1);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.code<sp/>!=<sp/>SRSASN_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ext)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.code<sp/>=<sp/>bref.unpack(ret.val,<sp/>nof_bits);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.code<sp/>=<sp/>unpack_norm_small_non_neg_whole_number(ret.val,<sp/>bref);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.val<sp/>+=<sp/>nof_types<sp/>-<sp/>nof_exts;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nof_bits<sp/>=<sp/>(uint32_t)ceilf(log2f(nof_types));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.code<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>bref.unpack(ret.val,<sp/>nof_bits);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.val<sp/>&gt;=<sp/>nof_types)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>provided<sp/>enum<sp/>is<sp/>not<sp/>within<sp/>the<sp/>range<sp/>of<sp/>possible<sp/>values<sp/>({}&gt;={})&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)ret.val,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)nof_types);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.code<sp/>=<sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PER<sp/>encoding</highlight></codeline>
<codeline lineno="372"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">SRSASN_CODE<sp/>pack_constrained_whole_number(bit_ref&amp;<sp/>bref,<sp/>IntType<sp/>n,<sp/>IntType<sp/>lb,<sp/>IntType<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ub<sp/>&lt;<sp/>lb<sp/>or<sp/>n<sp/>&lt;<sp/>lb<sp/>or<sp/>n<sp/>&gt;<sp/>ub)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>condition<sp/>lb<sp/>&lt;=<sp/>n<sp/>&lt;=<sp/>ub<sp/>({}<sp/>&lt;=<sp/>{}<sp/>&lt;=<sp/>{})<sp/>was<sp/>not<sp/>met&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)lb,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)n,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)ub);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ra<sp/>=<sp/>(uint64_t)(ub<sp/>-<sp/>lb)<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Can<sp/>overflow<sp/>if<sp/>IntType<sp/>is<sp/>kept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>uint32_t<sp/>n_bits<sp/><sp/><sp/>=<sp/>(uint32_t)ceilf(log2f((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ra));<sp/></highlight><highlight class="comment">//<sp/>bit-field<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>IntType<sp/><sp/>toencode<sp/>=<sp/>n<sp/>-<sp/>lb;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>aligned)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UNALIGNED<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>bref.pack(toencode,<sp/>n_bits);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ALIGNED<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>SRSASN_CODE<sp/>ret;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.pack(toencode,<sp/>n_bits);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra<sp/>&lt;=<sp/>ASN_64K)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>one<sp/>and<sp/>two<sp/>octets<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>n_octets<sp/>=<sp/>ceil_frac(n_bits,<sp/>8u);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes_zero());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(0,<sp/>n_octets<sp/>*<sp/>8<sp/>-<sp/>n_bits));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(toencode,<sp/>n_bits));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.align_bytes_zero();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>n_bits_len<sp/>=<sp/>(uint32_t)ceilf(log2f(ceil_frac(n_bits,<sp/>8u)));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint32_t)floorf(log2f(std::max(toencode,<sp/>(IntType)1))<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>n_octets<sp/><sp/><sp/>=<sp/>ceil_frac(n_bits,<sp/>8u);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(n_octets<sp/>-<sp/>1,<sp/>n_bits_len));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes_zero());</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.pack(toencode,<sp/>n_octets<sp/>*<sp/>8u);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_constrained_whole_number&lt;int8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>n,<sp/>int8_t<sp/>lb,<sp/>int8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="426"><highlight class="normal">pack_constrained_whole_number&lt;int16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>n,<sp/>int16_t<sp/>lb,<sp/>int16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="428"><highlight class="normal">pack_constrained_whole_number&lt;int32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>n,<sp/>int32_t<sp/>lb,<sp/>int32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="430"><highlight class="normal">pack_constrained_whole_number&lt;int64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>n,<sp/>int64_t<sp/>lb,<sp/>int64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="432"><highlight class="normal">pack_constrained_whole_number&lt;uint8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>n,<sp/>uint8_t<sp/>lb,<sp/>uint8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="434"><highlight class="normal">pack_constrained_whole_number&lt;uint16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>n,<sp/>uint16_t<sp/>lb,<sp/>uint16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="436"><highlight class="normal">pack_constrained_whole_number&lt;uint32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>n,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="438"><highlight class="normal">pack_constrained_whole_number&lt;uint64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>n,<sp/>uint64_t<sp/>lb,<sp/>uint64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">SRSASN_CODE<sp/>unpack_constrained_whole_number(IntType&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>IntType<sp/>lb,<sp/>IntType<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ub<sp/>&lt;<sp/>lb)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>condition<sp/>lb<sp/>&lt;=<sp/>ub<sp/>({}<sp/>&lt;=<sp/>{})<sp/>was<sp/>not<sp/>met&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)lb,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)ub);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ra<sp/>=<sp/>(uint64_t)(ub<sp/>-<sp/>lb)<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Can<sp/>overflow<sp/>if<sp/>IntType<sp/>is<sp/>kept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>lb;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>uint32_t<sp/>n_bits<sp/>=<sp/>(uint32_t)ceilf(log2f((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ra));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>aligned)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UNALIGNED<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(n,<sp/>n_bits));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>lb;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>ub)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>condition<sp/>lb<sp/>&lt;=<sp/>n<sp/>&lt;=<sp/>ub<sp/>({}<sp/>&lt;=<sp/>{}<sp/>&lt;=<sp/>{})<sp/>was<sp/>not<sp/>met&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)lb,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)n,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)ub);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ALIGNED<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(n,<sp/>n_bits));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra<sp/>&lt;=<sp/>ASN_64K)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>n_octets<sp/>=<sp/>ceil_frac(n_bits,<sp/>8u);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes());</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(n,<sp/>n_octets<sp/>*<sp/>8));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes());</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>n_bits_len<sp/>=<sp/>(uint32_t)ceilf(log2f(ceil_frac(n_bits,<sp/>8u)));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>n_octets;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(n_octets,<sp/>n_bits_len));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_octets<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(n,<sp/>n_octets<sp/>*<sp/>8));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>lb;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="493"><highlight class="normal">unpack_constrained_whole_number&lt;int8_t&gt;(int8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>lb,<sp/>int8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="495"><highlight class="normal">unpack_constrained_whole_number&lt;int16_t&gt;(int16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>lb,<sp/>int16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="497"><highlight class="normal">unpack_constrained_whole_number&lt;int32_t&gt;(int32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>lb,<sp/>int32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="499"><highlight class="normal">unpack_constrained_whole_number&lt;int64_t&gt;(int64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>lb,<sp/>int64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="501"><highlight class="normal">unpack_constrained_whole_number&lt;uint8_t&gt;(uint8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>lb,<sp/>uint8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="503"><highlight class="normal">unpack_constrained_whole_number&lt;uint16_t&gt;(uint16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>lb,<sp/>uint16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="505"><highlight class="normal">unpack_constrained_whole_number&lt;uint32_t&gt;(uint32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="507"><highlight class="normal">unpack_constrained_whole_number&lt;uint64_t&gt;(uint64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>lb,<sp/>uint64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Type&gt;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">SRSASN_CODE<sp/>pack_norm_small_non_neg_whole_number(bit_ref&amp;<sp/>bref,<sp/>UintType<sp/>n)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>63)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(n,<sp/>7));<sp/></highlight><highlight class="comment">//<sp/>[1<sp/>bit:<sp/>0<sp/>|<sp/>6<sp/>bit:<sp/>n]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(1,<sp/>1));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Long<sp/>small<sp/>integers<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Type&gt;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">SRSASN_CODE<sp/>unpack_norm_small_non_neg_whole_number(UintType&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>SRSASN_CODE<sp/>ret<sp/>=<sp/>bref.unpack(ext,<sp/>1);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>HANDLE_CODE(ret);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ext)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.unpack(n,<sp/>6);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Long<sp/>small<sp/>integers<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_norm_small_non_neg_whole_number&lt;uint8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>n);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_norm_small_non_neg_whole_number&lt;uint16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>n);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_norm_small_non_neg_whole_number&lt;uint32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>n);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_norm_small_non_neg_whole_number&lt;uint64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>n);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_norm_small_non_neg_whole_number&lt;uint8_t&gt;(uint8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_norm_small_non_neg_whole_number&lt;uint16_t&gt;(uint16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_norm_small_non_neg_whole_number&lt;uint32_t&gt;(uint32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_norm_small_non_neg_whole_number&lt;uint64_t&gt;(uint64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal">IntType<sp/>unconstrained_whole_number_length(IntType<sp/>n)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(IntType)ceilf((log2f(n)<sp/>+<sp/>1)<sp/>/<sp/>8.0f);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">SRSASN_CODE<sp/>pack_unconstrained_whole_number(bit_ref&amp;<sp/>bref,<sp/>IntType<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>uint32_t<sp/>len<sp/>=<sp/>unconstrained_whole_number_length(n);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aligned)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes_zero());</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bref.pack(n,<sp/>len<sp/>*<sp/>8));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="578"><highlight class="normal">SRSASN_CODE<sp/>unpack_unconstrained_whole_number(IntType&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aligned)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bref.unpack(n,<sp/>len<sp/>*<sp/>8));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;int8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;int16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;int32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;int64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_whole_number&lt;int8_t&gt;(int8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_whole_number&lt;int16_t&gt;(int16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_whole_number&lt;int32_t&gt;(int32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_whole_number&lt;int64_t&gt;(int64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;uint8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;uint16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;uint32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_whole_number&lt;uint64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_whole_number&lt;uint8_t&gt;(uint8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="601"><highlight class="normal">unpack_unconstrained_whole_number&lt;uint16_t&gt;(uint16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="603"><highlight class="normal">unpack_unconstrained_whole_number&lt;uint32_t&gt;(uint32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="605"><highlight class="normal">unpack_unconstrained_whole_number&lt;uint64_t&gt;(uint64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/>varlength_packing</highlight></codeline>
<codeline lineno="609"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">SRSASN_CODE<sp/>pack_length(bit_ref&amp;<sp/>bref,<sp/>IntType<sp/>n,<sp/>IntType<sp/>lb,<sp/>IntType<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ub<sp/>&gt;=<sp/>ASN_64K)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pack_length(bref,<sp/>n,<sp/>aligned);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pack_constrained_whole_number(bref,<sp/>n,<sp/>lb,<sp/>ub,<sp/>aligned);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;uint8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>n,<sp/>uint8_t<sp/>lb,<sp/>uint8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;uint16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>n,<sp/>uint16_t<sp/>lb,<sp/>uint16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;uint32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>n,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;uint64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>n,<sp/>uint64_t<sp/>lb,<sp/>uint64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;int8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>n,<sp/>int8_t<sp/>lb,<sp/>int8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;int16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>n,<sp/>int16_t<sp/>lb,<sp/>int16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;int32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>n,<sp/>int32_t<sp/>lb,<sp/>int32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_length&lt;int64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>n,<sp/>int64_t<sp/>lb,<sp/>int64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">SRSASN_CODE<sp/>unpack_length(IntType&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>IntType<sp/>lb,<sp/>IntType<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ub<sp/>&gt;=<sp/>ASN_64K)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/>len;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>SRSASN_CODE<sp/>ret<sp/>=<sp/>unpack_length(len,<sp/>bref,<sp/>aligned);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unpack_constrained_whole_number(n,<sp/>bref,<sp/>lb,<sp/>ub,<sp/>aligned);</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;uint8_t&gt;(uint8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>lb,<sp/>uint8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;uint16_t&gt;(uint16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>lb,<sp/>uint16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;uint32_t&gt;(uint32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;uint64_t&gt;(uint64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>lb,<sp/>uint64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;int8_t&gt;(int8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>lb,<sp/>int8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;int16_t&gt;(int16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>lb,<sp/>int16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;int32_t&gt;(int32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>lb,<sp/>int32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_length&lt;int64_t&gt;(int64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>lb,<sp/>int64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal">SRSASN_CODE<sp/>pack_length(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>val,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>aligned)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(val,<sp/>8));<sp/></highlight><highlight class="comment">//<sp/>first<sp/>bit<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>ASN_16K)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(0b10,<sp/>2));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(val,<sp/>14));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Not<sp/>handling<sp/>sizes<sp/>longer<sp/>than<sp/>16383<sp/>octets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>ASN_64K)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes_zero());</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bref.pack(val,<sp/>8);<sp/></highlight><highlight class="comment">//<sp/>first<sp/>bit<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>ASN_16K)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(0b10,<sp/>2));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bref.pack(val,<sp/>14);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(0b11,<sp/>2));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>m<sp/>=<sp/>val<sp/>/<sp/>ASN_16K;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(m,<sp/>6));</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>val<sp/>-<sp/>m<sp/>*<sp/>ASN_16K;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bref.pack(val,<sp/>16);<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">SRSASN_CODE<sp/>unpack_length(uint32_t&amp;<sp/>val,<sp/>cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ext;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>aligned)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>SRSASN_CODE<sp/>ret<sp/>=<sp/>bref.unpack(ext,<sp/>1);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(ret);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ext)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.unpack(val,<sp/>7);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.unpack(ext,<sp/>1);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(ret);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ext)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bref.unpack(val,<sp/>14);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Not<sp/>handling<sp/>octet<sp/>strings<sp/>longer<sp/>than<sp/>16383<sp/>octets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes());</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(val,<sp/>8));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;n&quot;<sp/>&lt;<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>bit<sp/>was<sp/>set<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>-=<sp/>128;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>128<sp/>&lt;=<sp/>&quot;n&quot;<sp/>&lt;<sp/>16K</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>bit<sp/>is<sp/>set<sp/>to<sp/>zero<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>val_octet_2;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(val_octet_2,<sp/>8));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>(val<sp/>&lt;&lt;<sp/>8u)<sp/>+<sp/>val_octet_2;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Not<sp/>handling<sp/>octet<sp/>strings<sp/>longer<sp/>than<sp/>16383<sp/>octets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Integer</highlight></codeline>
<codeline lineno="734"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">SRSASN_CODE<sp/>pack_integer(bit_ref&amp;<sp/>bref,<sp/>IntType<sp/>n,<sp/>IntType<sp/>lb,<sp/>IntType<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>ext<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>within_bounds<sp/>=<sp/>n<sp/>&gt;=<sp/>lb<sp/>and<sp/>n<sp/>&lt;=<sp/>ub;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_ext)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(not<sp/>within_bounds,<sp/>1));</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>within_bounds)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>condition<sp/>lb<sp/>&lt;=<sp/>n<sp/>&lt;=<sp/>ub<sp/>({}<sp/>&lt;=<sp/>{}<sp/>&lt;=<sp/>{})<sp/>was<sp/>not<sp/>met&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)lb,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)n,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)ub);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lower_bounded<sp/>=<sp/>lb<sp/>!=<sp/>std::numeric_limits&lt;IntType&gt;::min()<sp/>or<sp/>std::is_unsigned&lt;IntType&gt;::value;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>upper_bounded<sp/>=<sp/>ub<sp/>!=<sp/>std::numeric_limits&lt;IntType&gt;::max();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>if<sp/>(within_bounds<sp/>and<sp/>lower_bounded<sp/>and<sp/>upper_bounded)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constrained<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb<sp/>==<sp/>ub)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Check<sp/>if<sp/>we<sp/>are<sp/>in<sp/>the<sp/>indefinite<sp/>length<sp/>case,<sp/>and<sp/>pack<sp/>length<sp/>prefix<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(indefinite_length)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(pack_length(bref,<sp/>n,<sp/>1,<sp/>ceilf(log2f()),<sp/>aligned));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(pack_constrained_whole_number(bref,<sp/>n,<sp/>(IntType)lb,<sp/>(IntType)ub,<sp/>aligned));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>X.691<sp/>-<sp/>12.2.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>within_bounds<sp/>or<sp/>(not<sp/>lower_bounded<sp/>and<sp/>not<sp/>upper_bounded))<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(pack_length(bref,<sp/>unconstrained_whole_number_length(n),<sp/>aligned));</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(pack_unconstrained_whole_number(bref,<sp/>n,<sp/>aligned));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>as<sp/>semi-constrained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="773"><highlight class="normal">pack_integer&lt;uint8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>n,<sp/>uint8_t<sp/>lb,<sp/>uint8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="775"><highlight class="normal">pack_integer&lt;uint16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>n,<sp/>uint16_t<sp/>lb,<sp/>uint16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="777"><highlight class="normal">pack_integer&lt;uint32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>n,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="779"><highlight class="normal">pack_integer&lt;uint64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>n,<sp/>uint64_t<sp/>lb,<sp/>uint64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_integer&lt;int8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>n,<sp/>int8_t<sp/>lb,<sp/>int8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="782"><highlight class="normal">pack_integer&lt;int16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>n,<sp/>int16_t<sp/>lb,<sp/>int16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="784"><highlight class="normal">pack_integer&lt;int32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>n,<sp/>int32_t<sp/>lb,<sp/>int32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="786"><highlight class="normal">pack_integer&lt;int64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>n,<sp/>int64_t<sp/>lb,<sp/>int64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unconstrained<sp/>specialization<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">SRSASN_CODE<sp/>pack_unconstrained_integer(bit_ref&amp;<sp/>bref,<sp/>IntType<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pack_integer(</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bref,<sp/>n,<sp/>std::numeric_limits&lt;IntType&gt;::min(),<sp/>std::numeric_limits&lt;IntType&gt;::max(),<sp/>has_ext,<sp/>aligned);</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_integer&lt;int8_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_integer&lt;int16_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_integer&lt;int32_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>pack_unconstrained_integer&lt;int64_t&gt;(bit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">SRSASN_CODE<sp/>unpack_integer(IntType&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>IntType<sp/>lb,<sp/>IntType<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>within_bounds<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_ext)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(within_bounds,<sp/>1));</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>within_bounds<sp/>=<sp/>not<sp/>within_bounds;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lower_bounded<sp/>=<sp/>lb<sp/>!=<sp/>std::numeric_limits&lt;IntType&gt;::min()<sp/>or<sp/>std::is_unsigned&lt;IntType&gt;::value;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>upper_bounded<sp/>=<sp/>ub<sp/>!=<sp/>std::numeric_limits&lt;IntType&gt;::max();</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>if<sp/>(within_bounds<sp/>and<sp/>lower_bounded<sp/>and<sp/>upper_bounded)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constrained<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb<sp/>==<sp/>ub)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Check<sp/>if<sp/>we<sp/>are<sp/>in<sp/>the<sp/>indefinite<sp/>length<sp/>case,<sp/>and<sp/>pack<sp/>length<sp/>prefix<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(unpack_constrained_whole_number(n,<sp/>bref,<sp/>(IntType)lb,<sp/>(IntType)ub,<sp/>aligned));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>X.691<sp/>-<sp/>12.2.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>within_bounds<sp/>or<sp/>(not<sp/>lower_bounded<sp/>and<sp/>not<sp/>upper_bounded))<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>len;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(unpack_length(len,<sp/>bref,<sp/>aligned));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_CODE(unpack_unconstrained_whole_number(n,<sp/>bref,<sp/>len,<sp/>aligned));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>as<sp/>semi-constrained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="832"><highlight class="normal">unpack_integer&lt;uint8_t&gt;(uint8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint8_t<sp/>lb,<sp/>uint8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="834"><highlight class="normal">unpack_integer&lt;uint16_t&gt;(uint16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint16_t<sp/>lb,<sp/>uint16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="836"><highlight class="normal">unpack_integer&lt;uint32_t&gt;(uint32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="838"><highlight class="normal">unpack_integer&lt;uint64_t&gt;(uint64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint64_t<sp/>lb,<sp/>uint64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="840"><highlight class="normal">unpack_integer&lt;int8_t&gt;(int8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int8_t<sp/>lb,<sp/>int8_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="842"><highlight class="normal">unpack_integer&lt;int16_t&gt;(int16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int16_t<sp/>lb,<sp/>int16_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="844"><highlight class="normal">unpack_integer&lt;int32_t&gt;(int32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int32_t<sp/>lb,<sp/>int32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE</highlight></codeline>
<codeline lineno="846"><highlight class="normal">unpack_integer&lt;int64_t&gt;(int64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/>int64_t<sp/>lb,<sp/>int64_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unconstrained<sp/>specialization<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">SRSASN_CODE<sp/>unpack_unconstrained_integer(IntType&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unpack_integer(</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n,<sp/>bref,<sp/>std::numeric_limits&lt;IntType&gt;::min(),<sp/>std::numeric_limits&lt;IntType&gt;::max(),<sp/>has_ext,<sp/>aligned);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_integer&lt;int8_t&gt;(int8_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_integer&lt;int16_t&gt;(int16_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_integer&lt;int32_t&gt;(int32_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>SRSASN_CODE<sp/>unpack_unconstrained_integer&lt;int64_t&gt;(int64_t&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standalone<sp/>packer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">integer_packer&lt;IntType&gt;::integer_packer(IntType<sp/>lb_,<sp/>IntType<sp/>ub_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned_)<sp/>:</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>lb(lb_),<sp/>ub(ub_),<sp/>has_ext(has_ext_),<sp/>aligned(aligned_)</highlight></codeline>
<codeline lineno="864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="868"><highlight class="normal">SRSASN_CODE<sp/>integer_packer&lt;IntType&gt;::pack(bit_ref&amp;<sp/>bref,<sp/>IntType<sp/>n)</highlight></codeline>
<codeline lineno="869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pack_integer(bref,<sp/>n,<sp/>lb,<sp/>ub,<sp/>has_ext,<sp/>aligned);</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">SRSASN_CODE<sp/>integer_packer&lt;IntType&gt;::unpack(IntType&amp;<sp/>n,<sp/>cbit_ref&amp;<sp/>bref)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unpack_integer(n,<sp/>bref,<sp/>lb,<sp/>ub,<sp/>has_ext,<sp/>aligned);</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;int8_t&gt;;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;int16_t&gt;;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;int32_t&gt;;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;int64_t&gt;;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;uint8_t&gt;;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;uint16_t&gt;;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;uint32_t&gt;;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integer_packer&lt;uint64_t&gt;;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/><sp/>common<sp/>octstring</highlight></codeline>
<codeline lineno="888"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">uint64_t<sp/>octstring_to_number(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>ptr,<sp/>uint32_t<sp/>nbytes)</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbytes<sp/>&gt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;octstring<sp/>of<sp/>size={}<sp/>does<sp/>not<sp/>fit<sp/>in<sp/>an<sp/>uint64_t&quot;</highlight><highlight class="normal">,<sp/>nbytes);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>uint64_t<sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbytes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>((uint64_t)ptr[nbytes<sp/>-<sp/>1<sp/>-<sp/>i])<sp/>&lt;&lt;<sp/>(uint64_t)(i<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>number_to_octstring(uint8_t*<sp/>ptr,<sp/>uint64_t<sp/>number,<sp/>uint32_t<sp/>nbytes)</highlight></codeline>
<codeline lineno="904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbytes<sp/>&gt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;octstring<sp/>of<sp/>size={}<sp/>does<sp/>not<sp/>fit<sp/>in<sp/>an<sp/>uint64_t&quot;</highlight><highlight class="normal">,<sp/>nbytes);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbytes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr[nbytes<sp/>-<sp/>1<sp/>-<sp/>i]<sp/>=<sp/>(number<sp/>&gt;&gt;<sp/>(uint64_t)(i<sp/>*<sp/>8u))<sp/>&amp;<sp/>0xffu;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_hex(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cstr,<sp/>uint8_t<sp/>val)</highlight></codeline>
<codeline lineno="915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>sprintf(cstr,<sp/></highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>val);</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal">std::string<sp/>octstring_to_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>ptr,<sp/>uint32_t<sp/>N)</highlight></codeline>
<codeline lineno="921"><highlight class="normal">{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>s.resize(N<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cstr[3];</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>to_hex(cstr,<sp/>ptr[i]);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>s.replace(i<sp/>*<sp/>2,<sp/>2,<sp/>cstr);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>string_to_octstring(uint8_t*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.size()<sp/>%<sp/>2<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>log_warning(</highlight><highlight class="stringliteral">&quot;The<sp/>provided<sp/>hex<sp/>string<sp/>size={}<sp/>is<sp/>not<sp/>a<sp/>multiple<sp/>of<sp/>2.&quot;</highlight><highlight class="normal">,<sp/>str.size());</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cstr[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\0\0\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.size();<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;cstr[0],<sp/>&amp;str[i],<sp/>2);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr[i<sp/>/<sp/>2]<sp/>=<sp/>strtoul(cstr,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>dyn_octstring</highlight></codeline>
<codeline lineno="946"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Al&gt;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">SRSASN_CODE<sp/>unbounded_octstring&lt;Al&gt;::pack(bit_ref&amp;<sp/>bref)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="950"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>HANDLE_CODE(pack_length(bref,<sp/>size(),<sp/>aligned));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(octets_[i],<sp/>8));</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Al&gt;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">SRSASN_CODE<sp/>unbounded_octstring&lt;Al&gt;::unpack(cbit_ref&amp;<sp/>bref)</highlight></codeline>
<codeline lineno="960"><highlight class="normal">{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>uint32_t<sp/>len;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>HANDLE_CODE(unpack_length(len,<sp/>bref,<sp/>aligned));</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>resize(len);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(octets_[i],<sp/>8));</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Al&gt;</highlight></codeline>
<codeline lineno="971"><highlight class="normal">std::string<sp/>unbounded_octstring&lt;Al&gt;::to_string()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="972"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>octstring_to_string(&amp;octets_[0],<sp/>size());</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Al&gt;</highlight></codeline>
<codeline lineno="977"><highlight class="normal">unbounded_octstring&lt;Al&gt;&amp;<sp/>unbounded_octstring&lt;Al&gt;::from_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>hexstr)</highlight></codeline>
<codeline lineno="978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>resize(hexstr.size()<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>string_to_octstring(&amp;octets_[0],<sp/>hexstr);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">unbounded_octstring&lt;true&gt;;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">unbounded_octstring&lt;false&gt;;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>bitstring</highlight></codeline>
<codeline lineno="989"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bitstring_utils<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">SRSASN_CODE<sp/>pack_length_prefix(bit_ref&amp;<sp/>bref,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>len,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>lb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ub<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::numeric_limits&lt;uint32_t&gt;::max(),</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>has_ext<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>is_aligned<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_ext<sp/>and<sp/>ub<sp/>==<sp/>std::numeric_limits&lt;uint32_t&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;has<sp/>extension<sp/>marker<sp/>but<sp/>it<sp/>is<sp/>an<sp/>unbounded<sp/>prefix<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>within_bounds<sp/>=<sp/>len<sp/>&gt;=<sp/>lb<sp/>and<sp/>len<sp/>&lt;=<sp/>ub;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>within_bounds<sp/>and<sp/>not<sp/>has_ext)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;bitstring<sp/>length={}<sp/>is<sp/>not<sp/>within<sp/>bounds<sp/>[{},<sp/>{}]&quot;</highlight><highlight class="normal">,<sp/>len,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>encode<sp/>ext<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_ext)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(not<sp/>within_bounds,<sp/>1));</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>encode<sp/>prefix<sp/>if<sp/>fixed<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb<sp/>==<sp/>ub<sp/>and<sp/>within_bounds)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>as<sp/>unbounded<sp/>if<sp/>unbounded<sp/>bitstring<sp/>or<sp/>ext<sp/>is<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ub<sp/>==<sp/>std::numeric_limits&lt;uint32_t&gt;::max()<sp/>or<sp/>not<sp/>within_bounds)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pack_length(bref,<sp/>len);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>as<sp/>bounded<sp/>bitstring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>uint32_t<sp/>len_bits<sp/>=<sp/>(uint32_t)ceilf(log2(ub<sp/>-<sp/>lb));</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bref.pack(len<sp/>-<sp/>lb,<sp/>len_bits));</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_aligned)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes_zero());</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal">SRSASN_CODE<sp/>pack_bitfield(bit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buf,<sp/>uint32_t<sp/>nbits,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_aligned)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>bitstring<sp/>size={}&quot;</highlight><highlight class="normal">,<sp/>nbits);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_aligned<sp/>and<sp/>(lb<sp/>!=<sp/>ub<sp/>or<sp/>ub<sp/>&gt;<sp/>16))<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>bref.align_bytes_zero();</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>uint32_t<sp/>n_octs<sp/>=<sp/>ceil_frac(nbits,<sp/>8u);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>uint32_t<sp/>offset<sp/>=<sp/>((nbits<sp/>-<sp/>1)<sp/>%<sp/>8)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bref.pack(buf[n_octs<sp/>-<sp/>1],<sp/>offset));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n_octs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(buf[n_octs<sp/>-<sp/>1<sp/>-<sp/>i],<sp/>8));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal">SRSASN_CODE</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">pack(bit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>data,<sp/>uint32_t<sp/>len,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_aligned)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bitstring_utils::pack_length_prefix(bref,<sp/>len,<sp/>lb,<sp/>ub,<sp/>has_ext,<sp/>is_aligned));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pack_bitfield(bref,<sp/>data,<sp/>len,<sp/>lb,<sp/>ub,<sp/>is_aligned);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unpack<sp/>prefix,<sp/>excluding<sp/>ext<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal">SRSASN_CODE<sp/>unpack_length_prefix(uint32_t&amp;<sp/>len,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_aligned)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ext<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_ext)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(ext,<sp/>1));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unbounded<sp/>or<sp/>ext<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ub<sp/>==<sp/>std::numeric_limits&lt;uint32_t&gt;::max()<sp/>or<sp/>ext)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unpack_length(len,<sp/>bref,<sp/>is_aligned);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fixed<sp/>length<sp/>with<sp/>no<sp/>ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb<sp/>==<sp/>ub)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>lb;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constrained,<sp/>simple<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>HANDLE_CODE(unpack_length(len,<sp/>bref,<sp/>lb,<sp/>ub,<sp/>is_aligned));</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(is_aligned)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>HANDLE_CODE(bref.align_bytes_zero());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>uint32_t<sp/>len_bits<sp/>=<sp/>ceilf(log2f(ub<sp/>-<sp/>lb));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>HANDLE_CODE(bref.unpack(len,<sp/>len_bits));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>len<sp/>+=<sp/>lb;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>both<sp/>fixed,<sp/>constrained<sp/>and<sp/>unconstrained<sp/>scenarios</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">SRSASN_CODE<sp/>unpack_bitfield(uint8_t*<sp/>buf,<sp/>cbit_ref&amp;<sp/>bref,<sp/>uint32_t<sp/>n,<sp/>uint32_t<sp/>lb,<sp/>uint32_t<sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_aligned)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>ASN_64K)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;bitstrings<sp/>longer<sp/>than<sp/>64K<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>bit<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_aligned<sp/>and<sp/>(lb<sp/>!=<sp/>ub<sp/>or<sp/>ub<sp/>&gt;<sp/>16))<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>bref.align_bytes();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unpack<sp/>exactly<sp/>&quot;n&quot;<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>uint32_t<sp/>n_octs<sp/>=<sp/>ceil_frac(n,<sp/>8u);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>uint32_t<sp/>offset<sp/>=<sp/>((n<sp/>-<sp/>1)<sp/>%<sp/>8)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>HANDLE_CODE(bref.unpack(buf[n_octs<sp/>-<sp/>1],<sp/>offset));</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n_octs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(buf[n_octs<sp/>-<sp/>1<sp/>-<sp/>i],<sp/>8));</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>from_number(uint8_t*<sp/>ptr,<sp/>uint64_t<sp/>number,<sp/>uint32_t<sp/>nbits)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits<sp/>&gt;<sp/>64u)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;bitstring<sp/>of<sp/>size={}<sp/>does<sp/>not<sp/>fit<sp/>in<sp/>an<sp/>uint64_t&quot;</highlight><highlight class="normal">,<sp/>nbits);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nof_bytes<sp/>=<sp/>ceil_frac(nbits,<sp/>8u);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nof_bytes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>(number<sp/>&gt;&gt;<sp/>(i<sp/>*<sp/>8u))<sp/>&amp;<sp/>0xffu;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>uint32_t<sp/>offset<sp/>=<sp/>nbits<sp/>%<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>clean<sp/>up<sp/>any<sp/>extra<sp/>set<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr[nof_bytes<sp/>-<sp/>1]<sp/>&amp;=<sp/>(uint8_t)((1u<sp/>&lt;&lt;<sp/>offset)<sp/>-<sp/>1u);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal">std::string<sp/>to_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>ptr,<sp/>uint32_t<sp/>nbits)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>std::string<sp/>str(nbits,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>str[i]<sp/>=<sp/>bitstring_utils::get(ptr,<sp/>nbits<sp/>-<sp/>1<sp/>-<sp/>i)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal">uint64_t<sp/>to_number(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>ptr,<sp/>uint32_t<sp/>nbits)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits<sp/>&gt;<sp/>64u)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;bitstring<sp/>of<sp/>size={}<sp/>does<sp/>not<sp/>fit<sp/>in<sp/>an<sp/>uint64_t&quot;</highlight><highlight class="normal">,<sp/>nbits);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>uint64_t<sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nof_bytes<sp/>=<sp/>ceil_frac(nbits,<sp/>8u);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nof_bytes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>ptr[i]<sp/>&lt;&lt;<sp/>(i<sp/>*<sp/>8u);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>bitstring_utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>choice<sp/>utils</highlight></codeline>
<codeline lineno="1166"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_invalid_access_choice_id(uint32_t<sp/>val,<sp/>uint32_t<sp/>choice_id)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>access<sp/>choide<sp/>id<sp/>is<sp/>invalid<sp/>({}!={})&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)val,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)choice_id);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_invalid_choice_id(uint32_t<sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>choice_type)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>choice<sp/>id={}<sp/>for<sp/>choice<sp/>type<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)val,<sp/>choice_type);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"><sp/><sp/><sp/>printable<sp/>string</highlight></codeline>
<codeline lineno="1178"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asn_string_utils<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_nof_bits_per_char(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ub<sp/>-<sp/>lb<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>(size_t)ceilf(log2(N));<sp/></highlight><highlight class="comment">//<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aligned)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(size_t)pow(2,<sp/>ceilf(log2(b)));<sp/></highlight><highlight class="comment">//<sp/>B2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_octet_aligned(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bits_per_char,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_nof_bits<sp/>=<sp/>bits_per_char<sp/>*<sp/>aub;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aligned<sp/>and<sp/>(max_nof_bits<sp/>&gt;<sp/>16<sp/>or<sp/>(alb<sp/>!=<sp/>aub<sp/>and<sp/>max_nof_bits<sp/>==<sp/>16));</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_length_encoded(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alb<sp/>!=<sp/>aub<sp/>or<sp/>aub<sp/>&gt;=<sp/>ASN_64K;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">SRSASN_CODE</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">pack(bit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ub,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>within_limits<sp/>=<sp/>s.size()<sp/>&gt;=<sp/>alb<sp/>and<sp/>s.size()<sp/>&lt;=<sp/>aub;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>within_limits)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>print<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>should<sp/>be<sp/>valid<sp/>for<sp/>exts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>PrintableString<sp/>size={}<sp/>is<sp/>not<sp/>within<sp/>the<sp/>limits<sp/>[{},<sp/>{}]&quot;</highlight><highlight class="normal">,<sp/>s.size(),<sp/>alb,<sp/>aub);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_ENCODE_FAIL;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>asn_string_utils::get_nof_bits_per_char(lb,<sp/>ub,<sp/>aligned);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>octet_aligned<sp/><sp/>=<sp/>asn_string_utils::is_octet_aligned(b,<sp/>alb,<sp/>aub,<sp/>aligned);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>length_encoded<sp/>=<sp/>asn_string_utils::is_length_encoded(alb,<sp/>aub,<sp/>aligned);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(octet_aligned)<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>bref.align_bytes_zero();</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ext)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(0,<sp/>1));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_encoded)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>pack_length(bref,<sp/>s.size(),<sp/>alb,<sp/>aub,<sp/>octet_aligned);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(octet_aligned)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>bref.align_bytes_zero();</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(c,<sp/>b));</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal">SRSASN_CODE<sp/>unpack(std::string&amp;<sp/>s,<sp/>cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ub,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aligned)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>asn_string_utils::get_nof_bits_per_char(lb,<sp/>ub,<sp/>aligned);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>octet_aligned<sp/><sp/>=<sp/>asn_string_utils::is_octet_aligned(b,<sp/>alb,<sp/>aub,<sp/>aligned);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>length_encoded<sp/>=<sp/>asn_string_utils::is_length_encoded(alb,<sp/>aub,<sp/>aligned);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(octet_aligned)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>bref.align_bytes();</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ext)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ext;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(is_ext,<sp/>1));</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_ext)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Extension<sp/>of<sp/>PrintableString<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_ERROR_DECODE_FAIL;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_encoded)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>unpack_length(n,<sp/>bref,<sp/>alb,<sp/>aub,<sp/>octet_aligned);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>s.resize(n);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(octet_aligned)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>bref.align_bytes();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>c<sp/>:<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(c,<sp/>b));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>asn_string_utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ext<sp/>group</highlight></codeline>
<codeline lineno="1268"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>ext_groups_packer_guard::operator[](uint32_t<sp/>idx)</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>groups.size())<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>prev_size<sp/>=<sp/>groups.size();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>groups.resize(idx<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill(&amp;groups[prev_size],<sp/>&amp;groups[groups.size()],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>groups[idx];</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal">SRSASN_CODE<sp/>ext_groups_packer_guard::pack(asn1::bit_ref&amp;<sp/>bref)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1281"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>number<sp/>of<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>int32_t<sp/>i<sp/>=<sp/>groups.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groups[i])<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nof_groups<sp/>=<sp/>(uint32_t)i<sp/>+<sp/>1u;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>HANDLE_CODE(pack_norm_small_non_neg_whole_number(bref,<sp/>nof_groups<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>each<sp/>group<sp/>presence<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nof_groups;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.pack(groups[j],<sp/>1));</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal">ext_groups_unpacker_guard::ext_groups_unpacker_guard(uint32_t<sp/>nof_supported_groups_)<sp/>:</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>nof_supported_groups(nof_supported_groups_)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>resize(nof_supported_groups);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>ext_groups_unpacker_guard::operator[](uint32_t<sp/>idx)</highlight></codeline>
<codeline lineno="1306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>groups.size())<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>resizes<sp/>for<sp/>unknown<sp/>extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>resize(idx<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>groups[idx];</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ext_groups_unpacker_guard::resize(uint32_t<sp/>new_size)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>grows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>uint32_t<sp/>prev_size<sp/>=<sp/>groups.size();</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>groups.resize(std::max(new_size,<sp/>nof_supported_groups));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>std::fill(&amp;groups[prev_size],<sp/>&amp;groups[groups.size()],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal">ext_groups_unpacker_guard::~ext_groups_unpacker_guard()</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>consume<sp/>all<sp/>the<sp/>unknown<sp/>extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>nof_supported_groups;<sp/>i<sp/>&lt;<sp/>nof_unpacked_groups;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groups[i])<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varlength_field_unpack_guard<sp/>scope(*bref_tracker);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal">SRSASN_CODE<sp/>ext_groups_unpacker_guard::unpack(cbit_ref&amp;<sp/>bref)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>bref_tracker<sp/>=<sp/>&amp;bref;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unpack<sp/>nof<sp/>of<sp/>ext<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>HANDLE_CODE(unpack_norm_small_non_neg_whole_number(nof_unpacked_groups,<sp/>bref));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>nof_unpacked_groups<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>resize(nof_unpacked_groups);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unpack<sp/>each<sp/>group<sp/>presence<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nof_unpacked_groups;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_CODE(bref.unpack(groups[i],<sp/>1));</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Open<sp/>Field</highlight></codeline>
<codeline lineno="1349"><highlight class="comment">*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal">varlength_field_pack_guard::varlength_field_pack_guard(bit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align_)<sp/>:<sp/>brefstart(bref)</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>bref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>bit_ref(varlen_buffer);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>bref_tracker<sp/>=<sp/>&amp;bref;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>align<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>align_;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal">varlength_field_pack_guard::~varlength_field_pack_guard()</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>spare<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>uint32_t<sp/>leftover<sp/>=<sp/>7U<sp/>-<sp/>((bref_tracker-&gt;distance()<sp/>-<sp/>(uint32_t)1U)<sp/>%<sp/>(uint32_t)8U);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>bref_tracker-&gt;pack(0,<sp/>leftover);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>how<sp/>many<sp/>bytes<sp/>were<sp/>written<sp/>in<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nof_bytes<sp/>=<sp/>bref_tracker-&gt;distance()<sp/>/<sp/>(uint32_t)8U;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>back<sp/>in<sp/>time<sp/>to<sp/>pack<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>pack_length(brefstart,<sp/>nof_bytes,<sp/>align);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>encoded<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>brefstart.pack_bytes(varlen_buffer);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>*bref_tracker<sp/>=<sp/>brefstart;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal">varlength_field_unpack_guard::varlength_field_unpack_guard(cbit_ref&amp;<sp/>bref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align)<sp/>:</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>len([&amp;bref,<sp/>align]()<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>len_;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>unpack_length(len_,<sp/>bref,<sp/>align);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len_;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>}()),</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>bref0(bref),</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>bref_tracker(&amp;bref)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">varlength_field_unpack_guard::~varlength_field_unpack_guard()</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>uint32_t<sp/>pad;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>bref_tracker-&gt;unpack(pad,<sp/>len<sp/>*<sp/>8<sp/>-<sp/>bref_tracker-&gt;distance(bref0));</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="comment">/*******************</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/><sp/><sp/>JsonWriter</highlight></codeline>
<codeline lineno="1394"><highlight class="comment">*******************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal">json_writer::json_writer()<sp/>:<sp/>ident(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>sep(NONE)<sp/>{}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_fieldname(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>septable[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;,\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;{}{}&quot;</highlight><highlight class="normal">,<sp/>septable[sep],<sp/>sep<sp/>!=<sp/>NONE<sp/>?<sp/>ident<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>fieldname.empty())<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;{}\&quot;:<sp/>&quot;</highlight><highlight class="normal">,<sp/>fieldname);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>NONE;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>write_fieldname(fieldname);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;{}\&quot;&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>COMMA;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>write_str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname,<sp/>int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>write_fieldname(fieldname);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>COMMA;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_int(int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>write_int(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_bool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>write_fieldname(fieldname);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>COMMA;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_bool(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>write_bool(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_null(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname)</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>write_fieldname(fieldname);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>COMMA;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::write_null()</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>write_null(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::start_obj(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname)</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>write_fieldname(fieldname);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;{{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>ident<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>NEWLINE;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::end_obj()</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>ident.erase(ident.size()<sp/>-<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n{}}}&quot;</highlight><highlight class="normal">,<sp/>ident);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>COMMA;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::start_array(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>write_fieldname(fieldname);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>ident<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>NEWLINE;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_writer::end_array()</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>ident.erase(ident.size()<sp/>-<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>fmt::format_to(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n{}]&quot;</highlight><highlight class="normal">,<sp/>ident);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>sep<sp/>=<sp/>COMMA;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal">std::string<sp/>json_writer::to_string()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1482"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(buffer.data(),<sp/>buffer.size());</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="1487"><highlight class="comment"><sp/><sp/><sp/>General<sp/>Layer<sp/>Types</highlight></codeline>
<codeline lineno="1488"><highlight class="comment">************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal">uint32_t<sp/>detail::base_empty_obj_set::idx_to_id(uint32_t<sp/>idx)</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>asn1::log_error(</highlight><highlight class="stringliteral">&quot;object<sp/>set<sp/>is<sp/>empty\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>detail::base_empty_obj_set::is_id_valid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>asn1::log_error(</highlight><highlight class="stringliteral">&quot;object<sp/>set<sp/>is<sp/>empty\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">crit_e<sp/>detail::base_empty_obj_set::get_crit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">presence_e<sp/>detail::base_empty_obj_set::get_presence(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detail::empty_obj_set_item_c::to_json(json_writer&amp;<sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1510"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>j.start_obj();</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>j.end_obj();</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal">SRSASN_CODE<sp/>detail::empty_obj_set_item_c::pack(bit_ref&amp;<sp/>bref)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1515"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>varlength_field_pack_guard<sp/>varlen_scope(bref,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">SRSASN_CODE<sp/>detail::empty_obj_set_item_c::unpack(cbit_ref&amp;<sp/>bref)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>varlength_field_unpack_guard<sp/>varlen_scope(bref,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SRSASN_SUCCESS;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>detail::empty_obj_set_item_c::types_opts::to_string()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1526"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;The<sp/>enum<sp/>value=0<sp/>of<sp/>type<sp/>protocol_ies_empty_o::value_c::types<sp/>is<sp/>not<sp/>valid.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>asn1</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/asn1/asn1_utils.cpp"/>
  </compounddef>
</doxygen>
