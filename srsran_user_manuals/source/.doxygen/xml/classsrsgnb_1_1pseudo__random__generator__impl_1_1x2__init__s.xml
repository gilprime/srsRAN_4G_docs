<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s" kind="class" language="C++" prot="private">
    <compoundname>srsgnb::pseudo_random_generator_impl::x2_init_s</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1ad8fa840f3d3938d4716f910b67693169" prot="private" static="no" mutable="no">
        <type>std::array&lt; unsigned, <ref refid="classsrsgnb_1_1pseudo__random__generator__impl_1a19c2eedfb84b2b6e6777a1bfdf502a97" kindref="member">SEQUENCE_SEED_LEN</ref> &gt;</type>
        <definition>std::array&lt;unsigned, SEQUENCE_SEED_LEN&gt; srsgnb::pseudo_random_generator_impl::x2_init_s::x2</definition>
        <argsstring></argsstring>
        <name>x2</name>
        <briefdescription>
<para>Memory register for sequence <formula id="235">$x_2(n)$</formula>, for all basic seeds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.h" line="82" column="16" bodyfile="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.h" bodystart="82" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1abe27500a26a64dbb8c101e9102c14180" compoundref="pseudo__random__generator__impl_8cpp" startline="41" endline="51">x2_init_s</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1abe27500a26a64dbb8c101e9102c14180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pseudo_random_generator_impl::x2_init_s::x2_init_s</definition>
        <argsstring>()</argsstring>
        <name>x2_init_s</name>
        <briefdescription>
<para>Initializes the first 31 elements of <formula id="235">$x_2(n)$</formula> and advances to position <formula id="231">$N_{\mathrm{C}}$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.h" line="86" column="5" bodyfile="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.cpp" bodystart="41" bodyend="51"/>
        <references refid="classsrsgnb_1_1pseudo__random__generator__impl_1a19c2eedfb84b2b6e6777a1bfdf502a97" compoundref="pseudo__random__generator__impl_8h" startline="27">srsgnb::pseudo_random_generator_impl::SEQUENCE_SEED_LEN</references>
        <references refid="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1ad8fa840f3d3938d4716f910b67693169" compoundref="pseudo__random__generator__impl_8h" startline="82">x2</references>
        <references refid="classsrsgnb_1_1pseudo__random__generator__impl_1a2b2edcd19bead3f5b40a70b4c3878e2e" compoundref="pseudo__random__generator__impl_8h" startline="33">srsgnb::pseudo_random_generator_impl::SEQUENCE_NC</references>
        <references refid="classsrsgnb_1_1pseudo__random__generator__impl_1a57afb6927d4aab767f544ddee98e7bdc" compoundref="pseudo__random__generator__impl_8h" startline="155" endline="167">srsgnb::pseudo_random_generator_impl::step_x2</references>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1a952b6ad85049d4f2ddac91412af84203" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned pseudo_random_generator_impl::x2_init_s::get</definition>
        <argsstring>(unsigned c_init) const</argsstring>
        <name>get</name>
        <param>
          <type>unsigned</type>
          <declname>c_init</declname>
        </param>
        <briefdescription>
<para>For the given seed, returns the <formula id="235">$x_2(n)$</formula> state register after initialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.h" line="88" column="14" bodyfile="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.cpp" bodystart="53" bodyend="64"/>
        <references refid="classsrsgnb_1_1pseudo__random__generator__impl_1a19c2eedfb84b2b6e6777a1bfdf502a97" compoundref="pseudo__random__generator__impl_8h" startline="27">srsgnb::pseudo_random_generator_impl::SEQUENCE_SEED_LEN</references>
        <references refid="classsrsgnb_1_1pseudo__random__generator__impl_1aa87a0796169fa27fb5f884bdb15d40eb" compoundref="pseudo__random__generator__impl_8h" startline="99">srsgnb::pseudo_random_generator_impl::x2</references>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator__impl_1a98de4e3f0fd3f38fc88e711b0bf5ce38" compoundref="pseudo__random__generator__impl_8cpp" startline="66" endline="70">srsgnb::pseudo_random_generator_impl::init</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>State sequence <formula id="235">$x_2(n)$</formula> initializer. </para>
    </briefdescription>
    <detaileddescription>
<para>Similarly to <ref refid="classsrsgnb_1_1pseudo__random__generator__impl_1_1x1__init__s" kindref="compound">x1_init_s</ref>, this class is used to initialize the sequence <formula id="235">$x_2(n)$</formula> and advance it until position <formula id="236">$n = N_{\mathrm{C}}$</formula>. Here, however, the process is carried out simultaneously for all possible seeds of the form <formula id="237">$c_{\mathrm{init}} = 2^k$</formula> for <formula id="238">$k=0,1,\dots,30$</formula>. The initial state corresponding to any other seed can easily be computed from these basic ones after noticing that the map sending a seed to the corresponding sequence defines a group isomorphism between the set of seeds and the set of sequences (both groups under bitwise XOR). That is, if <formula id="239">\begin{align*} c_{\mathrm{init}}^{(1)} &amp;\mapsto x_2^{(1)}(n) &amp;&amp;\text{and} &amp; c_{\mathrm{init}}^{(2)} &amp;\mapsto x_2^{(2)}(n) \end{align*}</formula> then <formula id="240">\[ c_{\mathrm{init}}^{(1)} \oplus c_{\mathrm{init}}^{(2)} \mapsto x_2^{(1)}(n) \oplus x_2^{(2)}(n) \]</formula> with the XOR operator acting bitwise between seeds and for all <formula id="2">$n$</formula> between sequences. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::pseudo_random_generator_impl::x2_init_s</label>
        <link refid="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s"/>
      </node>
    </collaborationgraph>
    <location file="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.h" line="79" column="1" bodyfile="lib/phy/upper/sequence_generators/pseudo_random_generator_impl.h" bodystart="78" bodyend="89"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1a952b6ad85049d4f2ddac91412af84203" prot="public" virt="non-virtual"><scope>srsgnb::pseudo_random_generator_impl::x2_init_s</scope><name>get</name></member>
      <member refid="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1ad8fa840f3d3938d4716f910b67693169" prot="private" virt="non-virtual"><scope>srsgnb::pseudo_random_generator_impl::x2_init_s</scope><name>x2</name></member>
      <member refid="classsrsgnb_1_1pseudo__random__generator__impl_1_1x2__init__s_1abe27500a26a64dbb8c101e9102c14180" prot="public" virt="non-virtual"><scope>srsgnb::pseudo_random_generator_impl::x2_init_s</scope><name>x2_init_s</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
