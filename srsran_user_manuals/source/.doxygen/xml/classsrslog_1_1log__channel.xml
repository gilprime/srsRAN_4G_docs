<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrslog_1_1log__channel" kind="class" language="C++" prot="public">
    <compoundname>srslog::log_channel</compoundname>
    <includes refid="log__channel_8h" local="no">log_channel.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1a15908f7af136e1a3e4653d35f64330e9" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string srslog::log_channel::log_id</definition>
        <argsstring></argsstring>
        <name>log_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="245" column="25" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1a065488f16d6528c87d7f013ec84f9f90" prot="private" static="no" mutable="no">
        <type><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref> &amp;</type>
        <definition>sink&amp; srslog::log_channel::log_sink</definition>
        <argsstring></argsstring>
        <name>log_sink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="246" column="24" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1ac7393041f81cc9fccc1b10e81aa0acf5" prot="private" static="no" mutable="no">
        <type><ref refid="classsrslog_1_1detail_1_1log__backend" kindref="compound">detail::log_backend</ref> &amp;</type>
        <definition>detail::log_backend&amp; srslog::log_channel::backend</definition>
        <argsstring></argsstring>
        <name>backend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="247" column="24" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1afce1984bf7bf89961c4ced0db8d92269" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string srslog::log_channel::log_name</definition>
        <argsstring></argsstring>
        <name>log_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="248" column="25" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1ad092b69e1f13d26acf993bc4f18b2b09" prot="private" static="no" mutable="no">
        <type>const char</type>
        <definition>const char srslog::log_channel::log_tag</definition>
        <argsstring></argsstring>
        <name>log_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="249" column="25" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1aed1dbddac4ed85c38e9ddda14419ccd1" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool srslog::log_channel::should_print_context</definition>
        <argsstring></argsstring>
        <name>should_print_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="250" column="25" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1acbcce1b864b9b31dd5f6895cd01eaf5f" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; uint32_t &gt;</type>
        <definition>std::atomic&lt;uint32_t&gt; srslog::log_channel::ctx_value</definition>
        <argsstring></argsstring>
        <name>ctx_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="251" column="15" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1aede5744befe8d397893983b960d4971c" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; srslog::log_channel::hex_max_size</definition>
        <argsstring></argsstring>
        <name>hex_max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="252" column="20" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrslog_1_1log__channel_1ab78bd5e4c4457164e500ceda5685d5c1" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; srslog::log_channel::is_enabled</definition>
        <argsstring></argsstring>
        <name>is_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="253" column="19" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a9261b3fe5c7581f882075f4c66f5d76c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srslog::log_channel::log_channel</definition>
        <argsstring>(std::string id, sink &amp;s, detail::log_backend &amp;backend)</argsstring>
        <name>log_channel</name>
        <param>
          <type>std::string</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1log__backend" kindref="compound">detail::log_backend</ref> &amp;</type>
          <declname>backend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="49" column="3" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1ad2cc90c62dd767ed1da5a3960a9d9ce7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srslog::log_channel::log_channel</definition>
        <argsstring>(std::string id, sink &amp;s, detail::log_backend &amp;backend, log_channel_config config)</argsstring>
        <name>log_channel</name>
        <param>
          <type>std::string</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1log__backend" kindref="compound">detail::log_backend</ref> &amp;</type>
          <declname>backend</declname>
        </param>
        <param>
          <type><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="51" column="3" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="51" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a1c319d6eda825d188118fd531fa2b492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>srslog::log_channel::log_channel</definition>
        <argsstring>(const log_channel &amp;other)=delete</argsstring>
        <name>log_channel</name>
        <param>
          <type>const <ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="64" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a2f49e07fc80df7912b14e3124420d614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref> &amp;</type>
        <definition>log_channel&amp; srslog::log_channel::operator=</definition>
        <argsstring>(const log_channel &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="65" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1ad2b6d6ea694afde99e2f64ebc28ec77b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srslog::log_channel::set_enabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>set_enabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Controls when the channel accepts incoming log entries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="68" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="68" bodyend="68"/>
        <references refid="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" compoundref="log__channel_8h" startline="72" endline="72">enabled</references>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srslog::log_channel::enabled</definition>
        <argsstring>() const</argsstring>
        <name>enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the channel is accepting incoming log entries, otherwise false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="72" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="72" bodyend="72"/>
        <referencedby refid="classsrslog_1_1log__channel_1ad2b6d6ea694afde99e2f64ebc28ec77b" compoundref="log__channel_8h" startline="68" endline="68">set_enabled</referencedby>
        <referencedby refid="classsrslog_1_1log__channel_1a5fe2ff176650323c24fbd01689267330" compoundref="log__channel_8h" startline="87" endline="113">operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a018513fb2056a83215124987e10cbcc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; srslog::log_channel::id</definition>
        <argsstring>() const</argsstring>
        <name>id</name>
        <briefdescription>
<para>Returns the id string of the channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="75" column="21" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a6cf99f22c3f1e6645d5e0a3174875c25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srslog::log_channel::set_context</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>set_context</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Set the log channel context to the specified value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="78" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a5485a652014d788cd8b12b299fe08086" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srslog::log_channel::set_hex_dump_max_size</definition>
        <argsstring>(int size)</argsstring>
        <name>set_hex_dump_max_size</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the maximum number of bytes to can be printed in a hex dump. Set to -1 to indicate no hex dump limit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="82" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a5fe2ff176650323c24fbd01689267330" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srslog::log_channel::operator()</definition>
        <argsstring>(const char *fmtstr, Args &amp;&amp;... args)</argsstring>
        <name>operator()</name>
        <param>
          <type>const char *</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the provided log entry and passes it to the backend. When the channel is disabled the log entry will be discarded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="87" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="87" bodyend="113"/>
        <references refid="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" compoundref="log__channel_8h" startline="72" endline="72">enabled</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1ae6a35c82a4c5257f946e477a2ce907b9">srslog::detail::log_backend::alloc_arg_store</references>
        <references refid="classsrslog_1_1sink_1afefc81cbae7348e62570771e3d0f9ead" compoundref="sink_8h" startline="33" endline="33">srslog::sink::get_formatter</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1a13c29881fc1af8da38ba63655d038f8e">srslog::detail::log_backend::push</references>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a9ec0fc6f54959ab50611735abed2b0ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srslog::log_channel::operator()</definition>
        <argsstring>(const uint8_t *buffer, size_t len, const char *fmtstr, Args &amp;&amp;... args)</argsstring>
        <name>operator()</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the provided log entry and passes it to the backend. When the channel is disabled the log entry will be discarded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="118" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="118" bodyend="150"/>
        <references refid="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" compoundref="log__channel_8h" startline="72" endline="72">enabled</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1ae6a35c82a4c5257f946e477a2ce907b9">srslog::detail::log_backend::alloc_arg_store</references>
        <references refid="classsrslog_1_1sink_1afefc81cbae7348e62570771e3d0f9ead" compoundref="sink_8h" startline="33" endline="33">srslog::sink::get_formatter</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1a13c29881fc1af8da38ba63655d038f8e">srslog::detail::log_backend::push</references>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a3e46e3f9849f970ab28774153bf7f9f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structsrslog_1_1detail_1_1is__byte__iterable" kindref="compound">detail::is_byte_iterable</ref>&lt; It &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srslog::log_channel::operator()</definition>
        <argsstring>(It it_begin, It it_end, const char *fmtstr, Args &amp;&amp;... args)</argsstring>
        <name>operator()</name>
        <param>
          <type>It</type>
          <declname>it_begin</declname>
        </param>
        <param>
          <type>It</type>
          <declname>it_end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the provided log entry and passes it to the backend. When the channel is disabled the log entry will be discarded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="155" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="155" bodyend="187"/>
        <references refid="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" compoundref="log__channel_8h" startline="72" endline="72">enabled</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1ae6a35c82a4c5257f946e477a2ce907b9">srslog::detail::log_backend::alloc_arg_store</references>
        <references refid="classsrslog_1_1sink_1afefc81cbae7348e62570771e3d0f9ead" compoundref="sink_8h" startline="33" endline="33">srslog::sink::get_formatter</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1a13c29881fc1af8da38ba63655d038f8e">srslog::detail::log_backend::push</references>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1a372168ba85360f41cf5b3da147ef7c7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srslog::log_channel::operator()</definition>
        <argsstring>(const context&lt; Ts... &gt; &amp;ctx)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structsrslog_1_1context" kindref="compound">context</ref>&lt; Ts... &gt; &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the provided log entry and passes it to the backend. When the channel is disabled the log entry will be discarded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="192" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="192" bodyend="211"/>
        <references refid="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" compoundref="log__channel_8h" startline="72" endline="72">enabled</references>
        <references refid="classsrslog_1_1sink_1afefc81cbae7348e62570771e3d0f9ead" compoundref="sink_8h" startline="33" endline="33">srslog::sink::get_formatter</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1a13c29881fc1af8da38ba63655d038f8e">srslog::detail::log_backend::push</references>
      </memberdef>
      <memberdef kind="function" id="classsrslog_1_1log__channel_1ae9cf1ba0bb417ab1cae83c94b731d579" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srslog::log_channel::operator()</definition>
        <argsstring>(const context&lt; Ts... &gt; &amp;ctx, const char *fmtstr, Args &amp;&amp;... args)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structsrslog_1_1context" kindref="compound">context</ref>&lt; Ts... &gt; &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmtstr</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the provided log entry and passes it to the backend. When the channel is disabled the log entry will be discarded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/log_channel.h" line="216" column="8" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="216" bodyend="242"/>
        <references refid="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" compoundref="log__channel_8h" startline="72" endline="72">enabled</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1ae6a35c82a4c5257f946e477a2ce907b9">srslog::detail::log_backend::alloc_arg_store</references>
        <references refid="classsrslog_1_1sink_1afefc81cbae7348e62570771e3d0f9ead" compoundref="sink_8h" startline="33" endline="33">srslog::sink::get_formatter</references>
        <references refid="classsrslog_1_1detail_1_1log__backend_1a13c29881fc1af8da38ba63655d038f8e">srslog::detail::log_backend::push</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A log channel is the entity used for logging messages.</para>
<para>It can deliver a log entry to one or more different sinks, for example a file or a console. Generated log entries by the application will be ignored by the channel when set to disabled. NOTE: Thread safe class. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>srslog::detail::log_backend</label>
        <link refid="classsrslog_1_1detail_1_1log__backend"/>
      </node>
      <node id="3">
        <label>srslog::sink</label>
        <link refid="classsrslog_1_1sink"/>
      </node>
      <node id="1">
        <label>srslog::log_channel</label>
        <link refid="classsrslog_1_1log__channel"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-backend</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>-log_sink</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/srslog/log_channel.h" line="47" column="1" bodyfile="include/srsgnb/srslog/log_channel.h" bodystart="46" bodyend="254"/>
    <listofallmembers>
      <member refid="classsrslog_1_1log__channel_1ac7393041f81cc9fccc1b10e81aa0acf5" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>backend</name></member>
      <member refid="classsrslog_1_1log__channel_1acbcce1b864b9b31dd5f6895cd01eaf5f" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>ctx_value</name></member>
      <member refid="classsrslog_1_1log__channel_1a83613046d610cd73d72541cdbada379d" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>enabled</name></member>
      <member refid="classsrslog_1_1log__channel_1aede5744befe8d397893983b960d4971c" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>hex_max_size</name></member>
      <member refid="classsrslog_1_1log__channel_1a018513fb2056a83215124987e10cbcc9" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>id</name></member>
      <member refid="classsrslog_1_1log__channel_1ab78bd5e4c4457164e500ceda5685d5c1" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>is_enabled</name></member>
      <member refid="classsrslog_1_1log__channel_1a9261b3fe5c7581f882075f4c66f5d76c" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>log_channel</name></member>
      <member refid="classsrslog_1_1log__channel_1ad2cc90c62dd767ed1da5a3960a9d9ce7" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>log_channel</name></member>
      <member refid="classsrslog_1_1log__channel_1a1c319d6eda825d188118fd531fa2b492" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>log_channel</name></member>
      <member refid="classsrslog_1_1log__channel_1a15908f7af136e1a3e4653d35f64330e9" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>log_id</name></member>
      <member refid="classsrslog_1_1log__channel_1afce1984bf7bf89961c4ced0db8d92269" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>log_name</name></member>
      <member refid="classsrslog_1_1log__channel_1a065488f16d6528c87d7f013ec84f9f90" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>log_sink</name></member>
      <member refid="classsrslog_1_1log__channel_1ad092b69e1f13d26acf993bc4f18b2b09" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>log_tag</name></member>
      <member refid="classsrslog_1_1log__channel_1a5fe2ff176650323c24fbd01689267330" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>operator()</name></member>
      <member refid="classsrslog_1_1log__channel_1a9ec0fc6f54959ab50611735abed2b0ef" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>operator()</name></member>
      <member refid="classsrslog_1_1log__channel_1a3e46e3f9849f970ab28774153bf7f9f3" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>operator()</name></member>
      <member refid="classsrslog_1_1log__channel_1a372168ba85360f41cf5b3da147ef7c7b" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>operator()</name></member>
      <member refid="classsrslog_1_1log__channel_1ae9cf1ba0bb417ab1cae83c94b731d579" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>operator()</name></member>
      <member refid="classsrslog_1_1log__channel_1a2f49e07fc80df7912b14e3124420d614" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>operator=</name></member>
      <member refid="classsrslog_1_1log__channel_1a6cf99f22c3f1e6645d5e0a3174875c25" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>set_context</name></member>
      <member refid="classsrslog_1_1log__channel_1ad2b6d6ea694afde99e2f64ebc28ec77b" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>set_enabled</name></member>
      <member refid="classsrslog_1_1log__channel_1a5485a652014d788cd8b12b299fe08086" prot="public" virt="non-virtual"><scope>srslog::log_channel</scope><name>set_hex_dump_max_size</name></member>
      <member refid="classsrslog_1_1log__channel_1aed1dbddac4ed85c38e9ddda14419ccd1" prot="private" virt="non-virtual"><scope>srslog::log_channel</scope><name>should_print_context</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
