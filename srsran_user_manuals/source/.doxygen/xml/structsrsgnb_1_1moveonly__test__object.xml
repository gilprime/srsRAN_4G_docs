<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structsrsgnb_1_1moveonly__test__object" kind="struct" language="C++" prot="public">
    <compoundname>srsgnb::moveonly_test_object</compoundname>
    <includes refid="test__utils_8h" local="no">test_utils.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structsrsgnb_1_1moveonly__test__object_1ad2024c64cb85c569d9365638fe73f944" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; int &gt;</type>
        <definition>std::unique_ptr&lt;int&gt; srsgnb::moveonly_test_object::val_ptr</definition>
        <argsstring></argsstring>
        <name>val_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="192" column="19" bodyfile="include/srsgnb/support/test_utils.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1a2107193510b90cc4cda37e03ec9d4e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::moveonly_test_object::moveonly_test_object</definition>
        <argsstring>()</argsstring>
        <name>moveonly_test_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="160" column="3" bodyfile="include/srsgnb/support/test_utils.h" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1a74ab37aa666da2b8bdb31c027b9d8398" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::moveonly_test_object::moveonly_test_object</definition>
        <argsstring>(int v)</argsstring>
        <name>moveonly_test_object</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="161" column="12" bodyfile="include/srsgnb/support/test_utils.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1ace10215e1791533b67e73c756baebb11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::moveonly_test_object::~moveonly_test_object</definition>
        <argsstring>()</argsstring>
        <name>~moveonly_test_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="162" column="3" bodyfile="include/srsgnb/support/test_utils.h" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1ac26cf6ab08f01a251d1d57558ca4e825" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::moveonly_test_object::moveonly_test_object</definition>
        <argsstring>(moveonly_test_object &amp;&amp;other) noexcept</argsstring>
        <name>moveonly_test_object</name>
        <param>
          <type><ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="163" column="3" bodyfile="include/srsgnb/support/test_utils.h" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1af0b55a1991114f76d29e258a48679716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>srsgnb::moveonly_test_object::moveonly_test_object</definition>
        <argsstring>(const moveonly_test_object &amp;other)=delete</argsstring>
        <name>moveonly_test_object</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="167" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1af2afddabbd70787bb476c213efdb84a9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;</type>
        <definition>moveonly_test_object&amp; srsgnb::moveonly_test_object::operator=</definition>
        <argsstring>(moveonly_test_object &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="168" column="24"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1abdc5e202c75c0ac7b17d21040b6b169e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;</type>
        <definition>moveonly_test_object&amp; srsgnb::moveonly_test_object::operator=</definition>
        <argsstring>(const moveonly_test_object &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="169" column="24"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1ab88056e9310a819a649f0a5a274f2806" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::moveonly_test_object::has_value</definition>
        <argsstring>() const</argsstring>
        <name>has_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="171" column="8" bodyfile="include/srsgnb/support/test_utils.h" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1a5ab60e190a5562d547e0eb1fe867656d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int srsgnb::moveonly_test_object::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="172" column="8" bodyfile="include/srsgnb/support/test_utils.h" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1aeb88d887ceb5d4725a9264752cc16462" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::moveonly_test_object::operator==</definition>
        <argsstring>(const moveonly_test_object &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="177" column="8" bodyfile="include/srsgnb/support/test_utils.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1a4ca3f12f1631bff93725ae6053059d82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::moveonly_test_object::operator!=</definition>
        <argsstring>(const moveonly_test_object &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1moveonly__test__object" kindref="compound">moveonly_test_object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="181" column="8" bodyfile="include/srsgnb/support/test_utils.h" bodystart="181" bodyend="181"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1a5c7105c4939891f6e3999322357e5df4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t srsgnb::moveonly_test_object::object_count</definition>
        <argsstring>()</argsstring>
        <name>object_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="183" column="17" bodyfile="include/srsgnb/support/test_utils.h" bodystart="183" bodyend="183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structsrsgnb_1_1moveonly__test__object_1a0c38cd47438b911eb436316161adeb81" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>static size_t&amp; srsgnb::moveonly_test_object::object_count_impl</definition>
        <argsstring>()</argsstring>
        <name>object_count_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/test_utils.h" line="186" column="17" bodyfile="include/srsgnb/support/test_utils.h" bodystart="186" bodyend="190"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test object to verify correct move ctor/assignment logic. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::moveonly_test_object</label>
        <link refid="structsrsgnb_1_1moveonly__test__object"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/support/test_utils.h" line="159" column="27" bodyfile="include/srsgnb/support/test_utils.h" bodystart="159" bodyend="193"/>
    <listofallmembers>
      <member refid="structsrsgnb_1_1moveonly__test__object_1ab88056e9310a819a649f0a5a274f2806" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>has_value</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1a2107193510b90cc4cda37e03ec9d4e22" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>moveonly_test_object</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1a74ab37aa666da2b8bdb31c027b9d8398" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>moveonly_test_object</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1ac26cf6ab08f01a251d1d57558ca4e825" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>moveonly_test_object</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1af0b55a1991114f76d29e258a48679716" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>moveonly_test_object</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1a5c7105c4939891f6e3999322357e5df4" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>object_count</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1a0c38cd47438b911eb436316161adeb81" prot="private" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>object_count_impl</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1a4ca3f12f1631bff93725ae6053059d82" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>operator!=</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1af2afddabbd70787bb476c213efdb84a9" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>operator=</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1abdc5e202c75c0ac7b17d21040b6b169e" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>operator=</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1aeb88d887ceb5d4725a9264752cc16462" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>operator==</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1ad2024c64cb85c569d9365638fe73f944" prot="private" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>val_ptr</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1a5ab60e190a5562d547e0eb1fe867656d" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>value</name></member>
      <member refid="structsrsgnb_1_1moveonly__test__object_1ace10215e1791533b67e73c756baebb11" prot="public" virt="non-virtual"><scope>srsgnb::moveonly_test_object</scope><name>~moveonly_test_object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
