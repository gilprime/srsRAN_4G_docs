<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="short__block__encoder__impl_8cpp" kind="file" language="C++">
    <compoundname>short_block_encoder_impl.cpp</compoundname>
    <includes refid="short__block__encoder__impl_8h" local="yes">short_block_encoder_impl.h</includes>
    <includes refid="static__vector_8h" local="yes">srsgnb/adt/static_vector.h</includes>
    <includes refid="binary_8h" local="yes">srsgnb/srsvec/binary.h</includes>
    <includes refid="srsgnb__assert_8h" local="yes">srsgnb/support/srsgnb_assert.h</includes>
    <incdepgraph>
      <node id="47">
        <label>atomic</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="18">
        <label>iterator</label>
      </node>
      <node id="2">
        <label>short_block_encoder_impl.h</label>
        <link refid="short__block__encoder__impl_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="42">
        <label>srsgnb/srslog/detail/support/memory_buffer.h</label>
        <link refid="memory__buffer_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>srsgnb/phy/upper/channel_coding/short/short_block_encoder.h</label>
        <link refid="short__block__encoder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="22">
        <label>cassert</label>
      </node>
      <node id="25">
        <label>detail/type_storage.h</label>
        <link refid="type__storage_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="44">
        <label>srsgnb/srslog/context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="28">
        <label>srsgnb/support/srsgnb_assert.h</label>
        <link refid="srsgnb__assert_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>srsgnb/ran/modulation_scheme.h</label>
        <link refid="modulation__scheme_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>srsgnb/srslog/detail/support/error_string.h</label>
        <link refid="error__string_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>srsgnb/srsvec/binary.h</label>
        <link refid="binary_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>srsgnb/srslog/detail/log_entry.h</label>
        <link refid="log__entry_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>srsgnb/srsvec/detail/traits.h</label>
        <link refid="traits_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>srsgnb/srslog/shared_types.h</label>
        <link refid="shared__types_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>srsgnb/srslog/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>pthread.h</label>
      </node>
      <node id="51">
        <label>srsgnb/adt/complex.h</label>
        <link refid="complex_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cstdio</label>
      </node>
      <node id="46">
        <label>tuple</label>
      </node>
      <node id="32">
        <label>srsgnb/srslog/log_channel.h</label>
        <link refid="log__channel_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
      <node id="27">
        <label>utility</label>
      </node>
      <node id="38">
        <label>srsgnb/srslog/detail/support/thread_utils.h</label>
        <link refid="thread__utils_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>array</label>
      </node>
      <node id="45">
        <label>srsgnb/srslog/detail/support/tmpl_utils.h</label>
        <link refid="tmpl__utils_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>srsgnb/adt/static_vector.h</label>
        <link refid="static__vector_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cerrno</label>
      </node>
      <node id="4">
        <label>srsgnb/adt/span.h</label>
        <link refid="span_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>cstddef</label>
      </node>
      <node id="37">
        <label>chrono</label>
      </node>
      <node id="33">
        <label>srsgnb/srslog/detail/log_backend.h</label>
        <link refid="log__backend_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>srsgnb/srslog/detail/log_entry_metadata.h</label>
        <link refid="log__entry__metadata_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>srsgnb/srslog/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>srsgnb/srslog/srslog.h</label>
        <link refid="srslog_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>srsgnb/srsvec/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="52">
        <label>complex</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="30">
        <label>srsgnb/srslog/detail/support/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
      <node id="43">
        <label>srsgnb/srslog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="1">
        <label>lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp</label>
        <link refid="short__block__encoder__impl_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="short__block__encoder__impl_8cpp_1ad14239b64a3c2aa0db6d7f362502949b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned MAX_IN_BITS</definition>
        <argsstring></argsstring>
        <name>MAX_IN_BITS</name>
        <initializer>= 11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="19" column="27" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="short__block__encoder__impl_8cpp_1a9a5cc8bc923eb07825b44c7b07179a0c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned MAX_BLOCK_BITS</definition>
        <argsstring></argsstring>
        <name>MAX_BLOCK_BITS</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="21" column="27" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="short__block__encoder__impl_8cpp_1a33e2526ea35be6f08cd1491bb1bf998e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::array&lt; std::array&lt; uint8_t, MAX_BLOCK_BITS &gt;, MAX_IN_BITS &gt;</type>
        <definition>constexpr std::array&lt;std::array&lt;uint8_t, MAX_BLOCK_BITS&gt;, MAX_IN_BITS&gt; BASIS_SEQUENCES</definition>
        <argsstring></argsstring>
        <name>BASIS_SEQUENCES</name>
        <initializer>= {
    {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
     {1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0},
     {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0},
     {0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0},
     {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0},
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0},
     {0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0},
     {0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0},
     {0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0},
     {0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0},
     {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0}}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="23" column="29" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="short__block__encoder__impl_8cpp_1ae0785460b2f0a8e1d8766961ffc4ddbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void validate_spans</definition>
        <argsstring>(span&lt; uint8_t &gt; output, span&lt; const uint8_t &gt; input, unsigned bits_per_symbol)</argsstring>
        <name>validate_spans</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bits_per_symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="36" column="13" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="36" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="short__block__encoder__impl_8cpp_1aae5902c4cfb446c058ed2d835b85b093" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void encode_1</definition>
        <argsstring>(span&lt; uint8_t &gt; output, span&lt; const uint8_t &gt; input)</argsstring>
        <name>encode_1</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="58" column="13" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="short__block__encoder__impl_8cpp_1a6994067782958fad6cb909ce6a8162ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void encode_2</definition>
        <argsstring>(span&lt; uint8_t &gt; output, span&lt; const uint8_t &gt; input)</argsstring>
        <name>encode_2</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="68" column="13" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="68" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="short__block__encoder__impl_8cpp_1a09c73482ff8c3490eebe86c57baadf70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void encode_3_11</definition>
        <argsstring>(span&lt; uint8_t &gt; output, span&lt; const uint8_t &gt; input)</argsstring>
        <name>encode_3_11</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="92" column="13" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="92" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="short__block__encoder__impl_8cpp_1a5cf353bc73d162cd487adaf927d45a83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rate_match</definition>
        <argsstring>(span&lt; uint8_t &gt; output, span&lt; const uint8_t &gt; input)</argsstring>
        <name>rate_match</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" line="105" column="13" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="105" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="short__block__encoder__impl_8h" kindref="compound">short_block_encoder_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/adt/static_vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srsvec/binary.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/support/srsgnb_assert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesrsgnb" kindref="compound">srsgnb</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>message<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>MAX_IN_BITS<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>codeblock<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>MAX_BLOCK_BITS<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>std::array&lt;std::array&lt;uint8_t,<sp/>MAX_BLOCK_BITS&gt;,<sp/>MAX_IN_BITS&gt;<sp/>BASIS_SEQUENCES<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{{1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0}}};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>validate_spans(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;uint8_t&gt;</ref><sp/>output,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref><sp/>input,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bits_per_symbol)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in_size<sp/><sp/>=<sp/>input.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>out_size<sp/>=<sp/>output.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>srsgnb_assert((in_size<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(in_size<sp/>&lt;=<sp/>MAX_IN_BITS),<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>input<sp/>length<sp/>should<sp/>be<sp/>between<sp/>1<sp/>and<sp/>11<sp/>bits.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_size<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>length<sp/>should<sp/>be<sp/>no<sp/>less<sp/>than<sp/>MAX_OUT_BITS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>srsgnb_assert(out_size<sp/>&gt;=<sp/>MAX_BLOCK_BITS,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>output<sp/>length.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>min_out_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_size<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>length<sp/>must<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>per<sp/>symbol<sp/>of<sp/>the<sp/>block<sp/>modulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_out_length<sp/>=<sp/>bits_per_symbol;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_size<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>length<sp/>must<sp/>be<sp/>equal<sp/>to<sp/>three<sp/>times<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>per<sp/>symbol<sp/>of<sp/>the<sp/>block<sp/>modulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_out_length<sp/>=<sp/>3<sp/>*<sp/>bits_per_symbol;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>srsgnb_assert(out_size<sp/>&gt;=<sp/>min_out_length,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>output<sp/>length.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encoder<sp/>function<sp/>for<sp/>a<sp/>single<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode_1(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;uint8_t&gt;</ref><sp/>output,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref><sp/>input)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::fill(output.<ref refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" kindref="member">begin</ref>(),<sp/>output.<ref refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" kindref="member">end</ref>(),<sp/><ref refid="namespacesrsgnb_1a5e11127ef81316d9d2c9675b2e97d246" kindref="member">PLACEHOLDER_ONE</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>output[0]<sp/>=<sp/>input[0];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>output[1]<sp/>=<sp/><ref refid="namespacesrsgnb_1a9c5ba19e335aa256c0815988a715338c" kindref="member">PLACEHOLDER_REPEAT</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encoder<sp/>function<sp/>for<sp/>sequences<sp/>of<sp/>2<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode_2(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;uint8_t&gt;</ref><sp/>output,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref><sp/>input)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>std::fill(output.<ref refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" kindref="member">begin</ref>(),<sp/>output.<ref refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" kindref="member">end</ref>(),<sp/><ref refid="namespacesrsgnb_1a5e11127ef81316d9d2c9675b2e97d246" kindref="member">PLACEHOLDER_ONE</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>uint8_t<sp/>c0<sp/>=<sp/>input[0];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>uint8_t<sp/>c1<sp/>=<sp/>input[1];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>uint8_t<sp/>c2<sp/>=<sp/>c0<sp/>^<sp/>c1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>output[0]<sp/>=<sp/>c0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>output[1]<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2]<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate_spans<sp/>ensures<sp/>that<sp/>output.size()<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>output.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>()<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>output[step]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>output[step<sp/>+<sp/>1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>c0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2UL<sp/>*<sp/>step]<sp/><sp/><sp/><sp/><sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2UL<sp/>*<sp/>step<sp/>+<sp/>1]<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encoder<sp/>function<sp/>for<sp/>sequences<sp/>of<sp/>length<sp/>between<sp/>3<sp/>and<sp/>11<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode_3_11(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;uint8_t&gt;</ref><sp/>output,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref><sp/>input)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>output<sp/>is<sp/>initialized<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>std::fill(output.<ref refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" kindref="member">begin</ref>(),<sp/>output.<ref refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" kindref="member">end</ref>(),<sp/>0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>c_i<sp/>=<sp/>0,<sp/>length<sp/>=<sp/>input.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>();<sp/>c_i<sp/>!=<sp/>length;<sp/>++c_i)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input[c_i]<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srsvec::binary_xor(output,<sp/>BASIS_SEQUENCES[c_i],<sp/>output);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>the<sp/>rate<sp/>of<sp/>a<sp/>short<sp/>block<sp/>according<sp/>to<sp/>TS38.212<sp/>Section<sp/>5.4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rate_match(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;uint8_t&gt;</ref><sp/>output,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref><sp/>input)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>output_size<sp/>=<sp/>output.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>input_size<sp/><sp/>=<sp/>input.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>srsgnb_assert(output_size<sp/>&gt;=<sp/>input_size,<sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>size<sp/>cannot<sp/>be<sp/>smaller<sp/>than<sp/>input<sp/>size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>!=<sp/>output_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>output[idx]<sp/>=<sp/>input[idx<sp/>%<sp/>input_size];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classsrsgnb_1_1short__block__encoder__impl_1a9e874fc2f6b85564deb48c666e0023fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1short__block__encoder__impl_1a9e874fc2f6b85564deb48c666e0023fa" kindref="member">short_block_encoder_impl::encode</ref>(<ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;uint8_t&gt;</ref><sp/>output,<sp/><ref refid="classsrsgnb_1_1span" kindref="compound">span&lt;const uint8_t&gt;</ref><sp/>input,<sp/><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4" kindref="member">modulation_scheme</ref><sp/>mod)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bits_per_symbol<sp/>=<sp/><ref refid="namespacesrsgnb_1a0d8c69bda1d828c45f83f9e92e23b0b1" kindref="member">get_bits_per_symbol</ref>(mod);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>validate_spans(output,<sp/>input,<sp/>bits_per_symbol);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector&lt;uint8_t, MAX_BLOCK_BITS&gt;</ref><sp/>tmp(0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(input.<ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp.resize(bits_per_symbol);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encode_1(tmp,<sp/>input);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp.resize(3UL<sp/>*<sp/>bits_per_symbol);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encode_2(tmp,<sp/>input);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp.resize(MAX_BLOCK_BITS);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encode_3_11(tmp,<sp/>input);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>rate_match(output,<sp/>tmp);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">std::unique_ptr&lt;short_block_encoder&gt;<sp/>srsgnb::create_short_block_encoder()</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;short_block_encoder_impl&gt;();</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp"/>
  </compounddef>
</doxygen>
