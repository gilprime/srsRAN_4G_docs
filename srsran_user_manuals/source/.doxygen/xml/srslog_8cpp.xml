<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="srslog_8cpp" kind="file" language="C++">
    <compoundname>srslog.cpp</compoundname>
    <includes refid="srslog_8h" local="yes">srsgnb/srslog/srslog.h</includes>
    <includes refid="json__formatter_8h" local="yes">formatters/json_formatter.h</includes>
    <includes refid="lib_2srslog_2sinks_2file__sink_8h" local="yes">sinks/file_sink.h</includes>
    <includes refid="syslog__sink_8h" local="yes">sinks/syslog_sink.h</includes>
    <includes refid="srslog__instance_8h" local="yes">srslog_instance.h</includes>
    <incdepgraph>
      <node id="39">
        <label>atomic</label>
      </node>
      <node id="58">
        <label>system_error</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="25">
        <label>limits</label>
      </node>
      <node id="14">
        <label>iterator</label>
      </node>
      <node id="62">
        <label>object_repository.h</label>
        <link refid="object__repository_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>cstdint</label>
      </node>
      <node id="32">
        <label>srsgnb/srslog/detail/support/memory_buffer.h</label>
        <link refid="memory__buffer_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>log_backend_impl.h</label>
        <link refid="log__backend__impl_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cmath</label>
      </node>
      <node id="38">
        <label>cassert</label>
      </node>
      <node id="54">
        <label>srsgnb/adt/detail/type_storage.h</label>
        <link refid="type__storage_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>stdexcept</label>
      </node>
      <node id="34">
        <label>srsgnb/srslog/context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>srslog_instance.h</label>
        <link refid="srslog__instance_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>backend_worker.h</label>
        <link refid="backend__worker_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="57">
        <label>srsgnb/support/srsgnb_assert.h</label>
        <link refid="srsgnb__assert_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>srsgnb/srslog/detail/support/error_string.h</label>
        <link refid="error__string_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>srsgnb/adt/detail/operator.h</label>
        <link refid="operator_8h_source"/>
      </node>
      <node id="20">
        <label>srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>syslog.h</label>
      </node>
      <node id="18">
        <label>srsgnb/srslog/detail/log_entry.h</label>
        <link refid="log__entry_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>srsgnb/srslog/shared_types.h</label>
        <link refid="shared__types_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>srsgnb/srslog/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>condition_variable</label>
      </node>
      <node id="29">
        <label>pthread.h</label>
      </node>
      <node id="11">
        <label>cstdio</label>
      </node>
      <node id="56">
        <label>srsgnb/adt/expected.h</label>
        <link refid="expected_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>srsgnb/srslog/log_channel.h</label>
        <link refid="log__channel_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>sinks/syslog_sink.h</label>
        <link refid="syslog__sink_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="55">
        <label>utility</label>
      </node>
      <node id="28">
        <label>srsgnb/srslog/detail/support/thread_utils.h</label>
        <link refid="thread__utils_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>array</label>
      </node>
      <node id="1">
        <label>lib/srslog/srslog.cpp</label>
        <link refid="srslog_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>sinks/file_sink.h</label>
        <link refid="lib_2srslog_2sinks_2file__sink_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>srsgnb/srslog/detail/support/tmpl_utils.h</label>
        <link refid="tmpl__utils_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>cerrno</label>
      </node>
      <node id="36">
        <label>cstddef</label>
      </node>
      <node id="63">
        <label>unordered_map</label>
      </node>
      <node id="51">
        <label>srsgnb/srslog/detail/support/work_queue.h</label>
        <link refid="work__queue_8h_source"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>file_utils.h</label>
        <link refid="file__utils_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>srsgnb/adt/circular_buffer.h</label>
        <link refid="circular__buffer_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>mutex</label>
      </node>
      <node id="27">
        <label>chrono</label>
      </node>
      <node id="8">
        <label>srsgnb/srslog/detail/log_backend.h</label>
        <link refid="log__backend_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>srsgnb/srslog/detail/log_entry_metadata.h</label>
        <link refid="log__entry__metadata_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>srsgnb/srslog/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>formatters/json_formatter.h</label>
        <link refid="json__formatter_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>thread</label>
      </node>
      <node id="2">
        <label>srsgnb/srslog/srslog.h</label>
        <link refid="srslog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
      <node id="49">
        <label>srsgnb/srslog/detail/support/dyn_arg_store_pool.h</label>
        <link refid="dyn__arg__store__pool_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>formatters/text_formatter.h</label>
        <link refid="text__formatter_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>srsgnb/srslog/detail/support/backend_capacity.h</label>
        <link refid="backend__capacity_8h_source"/>
      </node>
      <node id="21">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>srsgnb/srslog/detail/support/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>sinks/stream_sink.h</label>
        <link refid="stream__sink_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="33">
        <label>srsgnb/srslog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>srsgnb/srslog/bundled/fmt/core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="srslog_8cpp_1a911ab15f359fe6bb9fed77eff326db02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string remove_sharp_chars</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>remove_sharp_chars</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the input string with any occurrences of the &apos;#&apos; character removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog.cpp" line="21" column="20" bodyfile="lib/srslog/srslog.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="srslog_8cpp_1a73be4d072a14325543efc17d6b09ad60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref> &amp;</type>
        <definition>static log_channel&amp; fetch_log_channel_helper</definition>
        <argsstring>(const std::string &amp;id, Args &amp;&amp;... args)</argsstring>
        <name>fetch_log_channel_helper</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Generic argument function that fetches a log channel from the repository. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog.cpp" line="30" column="20" bodyfile="lib/srslog/srslog.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="srslog_8cpp_1a515c93bff161e492d31b2d1fbe618535" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string build_logger_name</definition>
        <argsstring>(const std::string &amp;id, char tag)</argsstring>
        <name>build_logger_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>char</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Builds a logger name out of the id and tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog.cpp" line="266" column="20" bodyfile="lib/srslog/srslog.cpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="srslog_8cpp_1ad889f0fd089d0c2fd49dbc6e74683f7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">basic_logger</ref> &amp;</type>
        <definition>static basic_logger&amp; fetch_basic_logger_helper</definition>
        <argsstring>(const std::string &amp;id, sink &amp;s, bool should_print_context)</argsstring>
        <name>fetch_basic_logger_helper</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>should_print_context</declname>
        </param>
        <briefdescription>
<para>Fetches a logger with all its log channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog.cpp" line="272" column="21" bodyfile="lib/srslog/srslog.cpp" bodystart="272" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="srslog_8cpp_1a580fe8805f935816db845650c9c1f29d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref> *</type>
        <definition>static log_channel* create_and_register_log_channel</definition>
        <argsstring>(const std::string &amp;id, sink &amp;s)</argsstring>
        <name>create_and_register_log_channel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deprecated functions to be removed. Creates and registers a log channel. Returns a pointer to the newly created channel on success, otherwise nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog.cpp" line="332" column="20" bodyfile="lib/srslog/srslog.cpp" bodystart="332" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="srslog_8cpp_1a0e30644d76ee3f9d09691f97ae8e917e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref> *</type>
        <definition>static log_channel* create_and_register_log_channel</definition>
        <argsstring>(const std::string &amp;id, log_channel_config config, sink &amp;s)</argsstring>
        <name>create_and_register_log_channel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref></type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog.cpp" line="344" column="20" bodyfile="lib/srslog/srslog.cpp" bodystart="344" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="srslog_8cpp_1aff15467ad69eecd430703499a2a70d31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool contains_sharp_char</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>contains_sharp_char</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the input string contains a sharp character, otherwise returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog.cpp" line="360" column="13" bodyfile="lib/srslog/srslog.cpp" bodystart="360" bodyend="363"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srslog/srslog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;formatters/json_formatter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sinks/file_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sinks/syslog_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srslog_instance.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">srslog;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>remove_sharp_chars(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::string<sp/>result(s);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>result.erase(std::remove(result.begin(),<sp/>result.end(),<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">),<sp/>result.end());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>fetch_log_channel_helper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_channel_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,<sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>std::forward&lt;Args&gt;(args)...));</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>srslog::find_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_channel_repo().<ref refid="classsrslog_1_1object__repository_1aefba74e68ddc74ebe79e089d04312ef0" kindref="member">find</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>srslog::fetch_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::string<sp/>clean_id<sp/>=<sp/>remove_sharp_chars(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>c<sp/>=<sp/>find_log_channel(clean_id))<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*c;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance" kindref="compound">srslog_instance</ref>&amp;<sp/>instance<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch_log_channel_helper(clean_id,<sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1afdfd819dfe8f784cf6e3b6a4a953f5fe" kindref="member">get_default_sink</ref>(),<sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>());</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>srslog::fetch_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s,<sp/><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref><sp/>config)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::string<sp/>clean_id<sp/>=<sp/>remove_sharp_chars(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>c<sp/>=<sp/>find_log_channel(clean_id))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*c;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance" kindref="compound">srslog_instance</ref>&amp;<sp/>instance<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch_log_channel_helper(clean_id,<sp/>s,<sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>(),<sp/>std::move(config));</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog::set_default_log_formatter(std::unique_ptr&lt;log_formatter&gt;<sp/>f)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().<ref refid="classsrslog_1_1srslog__instance_1ab6742b8508816486a54e11a8714af99c" kindref="member">set_default_formatter</ref>(std::move(f));</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">std::unique_ptr&lt;log_formatter&gt;<sp/>srslog::get_default_log_formatter()</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().<ref refid="classsrslog_1_1srslog__instance_1a4aa111453d514ff9752513ac2a2b52cf" kindref="member">get_default_formatter</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">std::unique_ptr&lt;log_formatter&gt;<sp/>srslog::create_text_formatter()</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;log_formatter&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1text__formatter" kindref="compound">text_formatter</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">std::unique_ptr&lt;log_formatter&gt;<sp/>srslog::create_json_formatter()</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;log_formatter&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1json__formatter" kindref="compound">json_formatter</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog::set_default_sink(<ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().<ref refid="classsrslog_1_1srslog__instance_1a3a38c15d68e7121787425ec998ee3ee7" kindref="member">set_default_sink</ref>(s);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>srslog::get_default_sink()</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().<ref refid="classsrslog_1_1srslog__instance_1afdfd819dfe8f784cf6e3b6a4a953f5fe" kindref="member">get_default_sink</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>*<sp/>srslog::find_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aefba74e68ddc74ebe79e089d04312ef0" kindref="member">find</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ptr)<sp/>?<sp/>ptr-&gt;get()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>srslog::fetch_stdout_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>std::unique_ptr&lt;log_formatter&gt;<sp/>f)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>find_sink(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1stream__sink" kindref="compound">stream_sink</ref>(sink_stream_type::stdout,<sp/>std::move(f))));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>srslog::fetch_stderr_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>std::unique_ptr&lt;log_formatter&gt;<sp/>f)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>find_sink(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1stream__sink" kindref="compound">stream_sink</ref>(sink_stream_type::stderr,<sp/>std::move(f))));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>srslog::fetch_file_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_size,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_flush,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;log_formatter&gt;<sp/>f)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>assert(!path.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>path<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>find_sink(path))<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//:<sp/>TODO:<sp/>GCC5<sp/>or<sp/>lower<sp/>versions<sp/>emits<sp/>an<sp/>error<sp/>if<sp/>we<sp/>use<sp/>the<sp/>new()<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>directly,<sp/>use<sp/>redundant<sp/>piecewise_construct<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(path),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1file__sink" kindref="compound">file_sink</ref>(path,<sp/>max_size,<sp/>force_flush,<sp/>std::move(f))));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>srslog::fetch_syslog_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preamble_,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>syslog_local_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_local_,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;log_formatter&gt;<sp/>f)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::string<sp/>sink_id<sp/>=<sp/>preamble_<sp/>+<sp/>std::to_string(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(log_local_));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>find_sink(sink_id))<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//:<sp/>TODO:<sp/>GCC5<sp/>or<sp/>lower<sp/>versions<sp/>emits<sp/>an<sp/>error<sp/>if<sp/>we<sp/>use<sp/>the<sp/>new()<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>directly,<sp/>use<sp/>redundant<sp/>piecewise_construct<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(sink_id),</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1syslog__sink" kindref="compound">syslog_sink</ref>(std::move(f),<sp/>preamble_,<sp/>log_local_)));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>srslog::install_custom_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>std::unique_ptr&lt;sink&gt;<sp/>s)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>path<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>*<sp/>input_sink<sp/><sp/><sp/><sp/>=<sp/>s.get();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>*<sp/>returned_sink<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>std::move(s)).get();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>insertion<sp/>occurs<sp/>when<sp/>the<sp/>returned<sp/>object<sp/>is<sp/>the<sp/>same<sp/>one<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input_sink<sp/>==<sp/>returned_sink;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog::init(backend_priority<sp/>priority)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>().<ref refid="classsrslog_1_1detail_1_1log__backend_1afa55f23e43827304a172b159fd585780" kindref="member">start</ref>(priority);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog::flush()</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance" kindref="compound">srslog_instance</ref>&amp;<sp/>instance<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do<sp/>when<sp/>the<sp/>backend<sp/>is<sp/>not<sp/>running<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>().<ref refid="classsrslog_1_1detail_1_1log__backend_1a2bf906bec5e3362d2064f3bba433df3f" kindref="member">is_running</ref>())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>backend<sp/>will<sp/>set<sp/>this<sp/>shared<sp/>variable<sp/>when<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>detail::shared_variable&lt;bool&gt;<sp/>completion_flag(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sink_ptrs<sp/>=<sp/>instance.get_sink_repo().<ref refid="classsrslog_1_1object__repository_1a374d8a18a8ef397258b31f920d62634b" kindref="member">contents</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>std::vector&lt;sink*&gt;<sp/>sinks;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>sinks.reserve(sink_ptrs.size());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s<sp/>:<sp/>sink_ptrs)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>sinks.push_back(s-&gt;get());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>detail::log_entry<sp/>cmd;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>cmd.metadata.store<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>cmd.flush_cmd<sp/>=</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;detail::flush_backend_cmd&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>detail::flush_backend_cmd{completion_flag,<sp/>std::move(sinks)});</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>flush<sp/>command<sp/>gets<sp/>into<sp/>the<sp/>backend,<sp/>otherwise<sp/>we<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stuck<sp/>waiting<sp/>forever<sp/>for<sp/>the<sp/>command<sp/>to<sp/>succeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>().<ref refid="classsrslog_1_1detail_1_1log__backend_1a13c29881fc1af8da38ba63655d038f8e" kindref="member">push</ref>(std::move(cmd)))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>the<sp/>caller<sp/>thread<sp/>until<sp/>we<sp/>are<sp/>signaled<sp/>that<sp/>the<sp/>flush<sp/>is<sp/>completed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!completion_flag)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::microseconds(100));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog::set_error_handler(error_handler<sp/>handler)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().<ref refid="classsrslog_1_1srslog__instance_1aa82dd9ebd8a40c7ba868a6f6d138efd1" kindref="member">set_error_handler</ref>(std::move(handler));</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="namespacesrslog_1_1detail_1aeec69f2c96c9de1d95b7b7e372c2f887" refkind="member"><highlight class="normal"><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">detail::any</ref>*<sp/><ref refid="namespacesrslog_1_1detail_1aeec69f2c96c9de1d95b7b7e372c2f887" kindref="member">srslog::detail::find_logger</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_logger_repo().<ref refid="classsrslog_1_1object__repository_1aefba74e68ddc74ebe79e089d04312ef0" kindref="member">find</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="namespacesrslog_1_1detail_1a43a9fb2fb67b1769690f11c4f82c7b4e" refkind="member"><highlight class="normal"><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">detail::any</ref>*<sp/><ref refid="namespacesrslog_1_1detail_1a43a9fb2fb67b1769690f11c4f82c7b4e" kindref="member">srslog::detail::fetch_logger</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">detail::any</ref>&amp;&amp;<sp/>logger)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_logger_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>std::move(logger));</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>build_logger_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tag)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}#{}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>tag);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">basic_logger</ref>&amp;<sp/>fetch_basic_logger_helper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print_context)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_logger_chan_tags[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance" kindref="compound">srslog_instance</ref>&amp;<sp/>instance<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>created<sp/>log<sp/>channels<sp/>cannot<sp/>have<sp/>ids<sp/>with<sp/>a<sp/>#<sp/>character,<sp/>encode<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ids<sp/>here<sp/>with<sp/>a<sp/>#<sp/>to<sp/>ensure<sp/>all<sp/>channels<sp/>are<sp/>unique.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>error<sp/>=</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fetch_log_channel_helper(build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[0]),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>(),</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref>{id,<sp/>basic_logger_chan_tags[0],<sp/>should_print_context});</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>warning<sp/>=</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fetch_log_channel_helper(build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[1]),</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>(),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref>{id,<sp/>basic_logger_chan_tags[1],<sp/>should_print_context});</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>info<sp/>=<sp/>fetch_log_channel_helper(build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[2]),</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>(),</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref>{id,<sp/>basic_logger_chan_tags[2],<sp/>should_print_context});</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>debug<sp/>=</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fetch_log_channel_helper(build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[3]),</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>(),</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref>{id,<sp/>basic_logger_chan_tags[3],<sp/>should_print_context});</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch_logger&lt;basic_logger&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>error,<sp/>warning,<sp/>info,<sp/>debug);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">basic_logger</ref>&amp;<sp/>srslog::fetch_basic_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print_context)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>logger<sp/>=<sp/>find_logger&lt;basic_logger&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*logger;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch_basic_logger_helper(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_default_sink(),<sp/>should_print_context);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">basic_logger</ref>&amp;<sp/>srslog::fetch_basic_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print_context)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>logger<sp/>=<sp/>find_logger&lt;basic_logger&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*logger;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch_basic_logger_helper(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>s,<sp/>should_print_context);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"></codeline>
<codeline lineno="332"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>create_and_register_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance" kindref="compound">srslog_instance</ref>&amp;<sp/>instance<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>p<sp/>=<sp/>instance.get_channel_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,<sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>s,<sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>()));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;p;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>create_and_register_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="structsrslog_1_1log__channel__config" kindref="compound">log_channel_config</ref><sp/>config,<sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1srslog__instance" kindref="compound">srslog_instance</ref>&amp;<sp/>instance<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>p<sp/>=</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instance.get_channel_repo().<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(std::piecewise_construct,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>s,<sp/>instance.<ref refid="classsrslog_1_1srslog__instance_1a9089a6931338ed4d402518b888ab1e39" kindref="member">get_backend</ref>(),<sp/>std::move(config)));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;p;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains_sharp_char(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.find(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>srslog::create_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains_sharp_char(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_and_register_log_channel(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>*<sp/>srslog::create_stdout_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aefba74e68ddc74ebe79e089d04312ef0" kindref="member">find</ref>(</highlight><highlight class="stringliteral">&quot;stdout&quot;</highlight><highlight class="normal">)-&gt;get();</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>*<sp/>srslog::create_stderr_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_sink_repo().<ref refid="classsrslog_1_1object__repository_1aefba74e68ddc74ebe79e089d04312ef0" kindref="member">find</ref>(</highlight><highlight class="stringliteral">&quot;stderr&quot;</highlight><highlight class="normal">)-&gt;get();</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>*<sp/>srslog::create_file_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_size)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//:<sp/>TODO:<sp/>GCC5<sp/>or<sp/>lower<sp/>versions<sp/>emits<sp/>an<sp/>error<sp/>if<sp/>we<sp/>use<sp/>the<sp/>new()<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>directly,<sp/>use<sp/>redundant<sp/>piecewise_construct<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>()</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.get_sink_repo()</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" kindref="member">emplace</ref>(std::piecewise_construct,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(path),</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1file__sink" kindref="compound">file_sink</ref>(path,<sp/>max_size,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>std::unique_ptr&lt;log_formatter&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1text__formatter" kindref="compound">text_formatter</ref>))))</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.get();</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">basic_logger</ref>*<sp/>srslog::create_basic_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classsrslog_1_1sink" kindref="compound">sink</ref>&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_print_context)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>assert(!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>id<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basic_logger_chan_tags[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>logger_repo<sp/>=<sp/><ref refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" kindref="member">srslog_instance::get</ref>().get_logger_repo();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do<sp/>when<sp/>the<sp/>logger<sp/>already<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger_repo.find(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>created<sp/>log<sp/>channels<sp/>cannot<sp/>have<sp/>ids<sp/>with<sp/>a<sp/>#<sp/>character,<sp/>encode<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ids<sp/>here<sp/>with<sp/>a<sp/>#<sp/>to<sp/>ensure<sp/>all<sp/>channel<sp/>creations<sp/>will<sp/>be<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>any<sp/>id<sp/>clashes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>error<sp/>=<sp/>create_and_register_log_channel(</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[0]),<sp/>{id,<sp/>basic_logger_chan_tags[0],<sp/>should_print_context},<sp/>s);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>assert(error<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>warning<sp/>=<sp/>create_and_register_log_channel(</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[1]),<sp/>{id,<sp/>basic_logger_chan_tags[1],<sp/>should_print_context},<sp/>s);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>assert(warning<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>info<sp/>=<sp/>create_and_register_log_channel(</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[2]),<sp/>{id,<sp/>basic_logger_chan_tags[2],<sp/>should_print_context},<sp/>s);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>assert(info<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>*<sp/>debug<sp/>=<sp/>create_and_register_log_channel(</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>build_logger_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>basic_logger_chan_tags[3]),<sp/>{id,<sp/>basic_logger_chan_tags[3],<sp/>should_print_context},<sp/>s);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>assert(debug<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_logger&lt;basic_logger&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>*error,<sp/>*warning,<sp/>*info,<sp/>*debug);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/srslog/srslog.cpp"/>
  </compounddef>
</doxygen>
