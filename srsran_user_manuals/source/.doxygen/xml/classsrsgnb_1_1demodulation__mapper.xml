<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1demodulation__mapper" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>srsgnb::demodulation_mapper</compoundname>
    <derivedcompoundref refid="classsrsgnb_1_1demodulation__mapper__impl" prot="public" virt="non-virtual">srsgnb::demodulation_mapper_impl</derivedcompoundref>
    <includes refid="demodulation__mapper_8h" local="no">demodulation_mapper.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1demodulation__mapper_1afa52289fd99d1c29a446e86631751fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual srsgnb::demodulation_mapper::~demodulation_mapper</definition>
        <argsstring>()=default</argsstring>
        <name>~demodulation_mapper</name>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_modulation/demodulation_mapper.h" line="38" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1demodulation__mapper_1a02dcf0326aa430232c0b7b6074b3b954" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void srsgnb::demodulation_mapper::demodulate_soft</definition>
        <argsstring>(span&lt; log_likelihood_ratio &gt; llrs, span&lt; const cf_t &gt; symbols, span&lt; const float &gt; noise_vars, modulation_scheme mod)=0</argsstring>
        <name>demodulate_soft</name>
        <reimplementedby refid="classsrsgnb_1_1demodulation__mapper__impl_1a41fe683ab1a2139de42ddb8e776aa866">demodulate_soft</reimplementedby>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="classsrsgnb_1_1log__likelihood__ratio" kindref="compound">log_likelihood_ratio</ref> &gt;</type>
          <declname>llrs</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>symbols</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>noise_vars</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4" kindref="member">modulation_scheme</ref></type>
          <declname>mod</declname>
        </param>
        <briefdescription>
<para>Soft demodulation. </para>
        </briefdescription>
        <detaileddescription>
<para>Demodulates complex symbols into log-likelihood ratios (i.e., soft bits). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">llrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Demodulated log-likelihood ratios. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">symbols</parametername>
</parameternamelist>
<parameterdescription>
<para>Complex symbols to demodulate (equalization output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">noise_vars</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise variances (after equalization). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mod</parametername>
</parameternamelist>
<parameterdescription>
<para>Modulation scheme. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Parameters <computeroutput>symbols</computeroutput> and <computeroutput>noise_vars</computeroutput> must have the same length. Each entry of <computeroutput>noise_vars</computeroutput> contains the (estimated) noise variance after equalization corresponding to the symbol with the same index. </para>
</simplesect>
<simplesect kind="remark"><para>The length of <computeroutput>llrs</computeroutput> is given by the number of symbols multiplied by the modulation order of <computeroutput>mod</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_modulation/demodulation_mapper.h" line="51" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Demodulator interface. </para>
    </briefdescription>
    <detaileddescription>
<para>The demodulation mapper reverts the operations described in TS38.211 Section 5.1. It takes as input a sequence of noisy, complex-valued modulation symbols and it returns a sequence of log-likelihood ratios (soft bits). More specifically, the <formula id="30">$m$</formula>th modulation symbol will be mapped to the soft bits <formula id="31">\[ \ell(b_{m+i}) = \log \frac{\Pr(b_{m+i}=0|y_m)}{\Pr(b_{m+i}=1|y_m)} \]</formula> where <formula id="32">$i = 0,1,\dots,Q_{\mathrm{m}}-1$</formula>, with <formula id="33">$Q_{\mathrm{m}}$</formula> denoting the modulation order as defined in TS38.211 Table 6.3.1.2-1, and where <formula id="34">$\Pr(b_{m+i}=B|y_m)$</formula> is the conditional probability of bit <formula id="35">$b_{m+i}$</formula> being equal to <formula id="36">$B$</formula> given the modulation symbol <formula id="37">$y_m$</formula>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>srsgnb::demodulation_mapper</label>
        <link refid="classsrsgnb_1_1demodulation__mapper"/>
      </node>
      <node id="2">
        <label>srsgnb::demodulation_mapper_impl</label>
        <link refid="classsrsgnb_1_1demodulation__mapper__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::demodulation_mapper</label>
        <link refid="classsrsgnb_1_1demodulation__mapper"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/phy/upper/channel_modulation/demodulation_mapper.h" line="35" column="1" bodyfile="include/srsgnb/phy/upper/channel_modulation/demodulation_mapper.h" bodystart="34" bodyend="55"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1demodulation__mapper_1a02dcf0326aa430232c0b7b6074b3b954" prot="public" virt="pure-virtual"><scope>srsgnb::demodulation_mapper</scope><name>demodulate_soft</name></member>
      <member refid="classsrsgnb_1_1demodulation__mapper_1afa52289fd99d1c29a446e86631751fa9" prot="public" virt="virtual"><scope>srsgnb::demodulation_mapper</scope><name>~demodulation_mapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
