<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="timers_8cpp" kind="file" language="C++">
    <compoundname>timers.cpp</compoundname>
    <includes refid="timers_8h" local="yes">srsgnb/support/timers.h</includes>
    <incdepgraph>
      <node id="6">
        <label>srsgnb/adt/unique_function.h</label>
        <link refid="unique__function_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>atomic</label>
      </node>
      <node id="22">
        <label>functional</label>
      </node>
      <node id="32">
        <label>limits</label>
      </node>
      <node id="4">
        <label>iterator</label>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="39">
        <label>srsgnb/srslog/detail/support/memory_buffer.h</label>
        <link refid="memory__buffer_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>srsgnb/adt/intrusive_list.h</label>
        <link refid="intrusive__list_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>srsgnb/support/error_handling.h</label>
        <link refid="error__handling_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>cmath</label>
      </node>
      <node id="44">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>srsgnb/adt/detail/type_storage.h</label>
        <link refid="type__storage_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>stdexcept</label>
      </node>
      <node id="41">
        <label>srsgnb/srslog/context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>string</label>
      </node>
      <node id="46">
        <label>srsgnb/support/srsgnb_assert.h</label>
        <link refid="srsgnb__assert_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>cinttypes</label>
      </node>
      <node id="38">
        <label>srsgnb/srslog/detail/support/error_string.h</label>
        <link refid="error__string_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>srsgnb/support/timers.h</label>
        <link refid="timers_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>srsgnb/srslog/detail/log_entry.h</label>
        <link refid="log__entry_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>srsgnb/srslog/shared_types.h</label>
        <link refid="shared__types_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>srsgnb/srslog/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>pthread.h</label>
      </node>
      <node id="20">
        <label>cstdio</label>
      </node>
      <node id="43">
        <label>tuple</label>
      </node>
      <node id="16">
        <label>srsgnb/srslog/log_channel.h</label>
        <link refid="log__channel_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>vector</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="35">
        <label>srsgnb/srslog/detail/support/thread_utils.h</label>
        <link refid="thread__utils_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>array</label>
      </node>
      <node id="42">
        <label>srsgnb/srslog/detail/support/tmpl_utils.h</label>
        <link refid="tmpl__utils_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>cerrno</label>
      </node>
      <node id="47">
        <label>cstdlib</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="50">
        <label>deque</label>
      </node>
      <node id="51">
        <label>mutex</label>
      </node>
      <node id="34">
        <label>chrono</label>
      </node>
      <node id="17">
        <label>srsgnb/srslog/detail/log_backend.h</label>
        <link refid="log__backend_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>srsgnb/srslog/detail/log_entry_metadata.h</label>
        <link refid="log__entry__metadata_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>srsgnb/srslog/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/support/timers.cpp</label>
        <link refid="timers_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>srsgnb/srslog/srslog.h</label>
        <link refid="srslog_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
      <node id="29">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>srsgnb/srslog/detail/support/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>cstring</label>
      </node>
      <node id="40">
        <label>srsgnb/srslog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>srsgnb/srslog/bundled/fmt/core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/support/timers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesrsgnb" kindref="compound">srsgnb</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classsrsgnb_1_1timer__manager_1a33435921c533ec2d8e13a71df9c37b11" refkind="member"><highlight class="normal"><ref refid="classsrsgnb_1_1timer__manager_1a33435921c533ec2d8e13a71df9c37b11" kindref="member">timer_manager::timer_manager</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity)<sp/>:<sp/>time_wheel(WHEEL_SIZE)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre-reserve<sp/>timers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.size()<sp/>&lt;<sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.emplace_back(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.size());</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>to<sp/>free<sp/>list<sp/>in<sp/>reverse<sp/>order<sp/>to<sp/>keep<sp/>ascending<sp/>ids.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.rbegin(),<sp/>e<sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.rend();<sp/>i<sp/>!=<sp/>e;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1aafaa2f899c8b9ec316637456e42c767f" kindref="member">free_list</ref>.push_front(&amp;*i);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1a2cea24916ec7f51c060d8d0d9056a827" kindref="member">nof_free_timers</ref><sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.size();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classsrsgnb_1_1timer__manager_1a4eab9dd69c7aed074af7ff84805f43a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1timer__manager_1a4eab9dd69c7aed074af7ff84805f43a3" kindref="member">timer_manager::tick_all</ref>()</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(<ref refid="classsrsgnb_1_1timer__manager_1a5c55558493f009113a1a299b15abc215" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1ad7541cf6206a5aa74ecda87301eedd1b" kindref="member">timer_tick_t</ref><sp/>cur_time_local<sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1aadb235d6dff2a283459d5de61c99d096" kindref="member">cur_time</ref>.load(std::memory_order_relaxed)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wheel_list<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1abbb77a8ff0c11a924eb89df623d23ced" kindref="member">time_wheel</ref>[cur_time_local<sp/>&amp;<sp/>WHEEL_MASK];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>intrusive<sp/>linked<sp/>list<sp/>of<sp/>running<sp/>timers<sp/>with<sp/>same<sp/>wheel<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>wheel_list.begin();<sp/>it<sp/>!=<sp/>wheel_list.end();)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle" kindref="compound">timer_handle</ref>&amp;<sp/>timer<sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>[it-&gt;id];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>timer<sp/>expires<sp/>right<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decode_timeout(timer.<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle_1adc10791286b613301aa5dc6de0565564" kindref="member">state</ref>.load(std::memory_order_relaxed))<sp/>!=<sp/>cur_time_local)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>timer.<sp/>Note:<sp/>callback<sp/>has<sp/>to<sp/>see<sp/>the<sp/>timer<sp/>has<sp/>already<sp/>expired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_timer_nolock(timer,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>callback<sp/>if<sp/>configured.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timer.<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle_1a1253585a231d4f4df237fa791353642f" kindref="member">callback</ref>.is_empty())<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlock<sp/>mutex.<sp/>It<sp/>can<sp/>happen<sp/>that<sp/>the<sp/>callback<sp/>tries<sp/>to<sp/>run<sp/>a<sp/>timer<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lock.unlock();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timer.<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle_1a1253585a231d4f4df237fa791353642f" kindref="member">callback</ref>(timer.<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle_1a6d16e60172cd416d33b87530a9116b15" kindref="member">id</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>again<sp/>to<sp/>keep<sp/>protecting<sp/>the<sp/>wheel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lock.lock();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>current<sp/>time.<sp/>unique<sp/>timers<sp/>&quot;time_elapsed&quot;<sp/>will<sp/>change<sp/>as<sp/>a<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1aadb235d6dff2a283459d5de61c99d096" kindref="member">cur_time</ref>.fetch_add(1,<sp/>std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classsrsgnb_1_1timer__manager_1ad6f2634b2d83a3a80e9aab6ddbd24ca5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1timer__manager_1ad6f2634b2d83a3a80e9aab6ddbd24ca5" kindref="member">timer_manager::stop_all</ref>()</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(<ref refid="classsrsgnb_1_1timer__manager_1a5c55558493f009113a1a299b15abc215" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>call<sp/>callback.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle" kindref="compound">timer_handle</ref>&amp;<sp/>timer<sp/>:<sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_timer_nolock(timer,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle" kindref="compound">timer_manager::timer_handle</ref>&amp;<sp/>timer_manager::create_timer()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(<ref refid="classsrsgnb_1_1timer__manager_1a5c55558493f009113a1a299b15abc215" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>timer_handle*<sp/>t;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classsrsgnb_1_1timer__manager_1aafaa2f899c8b9ec316637456e42c767f" kindref="member">free_list</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>&amp;<ref refid="classsrsgnb_1_1timer__manager_1aafaa2f899c8b9ec316637456e42c767f" kindref="member">free_list</ref>.front();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>srsgnb_assert(!t-&gt;allocated,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>timer<sp/>id=%&quot;</highlight><highlight class="normal"><sp/>PRIu32<sp/></highlight><highlight class="stringliteral">&quot;<sp/>state&quot;</highlight><highlight class="normal">,<sp/>t-&gt;id);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1aafaa2f899c8b9ec316637456e42c767f" kindref="member">free_list</ref>.pop_front();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="classsrsgnb_1_1timer__manager_1a2cea24916ec7f51c060d8d0d9056a827" kindref="member">nof_free_timers</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>increase<sp/>deque.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.emplace_back(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.size());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>&amp;<ref refid="classsrsgnb_1_1timer__manager_1a42e763a005d591ff29899e41ee09b0da" kindref="member">timer_list</ref>.back();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>t-&gt;allocated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*t;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classsrsgnb_1_1timer__manager_1a798e1c41078738724133fd7dca01cebd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1timer__manager_1a798e1c41078738724133fd7dca01cebd" kindref="member">timer_manager::destroy_timer</ref>(<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle" kindref="compound">timer_handle</ref>&amp;<sp/>timer)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(<ref refid="classsrsgnb_1_1timer__manager_1a5c55558493f009113a1a299b15abc215" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>destroy_timer_nolock(timer);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>timer_manager::destroy_timer_nolock(timer_handle&amp;<sp/>timer)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timer.allocated)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>deallocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>stop_timer_nolock(timer,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>timer.allocated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>timer.state.store(encode_state(<ref refid="classsrsgnb_1_1timer__manager_1a3e5715911a8e3461eea7d2351b3db689" kindref="member">STOPPED_FLAG</ref>,<sp/>0,<sp/>0),<sp/>std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>timer.callback<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1aafaa2f899c8b9ec316637456e42c767f" kindref="member">free_list</ref>.push_front(&amp;timer);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>++<ref refid="classsrsgnb_1_1timer__manager_1a2cea24916ec7f51c060d8d0d9056a827" kindref="member">nof_free_timers</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>id<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classsrsgnb_1_1timer__manager_1abe6f79ef4b9bddc3d33b23b7acf28023" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1timer__manager_1abe6f79ef4b9bddc3d33b23b7acf28023" kindref="member">timer_manager::start_run</ref>(<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle" kindref="compound">timer_handle</ref>&amp;<sp/>timer,<sp/><ref refid="namespacesrsgnb_1a0be707e6e824031784f5a15d82d7b055" kindref="member">timer_tick_difference_t</ref><sp/>duration)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(<ref refid="classsrsgnb_1_1timer__manager_1a5c55558493f009113a1a299b15abc215" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>start_run_nolock(timer,<sp/>duration);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>timer_manager::start_run_nolock(timer_handle&amp;<sp/>timer,<sp/><ref refid="namespacesrsgnb_1a0be707e6e824031784f5a15d82d7b055" kindref="member">timer_tick_difference_t</ref><sp/>duration)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>uint64_t<sp/>timer_old_state<sp/><sp/><sp/>=<sp/>timer.state.load(std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>duration<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>duration<sp/>==<sp/>0<sp/>?<sp/>decode_duration(timer_old_state)<sp/>:<sp/>duration;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1ad7541cf6206a5aa74ecda87301eedd1b" kindref="member">timer_tick_t</ref><sp/>new_timeout<sp/><sp/><sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1aadb235d6dff2a283459d5de61c99d096" kindref="member">cur_time</ref>.load(std::memory_order_relaxed)<sp/>+<sp/>duration;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_wheel_pos<sp/>=<sp/>new_timeout<sp/>&amp;<sp/>WHEEL_MASK;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1ad7541cf6206a5aa74ecda87301eedd1b" kindref="member">timer_tick_t</ref><sp/>old_timeout<sp/>=<sp/>decode_timeout(timer_old_state);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>was_running<sp/>=<sp/><ref refid="classsrsgnb_1_1timer__manager_1a02a6ebeac0cbcf740fa2199b6003691f" kindref="member">decode_is_running_flag</ref>(timer_old_state);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_running<sp/>&amp;&amp;<sp/>(old_timeout<sp/>&amp;<sp/>WHEEL_MASK)<sp/>==<sp/>new_wheel_pos)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>change<sp/>in<sp/>timer<sp/>wheel<sp/>position.<sp/>Just<sp/>update<sp/>absolute<sp/>timeout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>timer.state.store(encode_state(RUNNING_FLAG,<sp/>duration,<sp/>new_timeout),<sp/>std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>timer<sp/>if<sp/>it<sp/>was<sp/>running,<sp/>removing<sp/>it<sp/>from<sp/>wheel<sp/>in<sp/>the<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_running)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1abbb77a8ff0c11a924eb89df623d23ced" kindref="member">time_wheel</ref>[old_timeout<sp/>&amp;<sp/>WHEEL_MASK].pop(&amp;timer);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="classsrsgnb_1_1timer__manager_1a7570c249e8d97d56cb6888cc1e7e42c4" kindref="member">nof_timers_running</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>timer<sp/>in<sp/>wheel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1abbb77a8ff0c11a924eb89df623d23ced" kindref="member">time_wheel</ref>[new_wheel_pos].push_front(&amp;timer);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>timer.state.store(encode_state(RUNNING_FLAG,<sp/>duration,<sp/>new_timeout),<sp/>std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>++<ref refid="classsrsgnb_1_1timer__manager_1a7570c249e8d97d56cb6888cc1e7e42c4" kindref="member">nof_timers_running</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classsrsgnb_1_1timer__manager_1abf7b9d907216ac0bf2bce5ba464abdfd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1timer__manager_1abf7b9d907216ac0bf2bce5ba464abdfd" kindref="member">timer_manager::stop_timer</ref>(<ref refid="structsrsgnb_1_1timer__manager_1_1timer__handle" kindref="compound">timer_handle</ref>&amp;<sp/>timer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expiry)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(<ref refid="classsrsgnb_1_1timer__manager_1a5c55558493f009113a1a299b15abc215" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>stop_timer_nolock(timer,<sp/>expiry);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>timer_manager::stop_timer_nolock(timer_handle&amp;<sp/>timer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expiry)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>uint64_t<sp/>timer_old_state<sp/>=<sp/>timer.state.load(std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classsrsgnb_1_1timer__manager_1a02a6ebeac0cbcf740fa2199b6003691f" kindref="member">decode_is_running_flag</ref>(timer_old_state))<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>already<sp/>running,<sp/>need<sp/>to<sp/>disconnect<sp/>it<sp/>from<sp/>previous<sp/>wheel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1ad7541cf6206a5aa74ecda87301eedd1b" kindref="member">timer_tick_t</ref><sp/>old_timeout<sp/>=<sp/>decode_timeout(timer_old_state);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1timer__manager_1abbb77a8ff0c11a924eb89df623d23ced" kindref="member">time_wheel</ref>[old_timeout<sp/>&amp;<sp/>WHEEL_MASK].pop(&amp;timer);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>uint64_t<sp/>new_state<sp/>=</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encode_state(expiry<sp/>?<sp/>EXPIRED_FLAG<sp/>:<sp/><ref refid="classsrsgnb_1_1timer__manager_1a3e5715911a8e3461eea7d2351b3db689" kindref="member">STOPPED_FLAG</ref>,<sp/>decode_duration(timer_old_state),<sp/>old_timeout);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>timer.state.store(new_state,<sp/>std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>--<ref refid="classsrsgnb_1_1timer__manager_1a7570c249e8d97d56cb6888cc1e7e42c4" kindref="member">nof_timers_running</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classsrsgnb_1_1timer__manager_1ae639690242d02464d5e1f5dbcfb1b916" refkind="member"><highlight class="normal"><ref refid="classsrsgnb_1_1unique__timer" kindref="compound">unique_timer</ref><sp/><ref refid="classsrsgnb_1_1timer__manager_1ae639690242d02464d5e1f5dbcfb1b916" kindref="member">timer_manager::create_unique_timer</ref>()</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1unique__timer" kindref="compound">unique_timer</ref>(&amp;create_timer());</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/support/timers.cpp"/>
  </compounddef>
</doxygen>
