<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacesrsgnb_1_1srsvec" kind="namespace" language="C++">
    <compoundname>srsgnb::srsvec</compoundname>
    <innerclass refid="classsrsgnb_1_1srsvec_1_1aligned__vec" prot="public">srsgnb::srsvec::aligned_vec</innerclass>
    <innernamespace refid="namespacesrsgnb_1_1srsvec_1_1detail">srsgnb::srsvec::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="add_8h_1a09c36b246ea45968ccb3743e15796c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::add</definition>
        <argsstring>(span&lt; const cf_t &gt; x, span&lt; const cf_t &gt; y, span&lt; cf_t &gt; z)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/add.h" line="18" column="6" bodyfile="lib/srsvec/add.cpp" bodystart="111" bodyend="117" declfile="include/srsgnb/srsvec/add.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="add_8h_1a504c2373f4482b808eebece5150c3a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::add</definition>
        <argsstring>(span&lt; const float &gt; x, span&lt; const float &gt; y, span&lt; float &gt; z)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; float &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/add.h" line="19" column="6" bodyfile="lib/srsvec/add.cpp" bodystart="119" bodyend="125" declfile="include/srsgnb/srsvec/add.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="add_8h_1aeff024ca980add15e3dc054a7114c8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::add</definition>
        <argsstring>(span&lt; const int16_t &gt; x, span&lt; const int16_t &gt; y, span&lt; int16_t &gt; z)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const int16_t &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const int16_t &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; int16_t &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/add.h" line="20" column="6" bodyfile="lib/srsvec/add.cpp" bodystart="127" bodyend="133" declfile="include/srsgnb/srsvec/add.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="add_8h_1a3e7e496cfa37d4572549198f31eabc5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::add</definition>
        <argsstring>(span&lt; const int8_t &gt; x, span&lt; const int8_t &gt; y, span&lt; int8_t &gt; z)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const int8_t &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const int8_t &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; int8_t &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/add.h" line="21" column="6" bodyfile="lib/srsvec/add.cpp" bodystart="135" bodyend="141" declfile="include/srsgnb/srsvec/add.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="binary_8h_1a81f758dd7fe0b50eaa95715cbf971a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::srsvec::binary_xor</definition>
        <argsstring>(const T &amp;x, const U &amp;y, V &amp;&amp;z)</argsstring>
        <name>binary_xor</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>V &amp;&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/binary.h" line="20" column="6" bodyfile="include/srsgnb/srsvec/binary.h" bodystart="20" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="binary_8h_1a572b079af1d58d62e951c8f3aee24432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::srsvec::binary_and</definition>
        <argsstring>(const T &amp;x, const U &amp;y, V &amp;&amp;z)</argsstring>
        <name>binary_and</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>V &amp;&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/binary.h" line="37" column="6" bodyfile="include/srsgnb/srsvec/binary.h" bodystart="37" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="binary_8h_1a0cc5eb48116f83842bc24dc43126e1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::srsvec::binary_or</definition>
        <argsstring>(const T &amp;x, const U &amp;y, V &amp;&amp;z)</argsstring>
        <name>binary_or</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>V &amp;&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/binary.h" line="54" column="6" bodyfile="include/srsgnb/srsvec/binary.h" bodystart="54" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="bit_8h_1a819ab32675f86175b07252aeb8f58177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
        <definition>span&lt; uint8_t &gt; srsgnb::srsvec::bit_unpack</definition>
        <argsstring>(span&lt; uint8_t &gt; bits, unsigned value, unsigned nof_bits)</argsstring>
        <name>bit_unpack</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>value</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nof_bits</declname>
        </param>
        <briefdescription>
<para>Unpacks an unsigned integer value into bits. </para>
        </briefdescription>
        <detaileddescription>
<para>The first bit in the sequence corresponds to the bit of index <computeroutput> nof_bits - 1 </computeroutput> of <computeroutput>value</computeroutput>. The LSB of <computeroutput>value</computeroutput> is mapped to the last element in the sequence.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Unpacked bits sequence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the value to unpack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nof_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the number of bits to unpack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A view of the remaining (behind <computeroutput>nof_bits</computeroutput>) unpacked bits of <computeroutput>value</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/bit.h" line="28" column="6" bodyfile="lib/srsvec/bit.cpp" bodystart="22" bodyend="31" declfile="include/srsgnb/srsvec/bit.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bit_8h_1a0dd194b2f3db611be4c222b06e9d40c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::bit_unpack</definition>
        <argsstring>(span&lt; uint8_t &gt; unpacked, span&lt; const uint8_t &gt; packed)</argsstring>
        <name>bit_unpack</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>unpacked</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>packed</declname>
        </param>
        <briefdescription>
<para>Unpacks bytes into bits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">unpacked</parametername>
</parameternamelist>
<parameterdescription>
<para>View of the unpacked bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">packed</parametername>
</parameternamelist>
<parameterdescription>
<para>View of the packed bits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The number of unpacked elements must be equal to eight times the number of packed elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/bit.h" line="34" column="6" bodyfile="lib/srsvec/bit.cpp" bodystart="33" bodyend="47" declfile="include/srsgnb/srsvec/bit.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bit_8h_1ab3275245a01e9d5816236525045785ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::srsvec::bit_pack</definition>
        <argsstring>(span&lt; const uint8_t &gt; &amp;bits, unsigned nof_bits)</argsstring>
        <name>bit_pack</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt; &amp;</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nof_bits</declname>
        </param>
        <briefdescription>
<para>Packs a number of bits into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">bits</parametername>
</parameternamelist>
<parameterdescription>
<para>View of unpacked bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nof_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the number of bits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer containing the packed bits. </para>
</simplesect>
<simplesect kind="remark"><para>The number of elements in bits must be greater than or equal to <computeroutput>nof_bits</computeroutput>. </para>
</simplesect>
<simplesect kind="remark"><para><computeroutput>nof_bits</computeroutput> must not exceed 32 bits. </para>
</simplesect>
<simplesect kind="remark"><para>After execution, <computeroutput>bits</computeroutput> will contain only the unused bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/bit.h" line="43" column="10" bodyfile="lib/srsvec/bit.cpp" bodystart="49" bodyend="63" declfile="include/srsgnb/srsvec/bit.h" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="bit_8h_1a7240dbae04dcb955676a6f5953b4787b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::bit_pack</definition>
        <argsstring>(span&lt; uint8_t &gt; packed, span&lt; const uint8_t &gt; unpacked)</argsstring>
        <name>bit_pack</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; uint8_t &gt;</type>
          <declname>packed</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>unpacked</declname>
        </param>
        <briefdescription>
<para>Packs a number of bits into bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">packed</parametername>
</parameternamelist>
<parameterdescription>
<para>View of packed bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unpacked</parametername>
</parameternamelist>
<parameterdescription>
<para>View of unpacked bits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The number of unpacked elements must be equal to eight times the number packed elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/bit.h" line="49" column="6" bodyfile="lib/srsvec/bit.cpp" bodystart="65" bodyend="98" declfile="include/srsgnb/srsvec/bit.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="compare_8h_1aa2116dafa9ec05e84142390515dcecbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::srsvec::equal</definition>
        <argsstring>(const T1 &amp;s1, const T2 &amp;s2)</argsstring>
        <name>equal</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/compare.h" line="24" column="6" bodyfile="include/srsgnb/srsvec/compare.h" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="compare_8h_1a6b66730d7b32d64097d29b4b5d4033f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* srsgnb::srsvec::find</definition>
        <argsstring>(span&lt; const T &gt; input, T value)</argsstring>
        <name>find</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const T &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Finds the first value in \input that is equal to <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The implementation is equivalent to: <programlisting><codeline><highlight class="normal">const<sp/>T*<sp/>find(span&lt;const<sp/>T&gt;<sp/>input,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>std::find(input.begin(),<sp/>input.end(),<sp/>value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Any data type that is one byte wide. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the first element that is equal to <computeroutput>value</computeroutput> if any, <computeroutput>input.end()</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/compare.h" line="47" column="9" bodyfile="include/srsgnb/srsvec/compare.h" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="compare_8h_1a26675e236b0f963fbd7f0ad8179f4490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; unsigned, float &gt;</type>
        <definition>std::pair&lt; unsigned, float &gt; srsgnb::srsvec::max_abs_element</definition>
        <argsstring>(span&lt; const cf_t &gt; x)</argsstring>
        <name>max_abs_element</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Finds the maximum absolute value in a complex span. </para>
        </briefdescription>
        <detaileddescription>
<para>In case two elements have the same absolute value, the one with lowest index is selected.</para>
<para>The implementation is equivalent to: <programlisting><codeline><highlight class="normal">std::pair&lt;unsigned,<sp/>float&gt;<sp/>max_abs_element(span&lt;const<sp/>cf_t&gt;<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>cf_t*<sp/>it<sp/>=<sp/>std::max_element(x.begin(),<sp/>x.end(),<sp/>[](cf_t<sp/>a,<sp/>cf_t<sp/>b)<sp/>{<sp/>return<sp/>(abs_sq(a)<sp/>&lt;<sp/>abs_sq(b));<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>{static_cast&lt;unsigned&gt;(it<sp/>-<sp/>x.begin()),<sp/>abs_sq(*it)};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input samples. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair comprising the index and the squared modulo of the maximum element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/compare.h" line="67" column="11" bodyfile="lib/srsvec/compare.cpp" bodystart="53" bodyend="115" declfile="include/srsgnb/srsvec/compare.h" declline="67" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8h_1af2458293d934e086aa97009af9605f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::convert</definition>
        <argsstring>(span&lt; const cf_t &gt; x, float scale, span&lt; int16_t &gt; z)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; int16_t &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts from complex float to int16 applying the given scaling</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>input data scaling prior conversion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>resultant data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/conversion.h" line="24" column="6" bodyfile="lib/srsvec/conversion.cpp" bodystart="87" bodyend="92" declfile="include/srsgnb/srsvec/conversion.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8h_1a694d13ec7885f7d2566999822e81a846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::convert_swap</definition>
        <argsstring>(span&lt; const cf_t &gt; x, float scale, span&lt; int16_t &gt; z)</argsstring>
        <name>convert_swap</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; int16_t &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts and swaps real and imaginary from complex float to int16 applying the given scaling</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>input data scaling prior conversion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>resultant data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/conversion.h" line="31" column="6" bodyfile="lib/srsvec/conversion.cpp" bodystart="94" bodyend="106" declfile="include/srsgnb/srsvec/conversion.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8h_1ae89a2323cb7db6bcf3b538fcba406fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::convert</definition>
        <argsstring>(span&lt; const int16_t &gt; x, float scale, span&lt; cf_t &gt; z)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const int16_t &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts from int16 to complex float applying the given scaling</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>input data scaling after conversion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>resultant data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/conversion.h" line="38" column="6" bodyfile="lib/srsvec/conversion.cpp" bodystart="108" bodyend="113" declfile="include/srsgnb/srsvec/conversion.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8h_1a7ff1a1878c10b6fea70db53dd3b912f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::convert_swap</definition>
        <argsstring>(span&lt; const int16_t &gt; x, float scale, span&lt; cf_t &gt; z)</argsstring>
        <name>convert_swap</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const int16_t &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts and swaps real and imaginary from int16 to complex float applying the given scaling</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>input data scaling after conversion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>resultant data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/conversion.h" line="45" column="6" bodyfile="lib/srsvec/conversion.cpp" bodystart="115" bodyend="126" declfile="include/srsgnb/srsvec/conversion.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8h_1a0d8f752298a239dc822409ff4b1c4dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::convert</definition>
        <argsstring>(span&lt; const float &gt; x, float scale, span&lt; int16_t &gt; z)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; int16_t &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts from float to int16 applying the given scaling</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>input data scaling prior conversion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>resultant data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/conversion.h" line="52" column="6" bodyfile="lib/srsvec/conversion.cpp" bodystart="128" bodyend="133" declfile="include/srsgnb/srsvec/conversion.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8h_1aa2f144a89718d136125186e8e1df46d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::convert</definition>
        <argsstring>(span&lt; const int16_t &gt; x, float scale, span&lt; float &gt; z)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const int16_t &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; float &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts from int16 to float applying the given scaling</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>input data scaling after conversion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>resultant data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/conversion.h" line="59" column="6" bodyfile="lib/srsvec/conversion.cpp" bodystart="135" bodyend="140" declfile="include/srsgnb/srsvec/conversion.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="copy_8h_1a7c9783cbcb0d08ae66da4addd3d8628a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::srsvec::copy</definition>
        <argsstring>(T &amp;&amp;dst, const U &amp;src)</argsstring>
        <name>copy</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/copy.h" line="20" column="6" bodyfile="include/srsgnb/srsvec/copy.h" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="dot__prod_8h_1ae1393a596af88621830df19eb17c6197" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V srsgnb::srsvec::dot_prod</definition>
        <argsstring>(const T &amp;x, const U &amp;y, V init)</argsstring>
        <name>dot_prod</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>V</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Dot product of two spans. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the dot product (a.k.a. inner product or scalar product) of the two sequences represented by the input spans, adding an initial offset. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>A span of an arithmetic type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>A span of an arithmetic type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Output type (must be compatible with the product of object of type <computeroutput>T</computeroutput> and <computeroutput>U</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>First span. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Second span. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product between the two spans plus <computeroutput>init</computeroutput>, i.e. <formula id="62">$ x \cdot y + \mathrm{init} = \sum_i x_i y_i + \mathrm{init}$</formula>. </para>
</simplesect>
<simplesect kind="remark"><para>The two input spans must have the same length. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/dot_prod.h" line="40" column="10" bodyfile="include/srsgnb/srsvec/dot_prod.h" bodystart="40" bodyend="48"/>
        <references refid="dot__prod_8h_1ae1393a596af88621830df19eb17c6197" compoundref="dot__prod_8h" startline="40" endline="48">dot_prod</references>
        <referencedby refid="dot__prod_8h_1ae1393a596af88621830df19eb17c6197" compoundref="dot__prod_8h" startline="40" endline="48">dot_prod</referencedby>
      </memberdef>
      <memberdef kind="function" id="dot__prod_8h_1a7084939f03719cce6da5f94776b8b223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref></type>
        <definition>cf_t srsgnb::srsvec::dot_prod</definition>
        <argsstring>(span&lt; const cf_t &gt; x, span&lt; const cf_t &gt; y)</argsstring>
        <name>dot_prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Dot product of two complex spans. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the dot product (a.k.a. inner product or scalar product) of the two complex sequences. The sequences are represented by the input spans <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput>, the second sequence <computeroutput>y</computeroutput> is conjugated.</para>
<para>The implementation is equivalent to: <programlisting><codeline><highlight class="normal">cf_t<sp/>dot_prod(span&lt;const<sp/>cf_t&gt;<sp/>x,<sp/>span&lt;const<sp/>cf_t&gt;<sp/>y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>std::inner_product(x.begin(),<sp/>x.end(),<sp/>y.begin(),<sp/>cf_t(0.0F),<sp/>std::plus&lt;&gt;(),<sp/>[](cf_t<sp/>a,<sp/>cf_t<sp/>b)<sp/>{<sp/>return<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>std::conj(b);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>First span. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Second span. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product between the two spans, i.e. <formula id="171">$ x \cdot \conj{y}= \sum_i x_i \conj{y}_i $</formula>. </para>
</simplesect>
<simplesect kind="remark"><para>The two input spans must have the same length. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/dot_prod.h" line="67" column="6" bodyfile="lib/srsvec/dot_prod.cpp" bodystart="17" bodyend="45" declfile="include/srsgnb/srsvec/dot_prod.h" declline="67" declcolumn="6"/>
        <references refid="dot__prod_8h_1a7084939f03719cce6da5f94776b8b223" compoundref="dot__prod_8cpp" startline="17" endline="45">dot_prod</references>
        <references refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" compoundref="span_8h" startline="143" endline="143">srsgnb::span&lt; T &gt;::size</references>
        <referencedby refid="dot__prod_8h_1a7084939f03719cce6da5f94776b8b223" compoundref="dot__prod_8cpp" startline="17" endline="45">dot_prod</referencedby>
      </memberdef>
      <memberdef kind="function" id="dot__prod_8h_1a705554a00576c17a141e529124f3954a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float srsgnb::srsvec::average_power</definition>
        <argsstring>(span&lt; const cf_t &gt; x)</argsstring>
        <name>average_power</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Estimates the average power of a complex span - linear scale. </para>
        </briefdescription>
        <detaileddescription>
<para>The average power of a span is defined as its squared Euclidean norm divided by the number of its elements, i.e. <computeroutput>dot_prod(x, x) / x.size()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/dot_prod.h" line="73" column="14" bodyfile="include/srsgnb/srsvec/dot_prod.h" bodystart="73" bodyend="80"/>
        <references refid="dot__prod_8h_1a705554a00576c17a141e529124f3954a" compoundref="dot__prod_8h" startline="73" endline="80">average_power</references>
        <references refid="classsrsgnb_1_1span_1a595cf1b0fe0385603307ba67012f820c" compoundref="span_8h" startline="149" endline="149">srsgnb::span&lt; T &gt;::empty</references>
        <references refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" compoundref="span_8h" startline="143" endline="143">srsgnb::span&lt; T &gt;::size</references>
        <referencedby refid="dot__prod_8h_1a705554a00576c17a141e529124f3954a" compoundref="dot__prod_8h" startline="73" endline="80">average_power</referencedby>
      </memberdef>
      <memberdef kind="function" id="prod_8h_1a844daa8e6ca0278424bb1e1de3a105eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::prod</definition>
        <argsstring>(span&lt; const cf_t &gt; x, span&lt; const cf_t &gt; y, span&lt; cf_t &gt; z)</argsstring>
        <name>prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/prod.h" line="18" column="6" bodyfile="lib/srsvec/prod.cpp" bodystart="81" bodyend="87" declfile="include/srsgnb/srsvec/prod.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="prod_8h_1a1adac24f515401b1ff16baecd206b75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::prod</definition>
        <argsstring>(span&lt; const cf_t &gt; x, span&lt; const float &gt; y, span&lt; cf_t &gt; z)</argsstring>
        <name>prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/prod.h" line="19" column="6" declfile="include/srsgnb/srsvec/prod.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="prod_8h_1a306fc4abdd6cdffaea14452f0b3eef42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::prod</definition>
        <argsstring>(span&lt; const float &gt; x, span&lt; const cf_t &gt; y, span&lt; cf_t &gt; z)</argsstring>
        <name>prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/prod.h" line="20" column="6" declfile="include/srsgnb/srsvec/prod.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="prod_8h_1a2d0e000c439903817411b32c53c09056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::prod</definition>
        <argsstring>(span&lt; const float &gt; x, span&lt; const float &gt; y, span&lt; float &gt; z)</argsstring>
        <name>prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; float &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/prod.h" line="21" column="6" bodyfile="lib/srsvec/prod.cpp" bodystart="89" bodyend="95" declfile="include/srsgnb/srsvec/prod.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="prod_8h_1ac9577c56750f60af5d690a3c509bd10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::prod_conj</definition>
        <argsstring>(span&lt; const cf_t &gt; x, span&lt; const cf_t &gt; y, span&lt; cf_t &gt; z)</argsstring>
        <name>prod_conj</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/prod.h" line="23" column="6" bodyfile="lib/srsvec/prod.cpp" bodystart="97" bodyend="105" declfile="include/srsgnb/srsvec/prod.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sc__prod_8h_1aab2e5e8ce10dc144c636c0896b02fe38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::sc_prod</definition>
        <argsstring>(span&lt; const cf_t &gt; x, cf_t h, span&lt; cf_t &gt; z)</argsstring>
        <name>sc_prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/sc_prod.h" line="18" column="6" bodyfile="lib/srsvec/sc_prod.cpp" bodystart="78" bodyend="83" declfile="include/srsgnb/srsvec/sc_prod.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sc__prod_8h_1a63c2eadd7e64f33753b6400f4cef97ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::sc_prod</definition>
        <argsstring>(span&lt; const cf_t &gt; x, float h, span&lt; cf_t &gt; z)</argsstring>
        <name>sc_prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/sc_prod.h" line="19" column="6" bodyfile="lib/srsvec/sc_prod.cpp" bodystart="85" bodyend="90" declfile="include/srsgnb/srsvec/sc_prod.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sc__prod_8h_1a134e00afaa2a004e876e334db5f2bbb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::sc_prod</definition>
        <argsstring>(span&lt; const float &gt; x, float h, span&lt; float &gt; z)</argsstring>
        <name>sc_prod</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const float &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; float &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/sc_prod.h" line="20" column="6" bodyfile="lib/srsvec/sc_prod.cpp" bodystart="92" bodyend="97" declfile="include/srsgnb/srsvec/sc_prod.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="zero_8h_1a6b2dd3767a89374974a5bdb3509d892e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::srsvec::zero</definition>
        <argsstring>(T &amp;&amp;x)</argsstring>
        <name>zero</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/zero.h" line="20" column="6" bodyfile="include/srsgnb/srsvec/zero.h" bodystart="20" bodyend="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/srsgnb/srsvec/add.h" line="16" column="16"/>
  </compounddef>
</doxygen>
