<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="srslog__c_8cpp" kind="file" language="C++">
    <compoundname>srslog_c.cpp</compoundname>
    <includes refid="srslog__c_8h" local="yes">srsgnb/srslog/srslog_c.h</includes>
    <includes refid="srslog_8h" local="yes">srsgnb/srslog/srslog.h</includes>
    <includes local="no">cstdarg</includes>
    <incdepgraph>
      <node id="41">
        <label>atomic</label>
      </node>
      <node id="15">
        <label>functional</label>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="16">
        <label>iterator</label>
      </node>
      <node id="26">
        <label>cstdint</label>
      </node>
      <node id="34">
        <label>srsgnb/srslog/detail/support/memory_buffer.h</label>
        <link refid="memory__buffer_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/srslog/srslog_c.cpp</label>
        <link refid="srslog__c_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>srsgnb/srslog/srslog_c.h</label>
        <link refid="srslog__c_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cmath</label>
      </node>
      <node id="40">
        <label>cassert</label>
      </node>
      <node id="28">
        <label>stdexcept</label>
      </node>
      <node id="36">
        <label>srsgnb/srslog/context.h</label>
        <link refid="context_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>cstdarg</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="33">
        <label>srsgnb/srslog/detail/support/error_string.h</label>
        <link refid="error__string_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="22">
        <label>srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>srsgnb/srslog/detail/log_entry.h</label>
        <link refid="log__entry_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>srsgnb/srslog/shared_types.h</label>
        <link refid="shared__types_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>srsgnb/srslog/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>pthread.h</label>
      </node>
      <node id="13">
        <label>cstdio</label>
      </node>
      <node id="39">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>srsgnb/srslog/log_channel.h</label>
        <link refid="log__channel_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
      <node id="30">
        <label>srsgnb/srslog/detail/support/thread_utils.h</label>
        <link refid="thread__utils_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>array</label>
      </node>
      <node id="37">
        <label>srsgnb/srslog/detail/support/tmpl_utils.h</label>
        <link refid="tmpl__utils_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>cerrno</label>
      </node>
      <node id="38">
        <label>cstddef</label>
      </node>
      <node id="29">
        <label>chrono</label>
      </node>
      <node id="10">
        <label>srsgnb/srslog/detail/log_backend.h</label>
        <link refid="log__backend_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>srsgnb/srslog/detail/log_entry_metadata.h</label>
        <link refid="log__entry__metadata_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>srsgnb/srslog/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>srsgnb/srslog/srslog.h</label>
        <link refid="srslog_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="23">
        <label>algorithm</label>
      </node>
      <node id="5">
        <label>srsgnb/srslog/detail/support/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cstring</label>
      </node>
      <node id="35">
        <label>srsgnb/srslog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>srsgnb/srslog/bundled/fmt/core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="srslog__c_8cpp_1a15f8d2281111496cc89df50ade675e5a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>To *</type>
        <definition>static To* c_cast</definition>
        <argsstring>(From *x)</argsstring>
        <name>c_cast</name>
        <param>
          <type>From *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="18" column="18" bodyfile="lib/srslog/srslog_c.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1aea309b47ef1a045c250d26f97d8803aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void log_to</definition>
        <argsstring>(log_channel &amp;c, const char *fmt, std::va_list args)</argsstring>
        <name>log_to</name>
        <param>
          <type><ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>std::va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Helper to format the input argument list writing it into a channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="24" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1afc0e015d32687951ef3ea873fd4d4289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_init</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the logging framework. It must be called before any log entry is generated. NOTE: Calling this function more than once has no side effects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="31" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1aef01f06bbfef7771ad007aaca04157c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_set_default_sink</definition>
        <argsstring>(srslog_sink *s)</argsstring>
        <name>srslog_set_default_sink</name>
        <param>
          <type>srslog_sink *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Installs the specified sink to be used as the default one by new log channels and loggers. The initial default sink writes to stdout. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="36" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a5808bb48be6e6dcbb3e3b9e992df02e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_get_default_sink</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_get_default_sink</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the instance of the default sink being used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="42" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1afe5eb374adcdc9e7f0755185c2eb091c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_log_channel *</type>
        <definition>srslog_log_channel* srslog_fetch_log_channel</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_fetch_log_channel</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a log_channel with the specified id that writes to the default sink using the default log channel configuration. NOTE: Any &apos;#&apos; characters in the id will get removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="47" column="20" bodyfile="lib/srslog/srslog_c.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a1e5a2fb2b0aec2c46f8b790b63f39c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_log_channel *</type>
        <definition>srslog_log_channel* srslog_find_log_channel</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_find_log_channel</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds a log channel with the specified id string in the repository. On success returns a pointer to the requested log channel, otherwise NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="52" column="20" bodyfile="lib/srslog/srslog_c.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a1a02ee60a1e485293afb6557578e6e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_set_log_channel_enabled</definition>
        <argsstring>(srslog_log_channel *channel, srslog_bool enabled)</argsstring>
        <name>srslog_set_log_channel_enabled</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>srslog_bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controls whether the specified channel accepts incoming log entries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="57" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a1f6195b259e666db8106167cf2ca1aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_bool</type>
        <definition>srslog_bool srslog_is_log_channel_enabled</definition>
        <argsstring>(srslog_log_channel *channel)</argsstring>
        <name>srslog_is_log_channel_enabled</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns 1 if the specified channel is accepting incoming log entries, otherwise 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="63" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a8121fb1522c5e49e5c0a87539ebdd772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srslog_get_log_channel_id</definition>
        <argsstring>(srslog_log_channel *channel)</argsstring>
        <name>srslog_get_log_channel_id</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the id string of the specified channel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="69" column="12" bodyfile="lib/srslog/srslog_c.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1ab11ae4e36be351468f06700858c492dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_log</definition>
        <argsstring>(srslog_log_channel *channel, const char *fmt,...)</argsstring>
        <name>srslog_log</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logs the provided log entry using the specified log channel. When the channel is disabled the log entry wil be discarded. NOTE: Only printf style formatting is supported when using the C API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="75" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a1bda2ac4617505f453f099c68ceae2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_logger *</type>
        <definition>srslog_logger* srslog_fetch_default_logger</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_fetch_default_logger</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a basic logger (see basic_logger type) with the specified id string. All logger channels will write into the default sink. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="85" column="15" bodyfile="lib/srslog/srslog_c.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a0dfec02c16bd6d5232617e8566d2f8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_logger *</type>
        <definition>srslog_logger* srslog_find_default_logger</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_find_default_logger</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds a logger with the specified id string in the repository. On success returns a pointer to the requested log channel, otherwise NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="90" column="15" bodyfile="lib/srslog/srslog_c.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a46bddfec95b664010a8d0b95404ff4db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_debug</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_debug</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These functions log the provided log entry using the specified logger. Entries are automatically discarded depending on the configured level of the logger. NOTE: Only printf style formatting is supported when using the C API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="95" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="95" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a64f79bade55bdc7ed16f8f50cb227910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_info</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_info</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="105" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="105" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a060f4dc873921b5d13eee8e57ee35043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_warning</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_warning</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="115" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a66b14cb12b58e66c69c656c4737bee75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_error</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_error</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="125" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="125" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a8a7537ca139b9e342d40407589ba3c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srslog_get_logger_id</definition>
        <argsstring>(srslog_logger *log)</argsstring>
        <name>srslog_get_logger_id</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the id string of the specified logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="135" column="12" bodyfile="lib/srslog/srslog_c.cpp" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a71c429aa224640d5123e5f6dd3f8ff12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_levels</type>
        <definition>static basic_levels convert_c_enum_to_basic_levels</definition>
        <argsstring>(srslog_log_levels lvl)</argsstring>
        <name>convert_c_enum_to_basic_levels</name>
        <param>
          <type>srslog_log_levels</type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
<para>Translate the C API level enum to basic_levels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="142" column="21" bodyfile="lib/srslog/srslog_c.cpp" bodystart="142" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1ad319229f9f4a56597d514edf686188d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_set_logger_level</definition>
        <argsstring>(srslog_logger *log, srslog_log_levels lvl)</argsstring>
        <name>srslog_set_logger_level</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>srslog_log_levels</type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the logging level into the specified logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="161" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a29eb215c101665e70d8c11d6bb5a35d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_find_sink</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_find_sink</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds a sink with the specified id string in the repository. On success returns a pointer to the requested sink, otherwise NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="167" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a207b18557543cd82be3cee52b19a780f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_fetch_stdout_sink</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_fetch_stdout_sink</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a sink that writes to the stdout stream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="172" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a309128c09f65077a7a5ca999df805ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_fetch_stderr_sink</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_fetch_stderr_sink</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a sink that writes to the stderr stream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="177" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8cpp_1a2ccf9f0df2fb90aedafcd8aa09b69903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_fetch_file_sink</definition>
        <argsstring>(const char *path, size_t max_size, srslog_bool force_flush)</argsstring>
        <name>srslog_fetch_file_sink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_size</declname>
        </param>
        <param>
          <type>srslog_bool</type>
          <declname>force_flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a sink that writes into a file in the specified path. Specifying a max_size value different to zero will make the sink create a new file each time the current file exceeds this value. The units of max_size are bytes. Setting force_flush to true will flush the sink after every write. NOTE: Any &apos;#&apos; characters in the id will get removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/srslog/srslog_c.cpp" line="182" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="182" bodyend="185"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srslog/srslog_c.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srslog/srslog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdarg&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">srslog;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From&gt;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>To*<sp/>c_cast(From*<sp/>x)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">To*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_to(<ref refid="classsrslog_1_1log__channel" kindref="compound">log_channel</ref>&amp;<sp/>c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>std::va_list<sp/>args)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[1024];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::vsnprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer)<sp/>-<sp/>1,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>c(buffer);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_set_default_sink(srslog_sink*<sp/>s)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>assert(s<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>sink&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>set_default_sink(*c_cast&lt;sink&gt;(s));</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">srslog_sink*<sp/>srslog_get_default_sink(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_sink&gt;(&amp;get_default_sink());</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">srslog_log_channel*<sp/>srslog_fetch_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_log_channel&gt;(&amp;fetch_log_channel(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">srslog_log_channel*<sp/>srslog_find_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_log_channel&gt;(find_log_channel(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_set_log_channel_enabled(srslog_log_channel*<sp/>channel,<sp/>srslog_bool<sp/>enabled)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>assert(channel<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>c_cast&lt;log_channel&gt;(channel)-&gt;set_enabled(enabled);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">srslog_bool<sp/>srslog_is_log_channel_enabled(srslog_log_channel*<sp/>channel)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>assert(channel<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;log_channel&gt;(channel)-&gt;enabled();</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>srslog_get_log_channel_id(srslog_log_channel*<sp/>channel)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert(channel<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;log_channel&gt;(channel)-&gt;id().c_str();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_log(srslog_log_channel*<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>assert(channel<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::va_list<sp/>args;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>log_to(*c_cast&lt;log_channel&gt;(channel),<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">srslog_logger*<sp/>srslog_fetch_default_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_logger&gt;(&amp;fetch_basic_logger(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">srslog_logger*<sp/>srslog_find_default_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_logger&gt;(find_logger&lt;basic_logger&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_debug(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>assert(log<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::va_list<sp/>args;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>log_to(c_cast&lt;basic_logger&gt;(log)-&gt;debug,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_info(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>assert(log<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::va_list<sp/>args;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>log_to(c_cast&lt;basic_logger&gt;(log)-&gt;info,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_warning(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>assert(log<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::va_list<sp/>args;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>log_to(c_cast&lt;basic_logger&gt;(log)-&gt;warning,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_error(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>assert(log<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::va_list<sp/>args;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>log_to(c_cast&lt;basic_logger&gt;(log)-&gt;error,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>srslog_get_logger_id(srslog_logger*<sp/>log)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>assert(log<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;basic_logger&gt;(log)-&gt;id().c_str();</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>basic_levels<sp/>convert_c_enum_to_basic_levels(srslog_log_levels<sp/>lvl)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(lvl)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>srslog_lvl_none:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_levels::none;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>srslog_lvl_debug:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_levels::debug;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>srslog_lvl_info:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_levels::info;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>srslog_lvl_warning:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_levels<sp/>::warning;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>srslog_lvl_error:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_levels::error;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_levels::none;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_set_logger_level(srslog_logger*<sp/>log,<sp/>srslog_log_levels<sp/>lvl)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>assert(log<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>valid<sp/>logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>c_cast&lt;basic_logger&gt;(log)-&gt;set_level(convert_c_enum_to_basic_levels(lvl));</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">srslog_sink*<sp/>srslog_find_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_sink&gt;(find_sink(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">srslog_sink*<sp/>srslog_fetch_stdout_sink(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_sink&gt;(&amp;fetch_stdout_sink());</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">srslog_sink*<sp/>srslog_fetch_stderr_sink(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_sink&gt;(&amp;fetch_stderr_sink());</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">srslog_sink*<sp/>srslog_fetch_file_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_size,<sp/>srslog_bool<sp/>force_flush)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_cast&lt;srslog_sink&gt;(&amp;fetch_file_sink(path,<sp/>max_size,<sp/>force_flush));</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/srslog/srslog_c.cpp"/>
  </compounddef>
</doxygen>
