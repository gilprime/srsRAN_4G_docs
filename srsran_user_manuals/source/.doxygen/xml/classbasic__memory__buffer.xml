<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classbasic__memory__buffer" kind="class" language="C++" prot="public">
    <compoundname>basic_memory_buffer</compoundname>
    <basecompoundref refid="classdetail_1_1buffer" prot="public" virt="non-virtual">detail::buffer&lt; T &gt;</basecompoundref>
    <includes refid="format_8h" local="no">format.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>SIZE</declname>
        <defname>SIZE</defname>
        <defval>inline_buffer_size</defval>
      </param>
      <param>
        <type>typename Allocator</type>
        <defval>std::allocator&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classbasic__memory__buffer_1aecbaa41beff571b3ff5d79a91a787524" prot="public" static="no">
        <type>T</type>
        <definition>using basic_memory_buffer&lt; T, SIZE, Allocator &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="630" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__memory__buffer_1a13f688782e6165086485913789b1396f" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using basic_memory_buffer&lt; T, SIZE, Allocator &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="631" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbasic__memory__buffer_1a98def281d4ce2cad0c3dea4c664bbb0d" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T basic_memory_buffer&lt; T, SIZE, Allocator &gt;::store_[SIZE]</definition>
        <argsstring>[SIZE]</argsstring>
        <name>store_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="615" column="5" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__memory__buffer_1a0d2984bd2e6b5a96a09d31ca9d412519" prot="private" static="no" mutable="no">
        <type>Allocator</type>
        <definition>Allocator basic_memory_buffer&lt; T, SIZE, Allocator &gt;::alloc_</definition>
        <argsstring></argsstring>
        <name>alloc_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="618" column="13" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classbasic__memory__buffer_1a5e19a1f5aa79dadc6ff0b702a6d44d66" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_memory_buffer&lt; T, SIZE, Allocator &gt;::deallocate</definition>
        <argsstring>()</argsstring>
        <name>deallocate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="621" column="8" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__memory__buffer_1a448c07c5a891036329a8d866155c3549" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_memory_buffer&lt; T, SIZE, Allocator &gt;::move</definition>
        <argsstring>(basic_memory_buffer &amp;other)</argsstring>
        <name>move</name>
        <param>
          <type><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="641" column="8" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="641" bodyend="656"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classbasic__memory__buffer_1aef35aca4fab16eca930005b98f1f896d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void basic_memory_buffer&lt; T, SIZE, Allocator &gt;::grow</definition>
        <argsstring>(size_t size) FMT_OVERRIDE</argsstring>
        <name>grow</name>
        <reimplements refid="classdetail_1_1buffer_1a4dd3931e4cbfa55ae6ed369741125221">grow</reimplements>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increases the buffer capacity to hold at least <emphasis>capacity</emphasis> elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="627" column="8" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="684" bodyend="702"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbasic__memory__buffer_1af6f3373ae1ecc2104f3074fadccb3c28" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_memory_buffer&lt; T, SIZE, Allocator &gt;::basic_memory_buffer</definition>
        <argsstring>(const Allocator &amp;alloc=Allocator())</argsstring>
        <name>basic_memory_buffer</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="633" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="633" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__memory__buffer_1ac04c670008de993cbc2545305d8f8d4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_memory_buffer&lt; T, SIZE, Allocator &gt;::~basic_memory_buffer</definition>
        <argsstring>() FMT_OVERRIDE</argsstring>
        <name>~basic_memory_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="637" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="637" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__memory__buffer_1ae3e8292ba2764ec68bb113cdc6c45b63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_memory_buffer&lt; T, SIZE, Allocator &gt;::basic_memory_buffer</definition>
        <argsstring>(basic_memory_buffer &amp;&amp;other) FMT_NOEXCEPT</argsstring>
        <name>basic_memory_buffer</name>
        <param>
          <type><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Constructs a :class:<computeroutput>fmt::basic_memory_buffer</computeroutput> object moving the content of the other object to it. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="665" column="3" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="665" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__memory__buffer_1a89e2e5da9bee8af9c487b4493c4d6327" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref> &amp;</type>
        <definition>basic_memory_buffer&amp; basic_memory_buffer&lt; T, SIZE, Allocator &gt;::operator=</definition>
        <argsstring>(basic_memory_buffer &amp;&amp;other) FMT_NOEXCEPT</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Moves the content of the other <computeroutput><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref></computeroutput> object to this one. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="672" column="23" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="672" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__memory__buffer_1aad7b7f524c4c1301f5a88e54cc68e352" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Allocator</type>
        <definition>Allocator basic_memory_buffer&lt; T, SIZE, Allocator &gt;::get_allocator</definition>
        <argsstring>() const</argsstring>
        <name>get_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="680" column="13" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="680" bodyend="680"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>\rst A dynamically growing memory buffer for trivially copyable/constructible types with the first <computeroutput>SIZE</computeroutput> elements stored in the object itself.</para>
<para>You can use one of the following type aliases for common character types:</para>
<para>+-------------<mdash/>+---------------------------<mdash/>+ | Type | Definition | +================+==============================+ | memory_buffer | <ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;char&gt;</ref> | +-------------<mdash/>+---------------------------<mdash/>+ | wmemory_buffer | <ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;wchar_t&gt;</ref> | +-------------<mdash/>+---------------------------<mdash/>+</para>
<para>Example**::</para>
<para>fmt::memory_buffer out; format_to(out, &quot;The answer is {}.&quot;, 42);</para>
<para>This will append the following output to the <computeroutput>out</computeroutput> object:</para>
<para>.. code-block:: none</para>
<para>The answer is 42.</para>
<para>The output can be converted to an <computeroutput>std::string</computeroutput> with <computeroutput>to_string(out)</computeroutput>. \endrst </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>basic_memory_buffer&lt; T, SIZE, Allocator &gt;</label>
        <link refid="classbasic__memory__buffer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>detail::buffer&lt; T &gt;</label>
        <link refid="classdetail_1_1buffer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>basic_memory_buffer&lt; T, SIZE, Allocator &gt;</label>
        <link refid="classbasic__memory__buffer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>detail::buffer&lt; T &gt;</label>
        <link refid="classdetail_1_1buffer"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="613" column="49" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="613" bodyend="681"/>
    <listofallmembers>
      <member refid="classbasic__memory__buffer_1a0d2984bd2e6b5a96a09d31ca9d412519" prot="private" virt="non-virtual"><scope>basic_memory_buffer</scope><name>alloc_</name></member>
      <member refid="classdetail_1_1buffer_1a28f51acf32e61f37558f6c7b8d200c05" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>append</name></member>
      <member refid="classbasic__memory__buffer_1af6f3373ae1ecc2104f3074fadccb3c28" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>basic_memory_buffer</name></member>
      <member refid="classbasic__memory__buffer_1ae3e8292ba2764ec68bb113cdc6c45b63" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>basic_memory_buffer</name></member>
      <member refid="classdetail_1_1buffer_1a3da53883bb426989a86d7531e9cff06f" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>begin</name></member>
      <member refid="classdetail_1_1buffer_1a666fd3e8beb8bbd31a9b58fe1cf397e9" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>begin</name></member>
      <member refid="classdetail_1_1buffer_1a8d416b1e583494dc5d793a8fda28ebf6" prot="protected" virt="non-virtual"><scope>basic_memory_buffer</scope><name>buffer</name></member>
      <member refid="classdetail_1_1buffer_1add12213cecc61e0779fa2a8d8cb1bae5" prot="protected" virt="non-virtual"><scope>basic_memory_buffer</scope><name>buffer</name></member>
      <member refid="classdetail_1_1buffer_1ab0f4c5730a238421fd375ef0ca20fab1" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>buffer</name></member>
      <member refid="classdetail_1_1buffer_1a052710e423be8292ca133c6fc1acce94" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>capacity</name></member>
      <member refid="classdetail_1_1buffer_1a7349f46839be777594d3954819de76fc" prot="private" virt="non-virtual"><scope>basic_memory_buffer</scope><name>capacity_</name></member>
      <member refid="classdetail_1_1buffer_1a8174757a0d86698229670044730dc59b" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>clear</name></member>
      <member refid="classbasic__memory__buffer_1a13f688782e6165086485913789b1396f" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>const_reference</name></member>
      <member refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>data</name></member>
      <member refid="classdetail_1_1buffer_1a6b39441768f2062ecc279c766cb7ae32" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>data</name></member>
      <member refid="classbasic__memory__buffer_1a5e19a1f5aa79dadc6ff0b702a6d44d66" prot="private" virt="non-virtual"><scope>basic_memory_buffer</scope><name>deallocate</name></member>
      <member refid="classdetail_1_1buffer_1aa77cc9c5852cb5b75e8dd42434af6c48" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>end</name></member>
      <member refid="classdetail_1_1buffer_1a1ccfa2604025a1130d6ab96ee8822eb0" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>end</name></member>
      <member refid="classbasic__memory__buffer_1aad7b7f524c4c1301f5a88e54cc68e352" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>get_allocator</name></member>
      <member refid="classbasic__memory__buffer_1aef35aca4fab16eca930005b98f1f896d" prot="protected" virt="virtual"><scope>basic_memory_buffer</scope><name>grow</name></member>
      <member refid="classbasic__memory__buffer_1a448c07c5a891036329a8d866155c3549" prot="private" virt="non-virtual"><scope>basic_memory_buffer</scope><name>move</name></member>
      <member refid="classbasic__memory__buffer_1a89e2e5da9bee8af9c487b4493c4d6327" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>operator=</name></member>
      <member refid="classdetail_1_1buffer_1ae4f118f6f8c274d20bcfd85ecf889f13" prot="public" virt="non-virtual" ambiguityscope="detail::buffer::"><scope>basic_memory_buffer</scope><name>operator=</name></member>
      <member refid="classdetail_1_1buffer_1aa8bfde683722b53cf1b81f77edf44cea" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>operator[]</name></member>
      <member refid="classdetail_1_1buffer_1a866bde7d01d75d03c2e8f4638db400da" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>operator[]</name></member>
      <member refid="classdetail_1_1buffer_1a91e19b580bbeec5bcd8ed21815a041a5" prot="private" virt="non-virtual"><scope>basic_memory_buffer</scope><name>ptr_</name></member>
      <member refid="classdetail_1_1buffer_1ab2f7d30060eca8a29459a64f6fbd3809" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>push_back</name></member>
      <member refid="classdetail_1_1buffer_1aac32786dc8067500882d17ab2bdcc691" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>reserve</name></member>
      <member refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>resize</name></member>
      <member refid="classdetail_1_1buffer_1acc307472f22f2e050f7b424dcafa5c8a" prot="protected" virt="non-virtual"><scope>basic_memory_buffer</scope><name>set</name></member>
      <member refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>size</name></member>
      <member refid="classdetail_1_1buffer_1a082720fd448f7a0184a3d0ea63ee4846" prot="private" virt="non-virtual"><scope>basic_memory_buffer</scope><name>size_</name></member>
      <member refid="classbasic__memory__buffer_1a98def281d4ce2cad0c3dea4c664bbb0d" prot="private" virt="non-virtual"><scope>basic_memory_buffer</scope><name>store_</name></member>
      <member refid="classbasic__memory__buffer_1aecbaa41beff571b3ff5d79a91a787524" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>value_type</name></member>
      <member refid="classbasic__memory__buffer_1ac04c670008de993cbc2545305d8f8d4c" prot="public" virt="non-virtual"><scope>basic_memory_buffer</scope><name>~basic_memory_buffer</name></member>
      <member refid="classdetail_1_1buffer_1ab25e306874289fe40dea0a4d56129521" prot="public" virt="virtual"><scope>basic_memory_buffer</scope><name>~buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
