<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="file__utils_8h" kind="file" language="C++">
    <compoundname>file_utils.h</compoundname>
    <includes refid="format_8h" local="yes">srsgnb/srslog/bundled/fmt/format.h</includes>
    <includes refid="error__string_8h" local="yes">srsgnb/srslog/detail/support/error_string.h</includes>
    <includes refid="memory__buffer_8h" local="yes">srsgnb/srslog/detail/support/memory_buffer.h</includes>
    <includedby refid="buffered__file__sink_8h" local="yes">lib/srslog/sinks/buffered_file_sink.h</includedby>
    <includedby refid="lib_2srslog_2sinks_2file__sink_8h" local="yes">lib/srslog/sinks/file_sink.h</includedby>
    <incdepgraph>
      <node id="14">
        <label>functional</label>
      </node>
      <node id="7">
        <label>limits</label>
      </node>
      <node id="15">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>srsgnb/srslog/detail/support/memory_buffer.h</label>
        <link refid="memory__buffer_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>stdexcept</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="19">
        <label>srsgnb/srslog/detail/support/error_string.h</label>
        <link refid="error__string_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cstdio</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
      <node id="11">
        <label>array</label>
      </node>
      <node id="4">
        <label>cerrno</label>
      </node>
      <node id="1">
        <label>lib/srslog/sinks/file_utils.h</label>
        <link refid="file__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>cstring</label>
      </node>
      <node id="10">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>lib/srslog/sinks/buffered_file_sink.h</label>
        <link refid="buffered__file__sink_8h_source"/>
      </node>
      <node id="3">
        <label>lib/srslog/sinks/file_sink.h</label>
        <link refid="lib_2srslog_2sinks_2file__sink_8h_source"/>
      </node>
      <node id="1">
        <label>lib/srslog/sinks/file_utils.h</label>
        <link refid="file__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classsrslog_1_1file__utils_1_1file" prot="public">srslog::file_utils::file</innerclass>
    <innernamespace refid="namespacesrslog">srslog</innernamespace>
    <innernamespace refid="namespacesrslog_1_1file__utils">srslog::file_utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srslog/bundled/fmt/format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srslog/detail/support/error_string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srsgnb/srslog/detail/support/memory_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">srslog<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">file_utils<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>fmt::memory_buffer<sp/>result;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>fmt::format_system_error(result,<sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/>error);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt::to_string(result);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>split_filename_extension(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>for<sp/>the<sp/>last<sp/>dot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dot_pos<sp/>=<sp/>filename.find_last_of(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>the<sp/>following<sp/>corner<sp/>cases<sp/>(returns<sp/>{filename,<sp/>&quot;&quot;}):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a)<sp/>No<sp/>dot<sp/>found:<sp/>my_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>b)<sp/>Dot<sp/>found<sp/>at<sp/>the<sp/>beginning:<sp/>.my_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>c)<sp/>Dot<sp/>found<sp/>at<sp/>the<sp/>end:<sp/>my_file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dot_pos<sp/>==<sp/>std::string::npos<sp/>||<sp/>dot_pos<sp/>==<sp/>0<sp/>||<sp/>dot_pos<sp/>==<sp/>filename.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{filename,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>directories<sp/>that<sp/>contain<sp/>dots,<sp/>search<sp/>for<sp/>the<sp/>last<sp/>separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>separator_pos<sp/>=<sp/>filename.find_last_of(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>the<sp/>following<sp/>corner<sp/>cases<sp/>(returns<sp/>{filename,<sp/>&quot;&quot;}):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a)<sp/>/my_folder.1/my_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>b)<sp/>/my_folder.1/.my_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(separator_pos<sp/>!=<sp/>std::string::npos<sp/>&amp;&amp;<sp/>separator_pos<sp/>&gt;=<sp/>dot_pos<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{filename,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{filename.substr(0,<sp/>dot_pos),<sp/>filename.substr(dot_pos)};</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>build_filename_with_index(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>basename,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basename;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>split_filename_extension(basename);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}.{}{}&quot;</highlight><highlight class="normal">,<sp/>result.first,<sp/>index,<sp/>result.second);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classsrslog_1_1file__utils_1_1file" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsrslog_1_1file__utils_1_1file" kindref="compound">file</ref></highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::string<sp/>path;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::FILE*<sp/><sp/>handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>~<ref refid="classsrslog_1_1file__utils_1_1file" kindref="compound">file</ref>()<sp/>{<sp/><ref refid="classsrslog_1_1file__utils_1_1file_1af21989b38b1132485cdcf66e2a03e06b" kindref="member">close</ref>();<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classsrslog_1_1file__utils_1_1file_1aedd585dac74c5058a4bfde2be85beb64" refkind="member"><highlight class="normal"><sp/><sp/>std::FILE*<sp/><ref refid="classsrslog_1_1file__utils_1_1file_1aedd585dac74c5058a4bfde2be85beb64" kindref="member">get_handle</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle;<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classsrslog_1_1file__utils_1_1file_1a6ab857af2b60b6ec77b2ed6df9a5dc7b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classsrslog_1_1file__utils_1_1file_1a6ab857af2b60b6ec77b2ed6df9a5dc7b" kindref="member">get_path</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classsrslog_1_1file__utils_1_1file_1ac104918e45f47b7372eab90820b17110" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1detail_1_1error__string" kindref="compound">detail::error_string</ref><sp/><ref refid="classsrslog_1_1file__utils_1_1file_1ac104918e45f47b7372eab90820b17110" kindref="member">create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>new_path)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrslog_1_1file__utils_1_1file_1af21989b38b1132485cdcf66e2a03e06b" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((handle<sp/>=<sp/>std::fopen(new_path.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>new_path;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(fmt::format(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>log<sp/>file<sp/>\&quot;{}\&quot;&quot;</highlight><highlight class="normal">,<sp/>new_path),<sp/>errno);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classsrslog_1_1file__utils_1_1file_1ad07253657cab84fb7e9daf133eca55ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1detail_1_1error__string" kindref="compound">detail::error_string</ref><sp/><ref refid="classsrslog_1_1file__utils_1_1file_1ad07253657cab84fb7e9daf133eca55ad" kindref="member">write</ref>(<ref refid="classsrslog_1_1detail_1_1memory__buffer" kindref="compound">detail::memory_buffer</ref><sp/>buffer)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle<sp/>&amp;&amp;<sp/>std::fwrite(buffer.<ref refid="classsrslog_1_1detail_1_1memory__buffer_1aa72ea90570be1ceb95d33fb32a9fa437" kindref="member">data</ref>(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>buffer.<ref refid="classsrslog_1_1detail_1_1memory__buffer_1a911bbffed1ea236e25f5533ad1183791" kindref="member">size</ref>(),<sp/>handle)<sp/>!=<sp/>buffer.<ref refid="classsrslog_1_1detail_1_1memory__buffer_1a911bbffed1ea236e25f5533ad1183791" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err_str<sp/>=<sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(fmt::format(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>write<sp/>log<sp/>file<sp/>\&quot;{}\&quot;&quot;</highlight><highlight class="normal">,<sp/>path),<sp/>errno);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrslog_1_1file__utils_1_1file_1af21989b38b1132485cdcf66e2a03e06b" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err_str;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classsrslog_1_1file__utils_1_1file_1a7cde6bc69c56d58f1015345451ba415e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsrslog_1_1detail_1_1error__string" kindref="compound">detail::error_string</ref><sp/><ref refid="classsrslog_1_1file__utils_1_1file_1a7cde6bc69c56d58f1015345451ba415e" kindref="member">flush</ref>()</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle<sp/>&amp;&amp;<sp/>::fflush(handle)<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err_str<sp/>=<sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(fmt::format(</highlight><highlight class="stringliteral">&quot;Error<sp/>encountered<sp/>while<sp/>flushing<sp/>log<sp/>file<sp/>\&quot;{}\&quot;&quot;</highlight><highlight class="normal">,<sp/>path),<sp/>errno);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsrslog_1_1file__utils_1_1file_1af21989b38b1132485cdcf66e2a03e06b" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err_str;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classsrslog_1_1file__utils_1_1file_1af21989b38b1132485cdcf66e2a03e06b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsrslog_1_1file__utils_1_1file_1af21989b38b1132485cdcf66e2a03e06b" kindref="member">close</ref>()</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::fclose(handle);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path.clear();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>file_utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>srslog</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/srslog/sinks/file_utils.h"/>
  </compounddef>
</doxygen>
