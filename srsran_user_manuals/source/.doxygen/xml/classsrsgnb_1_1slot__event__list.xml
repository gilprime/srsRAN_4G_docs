<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1slot__event__list" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::slot_event_list</compoundname>
    <includes refid="slot__event__list_8h" local="no">slot_event_list.h</includes>
    <templateparamlist>
      <param>
        <type>typename Event</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1slot__event__list_1a7101d5d6f824aee63559e3702c4d3b65" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Event &gt;</type>
        <definition>std::vector&lt;Event&gt; srsgnb::slot_event_list&lt; Event &gt;::pending_events</definition>
        <argsstring></argsstring>
        <name>pending_events</name>
        <briefdescription>
<para>Stores all enqueued events that are going to be processed in the next slot_indication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/slot_event_list.h" line="54" column="15" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrsgnb_1_1slot__event__list_1a3b7d327d92cce8e56fb1995b30bf886f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Event &gt;</type>
        <definition>std::vector&lt;Event&gt; srsgnb::slot_event_list&lt; Event &gt;::current_events</definition>
        <argsstring></argsstring>
        <name>current_events</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains the events being processed in the current slot. Note: the transfer of next_events to current_events is done via a std::swap, which for std::vector is very fast. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/slot_event_list.h" line="58" column="15" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrsgnb_1_1slot__event__list_1a8a1c70a1f74405f1fadcc45ef5aec3db" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex srsgnb::slot_event_list&lt; Event &gt;::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/slot_event_list.h" line="60" column="14" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1slot__event__list_1a6f459f6a711c0aec453cdacd49071ded" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::slot_event_list&lt; Event &gt;::slot_indication</definition>
        <argsstring>()</argsstring>
        <name>slot_indication</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/slot_event_list.h" line="28" column="8" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__event__list_1ad6389648030152eeb19044451685f28f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ev</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::slot_event_list&lt; Event &gt;::push</definition>
        <argsstring>(Ev &amp;&amp;ev)</argsstring>
        <name>push</name>
        <param>
          <type>Ev &amp;&amp;</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/slot_event_list.h" line="36" column="8" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__event__list_1ad2b6ba11363024235a029d4b122fc96e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::slot_event_list&lt; Event &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/slot_event_list.h" line="44" column="8" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1slot__event__list_1ac2f90a1d9df8884562553b5f6124c0e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; Event &gt;</type>
        <definition>span&lt;Event&gt; srsgnb::slot_event_list&lt; Event &gt;::get_events</definition>
        <argsstring>()</argsstring>
        <name>get_events</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/slot_event_list.h" line="50" column="8" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="50" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class stores incoming events in a thread-safe queue, and pops all enqueued events in a single batch, when a new slot indication is notified. The advantage of this class over a mutexed queue is the lower contention caused when popping elements from the queue. This is particularly relevant because the events need to be processed during the scheduler slot handling. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Event</parametername>
</parameternamelist>
<parameterdescription>
<para>type of event pushed/popped from the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::slot_event_list&lt; Event &gt;</label>
        <link refid="classsrsgnb_1_1slot__event__list"/>
      </node>
    </collaborationgraph>
    <location file="lib/scheduler/support/slot_event_list.h" line="26" column="1" bodyfile="lib/scheduler/support/slot_event_list.h" bodystart="25" bodyend="61"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1slot__event__list_1a3b7d327d92cce8e56fb1995b30bf886f" prot="private" virt="non-virtual"><scope>srsgnb::slot_event_list</scope><name>current_events</name></member>
      <member refid="classsrsgnb_1_1slot__event__list_1ad2b6ba11363024235a029d4b122fc96e" prot="public" virt="non-virtual"><scope>srsgnb::slot_event_list</scope><name>emplace</name></member>
      <member refid="classsrsgnb_1_1slot__event__list_1ac2f90a1d9df8884562553b5f6124c0e6" prot="public" virt="non-virtual"><scope>srsgnb::slot_event_list</scope><name>get_events</name></member>
      <member refid="classsrsgnb_1_1slot__event__list_1a8a1c70a1f74405f1fadcc45ef5aec3db" prot="private" virt="non-virtual"><scope>srsgnb::slot_event_list</scope><name>mutex</name></member>
      <member refid="classsrsgnb_1_1slot__event__list_1a7101d5d6f824aee63559e3702c4d3b65" prot="private" virt="non-virtual"><scope>srsgnb::slot_event_list</scope><name>pending_events</name></member>
      <member refid="classsrsgnb_1_1slot__event__list_1ad6389648030152eeb19044451685f28f" prot="public" virt="non-virtual"><scope>srsgnb::slot_event_list</scope><name>push</name></member>
      <member refid="classsrsgnb_1_1slot__event__list_1a6f459f6a711c0aec453cdacd49071ded" prot="public" virt="non-virtual"><scope>srsgnb::slot_event_list</scope><name>slot_indication</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
