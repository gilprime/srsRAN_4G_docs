<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceasn1_1_1bitstring__utils" kind="namespace" language="C++">
    <compoundname>asn1::bitstring_utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="asn1__utils_8cpp_1a367fae7a581e055d46b684174ec384d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SRSASN_CODE</type>
        <definition>SRSASN_CODE asn1::bitstring_utils::pack_length_prefix</definition>
        <argsstring>(bit_ref &amp;bref, uint32_t len, uint32_t lb=0, uint32_t ub=std::numeric_limits&lt; uint32_t &gt;::max(), bool has_ext=false, bool is_aligned=false)</argsstring>
        <name>pack_length_prefix</name>
        <param>
          <type>bit_ref &amp;</type>
          <declname>bref</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lb</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ub</declname>
          <defval>std::numeric_limits&lt; uint32_t &gt;::max()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>has_ext</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_aligned</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack ASN1 bitstring length prefix. Accommodates for cases: fixed/unbounded/bounded, aligned/unaligned, with/out ext </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="998" column="13" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="998" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="asn1__utils_8cpp_1a5124d03bffce6d39a8471cabf36df75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SRSASN_CODE</type>
        <definition>SRSASN_CODE asn1::bitstring_utils::pack_bitfield</definition>
        <argsstring>(bit_ref &amp;bref, const uint8_t *buf, uint32_t nbits, uint32_t lb, uint32_t ub, bool is_aligned)</argsstring>
        <name>pack_bitfield</name>
        <param>
          <type>bit_ref &amp;</type>
          <declname>bref</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ub</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_aligned</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="1039" column="13" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="1039" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="asn1__utils_8cpp_1a9fb9e2cfb4de974ce8efa7b4af9dc9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SRSASN_CODE</type>
        <definition>SRSASN_CODE asn1::bitstring_utils::pack</definition>
        <argsstring>(bit_ref &amp;bref, const uint8_t *data, uint32_t len, uint32_t lb, uint32_t ub, bool has_ext, bool is_aligned)</argsstring>
        <name>pack</name>
        <param>
          <type>bit_ref &amp;</type>
          <declname>bref</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ub</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_ext</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_aligned</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack ASN1 bitstring. Accommodates for cases: fixed/unbounded/bounded, aligned/unaligned, with/out ext </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="1061" column="1" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="1061" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="asn1__utils_8cpp_1a65b8b47af9730e653490834504b2aac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SRSASN_CODE</type>
        <definition>SRSASN_CODE asn1::bitstring_utils::unpack_length_prefix</definition>
        <argsstring>(uint32_t &amp;len, cbit_ref &amp;bref, uint32_t lb, uint32_t ub, bool has_ext, bool is_aligned)</argsstring>
        <name>unpack_length_prefix</name>
        <param>
          <type>uint32_t &amp;</type>
          <declname>len</declname>
        </param>
        <param>
          <type>cbit_ref &amp;</type>
          <declname>bref</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ub</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_ext</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_aligned</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack ASN1 bitstring length prefix. Accommodates for cases: fixed/unbounded/bounded, aligned/unaligned, with/out ext </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="1072" column="13" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="1072" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="asn1__utils_8cpp_1ab9a70421fa91b2a6204437151461e822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SRSASN_CODE</type>
        <definition>SRSASN_CODE asn1::bitstring_utils::unpack_bitfield</definition>
        <argsstring>(uint8_t *buf, cbit_ref &amp;bref, uint32_t n, uint32_t lb, uint32_t ub, bool is_aligned)</argsstring>
        <name>unpack_bitfield</name>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>cbit_ref &amp;</type>
          <declname>bref</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ub</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_aligned</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="1102" column="13" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="1102" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="asn1__utils_8cpp_1a67d2c27351f2b36774e5ed4f43b87c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asn1::bitstring_utils::from_number</definition>
        <argsstring>(uint8_t *ptr, uint64_t number, uint32_t nbits)</argsstring>
        <name>from_number</name>
        <param>
          <type>uint8_t *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>number</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nbits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="1125" column="6" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="1125" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="asn1__utils_8cpp_1a2a5337b825a6ed4a5a63167fe4532660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string asn1::bitstring_utils::to_string</definition>
        <argsstring>(const uint8_t *ptr, uint32_t nbits)</argsstring>
        <name>to_string</name>
        <param>
          <type>const uint8_t *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nbits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="1141" column="13" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="1141" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="asn1__utils_8cpp_1aadce3ee5e211ffb0e71aa0da2ef1d1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t asn1::bitstring_utils::to_number</definition>
        <argsstring>(const uint8_t *ptr, uint32_t nbits)</argsstring>
        <name>to_number</name>
        <param>
          <type>const uint8_t *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nbits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_utils.cpp" line="1150" column="10" bodyfile="lib/asn1/asn1_utils.cpp" bodystart="1150" bodyend="1162"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/asn1/asn1_utils.cpp" line="991" column="25"/>
  </compounddef>
</doxygen>
