<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacesrsgnb_1_1detail" kind="namespace" language="C++">
    <compoundname>srsgnb::detail</compoundname>
    <innerclass refid="structsrsgnb_1_1detail_1_1awaiter__memory__storage__t" prot="public">srsgnb::detail::awaiter_memory_storage_t</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1base__blocking__queue" prot="public">srsgnb::detail::base_blocking_queue</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1base__circular__buffer" prot="public">srsgnb::detail::base_circular_buffer</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1base__coro__frame" prot="public">srsgnb::detail::base_coro_frame</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1base__coro__frame_3_01void_01_4" prot="public">srsgnb::detail::base_coro_frame&lt; void &gt;</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1base__slot__array" prot="public">srsgnb::detail::base_slot_array</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1base__slot__array__view" prot="public">srsgnb::detail::base_slot_array_view</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1base__split__slot__span" prot="public">srsgnb::detail::base_split_slot_span</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1bitset__builtin__helper" prot="public">srsgnb::detail::bitset_builtin_helper</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1common__task__crtp" prot="public">srsgnb::detail::common_task_crtp</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1coro__frame" prot="public">srsgnb::detail::coro_frame</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1function__signature" prot="public">srsgnb::detail::function_signature</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1function__signature_3_01Ret_07Args_8_8_8_08_4" prot="public">srsgnb::detail::function_signature&lt; Ret(Args...)&gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1function__signature_3_01Ret_07Obj_1_1_5_08_07Args_8_8_8_08_01const_01_4" prot="public">srsgnb::detail::function_signature&lt; Ret(Obj::*)(Args...) const &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1function__signature_3_01Ret_07Obj_1_1_5_08_07Args_8_8_8_08_4" prot="public">srsgnb::detail::function_signature&lt; Ret(Obj::*)(Args...)&gt;</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1get__type__from__index" prot="public">srsgnb::detail::get_type_from_index</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1get__type__from__index_3_01Index_00_01type__list_3_01Types_8_8_8_01_4_01_4" prot="public">srsgnb::detail::get_type_from_index&lt; Index, type_list&lt; Types... &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1get__type__from__index__helper" prot="public">srsgnb::detail::get_type_from_index_helper</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1get__type__from__index__helper_3_01I_00_01I_00_01T_00_01Types_8_8_8_01_4" prot="public">srsgnb::detail::get_type_from_index_helper&lt; I, I, T, Types... &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1get__type__from__index__helper_3_01I_00_01N_00_01T_00_01Types_8_8_8_01_4" prot="public">srsgnb::detail::get_type_from_index_helper&lt; I, N, T, Types... &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__container__compatible" prot="public">srsgnb::detail::is_container_compatible</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__container__compatible_3_01Container_00_01U_00_01void__t_3_01declty79b8b871c7b016fae136a0f2c4cfb678" prot="public">srsgnb::detail::is_container_compatible&lt; Container, U, void_t&lt; decltype(std::declval&lt; Container &gt;().data()), decltype(std::declval&lt; Container &gt;().size()), typename std::enable_if&lt;!is_span&lt; remove_cvref_t&lt; Container &gt; &gt;::value, int &gt;::type, typename std::enable_if&lt;!is_std_array&lt; remove_cvref_t&lt; Container &gt; &gt;::value, int &gt;::type, typename std::enable_if&lt;!std::is_array&lt; remove_cvref_t&lt; Container &gt; &gt;::value, int &gt;::type, typename std::enable_if&lt; std::is_convertible&lt; typename std::remove_pointer&lt; decltype(std::declval&lt; Container &gt;().data())&gt;::type(*)[], U(*)[]&gt;::value, int &gt;::type &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__expected" prot="public">srsgnb::detail::is_expected</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__expected_3_01expected_3_01V_00_01E_01_4_01_4" prot="public">srsgnb::detail::is_expected&lt; expected&lt; V, E &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__llr__span__compatible" prot="public">srsgnb::detail::is_llr_span_compatible</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__llr__span__compatible_3_01T_00_01std_1_1enable__if__t_3_01std_1_1i32043caa23d6d4580a3ec037747b503f" prot="public">srsgnb::detail::is_llr_span_compatible&lt; T, std::enable_if_t&lt; std::is_convertible&lt; T, span&lt; log_likelihood_ratio &gt; &gt;::value||std::is_convertible&lt; T, span&lt; const log_likelihood_ratio &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__span" prot="public">srsgnb::detail::is_span</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__span_3_01span_3_01U_01_4_01_4" prot="public">srsgnb::detail::is_span&lt; span&lt; U &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__std__array" prot="public">srsgnb::detail::is_std_array</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1is__std__array_3_01std_1_1array_3_01U_00_01N_01_4_01_4" prot="public">srsgnb::detail::is_std_array&lt; std::array&lt; U, N &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1make__void" prot="public">srsgnb::detail::make_void</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1manual__event__common" prot="public">srsgnb::detail::manual_event_common</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1noop__operator" prot="public">srsgnb::detail::noop_operator</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1promise__data" prot="public">srsgnb::detail::promise_data</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1promise__data_3_01void_00_01Base_01_4" prot="public">srsgnb::detail::promise_data&lt; void, Base &gt;</innerclass>
    <innerclass refid="classsrsgnb_1_1detail_1_1signal__event__common" prot="public">srsgnb::detail::signal_event_common</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1small__memory__buffer__t" prot="public">srsgnb::detail::small_memory_buffer_t</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1task__promise__base" prot="public">srsgnb::detail::task_promise_base</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1type__list" prot="public">srsgnb::detail::type_list</innerclass>
    <innerclass refid="structsrsgnb_1_1detail_1_1type__storage" prot="public">srsgnb::detail::type_storage</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="coroutine_8h_1a574527a1c3bd61a3923df84fc814125c" prot="public" static="no" strong="no">
        <type>int32_t</type>
        <name>coro_state_tag_t</name>
        <enumvalue id="coroutine_8h_1a574527a1c3bd61a3923df84fc814125cac4ecf2a1febb63624736081fe52e1b8b" prot="public">
          <name>tag_cancelled</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="coroutine_8h_1a574527a1c3bd61a3923df84fc814125ca9ac86e9d03a9bb3b169ce0c23b2da7e7" prot="public">
          <name>tag_final_suspend</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="coroutine_8h_1a574527a1c3bd61a3923df84fc814125ca0fad5e682f788d1416479e19681dd7a1" prot="public">
          <name>tag_destroyed</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="coroutine_8h_1a574527a1c3bd61a3923df84fc814125ca1e957e782c074dfd45cf3707508ade23" prot="public">
          <name>tag_init</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Special coroutine suspension point indexes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="22" column="22" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="22" bodyend="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="span_8h_1aa9cd22d1dc07d060a357c606e9d97f19" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structsrsgnb_1_1detail_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using srsgnb::detail::void_t = typedef typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="36" column="1" bodyfile="include/srsgnb/adt/span.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="span_8h_1a8623c62e55bba5d62d0c03021ff83fcb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; typename std::remove_reference&lt; U &gt;::type &gt;::type</type>
        <definition>using srsgnb::detail::remove_cvref_t = typedef typename std::remove_cv&lt;typename std::remove_reference&lt;U&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_cvref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="49" column="1" bodyfile="include/srsgnb/adt/span.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="awaiter__memory__storage_8h_1ade4c63e9599afa5b84c3ff1eb714d4d8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Awaitable</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; Awaitable &gt;().get_awaiter())</type>
        <definition>using srsgnb::detail::awaiter_t = typedef decltype(std::declval&lt;Awaitable&gt;().get_awaiter())</definition>
        <argsstring></argsstring>
        <name>awaiter_t</name>
        <briefdescription>
<para>Metafunction to get Awaiter Type from Awaitable. </para>
        </briefdescription>
        <detaileddescription>
<para>Metafunction for deriving Awaitable -&gt; Awaiter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/awaiter_memory_storage.h" line="66" column="1" bodyfile="include/srsgnb/support/async/awaiter_memory_storage.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="coroutine_8h_1a9b83b459cec3a1fa5a733ff03a1350f7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Awaitable</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; awaiter_t&lt; Awaitable &gt; &gt;().await_resume())</type>
        <definition>using srsgnb::detail::awaitable_result_t = typedef decltype(std::declval&lt;awaiter_t&lt;Awaitable&gt; &gt;().await_resume())</definition>
        <argsstring></argsstring>
        <name>awaitable_result_t</name>
        <briefdescription>
<para>Metafunction for deriving Awaitable -&gt; Result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="30" column="1" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="coroutine_8h_1a378dc7a81c8724fd4d3ae40ee2ef7789" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Result</type>
          </param>
          <param>
            <type>typename FunctionReturn</type>
            <defval>Result</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; Result, void &gt;::value, FunctionReturn &gt;</type>
        <definition>using srsgnb::detail::enable_if_void = typedef std::enable_if_t&lt;std::is_same&lt;Result, void&gt;::value, FunctionReturn&gt;</definition>
        <argsstring></argsstring>
        <name>enable_if_void</name>
        <briefdescription>
<para>SFINAE based on whether Result is void. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="34" column="1" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="coroutine_8h_1afb003918036b03453be00ba8a66a7ef3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Result</type>
          </param>
          <param>
            <type>typename FunctionReturn</type>
            <defval>Result</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; not std::is_same&lt; Result, void &gt;::value, FunctionReturn &gt;</type>
        <definition>using srsgnb::detail::enable_if_nonvoid = typedef std::enable_if_t&lt;not std::is_same&lt;Result, void&gt;::value, FunctionReturn&gt;</definition>
        <argsstring></argsstring>
        <name>enable_if_nonvoid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="36" column="1" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="coroutine_8h_1adcf60d0d6730e2072c521c34fd1c39ba" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>typename std::decay_t&lt; get_type_from_index_t&lt; 0, decltype(callable_arguments&lt; F &gt;())&gt; &gt;::promise_type</type>
        <definition>using srsgnb::detail::promise_of = typedef typename std::decay_t&lt;get_type_from_index_t&lt;0, decltype(callable_arguments&lt;F&gt;())&gt; &gt;::promise_type</definition>
        <argsstring></argsstring>
        <name>promise_of</name>
        <briefdescription>
<para>Metafunction for deriving coroutine implementation -&gt; Promise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="40" column="1" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="coroutine_8h_1ab2f32b79dfc22d02059948f7ce51177a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>typename std::decay_t&lt; get_type_from_index_t&lt; 0, decltype(callable_arguments&lt; F &gt;())&gt; &gt;::future_type</type>
        <definition>using srsgnb::detail::future_of = typedef typename std::decay_t&lt;get_type_from_index_t&lt;0, decltype(callable_arguments&lt;F&gt;())&gt; &gt;::future_type</definition>
        <argsstring></argsstring>
        <name>future_of</name>
        <briefdescription>
<para>Metafunction for deriving coroutine implementation -&gt; Future Type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="44" column="1" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="function__signature_8h_1a224eac6f5b0e6f802763eb378dff23f3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Sig</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structsrsgnb_1_1detail_1_1function__signature" kindref="compound">function_signature</ref>&lt; Sig &gt;::arg_types</type>
        <definition>using srsgnb::detail::function_args_t = typedef typename function_signature&lt;Sig&gt;::arg_types</definition>
        <argsstring></argsstring>
        <name>function_args_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/detail/function_signature.h" line="45" column="1" bodyfile="include/srsgnb/support/async/detail/function_signature.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="function__signature_8h_1a5101d1c76e213feb38bf711dd040ffd7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Sig</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structsrsgnb_1_1detail_1_1function__signature" kindref="compound">function_signature</ref>&lt; Sig &gt;::return_type</type>
        <definition>using srsgnb::detail::function_return_t = typedef typename function_signature&lt;Sig&gt;::return_type</definition>
        <argsstring></argsstring>
        <name>function_return_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/detail/function_signature.h" line="48" column="1" bodyfile="include/srsgnb/support/async/detail/function_signature.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__list_8h_1acbb6a1ad90f37f93247e04ef265b1501" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="classsrsgnb_1_1detail_1_1get__type__from__index" kindref="compound">get_type_from_index</ref>&lt; Index, Types... &gt;::type</type>
        <definition>using srsgnb::detail::get_type_from_index_t = typedef typename get_type_from_index&lt;Index, Types...&gt;::type</definition>
        <argsstring></argsstring>
        <name>get_type_from_index_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/detail/type_list.h" line="62" column="1" bodyfile="include/srsgnb/support/detail/type_list.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="circular__buffer_8h_1afeac92d0a34f5c7cc24b72e7ab045372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t srsgnb::detail::get_max_size</definition>
        <argsstring>(const std::array&lt; T, N &gt; &amp;a)</argsstring>
        <name>get_max_size</name>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Helper Function to obtain maximum space in underlying container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/circular_buffer.h" line="33" column="8" bodyfile="include/srsgnb/adt/circular_buffer.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="circular__buffer_8h_1a666e43c0554a8a093aa9fa06689ab7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t srsgnb::detail::get_max_size</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;a)</argsstring>
        <name>get_max_size</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/circular_buffer.h" line="38" column="8" bodyfile="include/srsgnb/adt/circular_buffer.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="type__storage_8h_1a8ccbe3f2546998f1749e4dd141d781c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>MinSize</declname>
            <defname>MinSize</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>AlignSize</declname>
            <defname>AlignSize</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::detail::copy_if_present_helper</definition>
        <argsstring>(type_storage&lt; T, MinSize, AlignSize &gt; &amp;lhs, const type_storage&lt; T, MinSize, AlignSize &gt; &amp;rhs, bool lhs_present, bool rhs_present) noexcept(std::is_nothrow_copy_constructible&lt; T &gt;::value &amp;&amp;std::is_nothrow_copy_assignable&lt; T &gt;::value)</argsstring>
        <name>copy_if_present_helper</name>
        <param>
          <type><ref refid="structsrsgnb_1_1detail_1_1type__storage" kindref="compound">type_storage</ref>&lt; T, MinSize, AlignSize &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1detail_1_1type__storage" kindref="compound">type_storage</ref>&lt; T, MinSize, AlignSize &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lhs_present</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rhs_present</declname>
        </param>
        <briefdescription>
<para>Helper method to copy optional object from rhs to lhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/detail/type_storage.h" line="48" column="6" bodyfile="include/srsgnb/adt/detail/type_storage.h" bodystart="48" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="type__storage_8h_1a57010a7e6b86bfd26dbccd2e7b99987d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>MinSize</declname>
            <defname>MinSize</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>AlignSize</declname>
            <defname>AlignSize</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::detail::move_if_present_helper</definition>
        <argsstring>(type_storage&lt; T, MinSize, AlignSize &gt; &amp;lhs, type_storage&lt; T, MinSize, AlignSize &gt; &amp;rhs, bool lhs_present, bool rhs_present) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; T &gt;::value)</argsstring>
        <name>move_if_present_helper</name>
        <param>
          <type><ref refid="structsrsgnb_1_1detail_1_1type__storage" kindref="compound">type_storage</ref>&lt; T, MinSize, AlignSize &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structsrsgnb_1_1detail_1_1type__storage" kindref="compound">type_storage</ref>&lt; T, MinSize, AlignSize &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lhs_present</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rhs_present</declname>
        </param>
        <briefdescription>
<para>Helper method to move optional object from rhs to lhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/detail/type_storage.h" line="65" column="6" bodyfile="include/srsgnb/adt/detail/type_storage.h" bodystart="65" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="to__array_8h_1aa0f50dd22f87deefd6379093f5f164b0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::array&lt; std::remove_cv_t&lt; T &gt;, N &gt;</type>
        <definition>constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; srsgnb::detail::to_array_impl</definition>
        <argsstring>(T(&amp;a)[N], std::index_sequence&lt; I... &gt;)</argsstring>
        <name>to_array_impl</name>
        <param>
          <type>T(&amp;)</type>
          <declname>a</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/to_array.h" line="12" column="11" bodyfile="include/srsgnb/adt/to_array.h" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="to__array_8h_1a77e97399db6ceee032c2a1cdfa188367" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::array&lt; std::remove_cv_t&lt; T &gt;, N &gt;</type>
        <definition>constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; srsgnb::detail::to_array_impl</definition>
        <argsstring>(T(&amp;&amp;a)[N], std::index_sequence&lt; I... &gt;)</argsstring>
        <name>to_array_impl</name>
        <param>
          <type>T(&amp;&amp;)</type>
          <declname>a</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/to_array.h" line="18" column="22" bodyfile="include/srsgnb/adt/to_array.h" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="event__impl_8h_1a491aede4f32ce1ee7313a9a415d01cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AwaiterType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::detail::flush_awaiter_list</definition>
        <argsstring>(AwaiterType *current)</argsstring>
        <name>flush_awaiter_list</name>
        <param>
          <type>AwaiterType *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
<para>Iterates over linked list of awaiters and calls resume for each awaiter stored coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/detail/event_impl.h" line="21" column="6" bodyfile="include/srsgnb/support/async/detail/event_impl.h" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="function__signature_8h_1a15d30e68acedd8b57239bccfc86c6453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto srsgnb::detail::callable_arguments</definition>
        <argsstring>() -&gt; typename function_signature&lt; decltype(&amp;std::decay_t&lt; T &gt;::operator())&gt;::arg_types</argsstring>
        <name>callable_arguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/detail/function_signature.h" line="51" column="6" declfile="include/srsgnb/support/async/detail/function_signature.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="type__list_8h_1a434eebaa728102eb023adc23cac30531" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t srsgnb::detail::type_list_size</definition>
        <argsstring>(type_list&lt; Args... &gt; t)</argsstring>
        <name>type_list_size</name>
        <param>
          <type><ref refid="structsrsgnb_1_1detail_1_1type__list" kindref="compound">type_list</ref>&lt; Args... &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get size of <ref refid="structsrsgnb_1_1detail_1_1type__list" kindref="compound">type_list</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/detail/type_list.h" line="38" column="23" bodyfile="include/srsgnb/support/detail/type_list.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="srsgnb__assert_8h_1a35d27977dfbdb21f561afbcdd14bc93e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::detail::print_and_abort</definition>
        <argsstring>(const char *filename, int line, const char *funcname, const char *condstr=nullptr, const std::string &amp;msg=&quot;&quot;) noexcept</argsstring>
        <name>print_and_abort</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>funcname</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>condstr</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>helper function to format and print assertion messages. Before printing, the srslog is flushed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>file name where assertion failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>line in which assertion was placed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcname</parametername>
</parameternamelist>
<parameterdescription>
<para>function name where assertion failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condstr</parametername>
</parameternamelist>
<parameterdescription>
<para>assertion condition that failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>additional assertion message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/srsgnb_assert.h" line="33" column="14" bodyfile="include/srsgnb/support/srsgnb_assert.h" bodystart="33" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="srsgnb__test_8h_1abe69e90143e93dd02d153ae22253a72c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string srsgnb::detail::assert_eq_format_helper</definition>
        <argsstring>(T expected_val, U actual_val, bool eq_cmp, const std::string &amp;msg) noexcept</argsstring>
        <name>assert_eq_format_helper</name>
        <param>
          <type>T</type>
          <declname>expected_val</declname>
        </param>
        <param>
          <type>U</type>
          <declname>actual_val</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eq_cmp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Helper function to format TESTASSERT_EQ. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/srsgnb_test.h" line="22" column="1" bodyfile="include/srsgnb/support/srsgnb_test.h" bodystart="22" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/srsgnb/adt/bounded_bitset.h" line="58" column="16"/>
  </compounddef>
</doxygen>
