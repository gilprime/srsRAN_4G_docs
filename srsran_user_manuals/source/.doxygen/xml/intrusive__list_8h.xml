<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="intrusive__list_8h" kind="file" language="C++">
    <compoundname>intrusive_list.h</compoundname>
    <includes local="no">iterator</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="timers_8h" local="yes">include/srsgnb/support/timers.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>iterator</label>
      </node>
      <node id="1">
        <label>include/srsgnb/adt/intrusive_list.h</label>
        <link refid="intrusive__list_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="23">
        <label>lib/du_manager/procedures/ue_creation_procedure.h</label>
        <link refid="du__manager_2procedures_2ue__creation__procedure_8h_source"/>
      </node>
      <node id="11">
        <label>lib/rrc/ue/procedures/rrc_setup_procedure.h</label>
        <link refid="rrc__setup__procedure_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lib/du_high/du_high.h</label>
        <link refid="du__high_8h_source"/>
      </node>
      <node id="21">
        <label>include/srsgnb/pdcp/pdcp_factory.h</label>
        <link refid="pdcp__factory_8h_source"/>
      </node>
      <node id="22">
        <label>include/srsgnb/rlc/rlc_factory.h</label>
        <link refid="rlc__factory_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/cu_cp/du_processor.h</label>
        <link refid="lib_2cu__cp_2du__processor_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/srsgnb/adt/intrusive_list.h</label>
        <link refid="intrusive__list_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/rlc/rlc_rx_am_entity.h</label>
        <link refid="rlc__rx__am__entity_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>lib/rrc/ue/procedures/rrc_ue_event_manager.h</label>
        <link refid="rrc__ue__event__manager_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/rrc/ue/rrc_ue_context.h</label>
        <link refid="rrc__ue__context_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>lib/rlc/rlc_tx_am_entity.h</label>
        <link refid="rlc__tx__am__entity_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/srsgnb/f1_interface/du/f1ap_du_factory.h</label>
        <link refid="f1ap__du__factory_8h_source"/>
      </node>
      <node id="18">
        <label>lib/cu_cp/adapters/rrc_ue_adapters.h</label>
        <link refid="rrc__ue__adapters_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/srsgnb/support/timers.h</label>
        <link refid="timers_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/cu_cp/adapters/f1ap_adapters.h</label>
        <link refid="f1ap__adapters_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/f1_interface/du/f1ap_du_impl.h</label>
        <link refid="f1ap__du__impl_8h_source"/>
      </node>
      <node id="9">
        <label>lib/rrc/ue/rrc_ue_entity.h</label>
        <link refid="rrc__ue__entity_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/srsgnb/cu_cp/du_processor.h</label>
        <link refid="include_2srsgnb_2cu__cp_2du__processor_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/srsgnb/du_manager/du_manager_factory.h</label>
        <link refid="du__manager__factory_8h_source"/>
      </node>
      <node id="33">
        <label>lib/rlc/rlc_rx_um_entity.h</label>
        <link refid="rlc__rx__um__entity_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>lib/rlc/rlc_um_entity.h</label>
        <link refid="rlc__um__entity_8h_source"/>
      </node>
      <node id="15">
        <label>lib/cu_cp/ue_manager.h</label>
        <link refid="ue__manager_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/cu_cp/du_processor_config.h</label>
        <link refid="du__processor__config_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/srsgnb/support/async/protocol_transaction_manager.h</label>
        <link refid="protocol__transaction__manager_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/rlc/rlc_am_entity.h</label>
        <link refid="rlc__am__entity_8h_source"/>
      </node>
      <node id="10">
        <label>lib/rrc/rrc_entity.h</label>
        <link refid="rrc__entity_8h_source"/>
      </node>
      <node id="4">
        <label>include/srsgnb/cu_cp/ue_context.h</label>
        <link refid="ue__context_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/srsgnb/rrc/rrc_factory.h</label>
        <link refid="rrc__factory_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/cu_cp/ue_manager_interfaces.h</label>
        <link refid="ue__manager__interfaces_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/cu_cp/cu_cp.h</label>
        <link refid="lib_2cu__cp_2cu__cp_8h_source"/>
      </node>
      <node id="5">
        <label>include/srsgnb/rrc/rrc_entity_interface.h</label>
        <link refid="rrc__entity__interface_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>lib/f1_interface/du/procedures/f1ap_du_setup_procedure.h</label>
        <link refid="f1ap__du__setup__procedure_8h_source"/>
      </node>
      <node id="17">
        <label>lib/cu_cp/adapters/pdcp_adapters.h</label>
        <link refid="pdcp__adapters_8h_source"/>
      </node>
      <node id="25">
        <label>lib/f1_interface/du/procedures/f1ap_du_event_manager.h</label>
        <link refid="f1ap__du__event__manager_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsrsgnb_1_1intrusive__forward__list__element" prot="public">srsgnb::intrusive_forward_list_element</innerclass>
    <innerclass refid="classsrsgnb_1_1intrusive__forward__list" prot="public">srsgnb::intrusive_forward_list</innerclass>
    <innerclass refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" prot="private">srsgnb::intrusive_forward_list::iterator_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1intrusive__double__linked__list__element" prot="public">srsgnb::intrusive_double_linked_list_element</innerclass>
    <innerclass refid="classsrsgnb_1_1intrusive__double__linked__list" prot="public">srsgnb::intrusive_double_linked_list</innerclass>
    <innerclass refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" prot="private">srsgnb::intrusive_double_linked_list::iterator_impl</innerclass>
    <innernamespace refid="namespacesrsgnb">srsgnb</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesrsgnb" kindref="compound">srsgnb</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">default_intrusive_tag;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>default_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">rusive_tag&gt;</highlight></codeline>
<codeline lineno="23" refid="structsrsgnb_1_1intrusive__forward__list__element" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsrsgnb_1_1intrusive__forward__list__element" kindref="compound">intrusive_forward_list_element</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1intrusive__forward__list__element" kindref="compound">intrusive_forward_list_element&lt;Tag&gt;</ref>*<sp/>next_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>default_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">rusive_tag&gt;</highlight></codeline>
<codeline lineno="33" refid="classsrsgnb_1_1intrusive__forward__list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsrsgnb_1_1intrusive__forward__list" kindref="compound">intrusive_forward_list</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structsrsgnb_1_1intrusive__forward__list__element" kindref="compound">node_t</ref><sp/>=<sp/><ref refid="structsrsgnb_1_1intrusive__forward__list__element" kindref="compound">intrusive_forward_list_element&lt;Tag&gt;</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="39" refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator_impl</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>elem_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;std::is_const&lt;U&gt;::value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrsgnb_1_1intrusive__forward__list__element" kindref="compound">node_t</ref>,<sp/><ref refid="structsrsgnb_1_1intrusive__forward__list__element" kindref="compound">node_t</ref>&gt;::type;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::forward_iterator_tag;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/><sp/><sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U*;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U&amp;;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator_impl</ref>(elem_t*<sp/>node_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>:<sp/>node(node_)<sp/>{}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;U&gt;</ref>&amp;<sp/>operator++()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;next_node;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/><sp/><sp/>operator-&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">pointer</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node);<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">reference</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*node);<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;U&gt;</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>==<sp/>other.node;<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;U&gt;</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>!=<sp/>other.node;<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>elem_t*<sp/>node;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">const_iterator</ref><sp/>=<sp/><ref refid="classsrsgnb_1_1intrusive__forward__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;const T&gt;</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list" kindref="compound">intrusive_forward_list</ref>()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_base_of&lt;node_t,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Provided<sp/>template<sp/>argument<sp/>T<sp/>must<sp/>have<sp/>intrusive_forward_list_element&lt;Tag&gt;<sp/>as<sp/>base<sp/>class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list" kindref="compound">intrusive_forward_list</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list" kindref="compound">intrusive_forward_list</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__forward__list" kindref="compound">intrusive_forward_list</ref>(<ref refid="classsrsgnb_1_1intrusive__forward__list" kindref="compound">intrusive_forward_list</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>:<sp/>node(other.node)<sp/>{<sp/>other.node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>intrusive_forward_list&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>intrusive_forward_list&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>intrusive_forward_list&amp;<sp/>operator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=(intrusive_forward_list&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.node;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>other.node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>T&amp;<sp/>front()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node);<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_front(T*<sp/>t)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>node_t*<sp/>new_head<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">node_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>new_head-&gt;next_node<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>new_head;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>T*<sp/>pop_front()</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>node_t*<sp/>ret<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>node-&gt;next_node;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_t*<sp/>torem<sp/><sp/><sp/><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>node-&gt;next_node;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>torem-&gt;next_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(node);<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>end()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(node);<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>node_t*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>default_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">rusive_tag&gt;</highlight></codeline>
<codeline lineno="122" refid="structsrsgnb_1_1intrusive__double__linked__list__element" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">intrusive_double_linked_list_element</ref><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">intrusive_double_linked_list_element&lt;Tag&gt;</ref>*<sp/>next_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">intrusive_double_linked_list_element&lt;Tag&gt;</ref>*<sp/>prev_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>default_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">rusive_tag&gt;</highlight></codeline>
<codeline lineno="132" refid="classsrsgnb_1_1intrusive__double__linked__list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsrsgnb_1_1intrusive__double__linked__list" kindref="compound">intrusive_double_linked_list</ref></highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">node_t</ref><sp/>=<sp/><ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">intrusive_double_linked_list_element&lt;Tag&gt;</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="138" refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl</ref></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>elem_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;std::is_const&lt;U&gt;::value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">node_t</ref>,<sp/><ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">node_t</ref>&gt;::type;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::bidirectional_iterator_tag;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/><sp/><sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U*;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U&amp;;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl</ref>(elem_t*<sp/>node_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>:<sp/>node(node_)<sp/>{}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;U&gt;</ref>&amp;<sp/>operator++()</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;next_node;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;U&gt;</ref>&amp;<sp/>operator--()</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;prev_node;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/><sp/><sp/>operator-&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">pointer</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node);<sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">reference</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*node);<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;U&gt;</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>==<sp/>other.node;<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;U&gt;</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>!=<sp/>other.node;<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>elem_t*<sp/>node;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">const_iterator</ref><sp/>=<sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl&lt;const T&gt;</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list" kindref="compound">intrusive_double_linked_list</ref>()</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_base_of&lt;node_t,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Provided<sp/>template<sp/>argument<sp/>T<sp/>must<sp/>have<sp/>intrusive_forward_list_element&lt;Tag&gt;<sp/>as<sp/>base<sp/>class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list" kindref="compound">intrusive_double_linked_list</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list" kindref="compound">intrusive_double_linked_list</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="classsrsgnb_1_1intrusive__double__linked__list" kindref="compound">intrusive_double_linked_list</ref>(<ref refid="classsrsgnb_1_1intrusive__double__linked__list" kindref="compound">intrusive_double_linked_list</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>:<sp/>node(other.node)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>other.node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>intrusive_double_linked_list&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>intrusive_double_linked_list&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>intrusive_double_linked_list&amp;<sp/>operator=(intrusive_double_linked_list&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.node;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>other.node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>~intrusive_double_linked_list()<sp/>{<sp/>clear();<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>T&amp;<sp/>front()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node);<sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_front(T*<sp/>t)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>node_t*<sp/>new_head<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">node_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>new_head-&gt;prev_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>new_head-&gt;next_node<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;prev_node<sp/>=<sp/>new_head;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>new_head;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop(T*<sp/>t)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>node_t*<sp/>to_rem<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">node_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to_rem<sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>to_rem-&gt;next_node;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to_rem-&gt;prev_node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_rem-&gt;prev_node-&gt;next_node<sp/>=<sp/>to_rem-&gt;next_node;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to_rem-&gt;next_node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_rem-&gt;next_node-&gt;prev_node<sp/>=<sp/>to_rem-&gt;prev_node;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>to_rem-&gt;next_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>to_rem-&gt;prev_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop_front()<sp/>{<sp/>pop(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node));<sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_t*<sp/>torem<sp/><sp/><sp/><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>node-&gt;next_node;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>torem-&gt;next_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>torem-&gt;prev_node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(node);<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>end()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(node);<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>node_t*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>srsgnb</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/srsgnb/adt/intrusive_list.h"/>
  </compounddef>
</doxygen>
