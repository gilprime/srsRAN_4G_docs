<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="format_8h" kind="file" language="C++">
    <compoundname>format.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">stdexcept</includes>
    <includes refid="core_8h" local="yes">core.h</includes>
    <includedby refid="bounded__bitset_8h" local="yes">include/srsgnb/adt/bounded_bitset.h</includedby>
    <includedby refid="bounded__integer_8h" local="yes">include/srsgnb/adt/bounded_integer.h</includedby>
    <includedby refid="byte__buffer_8h" local="yes">include/srsgnb/adt/byte_buffer.h</includedby>
    <includedby refid="complex_8h" local="yes">include/srsgnb/adt/complex.h</includedby>
    <includedby refid="interval_8h" local="yes">include/srsgnb/adt/interval.h</includedby>
    <includedby refid="span_8h" local="yes">include/srsgnb/adt/span.h</includedby>
    <includedby refid="log__likelihood__ratio_8h" local="yes">include/srsgnb/phy/upper/log_likelihood_ratio.h</includedby>
    <includedby refid="chrono_8h" local="yes">include/srsgnb/srslog/bundled/fmt/chrono.h</includedby>
    <includedby refid="locale_8h" local="yes">include/srsgnb/srslog/bundled/fmt/locale.h</includedby>
    <includedby refid="color_8h" local="yes">include/srsgnb/srslog/bundled/fmt/color.h</includedby>
    <includedby refid="compile_8h" local="yes">include/srsgnb/srslog/bundled/fmt/compile.h</includedby>
    <includedby refid="format-inl_8h" local="yes">include/srsgnb/srslog/bundled/fmt/format-inl.h</includedby>
    <includedby refid="os_8h" local="yes">include/srsgnb/srslog/bundled/fmt/os.h</includedby>
    <includedby refid="ostream_8h" local="yes">include/srsgnb/srslog/bundled/fmt/ostream.h</includedby>
    <includedby refid="ranges_8h" local="yes">include/srsgnb/srslog/bundled/fmt/ranges.h</includedby>
    <includedby refid="log__entry__metadata_8h" local="yes">include/srsgnb/srslog/detail/log_entry_metadata.h</includedby>
    <includedby refid="formatter_8h" local="yes">include/srsgnb/srslog/formatter.h</includedby>
    <includedby refid="bit__encoding_8h" local="yes">include/srsgnb/support/bit_encoding.h</includedby>
    <includedby refid="format__utils_8h" local="yes">include/srsgnb/support/format_utils.h</includedby>
    <includedby refid="lcid__ul__sch_8h" local="yes">lib/mac/mac_ul/lcid_ul_sch.h</includedby>
    <includedby refid="file__utils_8h" local="yes">lib/srslog/sinks/file_utils.h</includedby>
    <incdepgraph>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="14">
        <label>iterator</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="1">
        <label>include/srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cstdio</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
      <node id="10">
        <label>array</label>
      </node>
      <node id="3">
        <label>cerrno</label>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="9">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="316">
        <label>include/srsgnb/phy/upper/sequence_generators/low_papr_sequence_collection.h</label>
        <link refid="low__papr__sequence__collection_8h_source"/>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="272">
        <label>include/srsgnb/phy/lower/modulation/ofdm_demodulator.h</label>
        <link refid="ofdm__demodulator_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
      </node>
      <node id="438">
        <label>include/srsgnb/srslog/bundled/fmt/locale.h</label>
        <link refid="locale_8h_source"/>
        <childnode refid="437" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>include/srsgnb/fapi_adaptor/phy/phy_fapi_adaptor_factory.h</label>
        <link refid="phy__fapi__adaptor__factory_8h_source"/>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>include/srsgnb/rlc/rlc_config_messages.h</label>
        <link refid="rlc__config__messages_8h_source"/>
        <childnode refid="171" relation="include">
        </childnode>
      </node>
      <node id="456">
        <label>include/srsgnb/adt/unique_function.h</label>
        <link refid="unique__function_8h_source"/>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="335">
        <label>lib/radio/zmq/radio_zmq_rx_stream.h</label>
        <link refid="radio__zmq__rx__stream_8h_source"/>
        <childnode refid="331" relation="include">
        </childnode>
      </node>
      <node id="380">
        <label>include/srsgnb/ran/resource_allocation/rb_interval.h</label>
        <link refid="rb__interval_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>lib/du_manager/adapters/mac_adapters.h</label>
        <link refid="mac__adapters_8h_source"/>
      </node>
      <node id="481">
        <label>lib/f1_interface/cu/procedures/f1ap_cu_event_manager.h</label>
        <link refid="f1ap__cu__event__manager_8h_source"/>
        <childnode refid="216" relation="include">
        </childnode>
      </node>
      <node id="375">
        <label>lib/phy/upper/signal_processors/pucch/pucch_orthogonal_sequence.h</label>
        <link refid="pucch__orthogonal__sequence_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/mac/mac_ctrl/srs_sched_config_adapter.h</label>
        <link refid="srs__sched__config__adapter_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>lib/phy/upper/signal_processors/dmrs_pdsch_processor_impl.h</label>
        <link refid="dmrs__pdsch__processor__impl_8h_source"/>
      </node>
      <node id="2">
        <label>include/srsgnb/adt/bounded_bitset.h</label>
        <link refid="bounded__bitset_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="479">
        <label>include/srsgnb/adt/circular_map.h</label>
        <link refid="circular__map_8h_source"/>
        <childnode refid="480" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>include/srsgnb/scheduler/scheduler_factory.h</label>
        <link refid="scheduler__factory_8h_source"/>
      </node>
      <node id="494">
        <label>include/srsgnb/ran/subcarrier_spacing.h</label>
        <link refid="subcarrier__spacing_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="392">
        <label>lib/fapi_adaptor/phy/phy_to_fapi_time_event_translator.h</label>
        <link refid="phy__to__fapi__time__event__translator_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>include/srsgnb/du/du_cell_config_validation.h</label>
        <link refid="du__cell__config__validation_8h_source"/>
      </node>
      <node id="361">
        <label>lib/phy/upper/rx_softbuffer_pool_impl.h</label>
        <link refid="rx__softbuffer__pool__impl_8h_source"/>
      </node>
      <node id="507">
        <label>include/srsgnb/support/async/execute_on.h</label>
        <link refid="execute__on_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>include/srsgnb/phy/upper/upper_phy_factories.h</label>
        <link refid="upper__phy__factories_8h_source"/>
      </node>
      <node id="46">
        <label>lib/phy/upper/signal_processors/dmrs_pusch_estimator_impl.h</label>
        <link refid="dmrs__pusch__estimator__impl_8h"/>
      </node>
      <node id="172">
        <label>include/srsgnb/rlc/rlc_entity.h</label>
        <link refid="rlc__entity_8h_source"/>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/du_manager/procedures/ue_creation_procedure.h</label>
        <link refid="du__manager_2procedures_2ue__creation__procedure_8h_source"/>
      </node>
      <node id="209">
        <label>lib/rrc/ue/procedures/rrc_setup_procedure.h</label>
        <link refid="rrc__setup__procedure_8h_source"/>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>lib/du_manager/adapters/rlc_adapters.h</label>
        <link refid="rlc__adapters_8h_source"/>
      </node>
      <node id="326">
        <label>include/srsgnb/radio/radio_session.h</label>
        <link refid="radio__session_8h_source"/>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
      </node>
      <node id="153">
        <label>include/srsgnb/phy/upper/channel_processors/prach_generator.h</label>
        <link refid="prach__generator_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/du_high/du_high.h</label>
        <link refid="du__high_8h_source"/>
      </node>
      <node id="330">
        <label>lib/radio/uhd/radio_uhd_device.h</label>
        <link refid="radio__uhd__device_8h_source"/>
        <childnode refid="328" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>include/srsgnb/ran/pdcch/cce_to_prb_mapping.h</label>
        <link refid="cce__to__prb__mapping_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="196">
        <label>lib/f1_interface/du/handlers/f1c_du_packet_handler.h</label>
        <link refid="f1c__du__packet__handler_8h_source"/>
        <childnode refid="193" relation="include">
        </childnode>
      </node>
      <node id="370">
        <label>include/srsgnb/phy/upper/upper_phy_rx_results_notifier.h</label>
        <link refid="upper__phy__rx__results__notifier_8h"/>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
      </node>
      <node id="229">
        <label>include/srsgnb/pdcp/pdcp_factory.h</label>
        <link refid="pdcp__factory_8h_source"/>
      </node>
      <node id="151">
        <label>lib/phy/upper/signal_processors/dmrs_helper.h</label>
        <link refid="dmrs__helper_8h_source"/>
      </node>
      <node id="301">
        <label>include/srsgnb/phy/upper/upper_phy_rg_gateway.h</label>
        <link refid="upper__phy__rg__gateway_8h_source"/>
        <childnode refid="297" relation="include">
        </childnode>
      </node>
      <node id="273">
        <label>include/srsgnb/phy/lower/lower_phy_configuration.h</label>
        <link refid="lower__phy__configuration_8h_source"/>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="288">
        <label>include/srsgnb/phy/upper/channel_processors/prach_detector.h</label>
        <link refid="prach__detector_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>lib/phy/upper/channel_processors/pbch_encoder_impl.h</label>
        <link refid="pbch__encoder__impl_8h_source"/>
      </node>
      <node id="267">
        <label>lib/phy/generic_functions/dft_processor_generic_impl.h</label>
        <link refid="dft__processor__generic__impl_8h_source"/>
      </node>
      <node id="167">
        <label>include/srsgnb/adt/byte_buffer_slice_chain.h</label>
        <link refid="byte__buffer__slice__chain_8h_source"/>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>lib/mac/mac_dl/mac_dl_processor.h</label>
        <link refid="mac__dl__processor_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="427">
        <label>lib/phy/upper/channel_coding/short/short_block_encoder_impl.h</label>
        <link refid="short__block__encoder__impl_8h"/>
      </node>
      <node id="349">
        <label>lib/phy/upper/channel_processors/pdsch_encoder_impl.h</label>
        <link refid="pdsch__encoder__impl_8h"/>
      </node>
      <node id="119">
        <label>lib/scheduler/ue_scheduling/ue_scheduler_impl.h</label>
        <link refid="ue__scheduler__impl_8h_source"/>
      </node>
      <node id="40">
        <label>include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h</label>
        <link refid="channel__processor__factories_8h_source"/>
      </node>
      <node id="215">
        <label>include/srsgnb/f1_interface/cu/f1ap_cu_factory.h</label>
        <link refid="f1ap__cu__factory_8h_source"/>
      </node>
      <node id="382">
        <label>include/srsgnb/mac/mac_cell_control_information_handler.h</label>
        <link refid="mac__cell__control__information__handler_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="385">
        <label>include/srsgnb/phy/adapters/phy_error_adapter.h</label>
        <link refid="phy__error__adapter_8h_source"/>
      </node>
      <node id="512">
        <label>include/srsgnb/support/async/event_signal.h</label>
        <link refid="event__signal_8h_source"/>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="467" relation="include">
        </childnode>
      </node>
      <node id="329">
        <label>lib/radio/zmq/radio_factory_zmq_impl.h</label>
        <link refid="radio__factory__zmq__impl_8h_source"/>
      </node>
      <node id="173">
        <label>include/srsgnb/rlc/rlc_factory.h</label>
        <link refid="rlc__factory_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>lib/phy/upper/resource_grid_helpers.h</label>
        <link refid="resource__grid__helpers_8h_source"/>
      </node>
      <node id="268">
        <label>lib/phy/lower/modulation/ofdm_demodulator_impl.h</label>
        <link refid="ofdm__demodulator__impl_8h_source"/>
      </node>
      <node id="8">
        <label>lib/du_high/adapters.h</label>
        <link refid="adapters_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="200">
        <label>lib/cu_cp/du_processor.h</label>
        <link refid="lib_2cu__cp_2du__processor_8h_source"/>
        <childnode refid="149" relation="include">
        </childnode>
      </node>
      <node id="266">
        <label>lib/phy/generic_functions/dft_processor_fftx_impl.h</label>
        <link refid="dft__processor__fftx__impl_8h_source"/>
      </node>
      <node id="97">
        <label>include/srsgnb/du/du_cell_config_helpers.h</label>
        <link refid="du__cell__config__helpers_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>include/srsgnb/phy/upper/channel_processors/pbch_encoder.h</label>
        <link refid="pbch__encoder_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
      </node>
      <node id="231">
        <label>include/srsgnb/pdcp/pdcp_rx.h</label>
        <link refid="pdcp__rx_8h_source"/>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="260">
        <label>include/srsgnb/phy/generic_functions/dft_processor.h</label>
        <link refid="dft__processor_8h_source"/>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
      </node>
      <node id="442">
        <label>include/srsgnb/srslog/bundled/fmt/os.h</label>
        <link refid="os_8h_source"/>
        <childnode refid="443" relation="include">
        </childnode>
      </node>
      <node id="265">
        <label>lib/phy/generic_functions/dft_processor_fftw_impl.h</label>
        <link refid="dft__processor__fftw__impl_8h_source"/>
      </node>
      <node id="51">
        <label>include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h</label>
        <link refid="signal__processor__factories_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="437">
        <label>include/srsgnb/srslog/bundled/fmt/chrono.h</label>
        <link refid="chrono_8h_source"/>
      </node>
      <node id="275">
        <label>include/srsgnb/phy/lower/modulation/ofdm_modulator.h</label>
        <link refid="ofdm__modulator_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/du_manager/du_manager_interfaces.h</label>
        <link refid="du__manager__interfaces_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>lib/scheduler/cell/scheduler_prb.h</label>
        <link refid="scheduler__prb_8h_source"/>
      </node>
      <node id="53">
        <label>lib/phy/upper/channel_processors/pdcch_modulator_impl.h</label>
        <link refid="pdcch__modulator__impl_8h_source"/>
      </node>
      <node id="198">
        <label>include/srsgnb/cu_cp/cu_cp.h</label>
        <link refid="include_2srsgnb_2cu__cp_2cu__cp_8h_source"/>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
      </node>
      <node id="296">
        <label>include/srsgnb/phy/lower/lower_phy_rg_handler.h</label>
        <link refid="lower__phy__rg__handler_8h_source"/>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>lib/scheduler/common_scheduling/sib_scheduler.h</label>
        <link refid="sib__scheduler_8h_source"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="480">
        <label>lib/rlc/rlc_pdu_window.h</label>
        <link refid="rlc__pdu__window_8h_source"/>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>include/srsgnb/support/unique_thread.h</label>
        <link refid="unique__thread_8h_source"/>
        <childnode refid="148" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>include/srsgnb/du_high/du_high_configuration.h</label>
        <link refid="du__high__configuration_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="463">
        <label>include/srsgnb/support/executors/manual_task_worker.h</label>
        <link refid="manual__task__worker_8h_source"/>
      </node>
      <node id="511">
        <label>include/srsgnb/support/async/detail/event_impl.h</label>
        <link refid="event__impl_8h_source"/>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="426">
        <label>include/srsgnb/phy/upper/channel_coding/short/short_block_encoder.h</label>
        <link refid="short__block__encoder_8h"/>
        <childnode refid="427" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>include/srsgnb/du/du_cell_config.h</label>
        <link refid="du__cell__config_8h_source"/>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>lib/scheduler/support/rb_find_algorithm.h</label>
        <link refid="rb__find__algorithm_8h_source"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>lib/phy/upper/signal_processors/sss_processor_impl.h</label>
        <link refid="sss__processor__impl_8h_source"/>
      </node>
      <node id="280">
        <label>include/srsgnb/phy/lower/lower_phy_request_handler.h</label>
        <link refid="lower__phy__request__handler_8h_source"/>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="495">
        <label>include/srsgnb/fapi_adaptor/mac/mac_fapi_adaptor_factory.h</label>
        <link refid="mac__fapi__adaptor__factory_8h_source"/>
        <childnode refid="496" relation="include">
        </childnode>
      </node>
      <node id="258">
        <label>lib/rrc/ue/rrc_asn1_helpers.h</label>
        <link refid="rrc__asn1__helpers_8h_source"/>
      </node>
      <node id="489">
        <label>lib/scheduler/support/pdcch/pdcch_type0_css_occasions.h</label>
        <link refid="pdcch__type0__css__occasions_8h_source"/>
      </node>
      <node id="391">
        <label>include/srsgnb/phy/upper/upper_phy_timing_notifier.h</label>
        <link refid="upper__phy__timing__notifier_8h_source"/>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="508">
        <label>include/srsgnb/support/async/eager_async_task.h</label>
        <link refid="eager__async__task_8h_source"/>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>lib/phy/upper/channel_processors/prach_generator_impl.h</label>
        <link refid="prach__generator__impl_8h_source"/>
      </node>
      <node id="38">
        <label>include/srsgnb/phy/upper/channel_estimation.h</label>
        <link refid="channel__estimation_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="405">
        <label>include/srsgnb/phy/upper/channel_coding/crc_calculator.h</label>
        <link refid="crc__calculator_8h_source"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="171">
        <label>include/srsgnb/rlc/rlc.h</label>
        <link refid="rlc_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
      </node>
      <node id="441">
        <label>include/srsgnb/srslog/bundled/fmt/format-inl.h</label>
        <link refid="format-inl_8h_source"/>
      </node>
      <node id="228">
        <label>include/srsgnb/pdcp/pdcp_entity.h</label>
        <link refid="pdcp__entity_8h_source"/>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
      </node>
      <node id="491">
        <label>include/srsgnb/ran/prach/prach_subcarrier_spacing.h</label>
        <link refid="prach__subcarrier__spacing_8h_source"/>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
      </node>
      <node id="475">
        <label>lib/srslog/log_backend_impl.h</label>
        <link refid="log__backend__impl_8h_source"/>
        <childnode refid="476" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>lib/scheduler/support/pdsch/pdsch_default_time_allocation.h</label>
        <link refid="pdsch__default__time__allocation_8h_source"/>
      </node>
      <node id="455">
        <label>include/srsgnb/support/error_handling.h</label>
        <link refid="error__handling_8h_source"/>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="469" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="352" relation="include">
        </childnode>
        <childnode refid="354" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="180">
        <label>lib/rlc/rlc_rx_am_entity.h</label>
        <link refid="rlc__rx__am__entity_8h_source"/>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="523">
        <label>lib/srslog/sinks/buffered_file_sink.h</label>
        <link refid="buffered__file__sink_8h_source"/>
      </node>
      <node id="128">
        <label>include/srsgnb/scheduler/scheduler_slot_handler.h</label>
        <link refid="scheduler__slot__handler_8h_source"/>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>include/srsgnb/adt/byte_buffer.h</label>
        <link refid="byte__buffer_8h_source"/>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>include/srsgnb/fapi_adaptor/mac/messages/pdsch.h</label>
        <link refid="mac_2messages_2pdsch_8h_source"/>
      </node>
      <node id="320">
        <label>include/srsgnb/srsvec/add.h</label>
        <link refid="add_8h_source"/>
      </node>
      <node id="88">
        <label>include/srsgnb/fapi/message_validators.h</label>
        <link refid="message__validators_8h_source"/>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="467">
        <label>lib/rrc/ue/procedures/rrc_ue_event_manager.h</label>
        <link refid="rrc__ue__event__manager_8h_source"/>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="300">
        <label>lib/phy/support/resource_grid_pool_impl.h</label>
        <link refid="resource__grid__pool__impl_8h_source"/>
      </node>
      <node id="212">
        <label>lib/rrc/ue/rrc_ue_context.h</label>
        <link refid="rrc__ue__context_8h_source"/>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>lib/fapi/validators/dl_pdcch_pdu.h</label>
        <link refid="dl__pdcch__pdu_8h_source"/>
      </node>
      <node id="29">
        <label>lib/mac/mac_config_interfaces.h</label>
        <link refid="mac__config__interfaces_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="395">
        <label>lib/scheduler/support/slot_sync_point.h</label>
        <link refid="slot__sync__point_8h_source"/>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="239">
        <label>include/srsgnb/ran/nr_up_protocol.h</label>
        <link refid="nr__up__protocol_8h_source"/>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
      </node>
      <node id="274">
        <label>lib/phy/lower/lower_phy_impl.h</label>
        <link refid="lower__phy__impl_8h_source"/>
      </node>
      <node id="500">
        <label>lib/fapi_adaptor/mac/fapi_to_mac_time_msg_translator.h</label>
        <link refid="fapi__to__mac__time__msg__translator_8h_source"/>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="184">
        <label>lib/rlc/rlc_tx_am_entity.h</label>
        <link refid="rlc__tx__am__entity_8h_source"/>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>include/srsgnb/scheduler/scheduler_configurator.h</label>
        <link refid="scheduler__configurator_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="476">
        <label>lib/srslog/srslog_instance.h</label>
        <link refid="srslog__instance_8h_source"/>
      </node>
      <node id="35">
        <label>include/srsgnb/mac/mac_configuration_helpers.h</label>
        <link refid="mac__configuration__helpers_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="474">
        <label>lib/srslog/backend_worker.h</label>
        <link refid="backend__worker_8h_source"/>
        <childnode refid="475" relation="include">
        </childnode>
      </node>
      <node id="394">
        <label>lib/phy/upper/processor_pool_helpers.h</label>
        <link refid="processor__pool__helpers_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>lib/scheduler/cell/resource_grid.h</label>
        <link refid="lib_2scheduler_2cell_2resource__grid_8h_source"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="232">
        <label>include/srsgnb/pdcp/pdcp_tx.h</label>
        <link refid="pdcp__tx_8h_source"/>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
      </node>
      <node id="460">
        <label>include/srsgnb/du_high/du_l2_ul_executor_mapper.h</label>
        <link refid="du__l2__ul__executor__mapper_8h_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="346">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_segmenter_impl.h</label>
        <link refid="ldpc__segmenter__impl_8h"/>
      </node>
      <node id="279">
        <label>include/srsgnb/phy/support/prach_buffer.h</label>
        <link refid="prach__buffer_8h_source"/>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="285">
        <label>lib/phy/lower/processors/adaptors/processor_notifier_adaptor.h</label>
        <link refid="processor__notifier__adaptor_8h_source"/>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>include/srsgnb/scheduler/dmrs.h</label>
        <link refid="dmrs_8h_source"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
      <node id="470">
        <label>include/srsgnb/support/srsgnb_assert.h</label>
        <link refid="srsgnb__assert_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="338" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="342" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
      </node>
      <node id="344">
        <label>include/srsgnb/phy/upper/channel_coding/ldpc/ldpc_segmenter_rx.h</label>
        <link refid="ldpc__segmenter__rx_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>lib/fapi_adaptor/phy/phy_fapi_adaptor_impl.h</label>
        <link refid="phy__fapi__adaptor__impl_8h_source"/>
      </node>
      <node id="192">
        <label>lib/f1_interface/du/f1ap_du_context.h</label>
        <link refid="f1ap__du__context_8h_source"/>
        <childnode refid="193" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>lib/phy/upper/signal_processors/dmrs_pdcch_processor_impl.h</label>
        <link refid="dmrs__pdcch__processor__impl_8h_source"/>
      </node>
      <node id="402">
        <label>include/srsgnb/pcap/e1ap_pcap.h</label>
        <link refid="e1ap__pcap_8h_source"/>
      </node>
      <node id="276">
        <label>include/srsgnb/phy/lower/processors/prach/prach_processor_baseband.h</label>
        <link refid="prach__processor__baseband_8h_source"/>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>include/srsgnb/ran/prach/prach_cyclic_shifts.h</label>
        <link refid="prach__cyclic__shifts_8h_source"/>
      </node>
      <node id="376">
        <label>lib/scheduler/support/prbs_calculator.h</label>
        <link refid="prbs__calculator_8h_source"/>
      </node>
      <node id="366">
        <label>lib/phy/lower/modulation/phase_compensation_lut.h</label>
        <link refid="phase__compensation__lut_8h_source"/>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
      </node>
      <node id="226">
        <label>lib/gateways/sctp_network_gateway.h</label>
        <link refid="sctp__network__gateway_8h_source"/>
      </node>
      <node id="129">
        <label>include/srsgnb/mac/mac_cell_result.h</label>
        <link refid="mac__cell__result_8h_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>lib/scheduler/pdcch_scheduling/pdcch_scheduler.h</label>
        <link refid="pdcch__scheduler_8h_source"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="159">
        <label>include/srsgnb/ran/ssb_properties.h</label>
        <link refid="ssb__properties_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
      </node>
      <node id="297">
        <label>include/srsgnb/phy/adapters/phy_rg_gateway_adapter.h</label>
        <link refid="phy__rg__gateway__adapter_8h_source"/>
      </node>
      <node id="418">
        <label>lib/phy/upper/channel_coding/polar/polar_rate_matcher_impl.h</label>
        <link refid="polar__rate__matcher__impl_8h_source"/>
      </node>
      <node id="515">
        <label>include/srsgnb/support/test_utils.h</label>
        <link refid="test__utils_8h_source"/>
      </node>
      <node id="101">
        <label>lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h</label>
        <link refid="ssb__coreset0__freq__pos__generator_8h_source"/>
      </node>
      <node id="313">
        <label>include/srsgnb/phy/upper/channel_modulation/modulation_mapper.h</label>
        <link refid="modulation__mapper_8h_source"/>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>lib/fapi_adaptor/phy/fapi_to_phy_translator.h</label>
        <link refid="fapi__to__phy__translator_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>lib/scheduler/ue_scheduling/harq_process.h</label>
        <link refid="harq__process_8h_source"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/srsgnb/phy/upper/equalization/channel_equalizer.h</label>
        <link refid="channel__equalizer_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>include/srsgnb/phy/upper/rb_allocation.h</label>
        <link refid="rb__allocation_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="219">
        <label>include/srsgnb/f1_interface/du/f1ap_du_factory.h</label>
        <link refid="f1ap__du__factory_8h_source"/>
      </node>
      <node id="45">
        <label>include/srsgnb/phy/upper/port_channel_estimator.h</label>
        <link refid="port__channel__estimator_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>include/srsgnb/fapi/message_builders.h</label>
        <link refid="message__builders_8h_source"/>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>include/srsgnb/phy/upper/channel_modulation/channel_modulation_factories.h</label>
        <link refid="channel__modulation__factories_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="295">
        <label>include/srsgnb/phy/support/resource_grid.h</label>
        <link refid="include_2srsgnb_2phy_2support_2resource__grid_8h_source"/>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="452">
        <label>include/srsgnb/ran/bearer_logger.h</label>
        <link refid="bearer__logger_8h_source"/>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="400">
        <label>lib/cu_cp/f1c_asn1_helpers.h</label>
        <link refid="f1c__asn1__helpers_8h_source"/>
      </node>
      <node id="369">
        <label>include/srsgnb/phy/upper/channel_processors/prach_detection_result.h</label>
        <link refid="prach__detection__result_8h_source"/>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>lib/mac/mac_ul/ul_bsr.h</label>
        <link refid="ul__bsr_8h_source"/>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="403">
        <label>include/srsgnb/pcap/f1ap_pcap.h</label>
        <link refid="f1ap__pcap_8h_source"/>
      </node>
      <node id="214">
        <label>lib/cu_cp/adapters/rrc_ue_adapters.h</label>
        <link refid="rrc__ue__adapters_8h_source"/>
        <childnode refid="200" relation="include">
        </childnode>
      </node>
      <node id="244">
        <label>include/srsgnb/rrc/rrc_ue_entity_interface.h</label>
        <link refid="rrc__ue__entity__interface_8h_source"/>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>lib/phy/upper/channel_processors/pusch_processor_impl.h</label>
        <link refid="pusch__processor__impl_8h_source"/>
      </node>
      <node id="303">
        <label>include/srsgnb/phy/upper/signal_processors/csi_rs_processor.h</label>
        <link refid="csi__rs__processor_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="425">
        <label>lib/phy/upper/channel_coding/short/short_block_detector_impl.h</label>
        <link refid="short__block__detector__impl_8h"/>
      </node>
      <node id="509">
        <label>include/srsgnb/support/async/detail/unique_coroutine.h</label>
        <link refid="unique__coroutine_8h_source"/>
        <childnode refid="504" relation="include">
        </childnode>
      </node>
      <node id="269">
        <label>lib/phy/lower/modulation/ofdm_modulator_impl.h</label>
        <link refid="ofdm__modulator__impl_8h_source"/>
        <childnode refid="270" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>lib/scheduler/cell/cell_configuration.h</label>
        <link refid="lib_2scheduler_2cell_2cell__configuration_8h_source"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="338">
        <label>include/srsgnb/srsvec/dot_prod.h</label>
        <link refid="dot__prod_8h"/>
      </node>
      <node id="227">
        <label>include/srsgnb/mac/mac_pdu_handler.h</label>
        <link refid="mac__pdu__handler_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="202">
        <label>include/srsgnb/cu_cp/cu_cp_configuration.h</label>
        <link refid="cu__cp__configuration_8h_source"/>
        <childnode refid="149" relation="include">
        </childnode>
      </node>
      <node id="261">
        <label>include/srsgnb/phy/generic_functions/generic_functions_factories.h</label>
        <link refid="generic__functions__factories_8h_source"/>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="321">
        <label>include/srsgnb/srsvec/binary.h</label>
        <link refid="binary_8h_source"/>
      </node>
      <node id="464">
        <label>include/srsgnb/support/timers.h</label>
        <link refid="timers_8h_source"/>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="357">
        <label>include/srsgnb/phy/upper/channel_coding/ldpc/ldpc_rate_matcher.h</label>
        <link refid="ldpc__rate__matcher_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="358" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
      </node>
      <node id="408">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_code.h</label>
        <link refid="polar__code_8h_source"/>
        <childnode refid="409" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="419" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="444">
        <label>include/srsgnb/srslog/bundled/fmt/ostream.h</label>
        <link refid="ostream_8h_source"/>
        <childnode refid="445" relation="include">
        </childnode>
      </node>
      <node id="501">
        <label>include/srsgnb/rlc/rlc_config.h</label>
        <link refid="rlc__config_8h_source"/>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
      </node>
      <node id="263">
        <label>include/srsgnb/phy/lower/lower_phy_factory.h</label>
        <link refid="lower__phy__factory_8h_source"/>
      </node>
      <node id="70">
        <label>include/srsgnb/phy/upper/channel_processors/pusch_processor.h</label>
        <link refid="pusch__processor_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="284">
        <label>include/srsgnb/phy/adapters/phy_rx_symbol_adapter.h</label>
        <link refid="phy__rx__symbol__adapter_8h_source"/>
      </node>
      <node id="50">
        <label>include/srsgnb/phy/upper/signal_processors/dmrs_pusch_estimator.h</label>
        <link refid="dmrs__pusch__estimator_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="482">
        <label>include/srsgnb/adt/filter_view.h</label>
        <link refid="filter__view_8h_source"/>
      </node>
      <node id="27">
        <label>lib/mac/mac_ul/mac_ul_ue_manager.h</label>
        <link refid="mac__ul__ue__manager_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>lib/phy/upper/channel_processors/pusch_demodulator_impl.h</label>
        <link refid="pusch__demodulator__impl_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/srsgnb/srslog/bundled/fmt/format.h</label>
        <link refid="format_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
      </node>
      <node id="294">
        <label>lib/phy/support/prach_buffer_pool_impl.h</label>
        <link refid="prach__buffer__pool__impl_8h_source"/>
      </node>
      <node id="217">
        <label>lib/f1_interface/cu/f1ap_cu_impl.h</label>
        <link refid="f1ap__cu__impl_8h_source"/>
        <childnode refid="216" relation="include">
        </childnode>
      </node>
      <node id="163">
        <label>include/srsgnb/ran/ssb_configuration.h</label>
        <link refid="ssb__configuration_8h_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="348">
        <label>include/srsgnb/phy/upper/channel_coding/ldpc/ldpc_segmenter_tx.h</label>
        <link refid="ldpc__segmenter__tx_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
      </node>
      <node id="353">
        <label>include/srsgnb/phy/upper/channel_coding/ldpc/ldpc_encoder.h</label>
        <link refid="ldpc__encoder_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="354" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
      </node>
      <node id="413">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_decoder.h</label>
        <link refid="polar__decoder_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>lib/fapi/validators/helpers.h</label>
        <link refid="helpers_8h_source"/>
      </node>
      <node id="223">
        <label>lib/f1_interface/common/remote_message_handler.h</label>
        <link refid="remote__message__handler_8h_source"/>
      </node>
      <node id="230">
        <label>lib/pdcp/pdcp_packet_procedures_impl.h</label>
        <link refid="pdcp__packet__procedures__impl_8h_source"/>
      </node>
      <node id="306">
        <label>lib/phy/upper/signal_processors/pss_processor_impl.h</label>
        <link refid="pss__processor__impl_8h_source"/>
      </node>
      <node id="141">
        <label>include/srsgnb/scheduler/prb_grant.h</label>
        <link refid="prb__grant_8h_source"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="220">
        <label>lib/du_manager/procedures/initial_du_setup_procedure.h</label>
        <link refid="initial__du__setup__procedure_8h_source"/>
      </node>
      <node id="420">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_encoder.h</label>
        <link refid="polar__encoder_8h_source"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="421" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="327">
        <label>include/srsgnb/radio/radio_factory.h</label>
        <link refid="radio__factory_8h_source"/>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="329" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/srsgnb/mac/mac_factory.h</label>
        <link refid="mac__factory_8h_source"/>
      </node>
      <node id="252">
        <label>include/srsgnb/sdap/sdap_packet_procedures.h</label>
        <link refid="sdap__packet__procedures_8h_source"/>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>lib/phy/upper/channel_processors/pdsch_modulator_impl.h</label>
        <link refid="pdsch__modulator__impl_8h_source"/>
      </node>
      <node id="37">
        <label>lib/mac/mac_dl/ssb_assembler.h</label>
        <link refid="ssb__assembler_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="146">
        <label>lib/mac/mac_ul/mac_ul_sch_pdu.h</label>
        <link refid="mac__ul__sch__pdu_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="496">
        <label>lib/fapi_adaptor/mac/mac_fapi_adaptor_factory_impl.h</label>
        <link refid="mac__fapi__adaptor__factory__impl_8h_source"/>
      </node>
      <node id="410">
        <label>lib/phy/upper/channel_coding/polar/polar_allocator_impl.h</label>
        <link refid="polar__allocator__impl_8h_source"/>
      </node>
      <node id="347">
        <label>lib/phy/upper/channel_processors/pusch_decoder_impl.h</label>
        <link refid="pusch__decoder__impl_8h_source"/>
      </node>
      <node id="372">
        <label>lib/phy/upper/upper_phy_rx_results_notifier_proxy.h</label>
        <link refid="upper__phy__rx__results__notifier__proxy_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="381">
        <label>include/srsgnb/ran/slot_point.h</label>
        <link refid="slot__point_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>include/srsgnb/ran/pdcch/coreset.h</label>
        <link refid="coreset_8h_source"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="189">
        <label>lib/pdcp/pdcp_entity_impl.h</label>
        <link refid="pdcp__entity__impl_8h_source"/>
      </node>
      <node id="67">
        <label>include/srsgnb/fapi_adaptor/phy/messages/pdsch.h</label>
        <link refid="phy_2messages_2pdsch_8h_source"/>
      </node>
      <node id="158">
        <label>include/srsgnb/ran/pusch/pusch_mcs.h</label>
        <link refid="pusch__mcs_8h_source"/>
      </node>
      <node id="157">
        <label>include/srsgnb/ran/pdsch/pdsch_mcs.h</label>
        <link refid="pdsch__mcs_8h_source"/>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>lib/fapi_adaptor/mac/mac_to_fapi_translator.h</label>
        <link refid="mac__to__fapi__translator_8h_source"/>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="471">
        <label>include/srsgnb/adt/bitmap_utils.h</label>
        <link refid="bitmap__utils_8h_source"/>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>include/srsgnb/scheduler/mac_scheduler.h</label>
        <link refid="mac__scheduler_8h_source"/>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="336">
        <label>lib/radio/zmq/radio_zmq_tx_channel.h</label>
        <link refid="radio__zmq__tx__channel_8h_source"/>
        <childnode refid="337" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>include/srsgnb/fapi_adaptor/mac/messages/pdcch.h</label>
        <link refid="mac_2messages_2pdcch_8h_source"/>
      </node>
      <node id="33">
        <label>lib/mac/rach_handler.h</label>
        <link refid="rach__handler_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>lib/scheduler/common_scheduling/ssb_scheduler.h</label>
        <link refid="ssb__scheduler_8h_source"/>
      </node>
      <node id="43">
        <label>lib/phy/upper/channel_processors/pusch_demodulator_impl.cpp</label>
        <link refid="pusch__demodulator__impl_8cpp"/>
      </node>
      <node id="18">
        <label>lib/mac/mac_config.h</label>
        <link refid="mac__config_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="448">
        <label>include/srsgnb/srslog/detail/log_entry.h</label>
        <link refid="log__entry_8h_source"/>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="474" relation="include">
        </childnode>
      </node>
      <node id="222">
        <label>lib/f1_interface/common/f1ap_asn1_packer.h</label>
        <link refid="f1ap__asn1__packer_8h_source"/>
      </node>
      <node id="487">
        <label>include/srsgnb/radio/radio_configuration.h</label>
        <link refid="radio__configuration_8h_source"/>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
      </node>
      <node id="188">
        <label>lib/pdcp/pdcp_entity_rx.h</label>
        <link refid="pdcp__entity__rx_8h_source"/>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="458">
        <label>include/srsgnb/support/executors/task_executor.h</label>
        <link refid="task__executor_8h_source"/>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="461" relation="include">
        </childnode>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="463" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
      </node>
      <node id="390">
        <label>include/srsgnb/phy/upper/upper_phy_rx_symbol_handler.h</label>
        <link refid="upper__phy__rx__symbol__handler_8h"/>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>include/srsgnb/phy/upper/sequence_generators/pseudo_random_generator.h</label>
        <link refid="pseudo__random__generator_8h"/>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="199">
        <label>lib/cu_cp/adapters/f1ap_adapters.h</label>
        <link refid="f1ap__adapters_8h_source"/>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>lib/rlc/rlc_sdu_queue.h</label>
        <link refid="rlc__sdu__queue_8h_source"/>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>lib/phy/upper/channel_modulation/modulation_mapper_impl.h</label>
        <link refid="modulation__mapper__impl_8h_source"/>
      </node>
      <node id="433">
        <label>include/srsgnb/srsvec/detail/traits.h</label>
        <link refid="traits_8h_source"/>
        <childnode refid="429" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="338" relation="include">
        </childnode>
        <childnode refid="341" relation="include">
        </childnode>
      </node>
      <node id="154">
        <label>lib/phy/upper/channel_processors/prach_detector_simple_impl.h</label>
        <link refid="prach__detector__simple__impl_8h_source"/>
      </node>
      <node id="462">
        <label>include/srsgnb/support/executors/blocking_task_worker.h</label>
        <link refid="blocking__task__worker_8h_source"/>
      </node>
      <node id="386">
        <label>include/srsgnb/phy/lower/lower_phy_timing_notifier.h</label>
        <link refid="lower__phy__timing__notifier_8h_source"/>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="193">
        <label>lib/f1_interface/du/f1ap_du_impl.h</label>
        <link refid="f1ap__du__impl_8h_source"/>
      </node>
      <node id="484">
        <label>include/srsgnb/support/async/async_test_utils.h</label>
        <link refid="async__test__utils_8h_source"/>
      </node>
      <node id="256">
        <label>lib/rlc/rlc_retx_queue.h</label>
        <link refid="rlc__retx__queue_8h_source"/>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>lib/mac/mac_ctrl/mac_scheduler_configurator.h</label>
        <link refid="mac__scheduler__configurator_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="522">
        <label>include/srsgnb/srslog/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
      </node>
      <node id="362">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_graph_impl.h</label>
        <link refid="ldpc__graph__impl_8h"/>
        <childnode refid="352" relation="include">
        </childnode>
        <childnode refid="354" relation="include">
        </childnode>
        <childnode refid="356" relation="include">
        </childnode>
        <childnode refid="358" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="422">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_interleaver.h</label>
        <link refid="polar__interleaver_8h_source"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="423" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="207">
        <label>lib/rrc/ue/rrc_ue_entity.h</label>
        <link refid="rrc__ue__entity_8h_source"/>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="238">
        <label>lib/phy/upper/signal_processors/pucch/pucch_helper.h</label>
        <link refid="pucch__helper_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>include/srsgnb/ran/pdcch/dci_packing.h</label>
        <link refid="dci__packing_8h_source"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/du_manager/du_manager_impl.h</label>
        <link refid="du__manager__impl_8h_source"/>
      </node>
      <node id="342">
        <label>include/srsgnb/support/math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="343" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>lib/scheduler/ue_scheduling/ue.h</label>
        <link refid="ue_8h_source"/>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="517">
        <label>lib/mac/du_rnti_table.h</label>
        <link refid="du__rnti__table_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="270">
        <label>lib/phy/lower/modulation/ofdm_modulator_factory_impl.h</label>
        <link refid="ofdm__modulator__factory__impl_8h_source"/>
      </node>
      <node id="34">
        <label>lib/mac/mac_dl/sib_pdu_assembler.h</label>
        <link refid="sib__pdu__assembler_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>include/srsgnb/adt/complex.h</label>
        <link refid="complex_8h_source"/>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="342" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
      </node>
      <node id="411">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_deallocator.h</label>
        <link refid="polar__deallocator_8h_source"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
      </node>
      <node id="203">
        <label>include/srsgnb/cu_cp/du_processor.h</label>
        <link refid="include_2srsgnb_2cu__cp_2du__processor_8h_source"/>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>lib/phy/upper/downlink_processor_single_executor_impl.h</label>
        <link refid="downlink__processor__single__executor__impl_8h_source"/>
      </node>
      <node id="519">
        <label>lib/cu_cp/log_format.h</label>
        <link refid="log__format_8h_source"/>
      </node>
      <node id="488">
        <label>include/srsgnb/ran/pdcch/pdcch_candidates.h</label>
        <link refid="pdcch__candidates_8h_source"/>
      </node>
      <node id="164">
        <label>include/srsgnb/ran/ssb_mapping.h</label>
        <link refid="ssb__mapping_8h_source"/>
        <childnode refid="165" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>lib/scheduler/ue_scheduling/ue_event_manager.h</label>
        <link refid="ue__event__manager_8h_source"/>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="243">
        <label>include/srsgnb/rrc/rrc.h</label>
        <link refid="rrc_8h_source"/>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>include/srsgnb/fapi/validator_report.h</label>
        <link refid="validator__report_8h_source"/>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="283">
        <label>include/srsgnb/phy/lower/lower_phy_rx_symbol_notifier.h</label>
        <link refid="lower__phy__rx__symbol__notifier_8h_source"/>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="285" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="412">
        <label>lib/phy/upper/channel_coding/polar/polar_deallocator_impl.h</label>
        <link refid="polar__deallocator__impl_8h_source"/>
      </node>
      <node id="39">
        <label>include/srsgnb/phy/upper/channel_processors/pusch_demodulator.h</label>
        <link refid="pusch__demodulator_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/srsgnb/du_manager/du_manager_factory.h</label>
        <link refid="du__manager__factory_8h_source"/>
      </node>
      <node id="13">
        <label>lib/du_manager/du_cell_manager.h</label>
        <link refid="du__cell__manager_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="478">
        <label>include/srsgnb/adt/expected.h</label>
        <link refid="expected_8h_source"/>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="469" relation="include">
        </childnode>
        <childnode refid="467" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="407">
        <label>lib/phy/upper/channel_processors/pdcch_encoder_impl.h</label>
        <link refid="pdcch__encoder__impl_8h_source"/>
      </node>
      <node id="356">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_rate_dematcher_impl.h</label>
        <link refid="ldpc__rate__dematcher__impl_8h"/>
      </node>
      <node id="364">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_luts_impl.cpp</label>
        <link refid="ldpc__luts__impl_8cpp"/>
      </node>
      <node id="17">
        <label>lib/du_manager/procedures/ue_deletion_procedure.h</label>
        <link refid="ue__deletion__procedure_8h_source"/>
      </node>
      <node id="175">
        <label>lib/rlc/rlc_base_entity.h</label>
        <link refid="rlc__base__entity_8h_source"/>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>lib/mac/mac_dl/mac_cell_processor.h</label>
        <link refid="mac__cell__processor_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="292">
        <label>lib/phy/upper/upper_phy_rx_symbol_handler_impl.h</label>
        <link refid="upper__phy__rx__symbol__handler__impl_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="449">
        <label>include/srsgnb/srslog/log_channel.h</label>
        <link refid="log__channel_8h_source"/>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="476" relation="include">
        </childnode>
      </node>
      <node id="345">
        <label>include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h</label>
        <link refid="channel__coding__factories_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="417">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_rate_matcher.h</label>
        <link refid="polar__rate__matcher_8h_source"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="318">
        <label>include/srsgnb/srsvec/conversion.h</label>
        <link refid="conversion_8h_source"/>
      </node>
      <node id="179">
        <label>lib/rlc/rlc_rx_entity.h</label>
        <link refid="rlc__rx__entity_8h_source"/>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="526">
        <label>lib/srslog/sinks/syslog_sink.h</label>
        <link refid="syslog__sink_8h_source"/>
      </node>
      <node id="237">
        <label>lib/phy/upper/signal_processors/dmrs_pbch_processor_impl.h</label>
        <link refid="dmrs__pbch__processor__impl_8h_source"/>
      </node>
      <node id="170">
        <label>lib/du_manager/du_ue_context.h</label>
        <link refid="du__ue__context_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>lib/mac/mac_dl/mac_dl_ue_manager.h</label>
        <link refid="mac__dl__ue__manager_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="257">
        <label>lib/rlc/rlc_um_pdu.h</label>
        <link refid="rlc__um__pdu_8h_source"/>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/du_manager/du_ue_manager.h</label>
        <link refid="du__ue__manager_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>lib/pdcp/pdcp_entity_tx.h</label>
        <link refid="pdcp__entity__tx_8h_source"/>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="235">
        <label>lib/phy/upper/channel_processors/pbch_modulator_impl.h</label>
        <link refid="pbch__modulator__impl_8h_source"/>
      </node>
      <node id="93">
        <label>lib/fapi_adaptor/phy/phy_fapi_adaptor_factory_impl.h</label>
        <link refid="phy__fapi__adaptor__factory__impl_8h_source"/>
      </node>
      <node id="454">
        <label>include/srsgnb/rrc/rrc_config.h</label>
        <link refid="rrc__config_8h_source"/>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="291">
        <label>lib/phy/upper/uplink_processor_single_executor_impl.h</label>
        <link refid="uplink__processor__single__executor__impl_8h_source"/>
      </node>
      <node id="282">
        <label>include/srsgnb/phy/lower/lower_phy.h</label>
        <link refid="lower__phy_8h_source"/>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>lib/rlc/rlc_rx_tm_entity.h</label>
        <link refid="rlc__rx__tm__entity_8h_source"/>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="502">
        <label>include/srsgnb/support/async/awaiter_memory_storage.h</label>
        <link refid="awaiter__memory__storage_8h_source"/>
        <childnode refid="503" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>include/srsgnb/phy/upper/signal_processors/dmrs_pdcch_processor.h</label>
        <link refid="dmrs__pdcch__processor_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="302">
        <label>include/srsgnb/phy/upper/channel_processors/pbch_modulator.h</label>
        <link refid="pbch__modulator_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>lib/scheduler/ue_scheduling/ue_configuration.h</label>
        <link refid="ue__configuration_8h_source"/>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="144">
        <label>include/srsgnb/scheduler/scheduler_feedback_handler.h</label>
        <link refid="scheduler__feedback__handler_8h_source"/>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>lib/mac/mac_ul/mac_ul_processor.h</label>
        <link refid="mac__ul__processor_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/mac/mac_ctrl/sched_config_helpers.h</label>
        <link refid="sched__config__helpers_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="354">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_encoder_impl.h</label>
        <link refid="ldpc__encoder__impl_8h"/>
      </node>
      <node id="393">
        <label>include/srsgnb/ran/prach/prach_configuration.h</label>
        <link refid="prach__configuration_8h_source"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="503">
        <label>include/srsgnb/support/async/coroutine.h</label>
        <link refid="coroutine_8h_source"/>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="195">
        <label>lib/f1_interface/common/f1ap_packet_procedures_impl.h</label>
        <link refid="f1ap__packet__procedures__impl_8h_source"/>
      </node>
      <node id="365">
        <label>include/srsgnb/ran/cyclic_prefix.h</label>
        <link refid="cyclic__prefix_8h"/>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
      <node id="333">
        <label>lib/radio/uhd/radio_uhd_tx_stream.h</label>
        <link refid="radio__uhd__tx__stream_8h_source"/>
        <childnode refid="330" relation="include">
        </childnode>
      </node>
      <node id="185">
        <label>lib/rlc/rlc_tx_tm_entity.h</label>
        <link refid="rlc__tx__tm__entity_8h_source"/>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="384">
        <label>include/srsgnb/phy/lower/lower_phy_error_notifier.h</label>
        <link refid="lower__phy__error__notifier_8h_source"/>
        <childnode refid="385" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="285" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>lib/scheduler/ue_scheduling/ue_cell_grid_allocator.h</label>
        <link refid="ue__cell__grid__allocator_8h_source"/>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>lib/phy/upper/signal_processors/csi_rs_processor_impl.h</label>
        <link refid="csi__rs__processor__impl_8h_source"/>
      </node>
      <node id="20">
        <label>lib/mac/mac_impl.h</label>
        <link refid="mac__impl_8h_source"/>
      </node>
      <node id="165">
        <label>include/srsgnb/phy/upper/channel_processors/ssb_processor.h</label>
        <link refid="ssb__processor_8h_source"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>include/srsgnb/phy/upper/dmrs_mapping.h</label>
        <link refid="dmrs__mapping_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="287">
        <label>include/srsgnb/phy/support/support_factories.h</label>
        <link refid="support__factories_8h_source"/>
      </node>
      <node id="409">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_allocator.h</label>
        <link refid="polar__allocator_8h_source"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>lib/rlc/rlc_rx_um_entity.h</label>
        <link refid="rlc__rx__um__entity_8h_source"/>
        <childnode refid="178" relation="include">
        </childnode>
      </node>
      <node id="440">
        <label>include/srsgnb/srslog/bundled/fmt/compile.h</label>
        <link refid="compile_8h_source"/>
      </node>
      <node id="322">
        <label>include/srsgnb/srsvec/compare.h</label>
        <link refid="compare_8h_source"/>
      </node>
      <node id="388">
        <label>include/srsgnb/phy/support/prach_buffer_context.h</label>
        <link refid="prach__buffer__context_8h_source"/>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
      </node>
      <node id="310">
        <label>include/srsgnb/phy/upper/channel_modulation/demodulation_mapper.h</label>
        <link refid="demodulation__mapper_8h"/>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
      </node>
      <node id="328">
        <label>lib/radio/uhd/radio_uhd_impl.h</label>
        <link refid="radio__uhd__impl_8h_source"/>
      </node>
      <node id="493">
        <label>include/srsgnb/ran/prach/prach_frequency_mapping.h</label>
        <link refid="prach__frequency__mapping_8h_source"/>
      </node>
      <node id="183">
        <label>lib/rlc/rlc_tx_entity.h</label>
        <link refid="rlc__tx__entity_8h_source"/>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
      </node>
      <node id="490">
        <label>include/srsgnb/phy/lower/sampling_rate.h</label>
        <link refid="sampling__rate_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>include/srsgnb/fapi_adaptor/phy/messages/pdcch.h</label>
        <link refid="phy_2messages_2pdcch_8h_source"/>
      </node>
      <node id="305">
        <label>include/srsgnb/phy/upper/signal_processors/pss_processor.h</label>
        <link refid="pss__processor_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>include/srsgnb/phy/upper/re_pattern.h</label>
        <link refid="re__pattern_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="477">
        <label>include/srsgnb/support/async/async_queue.h</label>
        <link refid="async__queue_8h_source"/>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
      <node id="435">
        <label>lib/du_high/du_high_executor_strategies.h</label>
        <link refid="du__high__executor__strategies_8h_source"/>
      </node>
      <node id="178">
        <label>lib/rlc/rlc_um_entity.h</label>
        <link refid="rlc__um__entity_8h_source"/>
      </node>
      <node id="19">
        <label>lib/mac/mac_ctrl/mac_controller.h</label>
        <link refid="mac__controller_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="186">
        <label>lib/rlc/rlc_tx_um_entity.h</label>
        <link refid="rlc__tx__um__entity_8h_source"/>
        <childnode refid="178" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>include/srsgnb/phy/upper/signal_processors/dmrs_pbch_processor.h</label>
        <link refid="dmrs__pbch__processor_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
      </node>
      <node id="248">
        <label>lib/sdap/sdap_packet_procedures_impl.h</label>
        <link refid="sdap__packet__procedures__impl_8h_source"/>
      </node>
      <node id="277">
        <label>lib/phy/lower/processors/prach/prach_processor_worker.h</label>
        <link refid="prach__processor__worker_8h_source"/>
        <childnode refid="278" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>lib/scheduler/policy/ue_allocator.h</label>
        <link refid="ue__allocator_8h_source"/>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="510">
        <label>include/srsgnb/support/async/manual_event.h</label>
        <link refid="manual__event_8h_source"/>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="415">
        <label>include/srsgnb/phy/upper/channel_coding/polar/polar_rate_dematcher.h</label>
        <link refid="polar__rate__dematcher_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
      </node>
      <node id="197">
        <label>include/srsgnb/f1_interface/cu/f1ap_cu.h</label>
        <link refid="f1ap__cu_8h_source"/>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>include/srsgnb/fapi_adaptor/mac/messages/ssb.h</label>
        <link refid="mac_2messages_2ssb_8h_source"/>
      </node>
      <node id="524">
        <label>lib/srslog/sinks/file_sink.h</label>
        <link refid="lib_2srslog_2sinks_2file__sink_8h_source"/>
      </node>
      <node id="499">
        <label>include/srsgnb/scheduler/sched_consts.h</label>
        <link refid="sched__consts_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="505">
        <label>include/srsgnb/support/async/async_task.h</label>
        <link refid="async__task_8h_source"/>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
      </node>
      <node id="399">
        <label>lib/cu_cp/du_context.h</label>
        <link refid="du__context_8h_source"/>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
      </node>
      <node id="211">
        <label>lib/cu_cp/ue_manager.h</label>
        <link refid="ue__manager_8h_source"/>
        <childnode refid="200" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>include/srsgnb/fapi_adaptor/phy/messages/ssb.h</label>
        <link refid="phy_2messages_2ssb_8h_source"/>
      </node>
      <node id="22">
        <label>lib/mac/mac_ctrl/ue_delete_procedure.h</label>
        <link refid="ue__delete__procedure_8h_source"/>
      </node>
      <node id="516">
        <label>lib/asn1/asn1_diff_utils.h</label>
        <link refid="asn1__diff__utils_8h_source"/>
      </node>
      <node id="246">
        <label>include/srsgnb/sdap/sdap_factory.h</label>
        <link refid="sdap__factory_8h_source"/>
      </node>
      <node id="117">
        <label>lib/scheduler/policy/scheduler_policy_factory.h</label>
        <link refid="scheduler__policy__factory_8h_source"/>
      </node>
      <node id="436">
        <label>lib/scheduler/support/slot_event_list.h</label>
        <link refid="slot__event__list_8h_source"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="378">
        <label>include/srsgnb/adt/interval.h</label>
        <link refid="interval_8h_source"/>
        <childnode refid="379" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="374">
        <label>include/srsgnb/ran/prach/prach_preamble_information.h</label>
        <link refid="prach__preamble__information_8h_source"/>
      </node>
      <node id="140">
        <label>include/srsgnb/scheduler/resource_block_group.h</label>
        <link refid="resource__block__group_8h_source"/>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>lib/phy/support/resource_grid_impl.h</label>
        <link refid="resource__grid__impl_8h_source"/>
      </node>
      <node id="485">
        <label>include/srsgnb/adt/static_vector.h</label>
        <link refid="static__vector_8h_source"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="389">
        <label>include/srsgnb/phy/upper/rx_softbuffer_pool.h</label>
        <link refid="rx__softbuffer__pool_8h_source"/>
        <childnode refid="361" relation="include">
        </childnode>
      </node>
      <node id="332">
        <label>lib/radio/uhd/radio_uhd_rx_stream.h</label>
        <link refid="radio__uhd__rx__stream_8h_source"/>
        <childnode refid="330" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>lib/rlc/rlc_tm_entity.h</label>
        <link refid="rlc__tm__entity_8h_source"/>
      </node>
      <node id="111">
        <label>lib/scheduler/common_scheduling/ra_scheduler.h</label>
        <link refid="ra__scheduler_8h_source"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="506">
        <label>include/srsgnb/support/async/async_procedure.h</label>
        <link refid="async__procedure_8h_source"/>
      </node>
      <node id="421">
        <label>lib/phy/upper/channel_coding/polar/polar_encoder_impl.h</label>
        <link refid="polar__encoder__impl_8h_source"/>
      </node>
      <node id="404">
        <label>include/srsgnb/pcap/ngap_pcap.h</label>
        <link refid="ngap__pcap_8h_source"/>
      </node>
      <node id="245">
        <label>include/srsgnb/sdap/sdap.h</label>
        <link refid="sdap_8h_source"/>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
      </node>
      <node id="350">
        <label>include/srsgnb/phy/upper/codeblock_metadata.h</label>
        <link refid="codeblock__metadata_8h"/>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="353" relation="include">
        </childnode>
        <childnode refid="355" relation="include">
        </childnode>
        <childnode refid="357" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
      </node>
      <node id="253">
        <label>include/srsgnb/support/bit_encoding.h</label>
        <link refid="bit__encoding_8h_source"/>
      </node>
      <node id="10">
        <label>lib/du_manager/du_manager_config.h</label>
        <link refid="du__manager__config_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="324">
        <label>include/srsgnb/gateways/baseband/baseband_gateway_buffer.h</label>
        <link refid="baseband__gateway__buffer_8h_source"/>
        <childnode refid="325" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>include/srsgnb/phy/upper/downlink_processor.h</label>
        <link refid="downlink__processor_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="419">
        <label>lib/phy/upper/channel_coding/polar/polar_code_impl.h</label>
        <link refid="polar__code__impl_8h_source"/>
      </node>
      <node id="401">
        <label>include/srsgnb/pcap/pcap.h</label>
        <link refid="pcap_8h_source"/>
        <childnode refid="402" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>include/srsgnb/mac/mac_sdu_handler.h</label>
        <link refid="mac__sdu__handler_8h_source"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>lib/phy/upper/channel_processors/pdcch_processor_impl.h</label>
        <link refid="pdcch__processor__impl_8h_source"/>
      </node>
      <node id="396">
        <label>include/srsgnb/adt/span.h</label>
        <link refid="span_8h_source"/>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="353" relation="include">
        </childnode>
        <childnode refid="355" relation="include">
        </childnode>
        <childnode refid="357" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
        <childnode refid="422" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="428" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="431" relation="include">
        </childnode>
        <childnode refid="432" relation="include">
        </childnode>
        <childnode refid="433" relation="include">
        </childnode>
        <childnode refid="338" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="354" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
      </node>
      <node id="434">
        <label>include/srsgnb/support/file_sink.h</label>
        <link refid="include_2srsgnb_2support_2file__sink_8h_source"/>
      </node>
      <node id="201">
        <label>lib/cu_cp/du_processor_config.h</label>
        <link refid="du__processor__config_8h_source"/>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
      </node>
      <node id="465">
        <label>include/srsgnb/support/async/protocol_transaction_manager.h</label>
        <link refid="protocol__transaction__manager_8h_source"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="467" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>include/srsgnb/fapi/messages.h</label>
        <link refid="messages_8h_source"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="331">
        <label>lib/radio/zmq/radio_session_zmq_impl.h</label>
        <link refid="radio__session__zmq__impl_8h_source"/>
      </node>
      <node id="176">
        <label>lib/rlc/rlc_am_entity.h</label>
        <link refid="rlc__am__entity_8h_source"/>
      </node>
      <node id="518">
        <label>lib/mac/mac_ul/lcid_ul_sch.h</label>
        <link refid="lcid__ul__sch_8h_source"/>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
      <node id="325">
        <label>include/srsgnb/gateways/baseband/baseband_gateway.h</label>
        <link refid="baseband__gateway_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>lib/scheduler/policy/scheduler_policy.h</label>
        <link refid="scheduler__policy_8h_source"/>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="236">
        <label>lib/phy/upper/sequence_generators/pseudo_random_generator_impl.h</label>
        <link refid="pseudo__random__generator__impl_8h"/>
      </node>
      <node id="358">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_rate_matcher_impl.h</label>
        <link refid="ldpc__rate__matcher__impl_8h"/>
      </node>
      <node id="103">
        <label>include/srsgnb/mac/mac_ue_configurator.h</label>
        <link refid="mac__ue__configurator_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>lib/scheduler/support/dmrs_helpers.h</label>
        <link refid="dmrs__helpers_8h_source"/>
      </node>
      <node id="208">
        <label>lib/rrc/rrc_entity.h</label>
        <link refid="rrc__entity_8h_source"/>
      </node>
      <node id="122">
        <label>lib/scheduler/ue_scheduling/ue_scheduler.h</label>
        <link refid="ue__scheduler_8h_source"/>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>include/srsgnb/scheduler/bwp_configuration.h</label>
        <link refid="bwp__configuration_8h_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
      <node id="148">
        <label>include/srsgnb/support/executors/task_worker.h</label>
        <link refid="task__worker_8h_source"/>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="204">
        <label>include/srsgnb/cu_cp/ue_context.h</label>
        <link refid="ue__context_8h_source"/>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="162">
        <label>lib/phy/upper/channel_processors/ssb_processor_impl.h</label>
        <link refid="ssb__processor__impl_8h_source"/>
      </node>
      <node id="73">
        <label>include/srsgnb/phy/upper/signal_processors/dmrs_pdsch_processor.h</label>
        <link refid="dmrs__pdsch__processor_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="289">
        <label>include/srsgnb/phy/upper/uplink_processor.h</label>
        <link refid="uplink__processor_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="473">
        <label>include/srsgnb/srslog/detail/support/work_queue.h</label>
        <link refid="work__queue_8h_source"/>
        <childnode refid="474" relation="include">
        </childnode>
      </node>
      <node id="432">
        <label>include/srsgnb/srsvec/bit.h</label>
        <link refid="bit_8h_source"/>
      </node>
      <node id="513">
        <label>include/srsgnb/support/async/detail/promise_data.h</label>
        <link refid="promise__data_8h_source"/>
        <childnode refid="504" relation="include">
        </childnode>
      </node>
      <node id="351">
        <label>include/srsgnb/phy/upper/channel_coding/ldpc/ldpc_decoder.h</label>
        <link refid="ldpc__decoder_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="352" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
      </node>
      <node id="530">
        <label>lib/srslog/sinks/file_utils.h</label>
        <link refid="file__utils_8h_source"/>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>lib/phy/upper/channel_processors/pdsch_processor_impl.h</label>
        <link refid="pdsch__processor__impl_8h_source"/>
      </node>
      <node id="416">
        <label>lib/phy/upper/channel_coding/polar/polar_rate_dematcher_impl.h</label>
        <link refid="polar__rate__dematcher__impl_8h"/>
      </node>
      <node id="264">
        <label>include/srsgnb/phy/lower/processors/prach/prach_processor_factories.h</label>
        <link refid="prach__processor__factories_8h_source"/>
        <childnode refid="263" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>include/srsgnb/phy/upper/channel_processors/pdsch_modulator.h</label>
        <link refid="pdsch__modulator_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="341">
        <label>include/srsgnb/srsvec/zero.h</label>
        <link refid="zero_8h_source"/>
      </node>
      <node id="5">
        <label>include/srsgnb/mac/mac.h</label>
        <link refid="mac_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="520">
        <label>lib/ran/gnb_format.h</label>
        <link refid="gnb__format_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="206">
        <label>include/srsgnb/rrc/rrc_factory.h</label>
        <link refid="rrc__factory_8h_source"/>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="225">
        <label>include/srsgnb/gateways/network_gateway.h</label>
        <link refid="network__gateway_8h_source"/>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
      </node>
      <node id="191">
        <label>include/srsgnb/du_manager/du_manager.h</label>
        <link refid="du__manager_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>lib/phy/upper/downlink_processor_pool_impl.h</label>
        <link refid="downlink__processor__pool__impl_8h_source"/>
      </node>
      <node id="360">
        <label>include/srsgnb/phy/upper/channel_processors/pusch_decoder.h</label>
        <link refid="pusch__decoder_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="472">
        <label>include/srsgnb/adt/circular_buffer.h</label>
        <link refid="circular__buffer_8h_source"/>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="463" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
      </node>
      <node id="398">
        <label>include/srsgnb/ran/du_ue_list.h</label>
        <link refid="du__ue__list_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="240">
        <label>include/srsgnb/f1_interface/cu/f1u_cu.h</label>
        <link refid="f1u__cu_8h_source"/>
      </node>
      <node id="133">
        <label>lib/scheduler/support/config_helpers.h</label>
        <link refid="config__helpers_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>include/srsgnb/srslog/bundled/fmt/posix.h</label>
        <link refid="posix_8h_source"/>
      </node>
      <node id="152">
        <label>include/srsgnb/adt/bounded_integer.h</label>
        <link refid="bounded__integer_8h_source"/>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
      </node>
      <node id="468">
        <label>lib/f1_interface/common/f1ap_asn1_utils.h</label>
        <link refid="f1ap__asn1__utils_8h_source"/>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
      </node>
      <node id="271">
        <label>lib/phy/lower/modulation/ofdm_prach_demodulator_impl.h</label>
        <link refid="ofdm__prach__demodulator__impl_8h_source"/>
      </node>
      <node id="100">
        <label>lib/du_manager/converters/f1c_configuration_helpers.h</label>
        <link refid="f1c__configuration__helpers_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>include/srsgnb/phy/upper/signal_processors/dmrs_pucch_processor.h</label>
        <link refid="dmrs__pucch__processor_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="281">
        <label>include/srsgnb/phy/adapters/phy_rx_symbol_request_adapter.h</label>
        <link refid="phy__rx__symbol__request__adapter_8h_source"/>
      </node>
      <node id="241">
        <label>include/srsgnb/f1_interface/du/f1u_du.h</label>
        <link refid="f1u__du_8h_source"/>
      </node>
      <node id="4">
        <label>include/srsgnb/mac/mac_cell_manager.h</label>
        <link refid="mac__cell__manager_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="483">
        <label>include/srsgnb/adt/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="447">
        <label>include/srsgnb/srslog/detail/log_entry_metadata.h</label>
        <link refid="log__entry__metadata_8h_source"/>
        <childnode refid="448" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>lib/scheduler/support/pdsch/pdsch_dmrs_symbol_mask.h</label>
        <link refid="pdsch__dmrs__symbol__mask_8h_source"/>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="450">
        <label>include/srsgnb/srslog/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="451" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>lib/du_manager/converters/mac_cell_configuration_helpers.h</label>
        <link refid="mac__cell__configuration__helpers_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="387">
        <label>include/srsgnb/phy/adapters/phy_timing_adapter.h</label>
        <link refid="phy__timing__adapter_8h_source"/>
      </node>
      <node id="461">
        <label>include/srsgnb/phy/lower/lower_phy_controller.h</label>
        <link refid="lower__phy__controller_8h_source"/>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
      </node>
      <node id="290">
        <label>lib/phy/upper/uplink_processor_pool_impl.h</label>
        <link refid="uplink__processor__pool__impl_8h_source"/>
      </node>
      <node id="109">
        <label>lib/scheduler/cell/scheduler_cell_manager.h</label>
        <link refid="scheduler__cell__manager_8h_source"/>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="355">
        <label>include/srsgnb/phy/upper/channel_coding/ldpc/ldpc_rate_dematcher.h</label>
        <link refid="ldpc__rate__dematcher_8h"/>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="356" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
      </node>
      <node id="210">
        <label>lib/cu_cp/ue_manager_interfaces.h</label>
        <link refid="ue__manager__interfaces_8h_source"/>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
      <node id="527">
        <label>lib/srslog/formatters/json_formatter.h</label>
        <link refid="json__formatter_8h_source"/>
      </node>
      <node id="66">
        <label>include/srsgnb/phy/upper/channel_processors/pdsch_processor.h</label>
        <link refid="pdsch__processor_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="514">
        <label>include/srsgnb/support/srsgnb_test.h</label>
        <link refid="srsgnb__test_8h_source"/>
        <childnode refid="515" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>lib/mac/mac_dl/rar_pdu_assembler.h</label>
        <link refid="rar__pdu__assembler_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>include/srsgnb/phy/upper/channel_processors/pdcch_modulator.h</label>
        <link refid="pdcch__modulator_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>include/srsgnb/phy/upper/sequence_generators/low_papr_sequence_generator.h</label>
        <link refid="low__papr__sequence__generator_8h_source"/>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
      </node>
      <node id="451">
        <label>include/srsgnb/srslog/srslog.h</label>
        <link refid="srslog_8h_source"/>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="470" relation="include">
        </childnode>
        <childnode refid="515" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
      </node>
      <node id="247">
        <label>lib/sdap/sdap_impl.h</label>
        <link refid="sdap__impl_8h_source"/>
      </node>
      <node id="255">
        <label>lib/rlc/rlc_am_interconnect.h</label>
        <link refid="rlc__am__interconnect_8h_source"/>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>include/srsgnb/fapi_adaptor/mac/messages/prach.h</label>
        <link refid="mac_2messages_2prach_8h_source"/>
      </node>
      <node id="379">
        <label>include/srsgnb/ran/ofdm_symbol_range.h</label>
        <link refid="ofdm__symbol__range_8h_source"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="343">
        <label>include/srsgnb/phy/upper/channel_coding/ldpc/ldpc.h</label>
        <link refid="ldpc_8h"/>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="362" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
      </node>
      <node id="340">
        <label>include/srsgnb/srsvec/sc_prod.h</label>
        <link refid="sc__prod_8h_source"/>
      </node>
      <node id="293">
        <label>lib/phy/support/prach_buffer_impl.h</label>
        <link refid="prach__buffer__impl_8h_source"/>
      </node>
      <node id="406">
        <label>lib/phy/upper/channel_coding/crc_calculator_impl.h</label>
        <link refid="crc__calculator__impl_8h_source"/>
      </node>
      <node id="373">
        <label>include/srsgnb/ran/prach/prach_constants.h</label>
        <link refid="prach__constants_8h_source"/>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lib/mac/mac_ul/pdu_rx_handler.h</label>
        <link refid="pdu__rx__handler_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="368">
        <label>include/srsgnb/mac/mac_cell_rach_handler.h</label>
        <link refid="mac__cell__rach__handler_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="377">
        <label>lib/srsvec/simd.h</label>
        <link refid="simd_8h_source"/>
      </node>
      <node id="498">
        <label>include/srsgnb/ran/resource_block.h</label>
        <link refid="resource__block_8h_source"/>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="319">
        <label>include/srsgnb/srsvec/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="320" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="338" relation="include">
        </childnode>
        <childnode refid="339" relation="include">
        </childnode>
        <childnode refid="340" relation="include">
        </childnode>
        <childnode refid="341" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/mac/mac_ctrl/ue_creation_procedure.h</label>
        <link refid="mac_2mac__ctrl_2ue__creation__procedure_8h_source"/>
      </node>
      <node id="504">
        <label>include/srsgnb/support/async/detail/base_task.h</label>
        <link refid="base__task_8h_source"/>
        <childnode refid="505" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>lib/scheduler/pdcch_scheduling/pdcch_config_helpers.h</label>
        <link refid="pdcch__config__helpers_8h_source"/>
      </node>
      <node id="367">
        <label>include/srsgnb/ran/phy_time_unit.h</label>
        <link refid="phy__time__unit_8h_source"/>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
      </node>
      <node id="339">
        <label>include/srsgnb/srsvec/prod.h</label>
        <link refid="prod_8h_source"/>
      </node>
      <node id="61">
        <label>lib/phy/upper/upper_phy_impl.h</label>
        <link refid="upper__phy__impl_8h_source"/>
      </node>
      <node id="371">
        <label>lib/fapi_adaptor/phy/phy_to_fapi_results_event_translator.h</label>
        <link refid="phy__to__fapi__results__event__translator_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="334">
        <label>lib/radio/zmq/radio_zmq_rx_channel.h</label>
        <link refid="radio__zmq__rx__channel_8h_source"/>
        <childnode refid="335" relation="include">
        </childnode>
      </node>
      <node id="254">
        <label>lib/rlc/rlc_am_pdu.h</label>
        <link refid="rlc__am__pdu_8h_source"/>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
      </node>
      <node id="149">
        <label>lib/cu_cp/cu_cp.h</label>
        <link refid="lib_2cu__cp_2cu__cp_8h_source"/>
      </node>
      <node id="528">
        <label>lib/srslog/formatters/text_formatter.h</label>
        <link refid="text__formatter_8h_source"/>
        <childnode refid="476" relation="include">
        </childnode>
      </node>
      <node id="457">
        <label>include/srsgnb/support/async/async_task_loop.h</label>
        <link refid="async__task__loop_8h_source"/>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="221">
        <label>lib/f1_interface/common/colocated_message_handler.h</label>
        <link refid="colocated__message__handler_8h_source"/>
      </node>
      <node id="352">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_decoder_impl.h</label>
        <link refid="ldpc__decoder__impl_8h"/>
      </node>
      <node id="131">
        <label>lib/fapi_adaptor/mac/mac_fapi_adaptor_impl.h</label>
        <link refid="mac__fapi__adaptor__impl_8h_source"/>
      </node>
      <node id="453">
        <label>include/srsgnb/rrc/rrc_ue_config.h</label>
        <link refid="rrc__ue__config_8h_source"/>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>lib/scheduler/common_scheduling/prach_scheduler.h</label>
        <link refid="prach__scheduler_8h_source"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="251">
        <label>lib/sdap/sdap_entity_impl.h</label>
        <link refid="sdap__entity__impl_8h_source"/>
      </node>
      <node id="486">
        <label>include/srsgnb/phy/upper/vrb_to_prb_mapper.h</label>
        <link refid="vrb__to__prb__mapper_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="430">
        <label>include/srsgnb/phy/upper/rx_softbuffer.h</label>
        <link refid="rx__softbuffer_8h_source"/>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>lib/scheduler/scheduler_impl.h</label>
        <link refid="scheduler__impl_8h_source"/>
      </node>
      <node id="278">
        <label>lib/phy/lower/processors/prach/prach_processor_impl.h</label>
        <link refid="prach__processor__impl_8h_source"/>
      </node>
      <node id="363">
        <label>lib/phy/upper/channel_coding/ldpc/ldpc_luts_impl.h</label>
        <link refid="ldpc__luts__impl_8h"/>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="428">
        <label>include/srsgnb/phy/upper/channel_processors/pdcch_encoder.h</label>
        <link refid="pdcch__encoder_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="337">
        <label>lib/radio/zmq/radio_zmq_tx_stream.h</label>
        <link refid="radio__zmq__tx__stream_8h_source"/>
        <childnode refid="331" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>lib/phy/upper/channel_modulation/demodulation_mapper_impl.h</label>
        <link refid="demodulation__mapper__impl_8h"/>
      </node>
      <node id="525">
        <label>lib/srslog/sinks/stream_sink.h</label>
        <link refid="stream__sink_8h_source"/>
        <childnode refid="476" relation="include">
        </childnode>
      </node>
      <node id="286">
        <label>include/srsgnb/phy/lower/modulation/ofdm_prach_demodulator.h</label>
        <link refid="ofdm__prach__demodulator_8h_source"/>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
      </node>
      <node id="262">
        <label>include/srsgnb/phy/lower/modulation/modulation_factories.h</label>
        <link refid="modulation__factories_8h_source"/>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>lib/scheduler/support/bwp_helpers.h</label>
        <link refid="bwp__helpers_8h_source"/>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="205">
        <label>include/srsgnb/rrc/rrc_entity_interface.h</label>
        <link refid="rrc__entity__interface_8h_source"/>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>include/srsgnb/ran/sch_mcs.h</label>
        <link refid="sch__mcs_8h_source"/>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
      </node>
      <node id="307">
        <label>include/srsgnb/phy/upper/signal_processors/sss_processor.h</label>
        <link refid="sss__processor_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>lib/scheduler/policy/scheduler_time_rr.h</label>
        <link refid="scheduler__time__rr_8h_source"/>
      </node>
      <node id="359">
        <label>include/srsgnb/phy/upper/channel_processors/pdsch_encoder.h</label>
        <link refid="pdsch__encoder_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="529">
        <label>include/srsgnb/support/format_utils.h</label>
        <link refid="format__utils_8h_source"/>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
      </node>
      <node id="459">
        <label>include/srsgnb/du_high/du_l2_dl_executor_mapper.h</label>
        <link refid="du__l2__dl__executor__mapper_8h_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="224">
        <label>lib/f1_interface/du/procedures/f1ap_du_setup_procedure.h</label>
        <link refid="f1ap__du__setup__procedure_8h_source"/>
      </node>
      <node id="194">
        <label>include/srsgnb/f1_interface/common/f1ap_packet_procedures.h</label>
        <link refid="f1ap__packet__procedures_8h_source"/>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
      </node>
      <node id="429">
        <label>include/srsgnb/phy/upper/log_likelihood_ratio.h</label>
        <link refid="log__likelihood__ratio_8h"/>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="355" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
      </node>
      <node id="424">
        <label>include/srsgnb/phy/upper/channel_coding/short/short_block_detector.h</label>
        <link refid="short__block__detector_8h"/>
        <childnode refid="425" relation="include">
        </childnode>
      </node>
      <node id="213">
        <label>lib/cu_cp/adapters/pdcp_adapters.h</label>
        <link refid="pdcp__adapters_8h_source"/>
      </node>
      <node id="317">
        <label>lib/phy/upper/sequence_generators/low_papr_sequence_generator_impl.h</label>
        <link refid="low__papr__sequence__generator__impl_8h_source"/>
      </node>
      <node id="497">
        <label>include/srsgnb/ran/pdcch/pdcch_type0_css_coreset_config.h</label>
        <link refid="pdcch__type0__css__coreset__config_8h_source"/>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="521">
        <label>include/srsgnb/srslog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="522" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
        <childnode refid="528" relation="include">
        </childnode>
      </node>
      <node id="431">
        <label>include/srsgnb/srsvec/aligned_vec.h</label>
        <link refid="aligned__vec_8h_source"/>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="419" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="421" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
      </node>
      <node id="249">
        <label>include/srsgnb/sdap/sdap_entity.h</label>
        <link refid="sdap__entity_8h_source"/>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>lib/scheduler/pdcch_scheduling/pdcch_scheduler_impl.h</label>
        <link refid="pdcch__scheduler__impl_8h_source"/>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>lib/phy/upper/signal_processors/pucch/dmrs_pucch_processor_format1_impl.h</label>
        <link refid="dmrs__pucch__processor__format1__impl_8h_source"/>
      </node>
      <node id="466">
        <label>lib/f1_interface/du/procedures/f1ap_du_event_manager.h</label>
        <link refid="f1ap__du__event__manager_8h_source"/>
        <childnode refid="224" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/mac/mac_ctrl/ue_reconfiguration_procedure.h</label>
        <link refid="ue__reconfiguration__procedure_8h_source"/>
      </node>
      <node id="136">
        <label>include/srsgnb/scheduler/scheduler_dci.h</label>
        <link refid="scheduler__dci_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>include/srsgnb/fapi_adaptor/phy/messages/prach.h</label>
        <link refid="phy_2messages_2prach_8h_source"/>
      </node>
      <node id="414">
        <label>lib/phy/upper/channel_coding/polar/polar_decoder_impl.h</label>
        <link refid="polar__decoder__impl_8h"/>
      </node>
      <node id="423">
        <label>lib/phy/upper/channel_coding/polar/polar_interleaver_impl.h</label>
        <link refid="polar__interleaver__impl_8h_source"/>
      </node>
      <node id="216">
        <label>lib/f1_interface/cu/procedures/f1ap_ue_context_release_procedure.h</label>
        <link refid="f1ap__ue__context__release__procedure_8h_source"/>
        <childnode refid="217" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/srsgnb/mac/cell_configuration.h</label>
        <link refid="include_2srsgnb_2mac_2cell__configuration_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>include/srsgnb/phy/support/resource_grid_context.h</label>
        <link refid="resource__grid__context_8h_source"/>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="218">
        <label>include/srsgnb/f1_interface/du/f1ap_du.h</label>
        <link refid="f1ap__du_8h_source"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>include/srsgnb/phy/upper/channel_processors/pdcch_processor.h</label>
        <link refid="pdcch__processor_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>include/srsgnb/sdap/sdap_entity_factory.h</label>
        <link refid="sdap__entity__factory_8h_source"/>
      </node>
      <node id="445">
        <label>include/srsgnb/srslog/bundled/fmt/printf.h</label>
        <link refid="printf_8h_source"/>
      </node>
      <node id="49">
        <label>lib/phy/upper/signal_processors/pucch/dmrs_pucch_processor_format2_impl.h</label>
        <link refid="dmrs__pucch__processor__format2__impl_8h_source"/>
      </node>
      <node id="323">
        <label>include/srsgnb/srsvec/copy.h</label>
        <link refid="copy_8h_source"/>
        <childnode refid="324" relation="include">
        </childnode>
      </node>
      <node id="383">
        <label>include/srsgnb/mac/mac_cell_slot_handler.h</label>
        <link refid="mac__cell__slot__handler_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="446">
        <label>include/srsgnb/srslog/bundled/fmt/ranges.h</label>
        <link refid="ranges_8h_source"/>
      </node>
      <node id="234">
        <label>include/srsgnb/phy/upper/sequence_generators/sequence_generator_factories.h</label>
        <link refid="sequence__generator__factories_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="397">
        <label>include/srsgnb/adt/slot_array.h</label>
        <link refid="slot__array_8h_source"/>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="439">
        <label>include/srsgnb/srslog/bundled/fmt/color.h</label>
        <link refid="color_8h_source"/>
      </node>
      <node id="299">
        <label>include/srsgnb/phy/support/resource_grid_pool.h</label>
        <link refid="resource__grid__pool_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="469">
        <label>lib/ngap/ngap_asn1_utils.h</label>
        <link refid="ngap__asn1__utils_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structdetail_1_1fallback__uintptr" prot="public">detail::fallback_uintptr</innerclass>
    <innerclass refid="structdetail_1_1void__t__impl" prot="public">detail::void_t_impl</innerclass>
    <innerclass refid="structdetail_1_1iterator__category" prot="public">detail::iterator_category</innerclass>
    <innerclass refid="structdetail_1_1iterator__category_3_01T_01_5_01_4" prot="public">detail::iterator_category&lt; T * &gt;</innerclass>
    <innerclass refid="structdetail_1_1iterator__category_3_01It_00_01void__t_3_01typename_01It_1_1iterator__category_01_4_01_4" prot="public">detail::iterator_category&lt; It, void_t&lt; typename It::iterator_category &gt; &gt;</innerclass>
    <innerclass refid="classdetail_1_1is__output__iterator" prot="public">detail::is_output_iterator</innerclass>
    <innerclass refid="classdetail_1_1counting__iterator" prot="public">detail::counting_iterator</innerclass>
    <innerclass refid="structdetail_1_1counting__iterator_1_1value__type" prot="public">detail::counting_iterator::value_type</innerclass>
    <innerclass refid="classdetail_1_1truncating__iterator__base" prot="public">detail::truncating_iterator_base</innerclass>
    <innerclass refid="classdetail_1_1truncating__iterator" prot="public">detail::truncating_iterator</innerclass>
    <innerclass refid="classdetail_1_1truncating__iterator_3_01OutputIt_00_01std_1_1false__type_01_4" prot="public">detail::truncating_iterator&lt; OutputIt, std::false_type &gt;</innerclass>
    <innerclass refid="classdetail_1_1truncating__iterator_3_01OutputIt_00_01std_1_1true__type_01_4" prot="public">detail::truncating_iterator&lt; OutputIt, std::true_type &gt;</innerclass>
    <innerclass refid="classbasic__memory__buffer" prot="public">basic_memory_buffer</innerclass>
    <innerclass refid="structis__contiguous_3_01basic__memory__buffer_3_01T_00_01SIZE_00_01Allocator_01_4_01_4" prot="public">is_contiguous&lt; basic_memory_buffer&lt; T, SIZE, Allocator &gt; &gt;</innerclass>
    <innerclass refid="classformat__error" prot="public">format_error</innerclass>
    <innerclass refid="structdetail_1_1basic__data" prot="public">detail::basic_data</innerclass>
    <innerclass refid="structdetail_1_1data" prot="public">detail::data</innerclass>
    <innerclass refid="structdetail_1_1format__decimal__result" prot="public">detail::format_decimal_result</innerclass>
    <innerclass refid="classdetail_1_1utf8__to__utf16" prot="public">detail::utf8_to_utf16</innerclass>
    <innerclass refid="structdetail_1_1null" prot="public">detail::null</innerclass>
    <innerclass refid="structdetail_1_1fill__t" prot="public">detail::fill_t</innerclass>
    <innerclass refid="structbasic__format__specs" prot="public">basic_format_specs</innerclass>
    <innerclass refid="structdetail_1_1float__specs" prot="public">detail::float_specs</innerclass>
    <innerclass refid="classdetail_1_1float__writer" prot="public">detail::float_writer</innerclass>
    <innerclass refid="classdetail_1_1int__type__checker" prot="public">detail::int_type_checker</innerclass>
    <innerclass refid="classdetail_1_1char__specs__checker" prot="public">detail::char_specs_checker</innerclass>
    <innerclass refid="classdetail_1_1cstring__type__checker" prot="public">detail::cstring_type_checker</innerclass>
    <innerclass refid="structdetail_1_1write__int__data" prot="public">detail::write_int_data</innerclass>
    <innerclass refid="structdetail_1_1int__writer" prot="public">detail::int_writer</innerclass>
    <innerclass refid="structdetail_1_1is__integral" prot="public">detail::is_integral</innerclass>
    <innerclass refid="structdetail_1_1is__integral_3_01int128__t_01_4" prot="public">detail::is_integral&lt; int128_t &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__integral_3_01uint128__t_01_4" prot="public">detail::is_integral&lt; uint128_t &gt;</innerclass>
    <innerclass refid="structdetail_1_1default__arg__formatter" prot="public">detail::default_arg_formatter</innerclass>
    <innerclass refid="classdetail_1_1arg__formatter__base" prot="public">detail::arg_formatter_base</innerclass>
    <innerclass refid="structdetail_1_1arg__formatter__base_1_1char__spec__handler" prot="private">detail::arg_formatter_base::char_spec_handler</innerclass>
    <innerclass refid="structdetail_1_1arg__formatter__base_1_1cstring__spec__handler" prot="private">detail::arg_formatter_base::cstring_spec_handler</innerclass>
    <innerclass refid="classdetail_1_1custom__formatter" prot="public">detail::custom_formatter</innerclass>
    <innerclass refid="classdetail_1_1width__checker" prot="public">detail::width_checker</innerclass>
    <innerclass refid="classdetail_1_1precision__checker" prot="public">detail::precision_checker</innerclass>
    <innerclass refid="classdetail_1_1specs__setter" prot="public">detail::specs_setter</innerclass>
    <innerclass refid="classdetail_1_1numeric__specs__checker" prot="public">detail::numeric_specs_checker</innerclass>
    <innerclass refid="classdetail_1_1specs__checker" prot="public">detail::specs_checker</innerclass>
    <innerclass refid="structdetail_1_1auto__id" prot="public">detail::auto_id</innerclass>
    <innerclass refid="classdetail_1_1specs__handler" prot="public">detail::specs_handler</innerclass>
    <innerclass refid="structdetail_1_1arg__ref" prot="public">detail::arg_ref</innerclass>
    <innerclass refid="uniondetail_1_1arg__ref_1_1value" prot="public">detail::arg_ref::value</innerclass>
    <innerclass refid="structdetail_1_1dynamic__format__specs" prot="public">detail::dynamic_format_specs</innerclass>
    <innerclass refid="classdetail_1_1dynamic__specs__handler" prot="public">detail::dynamic_specs_handler</innerclass>
    <innerclass refid="structdetail_1_1width__adapter" prot="public">detail::width_adapter</innerclass>
    <innerclass refid="structdetail_1_1precision__adapter" prot="public">detail::precision_adapter</innerclass>
    <innerclass refid="structdetail_1_1id__adapter" prot="public">detail::id_adapter</innerclass>
    <innerclass refid="structdetail_1_1format__handler" prot="public">detail::format_handler</innerclass>
    <innerclass refid="classdetail_1_1compile__parse__context" prot="public">detail::compile_parse_context</innerclass>
    <innerclass refid="classdetail_1_1format__string__checker" prot="public">detail::format_string_checker</innerclass>
    <innerclass refid="classdetail_1_1arg__formatter" prot="public">detail::arg_formatter</innerclass>
    <innerclass refid="classsystem__error" prot="public">system_error</innerclass>
    <innerclass refid="classformat__int" prot="public">format_int</innerclass>
    <innerclass refid="structformatter_3_01T_00_01Char_00_01enable__if__t_3_01detail_1_1type__constant_3_01T_00_01Char_67602321fdfe0eb9cff36125517f1a34" prot="public">formatter&lt; T, Char, enable_if_t&lt; detail::type_constant&lt; T, Char &gt;::value !=detail::type::custom_type &gt; &gt;</innerclass>
    <innerclass refid="structformatter_3_01void_01_5_00_01Char_01_4" prot="public">formatter&lt; void *, Char &gt;</innerclass>
    <innerclass refid="structformatter_3_01Char_0fN_0e_00_01Char_01_4" prot="public">formatter&lt; Char[N], Char &gt;</innerclass>
    <innerclass refid="classdynamic__formatter" prot="public">dynamic_formatter</innerclass>
    <innerclass refid="structdynamic__formatter_1_1null__handler" prot="private">dynamic_formatter::null_handler</innerclass>
    <innerclass refid="classbytes" prot="public">bytes</innerclass>
    <innerclass refid="structformatter_3_01bytes_01_4" prot="public">formatter&lt; bytes &gt;</innerclass>
    <innerclass refid="structarg__join" prot="public">arg_join</innerclass>
    <innerclass refid="structformatter_3_01arg__join_3_01It_00_01Sentinel_00_01Char_01_4_00_01Char_01_4" prot="public">formatter&lt; arg_join&lt; It, Sentinel, Char &gt;, Char &gt;</innerclass>
    <innerclass refid="structformat__to__n__result" prot="public">format_to_n_result</innerclass>
    <innernamespace refid="namespacedetail">detail</innernamespace>
    <innernamespace refid="namespacealign">align</innernamespace>
    <innernamespace refid="namespacesign">sign</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="format_8h_1a061a90c1c2008acd7b0161cde41c1a11" prot="public" static="no">
        <name>FMT_ICC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="51" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1af87bd0133efd40a100a5d27980c75f99" prot="public" static="no">
        <name>FMT_CUDA_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="57" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a160d3314a3cdbd49e187b75d6ce2a652" prot="public" static="no">
        <name>FMT_HAS_BUILTIN</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="63" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1abce8cfc4dd880e67d8c6b8aacf477144" prot="public" static="no">
        <name>FMT_NOINLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="69" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a35d4bc2bf717ac7731de7713c54175bb" prot="public" static="no">
        <name>FMT_FALLTHROUGH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="85" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a5df1fbe4814ecdaf28b17b6546f80d25" prot="public" static="no">
        <name>FMT_MAYBE_UNUSED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="92" column="16" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" prot="public" static="no">
        <name>FMT_THROW</name>
        <param><defname>x</defname></param>
        <initializer>throw x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="111" column="20" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a4aa79926398ee27fe7d6db8b0dd54edf" prot="public" static="no">
        <name>FMT_TRY</name>
        <initializer>try</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="123" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ab8efe0100a6d7cc74729f5bf7537799c" prot="public" static="no">
        <name>FMT_CATCH</name>
        <param><defname>x</defname></param>
        <initializer>catch (x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="124" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a7c29e7b4a54045f13bd664979804998d" prot="public" static="no">
        <name>FMT_USE_USER_DEFINED_LITERALS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="137" column="16" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1aa06c9479545f2548568d10b697d7be00" prot="public" static="no">
        <name>FMT_USE_UDL_TEMPLATE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="150" column="16" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a446fd9514a10077873710caef73120aa" prot="public" static="no">
        <name>FMT_USE_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="155" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ade2a9cd15dd7f657a176f36d546333a5" prot="public" static="no">
        <name>FMT_USE_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="159" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a146d2f76f42b33f8fc7264f25a961d16" prot="public" static="no">
        <name>FMT_USE_LONG_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="163" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a4b7270fa462cb1ba6622e686847fc7ea" prot="public" static="no">
        <name>FMT_DEPRECATED_NUMERIC_ALIGN</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="230" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a25c2cdf9765d15576333ed86298422c5" prot="public" static="no">
        <name>FMT_USE_GRISU</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="559" column="11" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a701339e31b08c541a11ed944cc20b856" prot="public" static="no">
        <name>FMT_ALWAYS_INLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="842" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ad258cc73fca14257a1daee6c735a2df2" prot="public" static="no">
        <name>FMT_STRING_IMPL</name>
        <param><defname>s</defname></param>
        <param><defname>base</defname></param>
        <initializer>  [] {                                                            \
    /* Use a macro-like name to avoid shadowing warnings. */      \
    struct FMT_COMPILE_STRING : base {                            \
      using char_type = fmt::remove_cvref_t&lt;decltype(s[0])&gt;;      \
      FMT_MAYBE_UNUSED FMT_CONSTEXPR                              \
      operator fmt::basic_string_view&lt;char_type&gt;() const {        \
        return fmt::detail::compile_string_to_view&lt;char_type&gt;(s); \
      }                                                           \
    };                                                            \
    return FMT_COMPILE_STRING();                                  \
  }()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="2842" column="9" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="2842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a09119ad072f708d17b88704fa898aff0" prot="public" static="no">
        <name>FMT_STRING</name>
        <param><defname>s</defname></param>
        <initializer>FMT_STRING_IMPL(s, fmt::compile_string)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Constructs a compile-time format string from a string literal <emphasis>s</emphasis>.</para>
<para>Example**::</para>
<para>A compile-time error because &apos;d&apos; is an invalid specifier for strings. std::string s = fmt::format(FMT_STRING(&quot;{:d}&quot;), &quot;foo&quot;); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="2865" column="9" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="2865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a137cd833c17637f6573327878a9dec4c" prot="public" static="no">
        <name>FMT_FORMAT_AS</name>
        <param><defname>Type</defname></param>
        <param><defname>Base</defname></param>
        <initializer>  template &lt;typename Char&gt;                                                    \
  struct <ref refid="structformatter" kindref="compound">formatter</ref>&lt;Type, Char&gt; : <ref refid="structformatter" kindref="compound">formatter</ref>&lt;Base, Char&gt; {                      \
    template &lt;typename FormatContext&gt;                                         \
    auto format(Type const&amp; val, FormatContext&amp; ctx) -&gt; decltype(ctx.out()) { \
      return <ref refid="structformatter" kindref="compound">formatter</ref>&lt;Base, Char&gt;::format(val, ctx);                         \
    }                                                                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3169" column="9" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" prot="public" static="no">
        <name>FMT_FUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3726" column="12" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3726" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="format_8h_1a0944a4353780132eeab7b06e3e42291d" prot="public" static="no" strong="no">
        <type></type>
        <name>@31</name>
        <enumvalue id="format_8h_1a0944a4353780132eeab7b06e3e42291dacd26fc0cb2aa068a6bfa35b673397d7d" prot="public">
          <name>inline_buffer_size</name>
          <initializer>= 500</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="580" column="6" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="580" bodyend="580"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="format_8h_1aaba5427d5f788f71959666ba2a3bf167" prot="public" static="no">
        <type><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&lt; char &gt;</type>
        <definition>using memory_buffer =  basic_memory_buffer&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>memory_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="704" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1a982966c062384d8ef0f4c909007df461" prot="public" static="no">
        <type><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&lt; wchar_t &gt;</type>
        <definition>using wmemory_buffer =  basic_memory_buffer&lt;wchar_t&gt;</definition>
        <argsstring></argsstring>
        <name>wmemory_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="705" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1a287c722ae78d5cb37bb7887b87e8f769" prot="public" static="no">
        <type>align::type</type>
        <definition>using align_t =  align::type</definition>
        <argsstring></argsstring>
        <name>align_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="1039" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="1039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1ad65908bd5d03f057bd2009ce3f40f9f3" prot="public" static="no">
        <type>sign::type</type>
        <definition>using sign_t =  sign::type</definition>
        <argsstring></argsstring>
        <name>sign_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="1044" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1a92e212323f243ceed8554e67489039d3" prot="public" static="no">
        <type><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt; char &gt;</type>
        <definition>using format_specs =  basic_format_specs&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>format_specs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="1066" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="1066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1a7f9b171ce0319f8b3c1465a46155b4a1" prot="public" static="no">
        <type><ref refid="classdetail_1_1arg__formatter" kindref="compound">detail::arg_formatter</ref>&lt; OutputIt, Char &gt;</type>
        <definition>using FMT_DEPRECATED_ALIAS =  detail::arg_formatter&lt;OutputIt, Char&gt;</definition>
        <argsstring></argsstring>
        <name>FMT_DEPRECATED_ALIAS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="2947" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="2948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1a677412c99a4362d0fe512ab66e293eec" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>&lt; OutputIt, Char &gt;</type>
        <definition>using format_context_t =  basic_format_context&lt;OutputIt, Char&gt;</definition>
        <argsstring></argsstring>
        <name>format_context_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3514" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1ac4253e585d9bdeb53921720670eabb86" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__format__context" kindref="compound">format_context_t</ref>&lt; OutputIt, Char &gt; &gt;</type>
        <definition>using format_args_t =  basic_format_args&lt;format_context_t&lt;OutputIt, Char&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>format_args_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3517" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1a8addbaf2d6cd61d9ecfb31be33baab8c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>typename OutputIt::value_type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__format__context" kindref="compound">format_context_t</ref>&lt; <ref refid="classdetail_1_1truncating__iterator" kindref="compound">detail::truncating_iterator</ref>&lt; OutputIt &gt;, Char &gt;</type>
        <definition>using format_to_n_context =  format_context_t&lt;detail::truncating_iterator&lt;OutputIt&gt;, Char&gt;</definition>
        <argsstring></argsstring>
        <name>format_to_n_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3561" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="format_8h_1ab56a495fb89c4d40d48ea5f2594a484d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>typename OutputIt::value_type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__format__context" kindref="compound">format_to_n_context</ref>&lt; OutputIt, Char &gt; &gt;</type>
        <definition>using format_to_n_args =  basic_format_args&lt;format_to_n_context&lt;OutputIt, Char&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>format_to_n_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3565" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3565" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="format_8h_1ae65b6d6ffa5bfffa89786f8573e7b71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_API void</type>
        <definition>FMT_API void format_system_error</definition>
        <argsstring>(detail::buffer&lt; char &gt; &amp;out, int error_code, string_view message) FMT_NOEXCEPT</argsstring>
        <name>format_system_error</name>
        <param>
          <type><ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer</ref>&lt; char &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats an error returned by an operating system or a language runtime, for example a file opening error, and writes it to <emphasis>out</emphasis> in the following form:</para>
<para>.. parsed-literal:: &lt;message&gt;*: *&lt;system-message&gt;*</para>
<para>where *&lt;message&gt;* is the passed message and *&lt;system-message&gt;* is the system message corresponding to the error code. error_code* is a system error code as given by <computeroutput>errno</computeroutput>. If <emphasis><ref refid="classerror__code" kindref="compound">error_code</ref></emphasis> is not a valid error code such as -1, the system message may look like &quot;Unknown error -1&quot; and is platform-dependent. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3013" column="14" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="1356" bodyend="1376" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3013" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1aa87a526a913eeaf54e8d7b16020c8174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_API void</type>
        <definition>FMT_API void report_system_error</definition>
        <argsstring>(int error_code, string_view message) FMT_NOEXCEPT</argsstring>
        <name>report_system_error</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3018" column="14" bodyfile="include/srsgnb/srslog/bundled/fmt/format-inl.h" bodystart="1382" bodyend="1385" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3018" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a1177f090c1dacc3982b2e069eaa2582c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(signed char, int)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>signed char</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3178" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3178" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a548457bcf3c9807d69cf66b3cbc6247e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(unsigned char, unsigned)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>unsigned char</type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3179" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3179" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a319fc8a1f112418cd07d53c6233bee3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(short, int)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>short</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3180" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a6ddb9961d58f30977c99a65b9e8ba706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(unsigned short, unsigned)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>unsigned short</type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3181" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3181" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1af974fbdfe4a1a7eb699dd9c983a46150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(long, long long)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>long long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3182" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3182" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1acfddf982919150865eb0c0c59401547e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(unsigned long, unsigned long long)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>unsigned long</type>
        </param>
        <param>
          <type>unsigned long long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3183" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3183" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a0c8726854a4af0ec6aff3fcf32ee4094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(Char *, const Char *)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>Char *</type>
        </param>
        <param>
          <type>const Char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3184" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3184" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1ae261bf22a05fa9c71ebc535f831e9066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(std::basic_string&lt; Char &gt;, basic_string_view&lt; Char &gt;)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>std::basic_string&lt; Char &gt;</type>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3185" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3185" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a690db80ee97af5a1cfdd587665bdb24e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(std::nullptr_t, const void *)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3186" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3186" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a1783f32366b8bade6e946906b22a9d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_FORMAT_AS</definition>
        <argsstring>(detail::std_string_view&lt; Char &gt;, basic_string_view&lt; Char &gt;)</argsstring>
        <name>FMT_FORMAT_AS</name>
        <param>
          <type><ref refid="structdetail_1_1std__string__view" kindref="compound">detail::std_string_view</ref>&lt; Char &gt;</type>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3187" column="1" declfile="include/srsgnb/srslog/bundled/fmt/format.h" declline="3187" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1aa1f118d429d82219258dee57a998b275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename ErrorHandler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR void</type>
        <definition>FMT_CONSTEXPR void advance_to</definition>
        <argsstring>(basic_format_parse_context&lt; Char, ErrorHandler &gt; &amp;ctx, const Char *p)</argsstring>
        <name>advance_to</name>
        <param>
          <type><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context</ref>&lt; Char, ErrorHandler &gt; &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3275" column="20" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3275" bodyend="3278"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a1b79f3df42409e3954cacfc24c9dbe19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArgFormatter</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Context</type>
          </param>
        </templateparamlist>
        <type>Context::iterator</type>
        <definition>Context::iterator vformat_to</definition>
        <argsstring>(typename ArgFormatter::iterator out, basic_string_view&lt; Char &gt; format_str, basic_format_args&lt; Context &gt; args, detail::locale_ref loc=detail::locale_ref())</argsstring>
        <name>vformat_to</name>
        <param>
          <type>typename ArgFormatter::iterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; Context &gt;</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1locale__ref" kindref="compound">detail::locale_ref</ref></type>
          <declname>loc</declname>
          <defval><ref refid="classdetail_1_1locale__ref" kindref="compound">detail::locale_ref</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats arguments and writes the output to the range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3282" column="28" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3282" bodyend="3297"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1ae6bfbee71e8bd00280b2d936f93f7b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const void *</type>
        <definition>const void* ptr</definition>
        <argsstring>(const T *p)</argsstring>
        <name>ptr</name>
        <param>
          <type>const T *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3302" column="31" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3302" bodyend="3302"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a4ed134216b24f93bdaf6537077cb9923" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const void *</type>
        <definition>const void* ptr</definition>
        <argsstring>(const std::unique_ptr&lt; T &gt; &amp;p)</argsstring>
        <name>ptr</name>
        <param>
          <type>const std::unique_ptr&lt; T &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3303" column="31" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3303" bodyend="3305"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a3f3cc8de0a7513ebe68ed81778949f8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const void *</type>
        <definition>const void* ptr</definition>
        <argsstring>(const std::shared_ptr&lt; T &gt; &amp;p)</argsstring>
        <name>ptr</name>
        <param>
          <type>const std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3306" column="31" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3306" bodyend="3308"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a2df22f043e68541d268cc74e3ced2886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It</type>
          </param>
          <param>
            <type>typename Sentinel</type>
          </param>
        </templateparamlist>
        <type><ref refid="structarg__join" kindref="compound">arg_join</ref>&lt; It, Sentinel, char &gt;</type>
        <definition>arg_join&lt;It, Sentinel, char&gt; join</definition>
        <argsstring>(It begin, Sentinel end, string_view sep)</argsstring>
        <name>join</name>
        <param>
          <type>It</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Sentinel</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an object that formats the iterator range <computeroutput>[begin, end)</computeroutput> with elements separated by <computeroutput>sep</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3379" column="10" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3379" bodyend="3381"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a6c040e499c315826c27629d49bf60fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It</type>
          </param>
          <param>
            <type>typename Sentinel</type>
          </param>
        </templateparamlist>
        <type><ref refid="structarg__join" kindref="compound">arg_join</ref>&lt; It, Sentinel, wchar_t &gt;</type>
        <definition>arg_join&lt;It, Sentinel, wchar_t&gt; join</definition>
        <argsstring>(It begin, Sentinel end, wstring_view sep)</argsstring>
        <name>join</name>
        <param>
          <type>It</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Sentinel</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">wstring_view</ref></type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3384" column="10" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3384" bodyend="3386"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1aee4ac6f7d5b314739be58227fa07fe96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type><ref refid="structarg__join" kindref="compound">arg_join</ref>&lt; detail::iterator_t&lt; const Range &gt;, detail::sentinel_t&lt; const Range &gt;, char &gt;</type>
        <definition>arg_join&lt;detail::iterator_t&lt;const Range&gt;, detail::sentinel_t&lt;const Range&gt;, char&gt; join</definition>
        <argsstring>(const Range &amp;range, string_view sep)</argsstring>
        <name>join</name>
        <param>
          <type>const Range &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Returns an object that formats <computeroutput>range</computeroutput> with elements separated by <computeroutput>sep</computeroutput>.</para>
<para>Example**::</para>
<para>std::vector&lt;int&gt; v = {1, 2, 3}; fmt::print(&quot;{}&quot;, fmt::join(v, &quot;, &quot;)); Output: &quot;1, 2, 3&quot;</para>
<para><computeroutput>fmt::join</computeroutput> applies passed format specifiers to the range elements::</para>
<para>fmt::print(&quot;{:02}&quot;, fmt::join(v, &quot;, &quot;)); Output: &quot;01, 02, 03&quot; \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3406" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3406" bodyend="3408"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a5e71ee7facc3f1951a5ec6f29585a481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type><ref refid="structarg__join" kindref="compound">arg_join</ref>&lt; detail::iterator_t&lt; const Range &gt;, detail::sentinel_t&lt; const Range &gt;, wchar_t &gt;</type>
        <definition>arg_join&lt;detail::iterator_t&lt;const Range&gt;, detail::sentinel_t&lt;const Range&gt;, wchar_t&gt; join</definition>
        <argsstring>(const Range &amp;range, wstring_view sep)</argsstring>
        <name>join</name>
        <param>
          <type>const Range &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">wstring_view</ref></type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3413" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3413" bodyend="3415"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1aa3c9763893563371e4a2cba26799a437" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(!std::is_integral&lt; T &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string to_string</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Converts <emphasis>value</emphasis> to <computeroutput>std::string</computeroutput> using the default format for type <emphasis>T</emphasis>.</para>
<para>Example**::</para>
<para>#include &lt;<ref refid="format_8h_source" kindref="compound">fmt/format.h</ref>&gt;</para>
<para>std::string answer = fmt::to_string(42); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3429" column="20" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3429" bodyend="3433"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1af8d525cc69167d3affdf72ecc6bef282" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(std::is_integral&lt; T &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string to_string</definition>
        <argsstring>(T value)</argsstring>
        <name>to_string</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3436" column="20" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3436" bodyend="3443"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a3782bb464365613fb093103e9e894f91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::wstring</type>
        <definition>std::wstring to_wstring</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>to_wstring</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts <emphasis>value</emphasis> to <computeroutput>std::wstring</computeroutput> using the default format for type <emphasis>T</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3448" column="33" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3448" bodyend="3450"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1aaf17bd2981e8aaf621b4fb6d1b9f0093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>SIZE</declname>
            <defname>SIZE</defname>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; Char &gt;</type>
        <definition>std::basic_string&lt;Char&gt; to_string</definition>
        <argsstring>(const basic_memory_buffer&lt; Char, SIZE &gt; &amp;buf)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&lt; Char, SIZE &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3453" column="19" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3453" bodyend="3457"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a29b8c8e7257c0d9e22e0d4097f25cb52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="structdetail_1_1is__string" kindref="compound">detail::is_string</ref>&lt; S &gt;::value)</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>FMT_BUFFER_CONTEXT</definition>
        <argsstring>(Char)</argsstring>
        <name>FMT_BUFFER_CONTEXT</name>
        <param>
          <type>Char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3497" column="17" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3497" bodyend="3501"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a81a003fd4c658099243cd9fcbc6a9863" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>SIZE</declname>
            <defname>SIZE</defname>
            <defval>inline_buffer_size</defval>
          </param>
          <param>
            <type>typename Char</type>
            <defval>enable_if_t&lt;<ref refid="structdetail_1_1is__string" kindref="compound">detail::is_string</ref>&lt;S&gt;::value, char_t&lt;S&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__format__context" kindref="compound">buffer_context</ref>&lt; Char &gt;::iterator</type>
        <definition>buffer_context&lt;Char&gt;::iterator format_to</definition>
        <argsstring>(basic_memory_buffer&lt; Char, SIZE &gt; &amp;buf, const S &amp;format_str, Args &amp;&amp;... args)</argsstring>
        <name>format_to</name>
        <param>
          <type><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&lt; Char, SIZE &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3505" column="43" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3505" bodyend="3511"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1ad1569a072413ba2380a78b98420045b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator</ref>&lt; OutputIt &gt;::value &amp;&amp; !<ref refid="structdetail_1_1is__contiguous__back__insert__iterator" kindref="compound">detail::is_contiguous_back_insert_iterator</ref>&lt; OutputIt &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt vformat_to</definition>
        <argsstring>(OutputIt out, const S &amp;format_str, format_args_t&lt; type_identity_t&lt; OutputIt &gt;, char_t&lt; S &gt;&gt; args)</argsstring>
        <name>vformat_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args_t</ref>&lt; type_identity_t&lt; OutputIt &gt;, char_t&lt; S &gt;&gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3523" column="17" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3523" bodyend="3528"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a8ff38504edb79cfb23362224bddb5f69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF( <ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator</ref>&lt; OutputIt &gt;::value &amp;&amp; !<ref refid="structdetail_1_1is__contiguous__back__insert__iterator" kindref="compound">detail::is_contiguous_back_insert_iterator</ref>&lt; OutputIt &gt;::value &amp;&amp; <ref refid="structdetail_1_1is__string" kindref="compound">detail::is_string</ref>&lt; S &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt format_to</definition>
        <argsstring>(OutputIt out, const S &amp;format_str, Args &amp;&amp;... args)</argsstring>
        <name>format_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats arguments, writes the result to the output iterator <computeroutput>out</computeroutput> and returns the iterator past the end of the output range.</para>
<para>Example**::</para>
<para>std::vector&lt;char&gt; out; fmt::format_to(std::back_inserter(out), &quot;{}&quot;, 42); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3546" column="17" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3546" bodyend="3551"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a1cad2da521017591fb4e47a9d1e575ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref>&lt; <ref refid="classbasic__format__context" kindref="compound">format_to_n_context</ref>&lt; OutputIt, Char &gt;, Args... &gt;</type>
        <definition>format_arg_store&lt;format_to_n_context&lt;OutputIt, Char&gt;, Args...&gt; make_format_to_n_args</definition>
        <argsstring>(const Args &amp;... args)</argsstring>
        <name>make_format_to_n_args</name>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3569" column="1" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3569" bodyend="3572"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a90e1e601509e50f5a7f6e680d4bd71ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator</ref>&lt; OutputIt &gt;::value)</type>
          </param>
        </templateparamlist>
        <type><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result</ref>&lt; OutputIt &gt;</type>
        <definition>format_to_n_result&lt;OutputIt&gt; vformat_to_n</definition>
        <argsstring>(OutputIt out, size_t n, basic_string_view&lt; Char &gt; format_str, format_to_n_args&lt; type_identity_t&lt; OutputIt &gt;, type_identity_t&lt; Char &gt;&gt; args)</argsstring>
        <name>vformat_to_n</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_to_n_args</ref>&lt; type_identity_t&lt; OutputIt &gt;, type_identity_t&lt; Char &gt;&gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3576" column="27" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3576" bodyend="3582"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a083dae13ec4f06f605ca0d689d5a391d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="structdetail_1_1is__string" kindref="compound">detail::is_string</ref>&lt; S &gt;::value &amp;&amp; <ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator</ref>&lt; OutputIt &gt;::value)</type>
          </param>
        </templateparamlist>
        <type><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result</ref>&lt; OutputIt &gt;</type>
        <definition>format_to_n_result&lt;OutputIt&gt; format_to_n</definition>
        <argsstring>(OutputIt out, size_t n, const S &amp;format_str, const Args &amp;... args)</argsstring>
        <name>format_to_n</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats arguments, writes up to <computeroutput>n</computeroutput> characters of the result to the output iterator <computeroutput>out</computeroutput> and returns the total output size and the iterator past the end of the output range. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3594" column="27" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3594" bodyend="3601"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a13d272b5b37573c4ef94409c276fe94d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t formatted_size</definition>
        <argsstring>(string_view format_str, const Args &amp;... args)</argsstring>
        <name>formatted_size</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of characters in the output of <computeroutput>format(format_str, args...)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3617" column="15" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3617" bodyend="3619"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a2fb792077f62248ec951796a1248853f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(std::is_same&lt; Char, wchar_t &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vprint</definition>
        <argsstring>(std::FILE *f, basic_string_view&lt; Char &gt; format_str, wformat_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="structwformat__args" kindref="compound">wformat_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3622" column="6" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3622" bodyend="3629"/>
      </memberdef>
      <memberdef kind="function" id="format_8h_1a395e23b5778786094459932b268e677e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(std::is_same&lt; Char, wchar_t &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vprint</definition>
        <argsstring>(basic_string_view&lt; Char &gt; format_str, wformat_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="structwformat__args" kindref="compound">wformat_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/bundled/fmt/format.h" line="3632" column="6" bodyfile="include/srsgnb/srslog/bundled/fmt/format.h" bodystart="3632" bodyend="3634"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Formatting<sp/>library<sp/>for<sp/>C++</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>present,<sp/>Victor<sp/>Zverovich</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>---<sp/>Optional<sp/>exception<sp/>to<sp/>the<sp/>license<sp/>---</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>As<sp/>an<sp/>exception,<sp/>if,<sp/>as<sp/>a<sp/>result<sp/>of<sp/>your<sp/>compiling<sp/>your<sp/>source<sp/>code,<sp/>portions</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>of<sp/>this<sp/>Software<sp/>are<sp/>embedded<sp/>into<sp/>a<sp/>machine-executable<sp/>object<sp/>form<sp/>of<sp/>such</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>source<sp/>code,<sp/>you<sp/>may<sp/>redistribute<sp/>such<sp/>embedded<sp/>portions<sp/>in<sp/>such<sp/>object<sp/>form</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>without<sp/>including<sp/>the<sp/>above<sp/>copyright<sp/>and<sp/>permission<sp/>notices.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_FORMAT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FORMAT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__INTEL_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ICC_VERSION<sp/>__INTEL_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ICL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ICC_VERSION<sp/>__ICL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ICC_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__NVCC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CUDA_VERSION<sp/>(__CUDACC_VER_MAJOR__<sp/>*<sp/>100<sp/>+<sp/>__CUDACC_VER_MINOR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CUDA_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_BUILTIN(x)<sp/>__has_builtin(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_BUILTIN(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>||<sp/>FMT_CLANG_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_NOINLINE<sp/>__attribute__((noinline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_NOINLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>==<sp/>201103L<sp/>||<sp/>__cplusplus<sp/>==<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_FALLTHROUGH<sp/>[[clang::fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>700<sp/>&amp;&amp;<sp/>!defined(__PGI)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(!defined(__EDG_VERSION__)<sp/>||<sp/>__EDG_VERSION__<sp/>&gt;=<sp/>520)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_FALLTHROUGH<sp/>[[gnu::fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>FMT_HAS_CPP17_ATTRIBUTE(fallthrough)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(_MSVC_LANG)<sp/>&amp;&amp;<sp/>_MSVC_LANG<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_FALLTHROUGH<sp/>[[fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_MAYBE_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_HAS_CPP17_ATTRIBUTE(maybe_unused)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_MAYBE_UNUSED<sp/>[[maybe_unused]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_MAYBE_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>FMT_MSC_VER<sp/>||<sp/>FMT_NVCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Exception&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_throw(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Exception&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Silence<sp/>unreachable<sp/>code<sp/>warnings<sp/>in<sp/>MSVC<sp/>and<sp/>NVCC<sp/>because<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>nearly<sp/>impossible<sp/>to<sp/>fix<sp/>in<sp/>a<sp/>generic<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FMT_THROW(x)<sp/>detail::do_throw(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FMT_THROW(x)<sp/>throw<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_THROW(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(sizeof(x));<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(false,<sp/>&quot;&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_TRY<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CATCH(x)<sp/>catch<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_TRY<sp/>if<sp/>(true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CATCH(x)<sp/>if<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_USER_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EDG<sp/>based<sp/>compilers<sp/>(Intel,<sp/>NVIDIA,<sp/>Elbrus,<sp/>etc),<sp/>GCC<sp/>and<sp/>MSVC<sp/>support<sp/>UDLs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>(FMT_HAS_FEATURE(cxx_user_literals)<sp/>||<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>407<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1900)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(!defined(__EDG_VERSION__)<sp/>||<sp/>__EDG_VERSION__<sp/>&gt;=<sp/></highlight><highlight class="comment">/*<sp/>UDL<sp/>feature<sp/>*/</highlight><highlight class="preprocessor"><sp/>480)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_USE_USER_DEFINED_LITERALS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_USE_USER_DEFINED_LITERALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_UDL_TEMPLATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EDG<sp/>frontend<sp/>based<sp/>compilers<sp/>(icc,<sp/>nvcc,<sp/>etc)<sp/>and<sp/>GCC<sp/>&lt;<sp/>6.4<sp/>do<sp/>not<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>UDL<sp/>templates<sp/>and<sp/>GCC<sp/>&gt;=<sp/>9<sp/>warns<sp/>about<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_USE_USER_DEFINED_LITERALS<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(!defined(__EDG_VERSION__)<sp/>||<sp/>__EDG_VERSION__<sp/>&gt;=<sp/>501)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((FMT_GCC_VERSION<sp/>&gt;=<sp/>604<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201402L)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_CLANG_VERSION<sp/>&gt;=<sp/>304)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_USE_UDL_TEMPLATE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_USE_UDL_TEMPLATE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_FLOAT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_DOUBLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_DOUBLE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_LONG_DOUBLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_LONG_DOUBLE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>__builtin_clz<sp/>is<sp/>broken<sp/>in<sp/>clang<sp/>with<sp/>Microsoft<sp/>CodeGen:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/fmtlib/fmt/issues/519</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(FMT_GCC_VERSION<sp/>||<sp/>FMT_HAS_BUILTIN(__builtin_clz))<sp/>&amp;&amp;<sp/>!FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_BUILTIN_CLZ(n)<sp/>__builtin_clz(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(FMT_GCC_VERSION<sp/>||<sp/>FMT_HAS_BUILTIN(__builtin_clzll))<sp/>&amp;&amp;<sp/>!FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_BUILTIN_CLZLL(n)<sp/>__builtin_clzll(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>masquerade<sp/>as<sp/>both<sp/>MSVC<sp/>and<sp/>GCC-likes<sp/>or<sp/>otherwise<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>__builtin_clz<sp/>and<sp/>__builtin_clzll,<sp/>so<sp/>only<sp/>define<sp/>FMT_BUILTIN_CLZ<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>intrinsics<sp/>if<sp/>the<sp/>clz<sp/>and<sp/>clzll<sp/>builtins<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_MSC_VER<sp/>&amp;&amp;<sp/>!defined(FMT_BUILTIN_CLZLL)<sp/>&amp;&amp;<sp/>!defined(_MANAGED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_BitScanReverse,<sp/>_BitScanReverse64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Avoid<sp/>Clang<sp/>with<sp/>Microsoft<sp/>CodeGen&apos;s<sp/>-Wunknown-pragmas<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>intrinsic(_BitScanReverse)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>clz(uint32_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>_BitScanReverse(&amp;r,<sp/>x);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>FMT_ASSERT(x<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>analysis<sp/>complains<sp/>about<sp/>using<sp/>uninitialized<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;r&quot;,<sp/>but<sp/>the<sp/>only<sp/>way<sp/>that<sp/>can<sp/>happen<sp/>is<sp/>if<sp/>&quot;x&quot;<sp/>is<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>the<sp/>callers<sp/>guarantee<sp/>to<sp/>not<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>FMT_SUPPRESS_MSC_WARNING(6102)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>return<sp/>31<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_BUILTIN_CLZ(n)<sp/>detail::clz(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(_WIN64)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>intrinsic(_BitScanReverse64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>clzll(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>_BitScanReverse64(&amp;r,<sp/>x);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>high<sp/>32<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_BitScanReverse(&amp;r,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x<sp/>&gt;&gt;<sp/>32)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>63<sp/>-<sp/>(r<sp/>+<sp/>32);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>low<sp/>32<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>_BitScanReverse(&amp;r,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>FMT_ASSERT(x<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>analysis<sp/>complains<sp/>about<sp/>using<sp/>uninitialized<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;r&quot;,<sp/>but<sp/>the<sp/>only<sp/>way<sp/>that<sp/>can<sp/>happen<sp/>is<sp/>if<sp/>&quot;x&quot;<sp/>is<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>the<sp/>callers<sp/>guarantee<sp/>to<sp/>not<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>FMT_SUPPRESS_MSC_WARNING(6102)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>return<sp/>63<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_BUILTIN_CLZLL(n)<sp/>detail::clzll(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>deprecated<sp/>numeric<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_DEPRECATED_NUMERIC_ALIGN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_DEPRECATED_NUMERIC_ALIGN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>equivalent<sp/>of<sp/>`*reinterpret_cast&lt;Dest*&gt;(&amp;source)`<sp/>that<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>undefined<sp/>behavior<sp/>(e.g.<sp/>due<sp/>to<sp/>type<sp/>aliasing).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:<sp/>uint64_t<sp/>d<sp/>=<sp/>bit_cast&lt;uint64_t&gt;(2.718);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Dest,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Source&gt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Dest<sp/>bit_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Source&amp;<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Dest)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Source),<sp/></highlight><highlight class="stringliteral">&quot;size<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>Dest<sp/>dest;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>std::memcpy(&amp;dest,<sp/>&amp;source,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dest));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dest;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_big_endian()<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>1u;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classbytes" kindref="compound">bytes</ref><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(u)];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit_cast&lt;bytes&gt;(u).data[0]<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>fallback<sp/>implementation<sp/>of<sp/>uintptr_t<sp/>for<sp/>systems<sp/>that<sp/>lack<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="structdetail_1_1fallback__uintptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1fallback__uintptr" kindref="compound">fallback_uintptr</ref><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)];</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1fallback__uintptr" kindref="compound">fallback_uintptr</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1fallback__uintptr" kindref="compound">fallback_uintptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>bit_cast&lt;fallback_uintptr&gt;(p);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_big_endian())<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>-<sp/>1;<sp/>i<sp/>&lt;<sp/>j;<sp/>++i,<sp/>--j)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(<ref refid="classdetail_1_1value" kindref="compound">value</ref>[i],<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>[j]);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal">};</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UINTPTR_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1fallback__uintptr" kindref="compound">uintptr_t</ref><sp/>=<sp/><ref refid="structdetail_1_1fallback__uintptr" kindref="compound">::uintptr_t</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1fallback__uintptr" kindref="compound">uintptr_t</ref><sp/>to_uintptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit_cast&lt;uintptr_t&gt;(p);<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>uintptr_t<sp/>=<sp/>fallback_uintptr;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fallback_uintptr<sp/>to_uintptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fallback_uintptr(p);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>largest<sp/>possible<sp/>value<sp/>for<sp/>type<sp/>T.<sp/>Same<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>but<sp/>shorter<sp/>and<sp/>not<sp/>affected<sp/>by<sp/>the<sp/>max<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>constexpr<sp/>T<sp/>max_value()<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;T&gt;::max)();</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits()<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;T&gt;::digits;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::numeric_limits&lt;T&gt;::digits<sp/>may<sp/>return<sp/>0<sp/>for<sp/>128-bit<sp/>ints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits&lt;int128_t&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>128;<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits&lt;uint128_t&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>128;<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits&lt;fallback_uintptr&gt;()<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;unsigned<sp/>char&gt;::digits);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assume(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>(void)condition;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_HAS_BUILTIN(__builtin_assume)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>__builtin_assume(condition);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>workaround<sp/>for<sp/>gcc<sp/>4.8<sp/>to<sp/>make<sp/>void_t<sp/>work<sp/>in<sp/>a<sp/>SFINAE<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="structdetail_1_1void__t__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1void__t__impl" kindref="compound">void_t_impl</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>void;<sp/>};</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>void_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1void__t__impl" kindref="compound">detail::void_t_impl</ref>&lt;Ts...&gt;::type;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>approximation<sp/>of<sp/>iterator_t<sp/>for<sp/>pre-C++20<sp/>systems.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_t<sp/>=<sp/>decltype(std::begin(std::declval&lt;T&amp;&gt;()));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>sentinel_t<sp/>=<sp/>decltype(std::end(std::declval&lt;T&amp;&gt;()));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detect<sp/>the<sp/>iterator<sp/>category<sp/>of<sp/>*any*<sp/>given<sp/>type<sp/>in<sp/>a<sp/>SFINAE-friendly<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unfortunately,<sp/>older<sp/>implementations<sp/>of<sp/>std::iterator_traits<sp/>are<sp/>not<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>use<sp/>in<sp/>a<sp/>SFINAE-context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="316" refid="structdetail_1_1iterator__category" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1iterator__category" kindref="compound">iterator_category</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="structdetail_1_1iterator__category_3_01T_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1iterator__category" kindref="compound">iterator_category</ref>&lt;T*&gt;<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::random_access_iterator_tag;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">};</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It&gt;</highlight></codeline>
<codeline lineno="323" refid="structdetail_1_1iterator__category_3_01It_00_01void__t_3_01typename_01It_1_1iterator__category_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1iterator__category" kindref="compound">iterator_category</ref>&lt;It,<sp/>void_t&lt;typename<sp/>It::<ref refid="structdetail_1_1iterator__category" kindref="compound">iterator_category</ref>&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It::iterator_category;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detect<sp/>if<sp/>*any*<sp/>given<sp/>type<sp/>models<sp/>the<sp/>OutputIterator<sp/>concept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="classdetail_1_1is__output__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1is__output__iterator" kindref="compound">is_output_iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>mutability<sp/>because<sp/>all<sp/>iterator<sp/>categories<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::input_iterator_tag<sp/>*may*<sp/>also<sp/>meet<sp/>the<sp/>requirements<sp/>of<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OutputIterator,<sp/>thereby<sp/>falling<sp/>into<sp/>the<sp/>category<sp/>of<sp/>&apos;mutable<sp/>iterators&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[iterator.requirements.general]<sp/>clause<sp/>4.<sp/>The<sp/>compiler<sp/>reveals<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>property<sp/>only<sp/>at<sp/>the<sp/>point<sp/>of<sp/>*actually<sp/>dereferencing*<sp/>the<sp/>iterator!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>decltype(*(std::declval&lt;U&gt;()))<sp/>test(std::input_iterator_tag);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>test(std::output_iterator_tag);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>test(...);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>decltype(test&lt;It&gt;(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1iterator__category" kindref="compound">iterator_category&lt;It&gt;::type</ref>{}));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>=<sp/>!std::is_const&lt;remove_reference_t&lt;type&gt;&gt;<ref refid="classdetail_1_1value" kindref="compound">::value</ref><sp/>};</highlight></codeline>
<codeline lineno="343"><highlight class="normal">};</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>workaround<sp/>for<sp/>std::string<sp/>not<sp/>having<sp/>mutable<sp/>data()<sp/>until<sp/>C++17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Char*<sp/>get_data(std::basic_string&lt;Char&gt;&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;s[0];</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type*<sp/>get_data(Container&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.data();</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_SECURE_SCL)<sp/>&amp;&amp;<sp/>_SECURE_SCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>checked<sp/>iterator<sp/>to<sp/>avoid<sp/>MSVC<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>checked_ptr<sp/>=<sp/>stdext::checked_array_iterator&lt;T*&gt;;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>checked_ptr&lt;T&gt;<sp/>make_checked(T*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{p,<sp/>size};</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>checked_ptr<sp/>=<sp/>T*;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T*<sp/>make_checked(T*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container,<sp/>FMT_ENABLE_IF(is_contiguous&lt;Container&gt;::value)&gt;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_CLANG_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">__attribute__((no_sanitize(</highlight><highlight class="stringliteral">&quot;undefined&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>checked_ptr&lt;typename<sp/>Container::value_type&gt;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">reserve(std::back_insert_iterator&lt;Container&gt;<sp/>it,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>Container&amp;<sp/>c<sp/>=<sp/>get_container(it);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>c.size();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>c.resize(size<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_checked(get_data(c)<sp/>+<sp/>size,<sp/>n);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Iterator&amp;<sp/>reserve(Iterator&amp;<sp/>it,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container,<sp/>FMT_ENABLE_IF(is_contiguous&lt;Container&gt;::value)&gt;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::back_insert_iterator&lt;Container&gt;<sp/>base_iterator(</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;Container&gt;&amp;<sp/>it,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>checked_ptr&lt;typename<sp/>Container::value_type&gt;)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Iterator<sp/>base_iterator(Iterator,<sp/>Iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>output<sp/>iterator<sp/>that<sp/>counts<sp/>the<sp/>number<sp/>of<sp/>objects<sp/>written<sp/>to<sp/>it<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>discards<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="classdetail_1_1counting__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1counting__iterator" kindref="compound">counting_iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count_;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::output_iterator_tag;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1counting__iterator" kindref="compound">_Unchecked_type</ref><sp/>=<sp/><ref refid="classdetail_1_1counting__iterator" kindref="compound">counting_iterator</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>iterator<sp/>as<sp/>checked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="structdetail_1_1counting__iterator_1_1value__type" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1counting__iterator_1_1value__type" kindref="compound">value_type</ref><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1counting__iterator" kindref="compound">counting_iterator</ref>()<sp/>:<sp/>count_(0)<sp/>{}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_;<sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>counting_iterator&amp;<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>++count_;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>counting_iterator<sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>++*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>value_type<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal">};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="classdetail_1_1truncating__iterator__base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">truncating_iterator_base</ref><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>OutputIt<sp/>out_;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limit_;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count_;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">truncating_iterator_base</ref>(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limit)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>out_(out),<sp/>limit_(limit),<sp/>count_(0)<sp/>{}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::output_iterator_tag;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;OutputIt&gt;::value_type;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">_Unchecked_type</ref><sp/>=</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">truncating_iterator_base</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>iterator<sp/>as<sp/>checked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>OutputIt<sp/>base()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;<sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_;<sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal">};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>output<sp/>iterator<sp/>that<sp/>truncates<sp/>the<sp/>output<sp/>and<sp/>counts<sp/>the<sp/>number<sp/>of<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>written<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::is_void&lt;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;OutputIt&gt;::value_type&gt;::type&gt;</highlight></codeline>
<codeline lineno="455" refid="classdetail_1_1truncating__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="458" refid="classdetail_1_1truncating__iterator_3_01OutputIt_00_01std_1_1false__type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>&lt;OutputIt,<sp/>std::false_type&gt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">truncating_iterator_base</ref>&lt;OutputIt&gt;<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>truncating_iterator_base&lt;OutputIt&gt;::value_type<sp/>blackhole_;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>truncating_iterator_base&lt;OutputIt&gt;::value_type;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limit)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">truncating_iterator_base&lt;OutputIt&gt;</ref>(out,<sp/>limit)<sp/>{}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>&amp;<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;count_++<sp/>&lt;<sp/>this-&gt;limit_)<sp/>++this-&gt;out_;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>++*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>value_type&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;count_<sp/>&lt;<sp/>this-&gt;limit_<sp/>?<sp/>*this-&gt;out_<sp/>:<sp/>blackhole_;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">};</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="485" refid="classdetail_1_1truncating__iterator_3_01OutputIt_00_01std_1_1true__type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>&lt;OutputIt,<sp/>std::true_type&gt;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">truncating_iterator_base</ref>&lt;OutputIt&gt;<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limit)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdetail_1_1truncating__iterator__base" kindref="compound">truncating_iterator_base&lt;OutputIt&gt;</ref>(out,<sp/>limit)<sp/>{}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>&amp;<sp/>operator=(T<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;count_++<sp/>&lt;<sp/>this-&gt;limit_)<sp/>*this-&gt;out_++<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>&amp;<sp/>operator++()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>&amp;<sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1truncating__iterator" kindref="compound">truncating_iterator</ref>&amp;<sp/>operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count_code_points(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Counts<sp/>the<sp/>number<sp/>of<sp/>code<sp/>points<sp/>in<sp/>a<sp/>UTF-8<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count_code_points(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char&gt;</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_code_points<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>size<sp/>=<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();<sp/>i<sp/>!=<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((data[i]<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/>++num_code_points;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_code_points;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count_code_points(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char8_type&gt;</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_code_points(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char&gt;</ref>(</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>()),<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>code_point_index(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&lt;<sp/>size<sp/>?<sp/>n<sp/>:<sp/>size;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculates<sp/>the<sp/>index<sp/>of<sp/>the<sp/>nth<sp/>code<sp/>point<sp/>in<sp/>a<sp/>UTF-8<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>code_point_index(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char8_type&gt;</ref><sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char8_type*<sp/>data<sp/>=<sp/>s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_code_points<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>size<sp/>=<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();<sp/>i<sp/>!=<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((data[i]<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80<sp/>&amp;&amp;<sp/>++num_code_points<sp/>&gt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutChar&gt;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>needs_conversion<sp/>=<sp/>bool_constant&lt;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;typename<sp/>std::iterator_traits&lt;InputIt&gt;::value_type,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;OutChar,<sp/>char8_type&gt;::value&gt;;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutChar,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!needs_conversion&lt;InputIt,<sp/>OutChar&gt;::value)&gt;</highlight></codeline>
<codeline lineno="547"><highlight class="normal">OutputIt<sp/>copy_str(InputIt<sp/>begin,<sp/>InputIt<sp/>end,<sp/>OutputIt<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::copy(begin,<sp/>end,<sp/>it);</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutChar,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(needs_conversion&lt;InputIt,<sp/>OutChar&gt;::value)&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal">OutputIt<sp/>copy_str(InputIt<sp/>begin,<sp/>InputIt<sp/>end,<sp/>OutputIt<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform(begin,<sp/>end,<sp/>it,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">char8_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);<sp/>});</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_GRISU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_GRISU<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_grisu()<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FMT_USE_GRISU<sp/>&amp;&amp;<sp/>std::numeric_limits&lt;double&gt;::is_iec559<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="569" refid="classdetail_1_1buffer_1a28f51acf32e61f37558f6c7b8d200c05" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1buffer_1a28f51acf32e61f37558f6c7b8d200c05" kindref="member">buffer&lt;T&gt;::append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_size<sp/>=<sp/>size_<sp/>+<sp/>to_unsigned(end<sp/>-<sp/>begin);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>reserve(new_size);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>std::uninitialized_copy(begin,<sp/>end,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_checked(ptr_<sp/>+<sp/>size_,<sp/>capacity_<sp/>-<sp/>size_));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>size_<sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>characters<sp/>to<sp/>store<sp/>in<sp/>the<sp/>basic_memory_buffer<sp/>object<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>dynamic<sp/>memory<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>inline_buffer_size<sp/>=<sp/>500<sp/>};</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE<sp/>=<sp/>inline_buffer_size,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="613" refid="classbasic__memory__buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>T<sp/>store_[SIZE];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>inherit<sp/>from<sp/>Allocator<sp/>avoid<sp/>generating<sp/>type_info<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>Allocator<sp/>alloc_;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deallocate<sp/>memory<sp/>allocated<sp/>by<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deallocate()<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>data<sp/>=<sp/>this-&gt;data();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>!=<sp/>store_)<sp/>alloc_.deallocate(data,<sp/>this-&gt;capacity());</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grow(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>FMT_OVERRIDE;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reference<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc<sp/>=<sp/>Allocator())</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>alloc_(alloc)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set(store_,<sp/>SIZE);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>~<ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>()<sp/>FMT_OVERRIDE<sp/>{<sp/>deallocate();<sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>data<sp/>from<sp/>other<sp/>to<sp/>this<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>move(<ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_<sp/>=<sp/>std::move(other.alloc_);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>data<sp/>=<sp/>other.data();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>other.size(),<sp/>capacity<sp/>=<sp/>other.capacity();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>other.store_)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;set(store_,<sp/>capacity);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(other.store_,<sp/>other.store_<sp/>+<sp/>size,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::make_checked(store_,<sp/>capacity));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;set(data,<sp/>capacity);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>pointer<sp/>to<sp/>the<sp/>inline<sp/>array<sp/>so<sp/>that<sp/>delete<sp/>is<sp/>not<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>deallocating.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.set(other.store_,<sp/>0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;resize(size);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="665" refid="classbasic__memory__buffer_1ae3e8292ba2764ec68bb113cdc6c45b63" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer_1ae3e8292ba2764ec68bb113cdc6c45b63" kindref="member">basic_memory_buffer</ref>(<ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&amp;&amp;<sp/>other)<sp/>FMT_NOEXCEPT<sp/>{<sp/>move(other);<sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="672" refid="classbasic__memory__buffer_1a89e2e5da9bee8af9c487b4493c4d6327" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&amp;<sp/><ref refid="classbasic__memory__buffer_1a89e2e5da9bee8af9c487b4493c4d6327" kindref="member">operator=</ref>(<ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&amp;&amp;<sp/>other)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>move(other);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>allocator<sp/>associated<sp/>with<sp/>this<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>Allocator<sp/>get_allocator()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alloc_;<sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal">};</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="684" refid="classbasic__memory__buffer_1aef35aca4fab16eca930005b98f1f896d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbasic__memory__buffer_1aef35aca4fab16eca930005b98f1f896d" kindref="member">basic_memory_buffer&lt;T, SIZE, Allocator&gt;::grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_FUZZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>5000)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;fuzz<sp/>mode<sp/>-<sp/>won&apos;t<sp/>grow<sp/>that<sp/>much&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_capacity<sp/>=<sp/>this-&gt;capacity();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_capacity<sp/>=<sp/>old_capacity<sp/>+<sp/>old_capacity<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>new_capacity)<sp/>new_capacity<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>T*<sp/>old_data<sp/>=<sp/>this-&gt;data();</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>T*<sp/>new_data<sp/>=</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::allocator_traits&lt;Allocator&gt;::allocate(alloc_,<sp/>new_capacity);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>doesn&apos;t<sp/>throw,<sp/>so<sp/>the<sp/>raw<sp/>pointer<sp/>above<sp/>doesn&apos;t<sp/>leak.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>std::uninitialized_copy(old_data,<sp/>old_data<sp/>+<sp/>this-&gt;size(),</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::make_checked(new_data,<sp/>new_capacity));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>this-&gt;set(new_data,<sp/>new_capacity);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deallocate<sp/>must<sp/>not<sp/>throw<sp/>according<sp/>to<sp/>the<sp/>standard,<sp/>but<sp/>even<sp/>if<sp/>it<sp/>does,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>buffer<sp/>already<sp/>uses<sp/>the<sp/>new<sp/>storage<sp/>and<sp/>will<sp/>deallocate<sp/>it<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_data<sp/>!=<sp/>store_)<sp/>alloc_.deallocate(old_data,<sp/>old_capacity);</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>=<sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;char&gt;</ref>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__memory__buffer" kindref="compound">wmemory_buffer</ref><sp/>=<sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;wchar_t&gt;</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="708" refid="structis__contiguous_3_01basic__memory__buffer_3_01T_00_01SIZE_00_01Allocator_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__contiguous" kindref="compound">is_contiguous</ref>&lt;<ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer</ref>&lt;T,<sp/>SIZE,<sp/>Allocator&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal">};</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal">FMT_CLASS_API</highlight></codeline>
<codeline lineno="713" refid="classformat__error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FMT_API<sp/><ref refid="classformat__error" kindref="compound">format_error</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>:<sp/>std::runtime_error(message)<sp/>{}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::runtime_error(message)<sp/>{}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>(<ref refid="classformat__error" kindref="compound">format_error</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><ref refid="classformat__error" kindref="compound">format_error</ref>&amp;<sp/>operator=(<ref refid="classformat__error" kindref="compound">format_error</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>~<ref refid="classformat__error" kindref="compound">format_error</ref>()<sp/>FMT_NOEXCEPT<sp/>FMT_OVERRIDE;</highlight></codeline>
<codeline lineno="723"><highlight class="normal">};</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_signed<sp/>=</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>std::integral_constant&lt;bool,<sp/>std::numeric_limits&lt;T&gt;::is_signed<sp/>||</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,<sp/>int128_t&gt;::value&gt;;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>value<sp/>is<sp/>negative,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>`value<sp/>&lt;<sp/>0`<sp/>but<sp/>doesn&apos;t<sp/>produce<sp/>warnings<sp/>if<sp/>T<sp/>is<sp/>an<sp/>unsigned<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(is_</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_negative(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!is_</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_negative(T)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_supported_floating_point(T)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>float&gt;::value<sp/>&amp;&amp;<sp/>FMT_USE_FLOAT)<sp/>||</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;T,<sp/>double&gt;::value<sp/>&amp;&amp;<sp/>FMT_USE_DOUBLE)<sp/>||</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same&lt;T,<sp/>long<sp/>double&gt;::value<sp/>&amp;&amp;<sp/>FMT_USE_LONG_DOUBLE);</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Smallest<sp/>of<sp/>uint32_t,<sp/>uint64_t,<sp/>uint128_t<sp/>that<sp/>is<sp/>large<sp/>enough<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>represent<sp/>all<sp/>values<sp/>of<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>uint32_or_64_or_128_t<sp/>=</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>conditional_t&lt;num_bits&lt;T&gt;()<sp/>&lt;=<sp/>32,<sp/>uint32_t,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conditional_t&lt;num_bits&lt;T&gt;()<sp/>&lt;=<sp/>64,<sp/>uint64_t,<sp/>uint128_t&gt;&gt;;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>data<sp/>is<sp/>placed<sp/>in<sp/>this<sp/>class<sp/>template<sp/>for<sp/>the<sp/>header-only<sp/>config.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="structdetail_1_1basic__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FMT_EXTERN_TEMPLATE_API<sp/><ref refid="structdetail_1_1basic__data" kindref="compound">basic_data</ref><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>powers_of_10_64[];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>zero_or_powers_of_10_32[];</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>zero_or_powers_of_10_64[];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>pow10_significands[];</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>pow10_exponents[];</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GCC<sp/>generates<sp/>slightly<sp/>better<sp/>code<sp/>for<sp/>pairs<sp/>than<sp/>chars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>digit_pair<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[2];</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>digit_pair<sp/>digits[];</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hex_digits[];</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>foreground_color[];</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>background_color[];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>reset_color[5];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wreset_color[5];</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>signs[];</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>left_padding_shifts[5];</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>right_padding_shifts[5];</highlight></codeline>
<codeline lineno="775"><highlight class="normal">};</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_EXPORTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal">FMT_EXTERN<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1basic__data" kindref="compound">basic_data&lt;void&gt;</ref>;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>struct<sp/>rather<sp/>than<sp/>an<sp/>alias<sp/>to<sp/>avoid<sp/>shadowing<sp/>warnings<sp/>in<sp/>gcc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="structdetail_1_1data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1data" kindref="compound">data</ref><sp/>:<sp/><ref refid="structdetail_1_1basic__data" kindref="compound">basic_data&lt;&gt;</ref><sp/>{};</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CLZLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>decimal<sp/>digits<sp/>in<sp/>n.<sp/>Leading<sp/>zeros<sp/>are<sp/>not<sp/>counted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>except<sp/>for<sp/>n<sp/>==<sp/>0<sp/>in<sp/>which<sp/>case<sp/>count_digits<sp/>returns<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits(uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>benchmark<sp/>https://github.com/localvoid/cxx-benchmark-count-digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(64<sp/>-<sp/>FMT_BUILTIN_CLZLL(n<sp/>|<sp/>1))<sp/>*<sp/>1233<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>-<sp/>(n<sp/>&lt;<sp/>data::zero_or_powers_of_10_64[t])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fallback<sp/>version<sp/>of<sp/>count_digits<sp/>used<sp/>when<sp/>__builtin_clz<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits(uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>division<sp/>is<sp/>slow<sp/>so<sp/>do<sp/>it<sp/>for<sp/>a<sp/>group<sp/>of<sp/>four<sp/>digits<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>for<sp/>every<sp/>digit.<sp/>The<sp/>idea<sp/>comes<sp/>from<sp/>the<sp/>talk<sp/>by<sp/>Alexandrescu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Three<sp/>Optimization<sp/>Tips<sp/>for<sp/>C++&quot;.<sp/>See<sp/>speed-test<sp/>for<sp/>a<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>100)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>/=<sp/>10000u;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits(uint128_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>division<sp/>is<sp/>slow<sp/>so<sp/>do<sp/>it<sp/>for<sp/>a<sp/>group<sp/>of<sp/>four<sp/>digits<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>for<sp/>every<sp/>digit.<sp/>The<sp/>idea<sp/>comes<sp/>from<sp/>the<sp/>talk<sp/>by<sp/>Alexandrescu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Three<sp/>Optimization<sp/>Tips<sp/>for<sp/>C++&quot;.<sp/>See<sp/>speed-test<sp/>for<sp/>a<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>100)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>/=<sp/>10000U;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Counts<sp/>the<sp/>number<sp/>of<sp/>digits<sp/>in<sp/>n.<sp/>BITS<sp/>=<sp/>log2(radix).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BITS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits(UInt<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>++num_digits;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>&gt;&gt;=<sp/>BITS)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_digits;</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits&lt;4&gt;(<ref refid="structdetail_1_1fallback__uintptr" kindref="compound">detail::fallback_uintptr</ref><sp/>n);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>||<sp/>FMT_CLANG_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ALWAYS_INLINE<sp/>inline<sp/>__attribute__((always_inline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ALWAYS_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CLZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Optional<sp/>version<sp/>of<sp/>count_digits<sp/>for<sp/>better<sp/>performance<sp/>on<sp/>32-bit<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits(uint32_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(32<sp/>-<sp/>FMT_BUILTIN_CLZ(n<sp/>|<sp/>1))<sp/>*<sp/>1233<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>-<sp/>(n<sp/>&lt;<sp/>data::zero_or_powers_of_10_32[t])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digits10()<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;Int&gt;::digits10;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digits10&lt;int128_t&gt;()<sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>38;<sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digits10&lt;uint128_t&gt;()<sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>38;<sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_API<sp/>std::string<sp/>grouping_impl(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>grouping(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grouping_impl&lt;char&gt;(loc);</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>grouping&lt;wchar_t&gt;(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grouping_impl&lt;wchar_t&gt;(loc);</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_API<sp/>Char<sp/>thousands_sep_impl(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Char<sp/>thousands_sep(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Char(thousands_sep_impl&lt;char&gt;(loc));</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>thousands_sep(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thousands_sep_impl&lt;wchar_t&gt;(loc);</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_API<sp/>Char<sp/>decimal_point_impl(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Char<sp/>decimal_point(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Char(decimal_point_impl&lt;char&gt;(loc));</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>decimal_point(locale_ref<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decimal_point_impl&lt;wchar_t&gt;(loc);</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>characters<sp/>for<sp/>equality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs[0]<sp/>==<sp/>rhs[0]<sp/>&amp;&amp;<sp/>lhs[1]<sp/>==<sp/>rhs[1];</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memcmp(lhs,<sp/>rhs,<sp/>2)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copies<sp/>two<sp/>characters<sp/>from<sp/>src<sp/>to<sp/>dst.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy2(Char*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>*dst++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*src++);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>*dst<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*src);</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src)<sp/>{<sp/>memcpy(dst,<sp/>src,<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898" refid="structdetail_1_1format__decimal__result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1format__decimal__result" kindref="compound">format_decimal_result</ref><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>Iterator<sp/>begin;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>Iterator<sp/>end;</highlight></codeline>
<codeline lineno="901"><highlight class="normal">};</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>decimal<sp/>unsigned<sp/>integer<sp/>value<sp/>writing<sp/>into<sp/>out<sp/>pointing<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer<sp/>of<sp/>specified<sp/>size.<sp/>The<sp/>caller<sp/>must<sp/>ensure<sp/>that<sp/>the<sp/>buffer<sp/>is<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enough.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt&gt;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1format__decimal__result" kindref="compound">format_decimal_result&lt;Char*&gt;</ref><sp/>format_decimal(Char*<sp/>out,<sp/>UInt<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>FMT_ASSERT(size<sp/>&gt;=<sp/>count_digits(<ref refid="classdetail_1_1value" kindref="compound">value</ref>),<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>digit<sp/>count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>out<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>Char*<sp/>end<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>&gt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>division<sp/>is<sp/>slow<sp/>so<sp/>do<sp/>it<sp/>for<sp/>a<sp/>group<sp/>of<sp/>two<sp/>digits<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>for<sp/>every<sp/>digit.<sp/>The<sp/>idea<sp/>comes<sp/>from<sp/>the<sp/>talk<sp/>by<sp/>Alexandrescu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Three<sp/>Optimization<sp/>Tips<sp/>for<sp/>C++&quot;.<sp/>See<sp/>speed-test<sp/>for<sp/>a<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>copy2(out,<sp/>data::digits[<ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>%<sp/>100]);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>/=<sp/>100;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>*--out<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>value);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{out,<sp/>end};</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>out<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>copy2(out,<sp/>data::digits[value]);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{out,<sp/>end};</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!std::is_pointer&lt;remove_cvref_t&lt;Iterator&gt;&gt;::value)&gt;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>format_decimal_result&lt;Iterator&gt;<sp/>format_decimal(Iterator<sp/>out,<sp/>UInt<sp/>value,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>should<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>all<sp/>digits<sp/>(&lt;=<sp/>digits10<sp/>+<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>max_size<sp/>=<sp/>digits10&lt;UInt&gt;()<sp/>+<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>Char<sp/>buffer[2<sp/>*<sp/>max_size];</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>format_decimal(buffer,<sp/>value,<sp/>num_digits).end;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{out,<sp/>detail::copy_str&lt;Char&gt;(buffer,<sp/>end,<sp/>out)};</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BASE_BITS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt&gt;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Char*<sp/>format_uint(Char*<sp/>buffer,<sp/>UInt<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits,</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>num_digits;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>Char*<sp/>end<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>digits<sp/>=<sp/>upper<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;0123456789ABCDEF&quot;</highlight><highlight class="normal"><sp/>:<sp/>data::hex_digits;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>(value<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>BASE_BITS)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>*--buffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BASE_BITS<sp/>&lt;<sp/>4<sp/>?<sp/>static_cast&lt;char&gt;(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>digits[digit]);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((value<sp/>&gt;&gt;=<sp/>BASE_BITS)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BASE_BITS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">Char*<sp/>format_uint(Char*<sp/>buffer,<sp/><ref refid="structdetail_1_1fallback__uintptr" kindref="compound">detail::fallback_uintptr</ref><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>char_digits<sp/>=<sp/>std::numeric_limits&lt;unsigned<sp/>char&gt;::digits<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>(num_digits<sp/>+<sp/>char_digits<sp/>-<sp/>1)<sp/>/<sp/>char_digits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_digits<sp/>=<sp/>num_digits<sp/>%<sp/>char_digits)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>n.value[start--];</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>format_uint&lt;BASE_BITS&gt;(buffer,<sp/>value,<sp/>start_digits);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>start<sp/>&gt;=<sp/>0;<sp/>--start)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>n.value[start];</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>char_digits;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>char_digits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>(value<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>BASE_BITS)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*--p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data::hex_digits[digit]);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&gt;&gt;=<sp/>BASE_BITS;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BASE_BITS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt&gt;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>It<sp/>format_uint(It<sp/>out,<sp/>UInt<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>should<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>all<sp/>digits<sp/>(digits<sp/>/<sp/>BASE_BITS<sp/>+<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[num_bits&lt;UInt&gt;()<sp/>/<sp/>BASE_BITS<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>format_uint&lt;BASE_BITS&gt;(buffer,<sp/>value,<sp/>num_digits,<sp/>upper);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::copy_str&lt;Char&gt;(buffer,<sp/>buffer<sp/>+<sp/>num_digits,<sp/>out);</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>converter<sp/>from<sp/>UTF-8<sp/>to<sp/>UTF-16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="classdetail_1_1utf8__to__utf16" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1utf8__to__utf16" kindref="compound">utf8_to_utf16</ref><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">wmemory_buffer</ref><sp/>buffer_;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>FMT_API<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1utf8__to__utf16" kindref="compound">utf8_to_utf16</ref>(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>s);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view" kindref="compound">wstring_view</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{&amp;buffer_[0],<sp/>size()};<sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>()<sp/>-<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>c_str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;buffer_[0];<sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>std::wstring<sp/>str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{&amp;buffer_[0],<sp/>size()};<sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal">};</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997" refid="structdetail_1_1null" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1null" kindref="compound">null</ref><sp/>{};</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Workaround<sp/>an<sp/>array<sp/>initialization<sp/>issue<sp/>in<sp/>gcc<sp/>4.8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000" refid="structdetail_1_1fill__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1fill__t" kindref="compound">fill_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>max_size<sp/>=<sp/>4<sp/>};</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>Char<sp/>data_[max_size];</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>max_size)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>fill&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>data_[i]<sp/>=<sp/>s[i];</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/><ref refid="structdetail_1_1data" kindref="compound">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>Char&amp;<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[index];<sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char&amp;<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[index];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1fill__t" kindref="compound">fill_t&lt;Char&gt;</ref><sp/>make()<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fill<sp/>=<sp/><ref refid="structdetail_1_1fill__t" kindref="compound">fill_t&lt;Char&gt;</ref>();</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>fill[0]<sp/>=<sp/>Char(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>fill.size_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fill;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>use<sp/>enum<sp/>classes<sp/>as<sp/>bit<sp/>fields<sp/>because<sp/>of<sp/>a<sp/>gcc<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61414.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">align<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>type<sp/>{<sp/>none,<sp/>left,<sp/>right,<sp/>center,<sp/>numeric<sp/>};</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>align_t<sp/>=<sp/>align::type;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sign<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>type<sp/>{<sp/>none,<sp/>minus,<sp/>plus,<sp/>space<sp/>};</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>sign_t<sp/>=<sp/>sign::type;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>specifiers<sp/>for<sp/>built-in<sp/>and<sp/>string<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="structbasic__format__specs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>align_t<sp/>align<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>sign_t<sp/>sign<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alt<sp/>:<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Alternate<sp/>form<sp/>(&apos;#&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1fill__t" kindref="compound">detail::fill_t&lt;Char&gt;</ref><sp/>fill;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>()</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>width(0),</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision(-1),</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type(0),</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align(align::none),</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign(sign::none),</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alt(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill(<ref refid="structdetail_1_1fill__t" kindref="compound">detail::fill_t&lt;Char&gt;::make</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref><sp/>=<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;char&gt;</ref>;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>floating-point<sp/>presentation<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>float_format<sp/>:<sp/>unsigned<sp/>char<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>general,<sp/><sp/></highlight><highlight class="comment">//<sp/>General:<sp/>exponent<sp/>notation<sp/>or<sp/>fixed<sp/>point<sp/>based<sp/>on<sp/>magnitude.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>exp,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exponent<sp/>notation<sp/>with<sp/>the<sp/>default<sp/>precision<sp/>of<sp/>6,<sp/>e.g.<sp/>1.2e-3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>fixed,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fixed<sp/>point<sp/>with<sp/>the<sp/>default<sp/>precision<sp/>of<sp/>6,<sp/>e.g.<sp/>0.0012.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>hex</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078" refid="structdetail_1_1float__specs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1float__specs" kindref="compound">float_specs</ref><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>float_format<sp/>format<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>sign_t<sp/>sign<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>upper<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>locale<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary32<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_grisu<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showpoint<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>the<sp/>exponent<sp/>exp<sp/>in<sp/>the<sp/>form<sp/>&quot;[+-]d{2,3}&quot;<sp/>to<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It&gt;<sp/>It<sp/>write_exponent(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp,<sp/>It<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>FMT_ASSERT(-10000<sp/>&lt;<sp/>exp<sp/>&amp;&amp;<sp/>exp<sp/>&lt;<sp/>10000,<sp/></highlight><highlight class="stringliteral">&quot;exponent<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>exp<sp/>=<sp/>-exp;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>top<sp/>=<sp/>data::digits[exp<sp/>/<sp/>100];</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;=<sp/>1000)<sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(top[0]);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(top[1]);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>exp<sp/>%=<sp/>100;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>d<sp/>=<sp/>data::digits[exp];</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d[0]);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d[1]);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110" refid="classdetail_1_1float__writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1float__writer" kindref="compound">float_writer</ref><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>is<sp/>given<sp/>as<sp/>v<sp/>=<sp/>digits_<sp/>*<sp/>pow(10,<sp/>exp_).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>digits_;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits_;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp_;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1float__specs" kindref="compound">float_specs</ref><sp/>specs_;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>Char<sp/>decimal_point_;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It&gt;<sp/>It<sp/>prettify(It<sp/>it)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pow(10,<sp/>full_exp<sp/>-<sp/>1)<sp/>&lt;=<sp/>v<sp/>&lt;=<sp/>pow(10,<sp/>full_exp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>full_exp<sp/>=<sp/>num_digits_<sp/>+<sp/>exp_;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.format<sp/>==<sp/>float_format::exp)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>decimal<sp/>point<sp/>after<sp/>the<sp/>first<sp/>digit<sp/>and<sp/>add<sp/>an<sp/>exponent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*digits_);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_zeros<sp/>=<sp/>specs_.precision<sp/>-<sp/>num_digits_;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_digits_<sp/>&gt;<sp/>1<sp/>||<sp/>specs_.showpoint)<sp/>*it++<sp/>=<sp/>decimal_point_;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(digits_<sp/>+<sp/>1,<sp/>digits_<sp/>+<sp/>num_digits_,<sp/>it);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_zeros<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>specs_.showpoint)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::fill_n(it,<sp/>num_zeros,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(specs_.upper<sp/>?<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_exponent&lt;Char&gt;(full_exp<sp/>-<sp/>1,<sp/>it);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_digits_<sp/>&lt;=<sp/>full_exp)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1234e7<sp/>-&gt;<sp/>12340000000[.0+]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(digits_,<sp/>digits_<sp/>+<sp/>num_digits_,<sp/>it);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::fill_n(it,<sp/>full_exp<sp/>-<sp/>num_digits_,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.showpoint<sp/>||<sp/>specs_.precision<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/>decimal_point_;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_zeros<sp/>=<sp/>specs_.precision<sp/>-<sp/>full_exp;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_zeros<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.format<sp/>!=<sp/>float_format::fixed)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_FUZZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_zeros<sp/>&gt;<sp/>5000)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;fuzz<sp/>mode<sp/>-<sp/>avoiding<sp/>excessive<sp/>cpu<sp/>use&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::fill_n(it,<sp/>num_zeros,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full_exp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1234e-2<sp/>-&gt;<sp/>12.34[0+]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(digits_,<sp/>digits_<sp/>+<sp/>full_exp,<sp/>it);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!specs_.showpoint)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>num_digits_;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_digits<sp/>&gt;<sp/>full_exp<sp/>&amp;&amp;<sp/>digits_[num_digits<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--num_digits;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_digits<sp/>!=<sp/>full_exp)<sp/>*it++<sp/>=<sp/>decimal_point_;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy_str&lt;Char&gt;(digits_<sp/>+<sp/>full_exp,<sp/>digits_<sp/>+<sp/>num_digits,<sp/>it);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/>decimal_point_;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(digits_<sp/>+<sp/>full_exp,<sp/>digits_<sp/>+<sp/>num_digits_,<sp/>it);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.precision<sp/>&gt;<sp/>num_digits_)<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>trailing<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_zeros<sp/>=<sp/>specs_.precision<sp/>-<sp/>num_digits_;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::fill_n(it,<sp/>num_zeros,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1234e-6<sp/>-&gt;<sp/>0.001234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_zeros<sp/>=<sp/>-full_exp;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>num_digits_;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_digits<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>specs_.precision<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.precision<sp/>&lt;<sp/>num_zeros)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_zeros<sp/>=<sp/>specs_.precision;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!specs_.showpoint)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_digits<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>digits_[num_digits<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>--num_digits;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_zeros<sp/>!=<sp/>0<sp/>||<sp/>num_digits<sp/>!=<sp/>0<sp/>||<sp/>specs_.showpoint)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/>decimal_point_;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::fill_n(it,<sp/>num_zeros,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(digits_,<sp/>digits_<sp/>+<sp/>num_digits,<sp/>it);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1float__writer" kindref="compound">float_writer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>digits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp,<sp/><ref refid="structdetail_1_1float__specs" kindref="compound">float_specs</ref><sp/>specs,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char<sp/>decimal_point)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>digits_(digits),</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_digits_(num_digits),</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_(exp),</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_(specs),</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decimal_point_(decimal_point)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>full_exp<sp/>=<sp/>num_digits<sp/>+<sp/>exp<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>specs.precision<sp/>&gt;<sp/>0<sp/>?<sp/>specs.precision<sp/>:<sp/>16;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.format<sp/>==<sp/>float_format::general<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(full_exp<sp/>&gt;=<sp/>-4<sp/>&amp;&amp;<sp/>full_exp<sp/>&lt;<sp/>precision))<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs_.format<sp/>=<sp/>float_format::exp;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>=<sp/>prettify(<ref refid="classdetail_1_1counting__iterator" kindref="compound">counting_iterator</ref>()).count();</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>+=<sp/>specs.sign<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It&gt;<sp/>It<sp/>operator()(It<sp/>it)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.sign)<sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data::signs[specs_.sign]);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prettify(it);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format_float(T<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/><ref refid="structdetail_1_1float__specs" kindref="compound">float_specs</ref><sp/>specs,<sp/><ref refid="classdetail_1_1buffer" kindref="compound">buffer&lt;char&gt;</ref>&amp;<sp/>buf);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>floating-point<sp/>number<sp/>with<sp/>snprintf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snprintf_float(T<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/><ref refid="structdetail_1_1float__specs" kindref="compound">float_specs</ref><sp/>specs,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1buffer" kindref="compound">buffer&lt;char&gt;</ref>&amp;<sp/>buf);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>promote_float(T<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>promote_float(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);<sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_int_type_spec(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>spec,<sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(spec)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_dec();</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_hex();</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_bin();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_oct();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_DEPRECATED_N_SPECIFIER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_num();</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_chr();</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>error_handler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">FMT_CONSTEXPR<sp/>float_specs<sp/>parse_float_type_spec(</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,<sp/>ErrorHandler&amp;&amp;<sp/>eh<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>float_specs();</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>result.showpoint<sp/>=<sp/>specs.alt;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(specs.type)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>result.format<sp/>=<sp/>float_format::general;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>result.showpoint<sp/>|=<sp/>specs.precision<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>result.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>result.format<sp/>=<sp/>float_format::general;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>result.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>result.format<sp/>=<sp/>float_format::exp;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>result.showpoint<sp/>|=<sp/>specs.precision<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>result.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>result.format<sp/>=<sp/>float_format::fixed;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>result.showpoint<sp/>|=<sp/>specs.precision<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>result.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>result.format<sp/>=<sp/>float_format::hex;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_DEPRECATED_N_SPECIFIER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>result.locale<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_char_specs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>*<sp/>specs,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!specs)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_char();</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs-&gt;type<sp/>&amp;&amp;<sp/>specs-&gt;type<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_int();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs-&gt;align<sp/>==<sp/>align::numeric<sp/>||<sp/>specs-&gt;sign<sp/>!=<sp/>sign::none<sp/>||<sp/>specs-&gt;alt)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>specifier<sp/>for<sp/>char&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>handler.on_char();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_cstring_type_spec(Char<sp/>spec,<sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>==<sp/>0<sp/>||<sp/>spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_string();</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_pointer();</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_string_type_spec(Char<sp/>spec,<sp/>ErrorHandler&amp;&amp;<sp/>eh)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>spec<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)<sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_pointer_type_spec(Char<sp/>spec,<sp/>ErrorHandler&amp;&amp;<sp/>eh)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>spec<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339" refid="classdetail_1_1int__type__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1int__type__checker" kindref="compound">int_type_checker</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1int__type__checker" kindref="compound">int_type_checker</ref>(ErrorHandler<sp/>eh)<sp/>:<sp/>ErrorHandler(eh)<sp/>{}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dec()<sp/>{}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_hex()<sp/>{}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_bin()<sp/>{}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_oct()<sp/>{}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_num()<sp/>{}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_chr()<sp/>{}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error()<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>ErrorHandler::on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="1356" refid="classdetail_1_1char__specs__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1char__specs__checker" kindref="compound">char_specs_checker</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type_;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1char__specs__checker" kindref="compound">char_specs_checker</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type,<sp/>ErrorHandler<sp/>eh)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ErrorHandler(eh),<sp/>type_(type)<sp/>{}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_int()<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_int_type_spec(type_,<sp/><ref refid="classdetail_1_1int__type__checker" kindref="compound">int_type_checker&lt;ErrorHandler&gt;</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_char()<sp/>{}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="1371" refid="classdetail_1_1cstring__type__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1cstring__type__checker" kindref="compound">cstring_type_checker</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1cstring__type__checker" kindref="compound">cstring_type_checker</ref>(ErrorHandler<sp/>eh)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ErrorHandler(eh)<sp/>{}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_string()<sp/>{}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_pointer()<sp/>{}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal">FMT_NOINLINE<sp/>OutputIt<sp/>fill(OutputIt<sp/>it,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1fill__t" kindref="compound">fill_t&lt;Char&gt;</ref>&amp;<sp/>fill)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fill_size<sp/>=<sp/>fill.size();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fill_size<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fill_n(it,<sp/>n,<sp/>fill[0]);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>it<sp/>=<sp/>std::copy_n(fill.data(),<sp/>fill_size,<sp/>it);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>the<sp/>output<sp/>of<sp/>f,<sp/>padded<sp/>according<sp/>to<sp/>format<sp/>specifications<sp/>in<sp/>specs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size:<sp/>output<sp/>size<sp/>in<sp/>code<sp/>units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>width:<sp/>output<sp/>display<sp/>width<sp/>in<sp/>(terminal)<sp/>column<sp/>positions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;align::type<sp/>align<sp/>=<sp/>align::left,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>OutputIt<sp/>write_padded(OutputIt<sp/>out,</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>static_assert(align<sp/>==<sp/>align::left<sp/>||<sp/>align<sp/>==<sp/>align::right,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>spec_width<sp/>=<sp/>to_unsigned(specs.width);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>spec_width<sp/>&gt;<sp/>width<sp/>?<sp/>spec_width<sp/>-<sp/>width<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>shifts<sp/>=<sp/>align<sp/>==<sp/>align::left<sp/>?<sp/>data::left_padding_shifts</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data::right_padding_shifts;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>left_padding<sp/>=<sp/>padding<sp/>&gt;&gt;<sp/>shifts[specs.align];</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>reserve(out,<sp/>size<sp/>+<sp/>padding<sp/>*<sp/>specs.fill.size());</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>fill(it,<sp/>left_padding,<sp/>specs.fill);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>f(it);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>fill(it,<sp/>padding<sp/>-<sp/>left_padding,<sp/>specs.fill);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_iterator(out,<sp/>it);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;align::type<sp/>align<sp/>=<sp/>align::left,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>OutputIt<sp/>write_padded(OutputIt<sp/>out,</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_padded&lt;align&gt;(out,<sp/>specs,<sp/>size,<sp/>size,<sp/>f);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">OutputIt<sp/>write_bytes(OutputIt<sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/><ref refid="classbytes" kindref="compound">bytes</ref>,</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>remove_reference_t&lt;decltype(reserve(out,<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_padded(out,<sp/>specs,<sp/><ref refid="classbytes" kindref="compound">bytes</ref>.size(),<sp/>[<ref refid="classbytes" kindref="compound">bytes</ref>](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>data<sp/>=<sp/>bytes.data();</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>copy_str&lt;Char&gt;(data,<sp/>data<sp/>+<sp/>bytes.size(),<sp/>it);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Data<sp/>for<sp/>write_int<sp/>that<sp/>doesn&apos;t<sp/>depend<sp/>on<sp/>output<sp/>iterator<sp/>type.<sp/>It<sp/>is<sp/>used<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>avoid<sp/>template<sp/>code<sp/>bloat.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429" refid="structdetail_1_1write__int__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1write__int__data" kindref="compound">write_int_data</ref><sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>padding;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1write__int__data" kindref="compound">write_int_data</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>prefix,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs)</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size(prefix.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()<sp/>+<sp/>to_unsigned(num_digits)),<sp/>padding(0)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.align<sp/>==<sp/>align::numeric)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>to_unsigned(specs.width);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding<sp/>=<sp/>width<sp/>-<sp/>size;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.precision<sp/>&gt;<sp/>num_digits)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>prefix.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()<sp/>+<sp/>to_unsigned(specs.precision);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>padding<sp/>=<sp/>to_unsigned(specs.precision<sp/>-<sp/>num_digits);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>an<sp/>integer<sp/>in<sp/>the<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;left-padding&gt;&lt;prefix&gt;&lt;numeric-padding&gt;&lt;digits&gt;&lt;right-padding&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>&lt;digits&gt;<sp/>are<sp/>written<sp/>by<sp/>f(it).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">OutputIt<sp/>write_int(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>prefix,</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,<sp/>F<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1data" kindref="compound">data</ref><sp/>=<sp/><ref refid="structdetail_1_1write__int__data" kindref="compound">write_int_data&lt;Char&gt;</ref>(num_digits,<sp/>prefix,<sp/>specs);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>remove_reference_t&lt;decltype(reserve(out,<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_padded&lt;align::right&gt;(out,<sp/>specs,<sp/><ref refid="structdetail_1_1data" kindref="compound">data</ref>.size,<sp/>[=](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(prefix.size()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(prefix.begin(),<sp/>prefix.end(),<sp/>it);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::fill_n(it,<sp/>data.padding,<sp/>static_cast&lt;Char&gt;(</highlight><highlight class="stringliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>f(it);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StrChar,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;StrChar&gt;</ref><sp/>s,</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.precision<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>to_unsigned(specs.precision)<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>code_point_index(s,<sp/>to_unsigned(specs.precision));</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>specs.width<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>count_code_points(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;StrChar&gt;</ref>(data,<sp/>size))</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>remove_reference_t&lt;decltype(reserve(out,<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_padded(out,<sp/>specs,<sp/>size,<sp/>width,<sp/>[=](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy_str&lt;Char&gt;(data,<sp/>data<sp/>+<sp/>size,<sp/>it);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>handle_int_type_spec<sp/>handler<sp/>that<sp/>writes<sp/>an<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482" refid="structdetail_1_1int__writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1int__writer" kindref="compound">int_writer</ref><sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>OutputIt<sp/>out;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1locale__ref" kindref="compound">locale_ref</ref><sp/>locale;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>UInt<sp/>abs_value;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prefix[4];</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prefix_size;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_reference_t&lt;decltype(reserve(std::declval&lt;OutputIt&amp;&gt;(),<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>get_prefix()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>(prefix,<sp/>prefix_size);<sp/>}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1int__writer" kindref="compound">int_writer</ref>(OutputIt<sp/>output,<sp/><ref refid="classdetail_1_1locale__ref" kindref="compound">locale_ref</ref><sp/>loc,<sp/>Int<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>out(output),</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locale(loc),</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs(s),</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_value(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UInt</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classdetail_1_1value" kindref="compound">value</ref>)),</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix_size(0)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;uint32_or_64_or_128_t&lt;Int&gt;,<sp/>UInt&gt;::<ref refid="classdetail_1_1value" kindref="compound">value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_negative(<ref refid="classdetail_1_1value" kindref="compound">value</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++prefix_size;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.sign<sp/>!=<sp/>sign::none<sp/>&amp;&amp;<sp/>specs.sign<sp/>!=<sp/>sign::minus)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[0]<sp/>=<sp/>specs.sign<sp/>==<sp/>sign::plus<sp/>?<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++prefix_size;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dec()<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>count_digits(abs_value);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>write_int(</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/>num_digits,<sp/>get_prefix(),<sp/>specs,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>num_digits](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_decimal&lt;Char&gt;(it,<sp/>abs_value,<sp/>num_digits).end;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_hex()<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.alt)<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/>specs.type;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>count_digits&lt;4&gt;(abs_value);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>write_int(out,<sp/>num_digits,<sp/>get_prefix(),<sp/>specs,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>num_digits](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_uint&lt;4,<sp/>Char&gt;(it,<sp/>abs_value,<sp/>num_digits,</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.type<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_bin()<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.alt)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(specs.type);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>count_digits&lt;1&gt;(abs_value);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>write_int(out,<sp/>num_digits,<sp/>get_prefix(),<sp/>specs,</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>num_digits](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_uint&lt;1,<sp/>Char&gt;(it,<sp/>abs_value,<sp/>num_digits);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_oct()<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>count_digits&lt;3&gt;(abs_value);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.alt<sp/>&amp;&amp;<sp/>specs.precision<sp/>&lt;=<sp/>num_digits<sp/>&amp;&amp;<sp/>abs_value<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Octal<sp/>prefix<sp/>&apos;0&apos;<sp/>is<sp/>counted<sp/>as<sp/>a<sp/>digit,<sp/>so<sp/>only<sp/>add<sp/>it<sp/>if<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>write_int(out,<sp/>num_digits,<sp/>get_prefix(),<sp/>specs,</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>num_digits](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_uint&lt;3,<sp/>Char&gt;(it,<sp/>abs_value,<sp/>num_digits);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>sep_size<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_num()<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>groups<sp/>=<sp/>grouping&lt;Char&gt;(locale);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groups.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>on_dec();</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sep<sp/>=<sp/>thousands_sep&lt;Char&gt;(locale);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sep)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>on_dec();</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>count_digits(abs_value);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>num_digits,<sp/>n<sp/>=<sp/>num_digits;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::const_iterator<sp/>group<sp/>=<sp/>groups.cbegin();</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(group<sp/>!=<sp/>groups.cend()<sp/>&amp;&amp;<sp/>n<sp/>&gt;<sp/>*group<sp/>&amp;&amp;<sp/>*group<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*group<sp/>!=<sp/>max_value&lt;char&gt;())<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>sep_size;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>*group;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++group;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(group<sp/>==<sp/>groups.cend())<sp/>size<sp/>+=<sp/>sep_size<sp/>*<sp/>((n<sp/>-<sp/>1)<sp/>/<sp/>groups.back());</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>digits[40];</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>format_decimal(digits,<sp/>abs_value,<sp/>num_digits);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;Char&gt;</ref><sp/><ref refid="classdetail_1_1buffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>prefix_size;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1buffer" kindref="compound">buffer</ref>.<ref refid="classdetail_1_1buffer_1a047b15e5092d670624e39b98348725ce" kindref="member">resize</ref>(size);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s(&amp;sep,<sp/>sep_size);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>a<sp/>decimal<sp/>digit<sp/>with<sp/>the<sp/>least<sp/>significant<sp/>digit<sp/>having<sp/>index<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>group<sp/>=<sp/>groups.cbegin();</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/><ref refid="classdetail_1_1buffer" kindref="compound">buffer</ref>.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>()<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_digits<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*--p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(digits[i]);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*group<sp/>&lt;=<sp/>0<sp/>||<sp/>++digit_index<sp/>%<sp/>*group<sp/>!=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*group<sp/>==<sp/>max_value&lt;char&gt;())</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(group<sp/>+<sp/>1<sp/>!=<sp/>groups.cend())<sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++group;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>-=<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>(),<sp/>s.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>()<sp/>+<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_checked(p,<sp/>s.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefix_size<sp/>!=<sp/>0)<sp/>p[-1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>remove_reference_t&lt;decltype(reserve(out,<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1data" kindref="compound">data</ref><sp/>=<sp/><ref refid="classdetail_1_1buffer" kindref="compound">buffer</ref>.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>write_padded&lt;align::right&gt;(out,<sp/>specs,<sp/>size,<sp/>size,<sp/>[=](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy_str&lt;Char&gt;(<ref refid="structdetail_1_1data" kindref="compound">data</ref>,<sp/><ref refid="structdetail_1_1data" kindref="compound">data</ref><sp/>+<sp/>size,<sp/>it);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_chr()<sp/>{<sp/>*out++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(abs_value);<sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>FMT_NORETURN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error()<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">OutputIt<sp/>write_nonfinite(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isinf,</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1float__specs" kindref="compound">float_specs</ref>&amp;<sp/>fspecs)<sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isinf<sp/>?<sp/>(fspecs.upper<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;INF&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;inf&quot;</highlight><highlight class="normal">)<sp/>:<sp/>(fspecs.upper<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;NAN&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_size<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>fspecs.sign;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>str_size<sp/>+<sp/>(sign<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>remove_reference_t&lt;decltype(reserve(out,<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_padded(out,<sp/>specs,<sp/>size,<sp/>[=](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign)<sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data::signs[sign]);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy_str&lt;Char&gt;(str,<sp/>str<sp/>+<sp/>str_size,<sp/>it);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(std::is_floating_point&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/>T<sp/>value,<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref><sp/>specs,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locale_ref<sp/>loc<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(!is_supported_floating_point(value)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>float_specs<sp/>fspecs<sp/>=<sp/>parse_float_type_spec(specs);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>fspecs.sign<sp/>=<sp/>specs.sign;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::signbit(value))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>&lt;<sp/>0<sp/>is<sp/>false<sp/>for<sp/>NaN<sp/>so<sp/>use<sp/>signbit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>fspecs.sign<sp/>=<sp/>sign::minus;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>-value;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fspecs.sign<sp/>==<sp/>sign::minus)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>fspecs.sign<sp/>=<sp/>sign::none;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isfinite(value))</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_nonfinite(out,<sp/>std::isinf(value),<sp/>specs,<sp/>fspecs);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.align<sp/>==<sp/>align::numeric<sp/>&amp;&amp;<sp/>fspecs.sign)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>reserve(out,<sp/>1);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data::signs[fspecs.sign]);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>base_iterator(out,<sp/>it);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>fspecs.sign<sp/>=<sp/>sign::none;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.width<sp/>!=<sp/>0)<sp/>--specs.width;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fspecs.format<sp/>==<sp/>float_format::hex)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fspecs.sign)<sp/>buffer.push_back(data::signs[fspecs.sign]);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf_float(promote_float(value),<sp/>specs.precision,<sp/>fspecs,<sp/>buffer);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_bytes(out,<sp/>{buffer.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>buffer.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>()},<sp/>specs);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>specs.precision<sp/>&gt;=<sp/>0<sp/>||<sp/>!specs.type<sp/>?<sp/>specs.precision<sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fspecs.format<sp/>==<sp/>float_format::exp)<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>==<sp/>max_value&lt;int&gt;())</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++precision;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(std::is_same&lt;T,<sp/>float&gt;()))<sp/>fspecs.binary32<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>fspecs.use_grisu<sp/>=<sp/>use_grisu&lt;T&gt;();</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp<sp/>=<sp/>format_float(promote_float(value),<sp/>precision,<sp/>fspecs,<sp/>buffer);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>fspecs.precision<sp/>=<sp/>precision;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>Char<sp/>point<sp/>=</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fspecs.locale<sp/>?<sp/>decimal_point&lt;Char&gt;(loc)<sp/>:<sp/>static_cast&lt;Char&gt;(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>float_writer&lt;Char&gt;<sp/>w(buffer.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>()),<sp/>exp,</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fspecs,<sp/>point);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_padded&lt;align::right&gt;(out,<sp/>specs,<sp/>w.size(),<sp/>w);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(std::is_floating_point&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(!is_supported_floating_point(value)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fspecs<sp/>=<sp/>float_specs();</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::signbit(value))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>&lt;<sp/>0<sp/>is<sp/>false<sp/>for<sp/>NaN<sp/>so<sp/>use<sp/>signbit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>fspecs.sign<sp/>=<sp/>sign::minus;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>-value;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>specs<sp/>=<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>();</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isfinite(value))</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_nonfinite(out,<sp/>std::isinf(value),<sp/>specs,<sp/>fspecs);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(std::is_same&lt;T,<sp/>float&gt;()))<sp/>fspecs.binary32<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/>fspecs.use_grisu<sp/>=<sp/>use_grisu&lt;T&gt;();</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp<sp/>=<sp/>format_float(promote_float(value),<sp/>precision,<sp/>fspecs,<sp/>buffer);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>fspecs.precision<sp/>=<sp/>precision;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>float_writer&lt;Char&gt;<sp/>w(buffer.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>()),<sp/>exp,</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fspecs,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_iterator(out,<sp/>w(reserve(out,<sp/>w.size())));</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">OutputIt<sp/>write_char(OutputIt<sp/>out,<sp/>Char<sp/>value,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>remove_reference_t&lt;decltype(reserve(out,<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_padded(out,<sp/>specs,<sp/>1,<sp/>[=](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UIntPtr&gt;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">OutputIt<sp/>write_ptr(OutputIt<sp/>out,<sp/>UIntPtr<sp/>value,</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>*<sp/>specs)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>count_digits&lt;4&gt;(value);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>to_unsigned(num_digits)<sp/>+<sp/>size_t(2);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>remove_reference_t&lt;decltype(reserve(out,<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>write<sp/>=<sp/>[=](iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_uint&lt;4,<sp/>Char&gt;(it,<sp/>value,<sp/>num_digits);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>specs<sp/>?<sp/>write_padded&lt;align::right&gt;(out,<sp/>*specs,<sp/>size,<sp/>write)</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>base_iterator(out,<sp/>write(reserve(out,<sp/>size)));</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730" refid="structdetail_1_1is__integral" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1is__integral" kindref="compound">is_integral</ref><sp/>:<sp/>std::is_integral&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1731" refid="structdetail_1_1is__integral_3_01int128__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1is__integral" kindref="compound">is_integral</ref>&lt;<ref refid="structdetail_1_1int128__t" kindref="compound">int128_t</ref>&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1732" refid="structdetail_1_1is__integral_3_01uint128__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1is__integral" kindref="compound">is_integral</ref>&lt;<ref refid="structdetail_1_1uint128__t" kindref="compound">uint128_t</ref>&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/><ref refid="structmonostate" kindref="compound">monostate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!std::is_same&lt;Char,<sp/>char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>reserve(out,<sp/>value.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(value.begin(),<sp/>value.end(),<sp/>it);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_iterator(out,<sp/>it);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>reserve(out,<sp/>value.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>std::copy(value.begin(),<sp/>value.end(),<sp/>it);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_iterator(out,<sp/>it);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(is_integral&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;T,<sp/>bool&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;T,<sp/>Char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_or_64_or_128_t&lt;T&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negative<sp/>=<sp/>is_negative(value);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>do<sp/>-abs_value<sp/>since<sp/>it<sp/>trips<sp/>unsigned-integer-overflow<sp/>sanitizer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)<sp/>abs_value<sp/>=<sp/>~abs_value<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>count_digits(abs_value);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>reserve(out,<sp/>(negative<sp/>?<sp/>1<sp/>:<sp/>0)<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(num_digits));</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)<sp/>*it++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>format_decimal&lt;Char&gt;(it,<sp/>abs_value,<sp/>num_digits).end;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_iterator(out,<sp/>it);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write&lt;Char&gt;(out,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>(value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/>Char<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>reserve(out,<sp/>1);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>*it++<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_iterator(out,<sp/>it);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/>{</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;string<sp/>pointer<sp/>is<sp/>null&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>std::char_traits&lt;Char&gt;::length(value);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>write(out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(value,<sp/>length));</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">OutputIt<sp/>write(OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_ptr&lt;Char&gt;(out,<sp/>to_uintptr(value),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>write(OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>-&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>mapped_type_constant&lt;T,<sp/>basic_format_context&lt;OutputIt,<sp/>Char&gt;&gt;::value<sp/>==</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type::custom_type,</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputIt&gt;::type<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context&lt;OutputIt, Char&gt;</ref><sp/>ctx(out,<sp/>{},<sp/>{});</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter&lt;T&gt;</ref>().format(value,<sp/>ctx);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>argument<sp/>visitor<sp/>that<sp/>formats<sp/>the<sp/>argument<sp/>and<sp/>writes<sp/>it<sp/>via<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterator.<sp/>It&apos;s<sp/>a<sp/>class<sp/>and<sp/>not<sp/>a<sp/>generic<sp/>lambda<sp/>for<sp/>compatibility<sp/>with<sp/>C++11.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810" refid="structdetail_1_1default__arg__formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1default__arg__formatter" kindref="compound">default_arg_formatter</ref><sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">context</ref><sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context&lt;OutputIt, Char&gt;</ref>;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>OutputIt<sp/>out;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;context&gt;</ref><sp/>args;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1locale__ref" kindref="compound">locale_ref</ref><sp/>loc;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>OutputIt<sp/>operator()(T<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write&lt;Char&gt;(out,<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>OutputIt<sp/>operator()(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg_1_1handle" kindref="compound">basic_format_arg&lt;context&gt;::handle</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char&gt;</ref><sp/>parse_ctx({});</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context&lt;OutputIt, Char&gt;</ref><sp/>format_ctx(out,<sp/>args,<sp/>loc);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>handle.format(parse_ctx,<sp/>format_ctx);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_ctx.out();</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/><ref refid="structdetail_1_1error__handler" kindref="compound">error_handler</ref>&gt;</highlight></codeline>
<codeline lineno="1831" refid="classdetail_1_1arg__formatter__base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1arg__formatter__base" kindref="compound">arg_formatter_base</ref><sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>OutputIt;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref><sp/>=<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>iterator<sp/>out_;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1locale__ref" kindref="compound">locale_ref</ref><sp/>locale_;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>*<sp/>specs_;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempts<sp/>to<sp/>reserve<sp/>space<sp/>for<sp/>n<sp/>extra<sp/>characters<sp/>in<sp/>the<sp/>output<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>reserved<sp/>range<sp/>or<sp/>a<sp/>reference<sp/>to<sp/>out_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reserve(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>-&gt;<sp/>decltype(detail::reserve(out_,<sp/>n))<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::reserve(out_,<sp/>n);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reserve_iterator<sp/>=<sp/>remove_reference_t&lt;decltype(</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::reserve(std::declval&lt;iterator&amp;&gt;(),<sp/>0))&gt;;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_int(T<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>&amp;<sp/>spec)<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>uint_type<sp/>=<sp/>uint32_or_64_or_128_t&lt;T&gt;;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1int__writer" kindref="compound">int_writer&lt;iterator, Char, uint_type&gt;</ref><sp/>w(out_,<sp/>locale_,<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>,<sp/>spec);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_int_type_spec(spec.type,<sp/>w);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>w.out;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>it<sp/>=<sp/>reserve(1);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ch,<sp/>FMT_ENABLE_IF(std::is_same&lt;Ch,<sp/>Char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(Ch<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>detail::write&lt;Char&gt;(out_,<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>it<sp/>=<sp/>reserve(<ref refid="classdetail_1_1value" kindref="compound">value</ref>.size());</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>copy_str&lt;Char&gt;(<ref refid="classdetail_1_1value" kindref="compound">value</ref>.begin(),<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.end(),<sp/>it);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(<ref refid="classbasic__string__view" kindref="compound">wstring_view</ref><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;Char,<sp/>wchar_t&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>it<sp/>=<sp/>reserve(<ref refid="classdetail_1_1value" kindref="compound">value</ref>.size());</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::copy(<ref refid="classdetail_1_1value" kindref="compound">value</ref>.begin(),<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>.end(),<sp/>it);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ch&gt;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>&amp;<sp/>specs)<sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>specs.width<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>count_code_points(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Ch&gt;</ref>(s,<sp/>size))</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>write_padded(out_,<sp/>specs,<sp/>size,<sp/>width,<sp/>[=](reserve_iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy_str&lt;Char&gt;(s,<sp/>s<sp/>+<sp/>size,<sp/>it);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ch&gt;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Ch&gt;</ref><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>&amp;<sp/>specs<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>detail::write(out_,<sp/>s,<sp/>specs);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_pointer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>write_ptr&lt;char_type&gt;(out_,<sp/>to_uintptr(p),<sp/>specs_);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897" refid="structdetail_1_1arg__formatter__base_1_1char__spec__handler" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1arg__formatter__base_1_1char__spec__handler" kindref="compound">char_spec_handler</ref><sp/>:<sp/>ErrorHandler<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1arg__formatter__base" kindref="compound">arg_formatter_base</ref>&amp;<sp/><ref refid="structformatter" kindref="compound">formatter</ref>;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1arg__formatter__base_1_1char__spec__handler" kindref="compound">char_spec_handler</ref>(<ref refid="classdetail_1_1arg__formatter__base" kindref="compound">arg_formatter_base</ref>&amp;<sp/>f,<sp/>Char<sp/>val)</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structformatter" kindref="compound">formatter</ref>(f),<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>(val)<sp/>{}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_int()<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>char<sp/>is<sp/>only<sp/>formatted<sp/>as<sp/>int<sp/>if<sp/>there<sp/>are<sp/>specs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>.write_int(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classdetail_1_1value" kindref="compound">value</ref>),<sp/>*<ref refid="structformatter" kindref="compound">formatter</ref>.specs_);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_char()<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structformatter" kindref="compound">formatter</ref>.specs_)</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>.out_<sp/>=<sp/>write_char(<ref refid="structformatter" kindref="compound">formatter</ref>.out_,<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>,<sp/>*<ref refid="structformatter" kindref="compound">formatter</ref>.specs_);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>.write(<ref refid="classdetail_1_1value" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916" refid="structdetail_1_1arg__formatter__base_1_1cstring__spec__handler" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1arg__formatter__base_1_1cstring__spec__handler" kindref="compound">cstring_spec_handler</ref><sp/>:<sp/><ref refid="structdetail_1_1error__handler" kindref="compound">error_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1arg__formatter__base" kindref="compound">arg_formatter_base</ref>&amp;<sp/><ref refid="structformatter" kindref="compound">formatter</ref>;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1arg__formatter__base_1_1cstring__spec__handler" kindref="compound">cstring_spec_handler</ref>(<ref refid="classdetail_1_1arg__formatter__base" kindref="compound">arg_formatter_base</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>val)</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structformatter" kindref="compound">formatter</ref>(f),<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>(val)<sp/>{}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_string()<sp/>{<sp/><ref refid="structformatter" kindref="compound">formatter</ref>.write(<ref refid="classdetail_1_1value" kindref="compound">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_pointer()<sp/>{<sp/><ref refid="structformatter" kindref="compound">formatter</ref>.write_pointer(<ref refid="classdetail_1_1value" kindref="compound">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>iterator<sp/>out()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;<sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>*<sp/>specs()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>specs_;<sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_)</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write(<ref refid="classbasic__string__view" kindref="compound">string_view</ref>(value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">),<sp/>*specs_);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>detail::write&lt;Char&gt;(out_,<sp/>value);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;string<sp/>pointer<sp/>is<sp/>null&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>std::char_traits&lt;char_type&gt;::length(value);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>sv(value,<sp/>length);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs_<sp/>?<sp/>write(sv,<sp/>*specs_)<sp/>:<sp/>write(sv);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>arg_formatter_base(OutputIt<sp/>out,<sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>*<sp/>s,<sp/>locale_ref<sp/>loc)</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>out_(out),<sp/>locale_(loc),<sp/>specs_(s)<sp/>{}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/>iterator<sp/>operator()(<ref refid="structmonostate" kindref="compound">monostate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>argument<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/>iterator<sp/>operator()(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_)</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_int(value,<sp/>*specs_);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>detail::write&lt;Char&gt;(out_,<sp/>value);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>iterator<sp/>operator()(Char<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_char_specs(specs_,</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char_spec_handler(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value)));</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>iterator<sp/>operator()(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_<sp/>&amp;&amp;<sp/>specs_-&gt;type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(value<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>write(value<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/>iterator<sp/>operator()(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>specs<sp/>=<sp/>specs_<sp/>?<sp/>*specs_<sp/>:<sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>();</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(is_supported_floating_point(value)))</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>detail::write(out_,<sp/>value,<sp/>specs,<sp/>locale_);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>float<sp/>argument<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/>iterator<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!specs_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write(value),<sp/>out_;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_cstring_type_spec(specs_-&gt;type,<sp/>cstring_spec_handler(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value));</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>iterator<sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_)<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_string_type_spec(specs_-&gt;type,<sp/>error_handler());</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write(value,<sp/>*specs_);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write(value);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>iterator<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_)<sp/>check_pointer_type_spec(specs_-&gt;type,<sp/>error_handler());</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>write_pointer(value);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_name_start(Char<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>||<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>==<sp/>c;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>range<sp/>[begin,<sp/>end)<sp/>as<sp/>an<sp/>unsigned<sp/>integer.<sp/>This<sp/>function<sp/>assumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>range<sp/>is<sp/>non-empty<sp/>and<sp/>the<sp/>first<sp/>character<sp/>is<sp/>a<sp/>digit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_nonnegative_int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*&amp;<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler&amp;&amp;<sp/>eh)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*begin<sp/>&amp;&amp;<sp/>*begin<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>unsigned<sp/>to<sp/>prevent<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_int<sp/>=<sp/>max_value&lt;int&gt;();</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>big<sp/>=<sp/>max_int<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>big)<sp/>{</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>max_int<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>value<sp/>*<sp/>10<sp/>+<sp/>unsigned(*begin<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*begin<sp/>&amp;&amp;<sp/>*begin<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>max_int)<sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038" refid="classdetail_1_1custom__formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1custom__formatter" kindref="compound">custom_formatter</ref><sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;char_type&gt;</ref>&amp;<sp/>parse_ctx_;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/>Context&amp;<sp/>ctx_;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1custom__formatter" kindref="compound">custom_formatter</ref>(<ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;char_type&gt;</ref>&amp;<sp/>parse_ctx,</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Context&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>parse_ctx_(parse_ctx),<sp/>ctx_(ctx)<sp/>{}</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg_1_1handle" kindref="compound">basic_format_arg&lt;Context&gt;::handle</ref><sp/>h)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>h.format(parse_ctx_,<sp/>ctx_);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(T)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_integer<sp/>=</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>bool_constant&lt;is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;T,<sp/>bool&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;T,<sp/>char&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;T,<sp/>wchar_t&gt;::value&gt;;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064" refid="classdetail_1_1width__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1width__checker" kindref="compound">width_checker</ref><sp/>{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1width__checker" kindref="compound">width_checker</ref>(ErrorHandler&amp;<sp/>eh)<sp/>:<sp/>handler_(eh)<sp/>{}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">eger&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>operator()(T<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_negative(<ref refid="classdetail_1_1value" kindref="compound">value</ref>))<sp/>handler_.on_error(</highlight><highlight class="stringliteral">&quot;negative<sp/>width&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classdetail_1_1value" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">eger&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>operator()(T)<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>handler_.on_error(</highlight><highlight class="stringliteral">&quot;width<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>ErrorHandler&amp;<sp/>handler_;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084" refid="classdetail_1_1precision__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1precision__checker" kindref="compound">precision_checker</ref><sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1precision__checker" kindref="compound">precision_checker</ref>(ErrorHandler&amp;<sp/>eh)<sp/>:<sp/>handler_(eh)<sp/>{}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">eger&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>operator()(T<sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_negative(<ref refid="classdetail_1_1value" kindref="compound">value</ref>))<sp/>handler_.on_error(</highlight><highlight class="stringliteral">&quot;negative<sp/>precision&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classdetail_1_1value" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">eger&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>operator()(T)<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>handler_.on_error(</highlight><highlight class="stringliteral">&quot;precision<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/>ErrorHandler&amp;<sp/>handler_;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>format<sp/>specifier<sp/>handler<sp/>that<sp/>sets<sp/>fields<sp/>in<sp/>basic_format_specs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105" refid="classdetail_1_1specs__setter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter</ref><sp/>{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter</ref>(<ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs)</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>specs_(specs)<sp/>{}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>specs_(other.specs_)<sp/>{}</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_align(align_t<sp/>align)<sp/>{<sp/>specs_.align<sp/>=<sp/>align;<sp/>}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_fill(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>fill)<sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.fill<sp/>=<sp/>fill;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_plus()<sp/>{<sp/>specs_.sign<sp/>=<sp/>sign::plus;<sp/>}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_minus()<sp/>{<sp/>specs_.sign<sp/>=<sp/>sign::minus;<sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_space()<sp/>{<sp/>specs_.sign<sp/>=<sp/>sign::space;<sp/>}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_hash()<sp/>{<sp/>specs_.alt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_zero()<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.align<sp/>=<sp/>align::numeric;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.fill[0]<sp/>=<sp/>Char(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_width(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{<sp/>specs_.width<sp/>=<sp/>width;<sp/>}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_precision(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision)<sp/>{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.precision<sp/>=<sp/>precision;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_precision()<sp/>{}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_type(Char<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs_;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141" refid="classdetail_1_1numeric__specs__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1numeric__specs__checker" kindref="compound">numeric_specs_checker</ref><sp/>{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1numeric__specs__checker" kindref="compound">numeric_specs_checker</ref>(ErrorHandler&amp;<sp/>eh,<sp/>detail::type<sp/>arg_type)</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>error_handler_(eh),<sp/>arg_type_(arg_type)<sp/>{}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>require_numeric_argument()<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_arithmetic_type(arg_type_))</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_handler_.on_error(</highlight><highlight class="stringliteral">&quot;format<sp/>specifier<sp/>requires<sp/>numeric<sp/>argument&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_sign()<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>require_numeric_argument();</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_integral_type(arg_type_)<sp/>&amp;&amp;<sp/>arg_type_<sp/>!=<sp/>type::int_type<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_type_<sp/>!=<sp/>type::long_long_type<sp/>&amp;&amp;<sp/>arg_type_<sp/>!=<sp/>type::char_type)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_handler_.on_error(</highlight><highlight class="stringliteral">&quot;format<sp/>specifier<sp/>requires<sp/>signed<sp/>argument&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_precision()<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_integral_type(arg_type_)<sp/>||<sp/>arg_type_<sp/>==<sp/>type::pointer_type)</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_handler_.on_error(</highlight><highlight class="stringliteral">&quot;precision<sp/>not<sp/>allowed<sp/>for<sp/>this<sp/>argument<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/>ErrorHandler&amp;<sp/>error_handler_;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>detail::type<sp/>arg_type_;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>format<sp/>specifier<sp/>handler<sp/>that<sp/>checks<sp/>if<sp/>specifiers<sp/>are<sp/>consistent<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171" refid="classdetail_1_1specs__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1specs__checker" kindref="compound">specs_checker</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Handler<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1numeric__specs__checker" kindref="compound">numeric_specs_checker&lt;Handler&gt;</ref><sp/>checker_;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Suppress<sp/>an<sp/>MSVC<sp/>warning<sp/>about<sp/>using<sp/>this<sp/>in<sp/>initializer<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>Handler&amp;<sp/><ref refid="structdetail_1_1error__handler" kindref="compound">error_handler</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1specs__checker" kindref="compound">specs_checker</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Handler&amp;<sp/>handler,<sp/>detail::type<sp/>arg_type)</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Handler(handler),<sp/>checker_(<ref refid="structdetail_1_1error__handler" kindref="compound">error_handler</ref>(),<sp/>arg_type)<sp/>{}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1specs__checker" kindref="compound">specs_checker</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1specs__checker" kindref="compound">specs_checker</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Handler(other),<sp/>checker_(<ref refid="structdetail_1_1error__handler" kindref="compound">error_handler</ref>(),<sp/>other.arg_type_)<sp/>{}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_align(align_t<sp/>align)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>==<sp/>align::numeric)<sp/>checker_.require_numeric_argument();</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_align(align);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_plus()<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>checker_.check_sign();</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_plus();</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_minus()<sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>checker_.check_sign();</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_minus();</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_space()<sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>checker_.check_sign();</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_space();</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_hash()<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>checker_.require_numeric_argument();</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_hash();</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_zero()<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>checker_.require_numeric_argument();</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_zero();</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_precision()<sp/>{<sp/>checker_.check_precision();<sp/>}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Handler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatArg,</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_dynamic_spec(FormatArg<sp/>arg,<sp/>ErrorHandler<sp/>eh)<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>=<sp/>visit_format_arg(Handler&lt;ErrorHandler&gt;(eh),<sp/>arg);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdetail_1_1value" kindref="compound">value</ref><sp/>&gt;<sp/>to_unsigned(max_value&lt;int&gt;()))<sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classdetail_1_1value" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226" refid="structdetail_1_1auto__id" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1auto__id" kindref="compound">auto_id</ref><sp/>{};</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ID&gt;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::format_arg<sp/>get_arg(Context&amp;<sp/>ctx,<sp/>ID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>ctx.arg(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg)<sp/>ctx.on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>standard<sp/>format<sp/>specifier<sp/>handler<sp/>with<sp/>checking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="2237" refid="classdetail_1_1specs__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1specs__handler" kindref="compound">specs_handler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter</ref>&lt;typename<sp/>Context::char_type&gt;<sp/>{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1specs__handler" kindref="compound">specs_handler</ref>(<ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;char_type&gt;</ref>&amp;<sp/>specs,</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseContext&amp;<sp/>parse_ctx,<sp/>Context&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter&lt;char_type&gt;</ref>(specs),</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_context_(parse_ctx),</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context_(ctx)<sp/>{}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Id&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dynamic_width(Id<sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;specs_.width<sp/>=<sp/>get_dynamic_spec&lt;width_checker&gt;(</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_arg(arg_id),<sp/>context_.error_handler());</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Id&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dynamic_precision(Id<sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;specs_.precision<sp/>=<sp/>get_dynamic_spec&lt;precision_checker&gt;(</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_arg(arg_id),<sp/>context_.error_handler());</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{<sp/>context_.on_error(message);<sp/>}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>only<sp/>needed<sp/>for<sp/>compatibility<sp/>with<sp/>gcc<sp/>4.4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>format_arg<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::format_arg;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>format_arg<sp/>get_arg(<ref refid="structdetail_1_1auto__id" kindref="compound">auto_id</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_arg(context_,<sp/>parse_context_.next_arg_id());</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>format_arg<sp/>get_arg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>parse_context_.check_arg_id(arg_id);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_arg(context_,<sp/>arg_id);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>format_arg<sp/>get_arg(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>parse_context_.check_arg_id(arg_id);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_arg(context_,<sp/>arg_id);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/>ParseContext&amp;<sp/>parse_context_;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>Context&amp;<sp/>context_;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>arg_id_kind<sp/>{<sp/>none,<sp/>index,<sp/>name<sp/>};</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>argument<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284" refid="structdetail_1_1arg__ref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref</ref><sp/>{</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref</ref>()<sp/>:<sp/>kind(arg_id_kind::none),<sp/>val()<sp/>{}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>kind(arg_id_kind::index),<sp/>val(index)<sp/>{}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name)</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>kind(arg_id_kind::name),<sp/>val(name)<sp/>{}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref</ref>&amp;<sp/>operator=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/>kind<sp/>=<sp/>arg_id_kind::index;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/>val.index<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>arg_id_kind<sp/>kind;</highlight></codeline>
<codeline lineno="2299" refid="uniondetail_1_1arg__ref_1_1value" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="uniondetail_1_1arg__ref_1_1value" kindref="compound">value</ref><sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="uniondetail_1_1arg__ref_1_1value" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0)<sp/>:<sp/>index{</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">}<sp/>{}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="uniondetail_1_1arg__ref_1_1value" kindref="compound">value</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>n)<sp/>:<sp/>name(n)<sp/>{}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>}<sp/>val;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>specifiers<sp/>with<sp/>width<sp/>and<sp/>precision<sp/>resolved<sp/>at<sp/>formatting<sp/>rather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>than<sp/>parsing<sp/>time<sp/>to<sp/>allow<sp/>re-using<sp/>the<sp/>same<sp/>parsed<sp/>specifiers<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>sets<sp/>of<sp/>arguments<sp/>(precompilation<sp/>of<sp/>format<sp/>strings).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2312" refid="structdetail_1_1dynamic__format__specs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1dynamic__format__specs" kindref="compound">dynamic_format_specs</ref><sp/>:<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref&lt;Char&gt;</ref><sp/>width_ref;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref&lt;Char&gt;</ref><sp/>precision_ref;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>spec<sp/>handler<sp/>that<sp/>saves<sp/>references<sp/>to<sp/>arguments<sp/>representing<sp/>dynamic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>width<sp/>and<sp/>precision<sp/>to<sp/>be<sp/>resolved<sp/>at<sp/>formatting<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="2320" refid="classdetail_1_1dynamic__specs__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1dynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter</ref>&lt;typename<sp/>ParseContext::char_type&gt;<sp/>{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext::char_type;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1dynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref>(<ref refid="structdetail_1_1dynamic__format__specs" kindref="compound">dynamic_format_specs&lt;char_type&gt;</ref>&amp;<sp/>specs,</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseContext&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter&lt;char_type&gt;</ref>(specs),<sp/>specs_(specs),<sp/>context_(ctx)<sp/>{}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1dynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1dynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdetail_1_1specs__setter" kindref="compound">specs_setter&lt;char_type&gt;</ref>(other),</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_(other.specs_),</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context_(other.context_)<sp/>{}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Id&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dynamic_width(Id<sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.width_ref<sp/>=<sp/>make_arg_ref(arg_id);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Id&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dynamic_precision(Id<sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.precision_ref<sp/>=<sp/>make_arg_ref(arg_id);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.on_error(message);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref_type</ref><sp/>=<sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref&lt;char_type&gt;</ref>;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref_type</ref><sp/>make_arg_ref(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.check_arg_id(arg_id);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref_type</ref>(arg_id);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref_type</ref><sp/>make_arg_ref(<ref refid="structdetail_1_1auto__id" kindref="compound">auto_id</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref_type</ref>(context_.next_arg_id());</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref_type</ref><sp/>make_arg_ref(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.check_arg_id(arg_id);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>format_str(</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context_.begin(),<sp/>to_unsigned(context_.end()<sp/>-<sp/>context_.begin()));</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1arg__ref" kindref="compound">arg_ref_type</ref>(arg_id);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1dynamic__format__specs" kindref="compound">dynamic_format_specs&lt;char_type&gt;</ref>&amp;<sp/>specs_;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/>ParseContext&amp;<sp/>context_;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IDHandler&gt;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>parse_arg_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDHandler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>Char<sp/>c<sp/>=<sp/>*begin;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>handler();</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>parse_nonnegative_int(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>(*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler(index);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_name_start(c))<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>(is_name_start(c<sp/>=<sp/>*it)<sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>handler(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(begin,<sp/>to_unsigned(it<sp/>-<sp/>begin)));</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adapts<sp/>SpecHandler<sp/>to<sp/>IDHandler<sp/>API<sp/>for<sp/>dynamic<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403" refid="structdetail_1_1width__adapter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SpecHandler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1width__adapter" kindref="compound">width_adapter</ref><sp/>{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1width__adapter" kindref="compound">width_adapter</ref>(SpecHandler&amp;<sp/>h)<sp/>:<sp/>handler(h)<sp/>{}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>handler.on_dynamic_width(<ref refid="structdetail_1_1auto__id" kindref="compound">auto_id</ref>());<sp/>}</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>handler.on_dynamic_width(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_dynamic_width(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error(message);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>SpecHandler&amp;<sp/>handler;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adapts<sp/>SpecHandler<sp/>to<sp/>IDHandler<sp/>API<sp/>for<sp/>dynamic<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420" refid="structdetail_1_1precision__adapter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SpecHandler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1precision__adapter" kindref="compound">precision_adapter</ref><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1precision__adapter" kindref="compound">precision_adapter</ref>(SpecHandler&amp;<sp/>h)<sp/>:<sp/>handler(h)<sp/>{}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>handler.on_dynamic_precision(<ref refid="structdetail_1_1auto__id" kindref="compound">auto_id</ref>());<sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>handler.on_dynamic_precision(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_dynamic_precision(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error(message);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>SpecHandler&amp;<sp/>handler;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>next_code_point(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Char)<sp/>!=<sp/>1)<sp/>||<sp/>(*begin<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>(*begin<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>fill<sp/>and<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>parse_align(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>align<sp/>=<sp/>align::none;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>next_code_point(begin,<sp/>end);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>end)<sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*p))<sp/>{</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align::left;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align::right;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_DEPRECATED_NUMERIC_ALIGN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align::numeric;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align::center;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>!=<sp/>align::none)<sp/>{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>begin)<sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*begin;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>fill<sp/>character<sp/>&apos;{&apos;&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_fill(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(begin,<sp/>to_unsigned(p<sp/>-<sp/>begin)));</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_align(align);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>begin)<sp/>{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>parse_width(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*begin<sp/>&amp;&amp;<sp/>*begin<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_width(parse_nonnegative_int(begin,<sp/>end,<sp/>handler));</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_arg_id(begin,<sp/>end,<sp/>width_adapter&lt;Handler,<sp/>Char&gt;(handler));</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>parse_precision(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>begin<sp/>!=<sp/>end<sp/>?<sp/>*begin<sp/>:<sp/>Char();</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_precision(parse_nonnegative_int(begin,<sp/>end,<sp/>handler));</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_arg_id(begin,<sp/>end,<sp/>precision_adapter&lt;Handler,<sp/>Char&gt;(handler));</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;missing<sp/>precision<sp/>specifier&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/>handler.end_precision();</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>standard<sp/>format<sp/>specifiers<sp/>and<sp/>sends<sp/>notifications<sp/>about<sp/>parsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>components<sp/>to<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SpecHandler&gt;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>parse_format_specs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SpecHandler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>begin<sp/>=<sp/>parse_align(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>sign.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*begin))<sp/>{</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_plus();</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_minus();</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_space();</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_hash();</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>zero<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_zero();</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/>begin<sp/>=<sp/>parse_width(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_precision(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>handler.on_type(*begin++);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>result<sp/>via<sp/>the<sp/>out<sp/>param<sp/>to<sp/>workaround<sp/>gcc<sp/>bug<sp/>77539.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_CONSTEXPR,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr<sp/>=<sp/>const<sp/>T*&gt;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find(Ptr<sp/>first,<sp/>Ptr<sp/>last,<sp/>T<sp/>value,<sp/>Ptr&amp;<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(out<sp/>=<sp/>first;<sp/>out<sp/>!=<sp/>last;<sp/>++out)<sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*out<sp/>==<sp/>value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find&lt;false,<sp/>char&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>first,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>last,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memchr(first,<sp/>value,<sp/>detail::to_unsigned(last<sp/>-<sp/>first)));</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596" refid="structdetail_1_1id__adapter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1id__adapter" kindref="compound">id_adapter</ref><sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>Handler&amp;<sp/>handler;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_id;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>arg_id<sp/>=<sp/>handler.on_arg_id();<sp/>}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>arg_id<sp/>=<sp/>handler.on_arg_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_id<sp/>=<sp/>handler.on_arg_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error(message);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>parse_replacement_field(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>end;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*begin)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_replacement_field(handler.on_arg_id(),<sp/>begin);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>begin<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>adapter<sp/>=<sp/>id_adapter&lt;Handler,<sp/>Char&gt;{handler,<sp/>0};</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_arg_id(begin,<sp/>end,<sp/>adapter);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>begin<sp/>!=<sp/>end<sp/>?<sp/>*begin<sp/>:<sp/>Char();</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_replacement_field(adapter.arg_id,<sp/>begin);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>handler.on_format_specs(adapter.arg_id,<sp/>begin<sp/>+<sp/>1,<sp/>end);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;unknown<sp/>format<sp/>specifier&quot;</highlight><highlight class="normal">),<sp/>end;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;missing<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>end;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_CONSTEXPR,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal">FMT_CONSTEXPR_DECL<sp/>FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse_format_string(</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,<sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>format_str.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>begin<sp/>+<sp/>format_str.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>begin<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>simple<sp/>loop<sp/>instead<sp/>of<sp/>memchr<sp/>for<sp/>small<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>p<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>p<sp/>=<sp/>parse_replacement_field(p<sp/>-<sp/>1,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>end<sp/>||<sp/>*p<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;unmatched<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>p);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>++p;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>end);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">writer<sp/>{</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!find&lt;IS_CONSTEXPR&gt;(begin,<sp/>end,<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">,<sp/>p))</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler_.on_text(begin,<sp/>end);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>end<sp/>||<sp/>*p<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler_.on_error(</highlight><highlight class="stringliteral">&quot;unmatched<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler_.on_text(begin,<sp/>p);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler&amp;<sp/>handler_;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/>}<sp/>write{handler};</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doing<sp/>two<sp/>passes<sp/>with<sp/>memchr<sp/>(one<sp/>for<sp/>&apos;{&apos;<sp/>and<sp/>another<sp/>for<sp/>&apos;}&apos;)<sp/>is<sp/>up<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.5x<sp/>faster<sp/>than<sp/>the<sp/>naive<sp/>one-pass<sp/>implementation<sp/>on<sp/>big<sp/>format<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!find&lt;IS_CONSTEXPR&gt;(begin<sp/>+<sp/>1,<sp/>end,<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">,<sp/>p))</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write(begin,<sp/>end);</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>write(begin,<sp/>p);</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_replacement_field(p,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext::char_type*<sp/>parse_format_specs(</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>ParseContext&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext::char_type;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">buffer_context&lt;char_type&gt;</ref>;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>mapped_type<sp/>=</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conditional_t&lt;detail::mapped_type_constant&lt;T,<sp/>context&gt;::value<sp/>!=</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type::custom_type,</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(arg_mapper&lt;context&gt;().map(std::declval&lt;T&gt;())),<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>conditional_t&lt;has_formatter&lt;mapped_type,<sp/>context&gt;::value,</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter&lt;mapped_type, char_type&gt;</ref>,</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1fallback__formatter" kindref="compound">detail::fallback_formatter&lt;T, char_type&gt;</ref>&gt;();</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f.parse(ctx);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="2703" refid="structdetail_1_1format__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1format__handler" kindref="compound">format_handler</ref><sp/>:<sp/><ref refid="structdetail_1_1error__handler" kindref="compound">detail::error_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char&gt;</ref><sp/>parse_context;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>Context<sp/>context;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1format__handler" kindref="compound">format_handler</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter::iterator<sp/>out,</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>str,</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;Context&gt;</ref><sp/><ref refid="structformat__args" kindref="compound">format_args</ref>,<sp/><ref refid="classdetail_1_1locale__ref" kindref="compound">detail::locale_ref</ref><sp/>loc)</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>parse_context(str),<sp/>context(out,<sp/><ref refid="structformat__args" kindref="compound">format_args</ref>,<sp/>loc)<sp/>{}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_text(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>to_unsigned(end<sp/>-<sp/>begin);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>context.out();</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>it<sp/>=<sp/>reserve(out,<sp/>size);</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::copy_n(begin,<sp/>size,<sp/>it);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>context.advance_to(out);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_arg_id()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse_context.<ref refid="classbasic__format__parse__context_1a75c83556b48d6b5ee7b4866296888727" kindref="member">next_arg_id</ref>();<sp/>}</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_arg_id(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse_context.<ref refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" kindref="member">check_arg_id</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>id;<sp/>}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_arg_id(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_id<sp/>=<sp/>context.arg_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_id<sp/>&lt;<sp/>0)<sp/>on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg_id;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_replacement_field(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*)<sp/>{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>get_arg(context,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>context.advance_to(visit_format_arg(</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1default__arg__formatter" kindref="compound">default_arg_formatter&lt;typename ArgFormatter::iterator, Char&gt;</ref>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.out(),<sp/>context.args(),<sp/>context.locale()},</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg));</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>on_format_specs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>advance_to(parse_context,<sp/>begin);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>get_arg(context,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1custom__formatter" kindref="compound">custom_formatter&lt;Context&gt;</ref><sp/>f(parse_context,<sp/>context);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visit_format_arg(f,<sp/>arg))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse_context.<ref refid="classbasic__format__parse__context_1a3aedbd66520975bb680d427778f636a5" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref><sp/>specs;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>parse_context_t<sp/>=<sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1specs__checker" kindref="compound">specs_checker&lt;specs_handler&lt;parse_context_t, Context&gt;</ref>&gt;<sp/>handler(</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1specs__handler" kindref="compound">specs_handler&lt;parse_context_t, Context&gt;</ref>(specs,<sp/>parse_context,<sp/>context),</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.type());</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_format_specs(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>on_error(</highlight><highlight class="stringliteral">&quot;missing<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>advance_to(parse_context,<sp/>begin);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>context.advance_to(</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visit_format_arg(ArgFormatter(context,<sp/>&amp;parse_context,<sp/>&amp;specs),<sp/>arg));</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>parse<sp/>context<sp/>with<sp/>extra<sp/>argument<sp/>id<sp/>checks.<sp/>It<sp/>is<sp/>only<sp/>used<sp/>at<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time<sp/>because<sp/>adding<sp/>checks<sp/>at<sp/>runtime<sp/>would<sp/>introduce<sp/>substantial<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>would<sp/>be<sp/>redundant<sp/>since<sp/>argument<sp/>ids<sp/>are<sp/>checked<sp/>when<sp/>arguments<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>retrieved<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>error_handler&gt;</highlight></codeline>
<codeline lineno="2760" refid="classdetail_1_1compile__parse__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1compile__parse__context" kindref="compound">compile_parse_context</ref></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context</ref>&lt;Char,<sp/>ErrorHandler&gt;<sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_args_;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">base</ref><sp/>=<sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char, ErrorHandler&gt;</ref>;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1compile__parse__context" kindref="compound">compile_parse_context</ref>(</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_args<sp/>=<sp/>max_value&lt;int&gt;(),</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler<sp/>eh<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classbasic__format__parse__context" kindref="compound">base</ref>(format_str,<sp/>eh),<sp/>num_args_(num_args)<sp/>{}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_arg_id()<sp/>{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classbasic__format__parse__context_1a75c83556b48d6b5ee7b4866296888727" kindref="member">base::next_arg_id</ref>();</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>num_args_)<sp/>this-&gt;on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_arg_id(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" kindref="member">base::check_arg_id</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>num_args_)<sp/>this-&gt;on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" kindref="member">base::check_arg_id</ref>;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2786" refid="classdetail_1_1format__string__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1format__string__checker" kindref="compound">format_string_checker</ref><sp/>{</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classdetail_1_1format__string__checker" kindref="compound">format_string_checker</ref>(</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,<sp/>ErrorHandler<sp/>eh)</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>context_(format_str,<sp/>num_args,<sp/>eh),</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_funcs_{&amp;parse_format_specs&lt;Args,<sp/>parse_context_type&gt;...}<sp/>{}</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_text(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*)<sp/>{}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_arg_id()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context_.next_arg_id();<sp/>}</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_arg_id(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context_.check_arg_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>id;<sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>on_arg_id(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/>on_error(</highlight><highlight class="stringliteral">&quot;compile-time<sp/>checks<sp/>don&apos;t<sp/>support<sp/>named<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_replacement_field(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*)<sp/>{}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>on_format_specs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*)<sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>advance_to(context_,<sp/>begin);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>num_args<sp/>?<sp/>parse_funcs_[id](context_)<sp/>:<sp/>begin;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.on_error(message);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1compile__parse__context" kindref="compound">parse_context_type</ref><sp/>=<sp/><ref refid="classdetail_1_1compile__parse__context" kindref="compound">compile_parse_context&lt;Char, ErrorHandler&gt;</ref>;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>num_args<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>};</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>specifier<sp/>parsing<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>parse_func<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>(*)(<ref refid="classdetail_1_1compile__parse__context" kindref="compound">parse_context_type</ref>&amp;);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1compile__parse__context" kindref="compound">parse_context_type</ref><sp/>context_;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>parse_func<sp/>parse_funcs_[num_args<sp/>&gt;<sp/>0<sp/>?<sp/>num_args<sp/>:<sp/>1];</highlight></codeline>
<codeline lineno="2823"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>string<sp/>literals<sp/>to<sp/>basic_string_view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal">FMT_CONSTEXPR<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>compile_string_to_view(</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>(&amp;s)[N])<sp/>{</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>null<sp/>character<sp/>if<sp/>needed.<sp/>Won&apos;t<sp/>be<sp/>present<sp/>if<sp/>this<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>raw<sp/>character<sp/>array<sp/>(i.e.<sp/>not<sp/>defined<sp/>as<sp/>a<sp/>string).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s,</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>-<sp/>((std::char_traits&lt;Char&gt;::to_int_type(s[N<sp/>-<sp/>1])<sp/>==<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>0)};</highlight></codeline>
<codeline lineno="2833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>string_view<sp/>to<sp/>basic_string_view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal">FMT_CONSTEXPR<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>compile_string_to_view(</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_string_view&lt;Char&gt;&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s.data(),<sp/>s.size()};</highlight></codeline>
<codeline lineno="2840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_STRING_IMPL(s,<sp/>base)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2843"><highlight class="preprocessor"><sp/><sp/>[]<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>a<sp/>macro-like<sp/>name<sp/>to<sp/>avoid<sp/>shadowing<sp/>warnings.<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2845"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>FMT_COMPILE_STRING<sp/>:<sp/>base<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>char_type<sp/>=<sp/>fmt::remove_cvref_t&lt;decltype(s[0])&gt;;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2847"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_MAYBE_UNUSED<sp/>FMT_CONSTEXPR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2848"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>fmt::basic_string_view&lt;char_type&gt;()<sp/>const<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fmt::detail::compile_string_to_view&lt;char_type&gt;(s);<sp/>\</highlight></codeline>
<codeline lineno="2850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>FMT_COMPILE_STRING();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2853"><highlight class="preprocessor"><sp/><sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="preprocessor">#define<sp/>FMT_STRING(s)<sp/>FMT_STRING_IMPL(s,<sp/>fmt::compile_string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;(<ref refid="structis__compile__string" kindref="compound">is_compile_string&lt;S&gt;::value</ref>),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_format_string(S<sp/>format_str)<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>to_string_view(format_str);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>checker<sp/>=<sp/>format_string_checker&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S::char_type,<sp/>error_handler,</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_cvref_t&lt;Args&gt;...&gt;;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invalid_format<sp/>=</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(parse_format_string&lt;true&gt;(s,<sp/>checker(s,<sp/>{})),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/>(void)invalid_format;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Handler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_dynamic_spec(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>value,<sp/>arg_ref&lt;typename<sp/>Context::char_type&gt;<sp/>ref,</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Context&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ref.kind)<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arg_id_kind::none:</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arg_id_kind::index:</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::get_dynamic_spec&lt;Handler&gt;(ctx.arg(ref.val.index),</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.error_handler());</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>arg_id_kind::name:</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::get_dynamic_spec&lt;Handler&gt;(ctx.arg(ref.val.name),</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.error_handler());</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>format_func<sp/>=<sp/>void<sp/>(*)(<ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer&lt;char&gt;</ref>&amp;,<sp/>int,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_error_code(buffer&lt;char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_error(format_func<sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2905" refid="classdetail_1_1arg__formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1arg__formatter" kindref="compound">arg_formatter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1arg__formatter__base" kindref="compound">arg_formatter_base</ref>&lt;OutputIt,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1arg__formatter__base" kindref="compound">base</ref><sp/>=<sp/><ref refid="classdetail_1_1arg__formatter__base" kindref="compound">arg_formatter_base&lt;OutputIt, Char&gt;</ref>;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">context_type</ref><sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context&lt;OutputIt, Char&gt;</ref>;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">context_type</ref>&amp;<sp/>ctx_;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;char_type&gt;</ref>*<sp/>parse_ctx_;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>ptr_;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>base::iterator;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>format_specs<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">base::format_specs</ref>;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926" refid="classdetail_1_1arg__formatter_1a5b8ddbd121a2302fe93e871eee909620" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1arg__formatter_1a5b8ddbd121a2302fe93e871eee909620" kindref="member">arg_formatter</ref>(</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">context_type</ref>&amp;<sp/>ctx,</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;char_type&gt;</ref>*<sp/>parse_ctx<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>format_specs*<sp/>specs<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdetail_1_1arg__formatter__base" kindref="compound">base</ref>(ctx.out(),<sp/>specs,<sp/>ctx.locale()),</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx_(ctx),</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_ctx_(parse_ctx),</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_(ptr)<sp/>{}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base::operator();</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2938" refid="classdetail_1_1arg__formatter_1a97e9b6a655e16e2d1c1cb752ea848959" refkind="member"><highlight class="normal"><sp/><sp/>iterator<sp/><ref refid="classdetail_1_1arg__formatter_1a97e9b6a655e16e2d1c1cb752ea848959" kindref="member">operator()</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg_1_1handle" kindref="compound">basic_format_arg&lt;context_type&gt;::handle</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr_)<sp/>advance_to(*parse_ctx_,<sp/>ptr_);</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/>handle.format(*parse_ctx_,<sp/>ctx_);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx_.out();</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2943"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2944"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>arg_formatter<sp/><ref refid="classdetail_1_1arg__formatter" kindref="compound">FMT_DEPRECATED_ALIAS</ref><sp/>=</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1arg__formatter" kindref="compound">detail::arg_formatter&lt;OutputIt, Char&gt;</ref>;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal">FMT_CLASS_API</highlight></codeline>
<codeline lineno="2955" refid="classsystem__error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FMT_API<sp/><ref refid="classsystem__error" kindref="compound">system_error</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_code,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,<sp/><ref refid="structformat__args" kindref="compound">format_args</ref><sp/>args);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code_;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>()<sp/>:<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>error_code_(0)<sp/>{}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2984" refid="classsystem__error_1a6761fd4c8604a59a7c79f6bfdfaf25cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsystem__error_1a6761fd4c8604a59a7c79f6bfdfaf25cb" kindref="member">system_error</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/>init(<ref refid="classerror__code" kindref="compound">error_code</ref>,<sp/>message,<sp/>make_format_args(args...));</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>(<ref refid="classsystem__error" kindref="compound">system_error</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><ref refid="classsystem__error" kindref="compound">system_error</ref>&amp;<sp/>operator=(<ref refid="classsystem__error" kindref="compound">system_error</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/>~<ref refid="classsystem__error" kindref="compound">system_error</ref>()<sp/>FMT_NOEXCEPT<sp/>FMT_OVERRIDE;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error_code_;<sp/>}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_system_error(<ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer&lt;char&gt;</ref>&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reports<sp/>a<sp/>system<sp/>error<sp/>without<sp/>throwing<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>used<sp/>to<sp/>report<sp/>errors<sp/>from<sp/>destructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_system_error(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classerror__code" kindref="compound">error_code</ref>,</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022" refid="classformat__int" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classformat__int" kindref="compound">format_int</ref><sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>should<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>all<sp/>digits<sp/>(digits10<sp/>+<sp/>1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>sign<sp/>and<sp/>a<sp/>null<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>buffer_size<sp/>=<sp/>std::numeric_limits&lt;unsigned<sp/>long<sp/>long&gt;::digits10<sp/>+<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer_[buffer_size];</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str_;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format_unsigned(UInt<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">detail::uint32_or_64_or_128_t&lt;UInt&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::format_decimal(buffer_,<sp/>n,<sp/>buffer_size<sp/>-<sp/>1).begin;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format_signed(Int<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">detail::uint32_or_64_or_128_t&lt;Int&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negative<sp/>=<sp/>value<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)<sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>format_unsigned(abs_value);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)<sp/>*--begin<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__int" kindref="compound">format_int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>str_(format_signed(value))<sp/>{}</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__int" kindref="compound">format_int</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>str_(format_signed(value))<sp/>{}</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__int" kindref="compound">format_int</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>str_(format_signed(value))<sp/>{}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__int" kindref="compound">format_int</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>str_(format_unsigned(value))<sp/>{}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__int" kindref="compound">format_int</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>str_(format_unsigned(value))<sp/>{}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classformat__int" kindref="compound">format_int</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>str_(format_unsigned(value))<sp/>{}</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3054" refid="classformat__int_1af8b6ce4916195c8c0d0f20496eaa3dc7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classformat__int_1af8b6ce4916195c8c0d0f20496eaa3dc7" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::to_unsigned(buffer_<sp/>-<sp/>str_<sp/>+<sp/>buffer_size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3062" refid="classformat__int_1a4ecc95eeed01911d1e2dcc4fabc5df5a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classformat__int_1a4ecc95eeed01911d1e2dcc4fabc5df5a" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;<sp/>}</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068" refid="classformat__int_1a0ae1671f3ddacb00738133f29549b724" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classformat__int_1a0ae1671f3ddacb00738133f29549b724" kindref="member">c_str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_[buffer_size<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078" refid="classformat__int_1ab14204962423d35a320f15e673b08e06" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classformat__int_1ab14204962423d35a320f15e673b08e06" kindref="member">str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(str_,<sp/>size());<sp/>}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatter<sp/>specialization<sp/>for<sp/>the<sp/>core<sp/>types<sp/>corresponding<sp/>to<sp/>detail::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3084" refid="structformatter_3_01T_00_01Char_00_01enable__if__t_3_01detail_1_1type__constant_3_01T_00_01Char_67602321fdfe0eb9cff36125517f1a34" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;T,<sp/>Char,</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;detail::type_constant&lt;T,<sp/>Char&gt;::value<sp/>!=</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::type::custom_type&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="structformatter" kindref="compound">formatter</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>format<sp/>specifiers<sp/>stopping<sp/>either<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>range<sp/>or<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>terminating<sp/>&apos;}&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>handler_type<sp/>=<sp/><ref refid="classdetail_1_1dynamic__specs__handler" kindref="compound">detail::dynamic_specs_handler&lt;ParseContext&gt;</ref>;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/><ref refid="structdetail_1_1type__constant" kindref="compound">detail::type_constant&lt;T, Char&gt;::value</ref>;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1specs__checker" kindref="compound">detail::specs_checker&lt;handler_type&gt;</ref><sp/>handler(handler_type(specs_,<sp/>ctx),</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>parse_format_specs(ctx.begin(),<sp/>ctx.end(),<sp/>handler);</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eh<sp/>=<sp/>ctx.error_handler();</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::none_type:</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>argument<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::int_type:</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::uint_type:</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::long_long_type:</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::ulong_long_type:</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::int128_type:</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::uint128_type:</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::bool_type:</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handle_int_type_spec(specs_.type,</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1int__type__checker" kindref="compound">detail::int_type_checker</ref>&lt;decltype(eh)&gt;(eh));</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::char_type:</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handle_char_specs(</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;specs_,<sp/><ref refid="classdetail_1_1char__specs__checker" kindref="compound">detail::char_specs_checker</ref>&lt;decltype(eh)&gt;(specs_.type,<sp/>eh));</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::float_type:</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::const_check(FMT_USE_FLOAT))</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::parse_float_type_spec(specs_,<sp/>eh);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;float<sp/>support<sp/>disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::double_type:</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::const_check(FMT_USE_DOUBLE))</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::parse_float_type_spec(specs_,<sp/>eh);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;double<sp/>support<sp/>disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::long_double_type:</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::const_check(FMT_USE_LONG_DOUBLE))</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::parse_float_type_spec(specs_,<sp/>eh);</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;long<sp/>double<sp/>support<sp/>disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::cstring_type:</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::handle_cstring_type_spec(</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.type,<sp/><ref refid="classdetail_1_1cstring__type__checker" kindref="compound">detail::cstring_type_checker</ref>&lt;decltype(eh)&gt;(eh));</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::string_type:</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::check_string_type_spec(specs_.type,<sp/>eh);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::pointer_type:</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::check_pointer_type_spec(specs_.type,<sp/>eh);</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::custom_type:</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Custom<sp/>format<sp/>specifiers<sp/>should<sp/>be<sp/>checked<sp/>in<sp/>parse<sp/>functions<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>formatter<sp/>specializations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::handle_dynamic_spec&lt;detail::width_checker&gt;(specs_.width,</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.width_ref,<sp/>ctx);</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::handle_dynamic_spec&lt;detail::precision_checker&gt;(</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.precision,<sp/>specs_.precision_ref,<sp/>ctx);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>af<sp/>=<sp/><ref refid="classdetail_1_1arg__formatter" kindref="compound">detail::arg_formatter</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::iterator,</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::char_type&gt;;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visit_format_arg(af(ctx,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;specs_),</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::make_arg&lt;FormatContext&gt;(val));</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1dynamic__format__specs" kindref="compound">detail::dynamic_format_specs&lt;Char&gt;</ref><sp/>specs_;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FORMAT_AS(Type,<sp/>Base)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3170"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>Char&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3171"><highlight class="preprocessor"><sp/><sp/>struct<sp/>formatter&lt;Type,<sp/>Char&gt;<sp/>:<sp/>formatter&lt;Base,<sp/>Char&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>FormatContext&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>format(Type<sp/>const&amp;<sp/>val,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.out())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>formatter&lt;Base,<sp/>Char&gt;::format(val,<sp/>ctx);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3176"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal">FMT_FORMAT_AS(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">FMT_FORMAT_AS(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal">FMT_FORMAT_AS(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal">FMT_FORMAT_AS(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal">FMT_FORMAT_AS(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal">FMT_FORMAT_AS(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal">FMT_FORMAT_AS(Char*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">FMT_FORMAT_AS(std::basic_string&lt;Char&gt;,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">FMT_FORMAT_AS(std::nullptr_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="3187"><highlight class="normal">FMT_FORMAT_AS(<ref refid="structdetail_1_1std__string__view" kindref="compound">detail::std_string_view&lt;Char&gt;</ref>,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>);</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3190" refid="structformatter_3_01void_01_5_00_01Char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;void*,<sp/>Char&gt;<sp/>:<sp/><ref refid="structformatter" kindref="compound">formatter&lt;const void*, Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter&lt;const void*, Char&gt;::format</ref>(val,<sp/>ctx);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="3198" refid="structformatter_3_01Char_0fN_0e_00_01Char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;Char[N],<sp/>Char&gt;<sp/>:<sp/><ref refid="structformatter" kindref="compound">formatter</ref>&lt;basic_string_view&lt;Char&gt;,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>val,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter&lt;basic_string_view&lt;Char&gt;</ref>,<sp/>Char&gt;::format(val,<sp/>ctx);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatter<sp/>for<sp/>types<sp/>known<sp/>only<sp/>at<sp/>run<sp/>time<sp/>such<sp/>as<sp/>variant<sp/>alternatives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>using<sp/>variant<sp/>=<sp/>std::variant&lt;int,<sp/>std::string&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>template<sp/>&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>struct<sp/>formatter&lt;variant&gt;:<sp/>dynamic_formatter&lt;&gt;<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>format(buffer<sp/>&amp;buf,<sp/>const<sp/>variant<sp/>&amp;v,<sp/>context<sp/>&amp;ctx)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>visit([&amp;](const<sp/>auto<sp/>&amp;val)<sp/>{<sp/>format(buf,<sp/>val,<sp/>ctx);<sp/>},<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215" refid="classdynamic__formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdynamic__formatter" kindref="compound">dynamic_formatter</ref><sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3217" refid="structdynamic__formatter_1_1null__handler" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynamic__formatter_1_1null__handler" kindref="compound">null_handler</ref><sp/>:<sp/><ref refid="structdetail_1_1error__handler" kindref="compound">detail::error_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_align(align_t)<sp/>{}</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_plus()<sp/>{}</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_minus()<sp/>{}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_space()<sp/>{}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_hash()<sp/>{}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>format_str_<sp/>=<sp/>ctx.begin();</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>are<sp/>deferred<sp/>to<sp/>formatting<sp/>time<sp/>when<sp/>the<sp/>argument<sp/>type<sp/>is<sp/>known.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1dynamic__specs__handler" kindref="compound">detail::dynamic_specs_handler&lt;ParseContext&gt;</ref><sp/>handler(specs_,<sp/>ctx);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse_format_specs(ctx.begin(),<sp/>ctx.end(),<sp/>handler);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_specs(ctx);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1specs__checker" kindref="compound">detail::specs_checker&lt;null_handler&gt;</ref><sp/>checker(</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null_handler(),<sp/><ref refid="structdetail_1_1type__constant" kindref="compound">detail::mapped_type_constant&lt;T, FormatContext&gt;::value</ref>);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/>checker.on_align(specs_.align);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(specs_.sign)<sp/>{</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>sign::none:</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>sign::plus:</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checker.on_plus();</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>sign::minus:</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checker.on_minus();</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>sign::space:</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checker.on_space();</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.alt)<sp/>checker.on_hash();</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.precision<sp/>&gt;=<sp/>0)<sp/>checker.end_precision();</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>af<sp/>=<sp/><ref refid="classdetail_1_1arg__formatter" kindref="compound">detail::arg_formatter</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::iterator,</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::char_type&gt;;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/>visit_format_arg(af(ctx,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;specs_),</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::make_arg&lt;FormatContext&gt;(val));</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.out();</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_specs(Context&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::handle_dynamic_spec&lt;detail::width_checker&gt;(specs_.width,</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.width_ref,<sp/>ctx);</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::handle_dynamic_spec&lt;detail::precision_checker&gt;(</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.precision,<sp/>specs_.precision_ref,<sp/>ctx);</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1dynamic__format__specs" kindref="compound">detail::dynamic_format_specs&lt;Char&gt;</ref><sp/>specs_;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>format_str_;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>advance_to(</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char, ErrorHandler&gt;</ref>&amp;<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classbasic__format__parse__context_1ac123ab6c1c6e58db3ab0a917def4add8" kindref="member">advance_to</ref>(ctx.<ref refid="classbasic__format__parse__context_1a3aedbd66520975bb680d427778f636a5" kindref="member">begin</ref>()<sp/>+<sp/>(p<sp/>-<sp/>&amp;*ctx.<ref refid="classbasic__format__parse__context_1a3aedbd66520975bb680d427778f636a5" kindref="member">begin</ref>()));</highlight></codeline>
<codeline lineno="3278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::iterator<sp/>vformat_to(</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter::iterator<sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;Context&gt;</ref><sp/>args,</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1locale__ref" kindref="compound">detail::locale_ref</ref><sp/>loc<sp/>=<sp/><ref refid="classdetail_1_1locale__ref" kindref="compound">detail::locale_ref</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format_str.<ref refid="classbasic__string__view_1af8b4574d3a39883f409c858fc1006664" kindref="member">size</ref>()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>detail::equal2(format_str.<ref refid="classbasic__string__view_1adb4ff9b1829cfa037f579b09da4af32f" kindref="member">data</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>args.<ref refid="classbasic__format__args_1a1b8d2230711409b52799cf4b4c3327fe" kindref="member">get</ref>(0);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg)<sp/><ref refid="structdetail_1_1error__handler" kindref="compound">detail::error_handler</ref>().on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter::iterator;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visit_format_arg(</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1default__arg__formatter" kindref="compound">detail::default_arg_formatter&lt;iterator, Char&gt;</ref>{out,<sp/>args,<sp/>loc},<sp/>arg);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1format__handler" kindref="compound">detail::format_handler&lt;ArgFormatter, Char, Context&gt;</ref><sp/>h(out,<sp/>format_str,<sp/>args,</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc);</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/>detail::parse_format_string&lt;false&gt;(format_str,<sp/>h);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h.context.out();</highlight></codeline>
<codeline lineno="3297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Casts<sp/>``p``<sp/>to<sp/>``const<sp/>void*``<sp/>for<sp/>pointer<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>s<sp/>=<sp/>format(&quot;{}&quot;,<sp/>ptr(p));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.get();</highlight></codeline>
<codeline lineno="3305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;T&gt;&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.get();</highlight></codeline>
<codeline lineno="3308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310" refid="classbytes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbytes" kindref="compound">bytes</ref><sp/>{</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>data_;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;<ref refid="classbytes" kindref="compound">bytes</ref>&gt;;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classbytes" kindref="compound">bytes</ref>(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>data)<sp/>:<sp/>data_(data)<sp/>{}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight></codeline>
<codeline lineno="3319" refid="structformatter_3_01bytes_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;<ref refid="classbytes" kindref="compound">bytes</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>handler_type<sp/>=<sp/><ref refid="classdetail_1_1dynamic__specs__handler" kindref="compound">detail::dynamic_specs_handler&lt;ParseContext&gt;</ref>;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1specs__checker" kindref="compound">detail::specs_checker&lt;handler_type&gt;</ref><sp/>handler(handler_type(specs_,<sp/>ctx),</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::type::string_type);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>parse_format_specs(ctx.begin(),<sp/>ctx.end(),<sp/>handler);</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::check_string_type_spec(specs_.type,<sp/>ctx.error_handler());</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(<ref refid="classbytes" kindref="compound">bytes</ref><sp/>b,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/>decltype(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::handle_dynamic_spec&lt;detail::width_checker&gt;(specs_.width,</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.width_ref,<sp/>ctx);</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::handle_dynamic_spec&lt;detail::precision_checker&gt;(</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.precision,<sp/>specs_.precision_ref,<sp/>ctx);</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::write_bytes(ctx.out(),<sp/>b.data_,<sp/>specs_);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1dynamic__format__specs" kindref="compound">detail::dynamic_format_specs&lt;char&gt;</ref><sp/>specs_;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3344" refid="structarg__join" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarg__join" kindref="compound">arg_join</ref><sp/>:<sp/><ref refid="structdetail_1_1view" kindref="compound">detail::view</ref><sp/>{</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/>It<sp/>begin;</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>Sentinel<sp/>end;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>sep;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><ref refid="structarg__join" kindref="compound">arg_join</ref>(It<sp/>b,<sp/>Sentinel<sp/>e,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s)</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>begin(b),<sp/>end(e),<sp/>sep(s)<sp/>{}</highlight></codeline>
<codeline lineno="3351"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3354" refid="structformatter_3_01arg__join_3_01It_00_01Sentinel_00_01Char_01_4_00_01Char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;<ref refid="structarg__join" kindref="compound">arg_join</ref>&lt;It,<sp/>Sentinel,<sp/>Char&gt;,<sp/>Char&gt;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structformatter" kindref="compound">formatter</ref>&lt;typename<sp/>std::iterator_traits&lt;It&gt;::value_type,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarg__join" kindref="compound">arg_join&lt;It, Sentinel, Char&gt;</ref>&amp;<sp/>value,<sp/>FormatContext&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base<sp/>=<sp/><ref refid="structformatter" kindref="compound">formatter&lt;typename std::iterator_traits&lt;It&gt;::value_type</ref>,<sp/>Char&gt;;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>value.begin;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>ctx.out();</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>value.end)<sp/>{</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>base::format(*it++,<sp/>ctx);</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>value.end)<sp/>{</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>std::copy(value.sep.begin(),<sp/>value.sep.end(),<sp/>out);</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.advance_to(out);</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>base::format(*it++,<sp/>ctx);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel&gt;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><ref refid="structarg__join" kindref="compound">arg_join&lt;It, Sentinel, char&gt;</ref><sp/>join(It<sp/>begin,<sp/>Sentinel<sp/>end,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>sep)<sp/>{</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{begin,<sp/>end,<sp/>sep};</highlight></codeline>
<codeline lineno="3381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel&gt;</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><ref refid="structarg__join" kindref="compound">arg_join&lt;It, Sentinel, wchar_t&gt;</ref><sp/>join(It<sp/>begin,<sp/>Sentinel<sp/>end,<sp/><ref refid="classbasic__string__view" kindref="compound">wstring_view</ref><sp/>sep)<sp/>{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{begin,<sp/>end,<sp/>sep};</highlight></codeline>
<codeline lineno="3386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><ref refid="structarg__join" kindref="compound">arg_join&lt;detail::iterator_t&lt;const Range&gt;</ref>,<sp/>detail::sentinel_t&lt;const<sp/>Range&gt;,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal">join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range&amp;<sp/>range,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>sep)<sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>join(std::begin(range),<sp/>std::end(range),<sp/>sep);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><ref refid="structarg__join" kindref="compound">arg_join&lt;detail::iterator_t&lt;const Range&gt;</ref>,<sp/>detail::sentinel_t&lt;const<sp/>Range&gt;,</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal">join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range&amp;<sp/>range,<sp/><ref refid="classbasic__string__view" kindref="compound">wstring_view</ref><sp/>sep)<sp/>{</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>join(std::begin(range),<sp/>std::end(range),<sp/>sep);</highlight></codeline>
<codeline lineno="3415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>to_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>detail::write&lt;char&gt;(std::back_inserter(result),<sp/>value);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>to_string(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>should<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>the<sp/>number<sp/>including<sp/>the<sp/>sign<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;false&quot;<sp/>for<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_size<sp/>=<sp/>detail::digits10&lt;T&gt;()<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[max_size<sp/>&gt;<sp/>5<sp/>?<sp/>max_size<sp/>:<sp/>5];</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(begin,<sp/>detail::write&lt;char&gt;(begin,<sp/>value));</highlight></codeline>
<codeline lineno="3443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::wstring<sp/>to_wstring(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format(L</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"></highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE&gt;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal">std::basic_string&lt;Char&gt;<sp/>to_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;Char, SIZE&gt;</ref>&amp;<sp/>buf)<sp/>{</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>buf.<ref refid="classdetail_1_1buffer_1ac72e23b3cef99b3e4b6a13f7cf86a421" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/>detail::assume(size<sp/>&lt;<sp/>std::basic_string&lt;Char&gt;().max_size());</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;Char&gt;(buf.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>size);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>buffer_context&lt;Char&gt;::iterator<sp/>detail::vformat_to(</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer&lt;Char&gt;</ref>&amp;<sp/>buf,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__format__context" kindref="compound">buffer_context</ref>&lt;type_identity_t&lt;Char&gt;&gt;&gt;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>af<sp/>=<sp/>arg_formatter&lt;typename<sp/>buffer_context&lt;Char&gt;::iterator,<sp/>Char&gt;;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vformat_to&lt;af&gt;(std::back_inserter(buf),<sp/>to_string_view(format_str),</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args);</highlight></codeline>
<codeline lineno="3466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>format_context::iterator<sp/>detail::vformat_to(</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1buffer" kindref="compound">detail::buffer&lt;char&gt;</ref>&amp;,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>,<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;format_context&gt;</ref>);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>FMT_API<sp/>std::string<sp/>grouping_impl&lt;char&gt;(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>FMT_API<sp/>std::string<sp/>grouping_impl&lt;wchar_t&gt;(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>FMT_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>thousands_sep_impl&lt;char&gt;(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>FMT_API<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>thousands_sep_impl&lt;wchar_t&gt;(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>FMT_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>decimal_point_impl(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>FMT_API<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>decimal_point_impl(locale_ref<sp/>loc);</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format_float&lt;double&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_specs<sp/>specs,<sp/>buffer&lt;char&gt;&amp;<sp/>buf);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format_float&lt;long<sp/>double&gt;(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_specs<sp/>specs,</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer&lt;char&gt;&amp;<sp/>buf);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snprintf_float(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/>float_specs<sp/>specs,</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer&lt;char&gt;&amp;<sp/>buf)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snprintf_float&lt;double&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_specs<sp/>specs,</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer&lt;char&gt;&amp;<sp/>buf);</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snprintf_float&lt;long<sp/>double&gt;(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_specs<sp/>specs,</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer&lt;char&gt;&amp;<sp/>buf);</highlight></codeline>
<codeline lineno="3492"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_t&lt;S&gt;,</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(detail::is_</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&lt;S&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FMT_BUFFER_CONTEXT(Char)::iterator<sp/>vformat_to(</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::buffer&lt;Char&gt;&amp;<sp/>buf,<sp/>const<sp/>S&amp;<sp/>format_str,</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;FMT_BUFFER_CONTEXT(type_identity_t&lt;Char&gt;)&gt;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::vformat_to(buf,<sp/>to_string_view(format_str),<sp/>args);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE<sp/>=<sp/>inline_buffer_size,</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>enable_if_t&lt;detail::is_string&lt;S&gt;::value,<sp/>char_t&lt;S&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>buffer_context&lt;Char&gt;::iterator<sp/>format_to(</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;Char, SIZE&gt;</ref>&amp;<sp/>buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>format_str,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/>detail::check_format_string&lt;Args...&gt;(format_str);</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">buffer_context&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::vformat_to(buf,<sp/>to_string_view(format_str),</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_format_args&lt;context&gt;(args...));</highlight></codeline>
<codeline lineno="3511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">format_context_t</ref><sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context&lt;OutputIt, Char&gt;</ref>;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">format_args_t</ref><sp/>=<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;format_context_t&lt;OutputIt, Char&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(<ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator&lt;OutputIt&gt;::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="structdetail_1_1is__contiguous__back__insert__iterator" kindref="compound">detail::is_contiguous_back_insert_iterator&lt;OutputIt&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>OutputIt<sp/>vformat_to(</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>format_str,</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">format_args_t</ref>&lt;type_identity_t&lt;OutputIt&gt;,<sp/>char_t&lt;S&gt;&gt;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>af<sp/>=<sp/><ref refid="classdetail_1_1arg__formatter" kindref="compound">detail::arg_formatter&lt;OutputIt, char_t&lt;S&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vformat_to&lt;af&gt;(out,<sp/>to_string_view(format_str),<sp/>args);</highlight></codeline>
<codeline lineno="3528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator&lt;OutputIt&gt;::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="structdetail_1_1is__contiguous__back__insert__iterator" kindref="compound">detail::is_contiguous_back_insert_iterator&lt;OutputIt&gt;::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1is__string" kindref="compound">detail::is_string&lt;S&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>OutputIt<sp/>format_to(OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>format_str,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/>detail::check_format_string&lt;Args...&gt;(format_str);</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">format_context_t&lt;OutputIt, char_t&lt;S&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vformat_to(out,<sp/>to_string_view(format_str),</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_format_args&lt;context&gt;(args...));</highlight></codeline>
<codeline lineno="3551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight></codeline>
<codeline lineno="3553" refid="structformat__to__n__result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result</ref><sp/>{</highlight></codeline>
<codeline lineno="3555" refid="structformat__to__n__result_1a90597c6c1d23c7301aef16e756c6263b" refkind="member"><highlight class="normal"><sp/><sp/>OutputIt<sp/><ref refid="structformat__to__n__result_1a90597c6c1d23c7301aef16e756c6263b" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="3557" refid="structformat__to__n__result_1ab1c815078e1a78716bb07b9ed8c7023b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structformat__to__n__result_1ab1c815078e1a78716bb07b9ed8c7023b" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt::value_type&gt;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">format_to_n_context</ref><sp/>=</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">format_context_t&lt;detail::truncating_iterator&lt;OutputIt&gt;</ref>,<sp/>Char&gt;;</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt::value_type&gt;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">format_to_n_args</ref><sp/>=<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;format_to_n_context&lt;OutputIt, Char&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classformat__arg__store" kindref="compound">format_arg_store&lt;format_to_n_context&lt;OutputIt, Char&gt;</ref>,<sp/>Args...&gt;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal">make_format_to_n_args(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classformat__arg__store" kindref="compound">format_arg_store&lt;format_to_n_context&lt;OutputIt, Char&gt;</ref>,<sp/>Args...&gt;(</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args...);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(<ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator&lt;OutputIt&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result&lt;OutputIt&gt;</ref><sp/>vformat_to_n(</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">format_to_n_args</ref>&lt;type_identity_t&lt;OutputIt&gt;,<sp/>type_identity_t&lt;Char&gt;&gt;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>vformat_to(<ref refid="classdetail_1_1truncating__iterator" kindref="compound">detail::truncating_iterator&lt;OutputIt&gt;</ref>(out,<sp/>n),</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{it.base(),<sp/>it.count()};</highlight></codeline>
<codeline lineno="3582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(<ref refid="structdetail_1_1is__string" kindref="compound">detail::is_string&lt;S&gt;::value</ref>&amp;&amp;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1is__output__iterator" kindref="compound">detail::is_output_iterator&lt;OutputIt&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result&lt;OutputIt&gt;</ref><sp/>format_to_n(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>format_str,</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/>detail::check_format_string&lt;Args...&gt;(format_str);</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">format_to_n_context&lt;OutputIt, char_t&lt;S&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vformat_to_n(out,<sp/>n,<sp/>to_string_view(format_str),</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_format_args&lt;context&gt;(args...));</highlight></codeline>
<codeline lineno="3601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>enable_if_t&lt;(!std::is_same&lt;Char,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;::value),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal">std::basic_string&lt;Char&gt;<sp/>detail::vformat(</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__format__context" kindref="compound">buffer_context</ref>&lt;type_identity_t&lt;Char&gt;&gt;&gt;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;Char&gt;</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/>detail::vformat_to(buffer,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(buffer);</highlight></codeline>
<codeline lineno="3610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>formatted_size(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_to(<ref refid="classdetail_1_1counting__iterator" kindref="compound">detail::counting_iterator</ref>(),<sp/>format_str,<sp/>args...).count();</highlight></codeline>
<codeline lineno="3619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>FMT_ENABLE_IF(std::is_same&lt;Char,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(std::FILE*<sp/>f,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwformat__args" kindref="compound">wformat_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">wmemory_buffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/>detail::vformat_to(buffer,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/>buffer.push_back(L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fputws(buffer.<ref refid="classdetail_1_1buffer_1a52d7284e9aa8d16cf6dc01c3be11a4f7" kindref="member">data</ref>(),<sp/>f)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classsystem__error" kindref="compound">system_error</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>write<sp/>to<sp/>file&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>FMT_ENABLE_IF(std::is_same&lt;Char,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,<sp/><ref refid="structwformat__args" kindref="compound">wformat_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/>vprint(stdout,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_USER_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_USE_UDL_TEMPLATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>Char...<sp/>CHARS&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">udl_formatter<sp/>{</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/>std::basic_string&lt;Char&gt;<sp/>operator()(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/>Char<sp/>s[]<sp/>=<sp/>{CHARS...,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>check_format_string&lt;remove_cvref_t&lt;Args&gt;...&gt;(FMT_STRING(s));</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format(s,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">udl_formatter<sp/>{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>str;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/>std::basic_string&lt;Char&gt;<sp/>operator()(Args&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format(str,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3657"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/>//<sp/>FMT_USE_UDL_TEMPLATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">udl_arg<sp/>{</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>str;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>named_arg&lt;Char,<sp/>T&gt;<sp/>operator=(T&amp;&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{str,<sp/>std::forward&lt;T&gt;(value)};</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3666"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3667"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_USE_UDL_TEMPLATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpedantic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>FMT_CLANG_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wgnu-string-literal-operator-template&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>Char...<sp/>CHARS&gt;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal">FMT_CONSTEXPR<sp/>detail::udl_formatter&lt;Char,<sp/>CHARS...&gt;<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_format()<sp/>{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="3679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal">FMT_CONSTEXPR<sp/>detail::udl_formatter&lt;char&gt;<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{s,<sp/>n}};</highlight></codeline>
<codeline lineno="3695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3696"><highlight class="normal">FMT_CONSTEXPR<sp/>detail::udl_formatter&lt;wchar_t&gt;<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_format(</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{s,<sp/>n}};</highlight></codeline>
<codeline lineno="3699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/><sp/>//<sp/>FMT_USE_UDL_TEMPLATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal">FMT_CONSTEXPR<sp/>detail::udl_arg&lt;char&gt;<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s};</highlight></codeline>
<codeline lineno="3714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3715"><highlight class="normal">FMT_CONSTEXPR<sp/>detail::udl_arg&lt;wchar_t&gt;<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s};</highlight></codeline>
<codeline lineno="3717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_USE_USER_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_FUNC<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;format-inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_FORMAT_H_</highlight></codeline>
    </programlisting>
    <location file="include/srsgnb/srslog/bundled/fmt/format.h"/>
  </compounddef>
</doxygen>
