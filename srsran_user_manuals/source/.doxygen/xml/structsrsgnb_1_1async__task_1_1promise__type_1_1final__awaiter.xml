<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter" kind="struct" language="C++" prot="public">
    <compoundname>srsgnb::async_task::promise_type::final_awaiter</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1a9d039bc8626ea2a36529afdd8c93c871" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::async_task&lt; R &gt;::promise_type::final_awaiter::await_ready</definition>
        <argsstring>() const</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>Lifetime of coroutine is bounded to the lazy_task object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_task.h" line="28" column="12" bodyfile="include/srsgnb/support/async/async_task.h" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1a8e68421f9fff5890491146cd1973f370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1coro__handle" kindref="compound">coro_handle</ref></type>
        <definition>coro_handle srsgnb::async_task&lt; R &gt;::promise_type::final_awaiter::await_suspend</definition>
        <argsstring>(coro_handle&lt; promise_type &gt; cb)</argsstring>
        <name>await_suspend</name>
        <param>
          <type><ref refid="structsrsgnb_1_1coro__handle" kindref="compound">coro_handle</ref>&lt; <ref refid="structsrsgnb_1_1async__task_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Tail-resumes suspending/awaiting coroutine continuation. Lazy tasks always have a continuation, if they went beyond the initial suspension point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_task.h" line="32" column="8" bodyfile="include/srsgnb/support/async/async_task.h" bodystart="32" bodyend="32"/>
        <references refid="structsrsgnb_1_1coro__handle_1a7654d7c70a48a8a347fbeece5bb8d5d1" compoundref="coroutine_8h" startline="258" endline="258">srsgnb::coro_handle&lt; Promise &gt;::promise</references>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1ae9c1780de8ae45e35ab129f6870d5010" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::async_task&lt; R &gt;::promise_type::final_awaiter::await_resume</definition>
        <argsstring>()</argsstring>
        <name>await_resume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_task.h" line="34" column="12" bodyfile="include/srsgnb/support/async/async_task.h" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1a32f2b3661a83c17c6309d7885e57f9ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter" kindref="compound">final_awaiter</ref> &amp;</type>
        <definition>final_awaiter&amp; srsgnb::async_task&lt; R &gt;::promise_type::final_awaiter::get_awaiter</definition>
        <argsstring>()</argsstring>
        <name>get_awaiter</name>
        <briefdescription>
<para>Points to itself as an awaiter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_task.h" line="37" column="21" bodyfile="include/srsgnb/support/async/async_task.h" bodystart="37" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::async_task&lt; R &gt;::promise_type::final_awaiter</label>
        <link refid="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/support/async/async_task.h" line="26" column="24" bodyfile="include/srsgnb/support/async/async_task.h" bodystart="26" bodyend="38"/>
    <listofallmembers>
      <member refid="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1a9d039bc8626ea2a36529afdd8c93c871" prot="public" virt="non-virtual"><scope>srsgnb::async_task::promise_type::final_awaiter</scope><name>await_ready</name></member>
      <member refid="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1ae9c1780de8ae45e35ab129f6870d5010" prot="public" virt="non-virtual"><scope>srsgnb::async_task::promise_type::final_awaiter</scope><name>await_resume</name></member>
      <member refid="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1a8e68421f9fff5890491146cd1973f370" prot="public" virt="non-virtual"><scope>srsgnb::async_task::promise_type::final_awaiter</scope><name>await_suspend</name></member>
      <member refid="structsrsgnb_1_1async__task_1_1promise__type_1_1final__awaiter_1a32f2b3661a83c17c6309d7885e57f9ab" prot="public" virt="non-virtual"><scope>srsgnb::async_task::promise_type::final_awaiter</scope><name>get_awaiter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
