<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacesrsgnb" kind="namespace" language="C++">
    <compoundname>srsgnb</compoundname>
    <innerclass refid="classsrsgnb_1_1async__queue" prot="public">srsgnb::async_queue</innerclass>
    <innerclass refid="classsrsgnb_1_1async__task" prot="public">srsgnb::async_task</innerclass>
    <innerclass refid="classsrsgnb_1_1async__task__sequencer" prot="public">srsgnb::async_task_sequencer</innerclass>
    <innerclass refid="structsrsgnb_1_1base__resumable__procedure" prot="public">srsgnb::base_resumable_procedure</innerclass>
    <innerclass refid="classsrsgnb_1_1baseband__gateway" prot="public">srsgnb::baseband_gateway</innerclass>
    <innerclass refid="classsrsgnb_1_1baseband__gateway__base" prot="public">srsgnb::baseband_gateway_base</innerclass>
    <innerclass refid="classsrsgnb_1_1baseband__gateway__buffer" prot="public">srsgnb::baseband_gateway_buffer</innerclass>
    <innerclass refid="classsrsgnb_1_1baseband__gateway__buffer__dynamic" prot="public">srsgnb::baseband_gateway_buffer_dynamic</innerclass>
    <innerclass refid="classsrsgnb_1_1baseband__gateway__receiver" prot="public">srsgnb::baseband_gateway_receiver</innerclass>
    <innerclass refid="classsrsgnb_1_1baseband__gateway__transmitter" prot="public">srsgnb::baseband_gateway_transmitter</innerclass>
    <innerclass refid="structsrsgnb_1_1beamforming__info" prot="public">srsgnb::beamforming_info</innerclass>
    <innerclass refid="classsrsgnb_1_1bearer__logger" prot="public">srsgnb::bearer_logger</innerclass>
    <innerclass refid="classsrsgnb_1_1benchmarker" prot="public">srsgnb::benchmarker</innerclass>
    <innerclass refid="classsrsgnb_1_1bit__decoder" prot="public">srsgnb::bit_decoder</innerclass>
    <innerclass refid="classsrsgnb_1_1bit__encoder" prot="public">srsgnb::bit_encoder</innerclass>
    <innerclass refid="classsrsgnb_1_1blocking__task__worker" prot="public">srsgnb::blocking_task_worker</innerclass>
    <innerclass refid="classsrsgnb_1_1bounded__bitset" prot="public">srsgnb::bounded_bitset</innerclass>
    <innerclass refid="classsrsgnb_1_1bounded__integer" prot="public">srsgnb::bounded_integer</innerclass>
    <innerclass refid="structsrsgnb_1_1bwp__configuration" prot="public">srsgnb::bwp_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1bwp__downlink" prot="public">srsgnb::bwp_downlink</innerclass>
    <innerclass refid="structsrsgnb_1_1bwp__downlink__common" prot="public">srsgnb::bwp_downlink_common</innerclass>
    <innerclass refid="structsrsgnb_1_1bwp__downlink__dedicated" prot="public">srsgnb::bwp_downlink_dedicated</innerclass>
    <innerclass refid="structsrsgnb_1_1bwp__rb__bitmap" prot="public">srsgnb::bwp_rb_bitmap</innerclass>
    <innerclass refid="structsrsgnb_1_1bwp__sch__grant__info" prot="public">srsgnb::bwp_sch_grant_info</innerclass>
    <innerclass refid="structsrsgnb_1_1bwp__uplink__common" prot="public">srsgnb::bwp_uplink_common</innerclass>
    <innerclass refid="classsrsgnb_1_1byte__buffer" prot="public">srsgnb::byte_buffer</innerclass>
    <innerclass refid="classsrsgnb_1_1byte__buffer__reader" prot="public">srsgnb::byte_buffer_reader</innerclass>
    <innerclass refid="classsrsgnb_1_1byte__buffer__segment" prot="public">srsgnb::byte_buffer_segment</innerclass>
    <innerclass refid="classsrsgnb_1_1byte__buffer__slice" prot="public">srsgnb::byte_buffer_slice</innerclass>
    <innerclass refid="classsrsgnb_1_1byte__buffer__slice__chain" prot="public">srsgnb::byte_buffer_slice_chain</innerclass>
    <innerclass refid="classsrsgnb_1_1byte__buffer__view" prot="public">srsgnb::byte_buffer_view</innerclass>
    <innerclass refid="classsrsgnb_1_1byte__buffer__writer" prot="public">srsgnb::byte_buffer_writer</innerclass>
    <innerclass refid="structsrsgnb_1_1carrier__configuration" prot="public">srsgnb::carrier_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1carrier__subslot__resource__grid" prot="public">srsgnb::carrier_subslot_resource_grid</innerclass>
    <innerclass refid="structsrsgnb_1_1cce__position" prot="public">srsgnb::cce_position</innerclass>
    <innerclass refid="classsrsgnb_1_1cell__configuration" prot="public">srsgnb::cell_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1cell__dl__executor__mapper" prot="public">srsgnb::cell_dl_executor_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1cell__rach__handler" prot="public">srsgnb::cell_rach_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1cell__resource__allocator" prot="public">srsgnb::cell_resource_allocator</innerclass>
    <innerclass refid="structsrsgnb_1_1cell__slot__resource__allocator" prot="public">srsgnb::cell_slot_resource_allocator</innerclass>
    <innerclass refid="classsrsgnb_1_1cell__slot__resource__grid" prot="public">srsgnb::cell_slot_resource_grid</innerclass>
    <innerclass refid="classsrsgnb_1_1channel__equalizer" prot="public">srsgnb::channel_equalizer</innerclass>
    <innerclass refid="classsrsgnb_1_1channel__estimate" prot="public">srsgnb::channel_estimate</innerclass>
    <innerclass refid="classsrsgnb_1_1channel__modulation__factory" prot="public">srsgnb::channel_modulation_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1circular__array" prot="public">srsgnb::circular_array</innerclass>
    <innerclass refid="classsrsgnb_1_1circular__map" prot="public">srsgnb::circular_map</innerclass>
    <innerclass refid="structsrsgnb_1_1codeblock__metadata" prot="public">srsgnb::codeblock_metadata</innerclass>
    <innerclass refid="classsrsgnb_1_1colocated__f1c__pdu__handler" prot="public">srsgnb::colocated_f1c_pdu_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1copyonly__test__object" prot="public">srsgnb::copyonly_test_object</innerclass>
    <innerclass refid="structsrsgnb_1_1coreset__configuration" prot="public">srsgnb::coreset_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1coro__handle" prot="public">srsgnb::coro_handle</innerclass>
    <innerclass refid="structsrsgnb_1_1coro__handle_3_01void_01_4" prot="public">srsgnb::coro_handle&lt; void &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1crb__interval" prot="public">srsgnb::crb_interval</innerclass>
    <innerclass refid="classsrsgnb_1_1crc__calculator" prot="public">srsgnb::crc_calculator</innerclass>
    <innerclass refid="classsrsgnb_1_1crc__calculator__factory" prot="public">srsgnb::crc_calculator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1crc__calculator__impl" prot="public">srsgnb::crc_calculator_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1crc__indication__message" prot="public">srsgnb::crc_indication_message</innerclass>
    <innerclass refid="classsrsgnb_1_1csi__rs__processor" prot="public">srsgnb::csi_rs_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1csi__rs__processor__impl" prot="public">srsgnb::csi_rs_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1cyclic__prefix" prot="public">srsgnb::cyclic_prefix</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration" prot="public">srsgnb::dci_1_0_p_rnti_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration" prot="public">srsgnb::dci_1_0_ra_rnti_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration" prot="public">srsgnb::dci_1_0_si_rnti_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__dl__context__information" prot="public">srsgnb::dci_dl_context_information</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__dl__info" prot="public">srsgnb::dci_dl_info</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__format0__0__info" prot="public">srsgnb::dci_format0_0_info</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__format1__0__info" prot="public">srsgnb::dci_format1_0_info</innerclass>
    <innerclass refid="structsrsgnb_1_1dci__ul__info" prot="public">srsgnb::dci_ul_info</innerclass>
    <innerclass refid="structsrsgnb_1_1decoded__mac__rx__pdu" prot="public">srsgnb::decoded_mac_rx_pdu</innerclass>
    <innerclass refid="structsrsgnb_1_1default__error__t" prot="public">srsgnb::default_error_t</innerclass>
    <innerclass refid="structsrsgnb_1_1default__success__t" prot="public">srsgnb::default_success_t</innerclass>
    <innerclass refid="classsrsgnb_1_1demodulation__mapper" prot="public">srsgnb::demodulation_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1demodulation__mapper__impl" prot="public">srsgnb::demodulation_mapper_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dft__processor" prot="public">srsgnb::dft_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1dft__processor__factory" prot="public">srsgnb::dft_processor_factory</innerclass>
    <innerclass refid="structsrsgnb_1_1dft__processor__fftw__configuration" prot="public">srsgnb::dft_processor_fftw_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1dft__processor__fftw__impl" prot="public">srsgnb::dft_processor_fftw_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dft__processor__fftx__impl" prot="public">srsgnb::dft_processor_fftx_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dft__processor__generic__impl" prot="public">srsgnb::dft_processor_generic_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__broadcast__allocation" prot="public">srsgnb::dl_broadcast_allocation</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__bsr__indication__message" prot="public">srsgnb::dl_bsr_indication_message</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__config__common" prot="public">srsgnb::dl_config_common</innerclass>
    <innerclass refid="classsrsgnb_1_1dl__harq__process" prot="public">srsgnb::dl_harq_process</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__msg__alloc" prot="public">srsgnb::dl_msg_alloc</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__msg__lc__info" prot="public">srsgnb::dl_msg_lc_info</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__msg__tb__info" prot="public">srsgnb::dl_msg_tb_info</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__sched__result" prot="public">srsgnb::dl_sched_result</innerclass>
    <innerclass refid="structsrsgnb_1_1dl__ssb__pdu" prot="public">srsgnb::dl_ssb_pdu</innerclass>
    <innerclass refid="structsrsgnb_1_1dmrs__downlink__config" prot="public">srsgnb::dmrs_downlink_config</innerclass>
    <innerclass refid="structsrsgnb_1_1dmrs__information" prot="public">srsgnb::dmrs_information</innerclass>
    <innerclass refid="structsrsgnb_1_1dmrs__mask" prot="public">srsgnb::dmrs_mask</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pbch__processor" prot="public">srsgnb::dmrs_pbch_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pbch__processor__factory" prot="public">srsgnb::dmrs_pbch_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pbch__processor__impl" prot="public">srsgnb::dmrs_pbch_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pdcch__processor" prot="public">srsgnb::dmrs_pdcch_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pdcch__processor__factory" prot="public">srsgnb::dmrs_pdcch_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pdcch__processor__impl" prot="public">srsgnb::dmrs_pdcch_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pdsch__processor" prot="public">srsgnb::dmrs_pdsch_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pdsch__processor__factory" prot="public">srsgnb::dmrs_pdsch_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pdsch__processor__impl" prot="public">srsgnb::dmrs_pdsch_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pucch__processor" prot="public">srsgnb::dmrs_pucch_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pucch__processor__format1__impl" prot="public">srsgnb::dmrs_pucch_processor_format1_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl" prot="public">srsgnb::dmrs_pucch_processor_format2_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pusch__estimator" prot="public">srsgnb::dmrs_pusch_estimator</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pusch__estimator__impl" prot="public">srsgnb::dmrs_pusch_estimator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__pusch__generator__impl" prot="public">srsgnb::dmrs_pusch_generator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1dmrs__type" prot="public">srsgnb::dmrs_type</innerclass>
    <innerclass refid="classsrsgnb_1_1downlink__processor" prot="public">srsgnb::downlink_processor</innerclass>
    <innerclass refid="structsrsgnb_1_1downlink__processor__config" prot="public">srsgnb::downlink_processor_config</innerclass>
    <innerclass refid="classsrsgnb_1_1downlink__processor__factory" prot="public">srsgnb::downlink_processor_factory</innerclass>
    <innerclass refid="structsrsgnb_1_1downlink__processor__factory__sw__config" prot="public">srsgnb::downlink_processor_factory_sw_config</innerclass>
    <innerclass refid="classsrsgnb_1_1downlink__processor__pool" prot="public">srsgnb::downlink_processor_pool</innerclass>
    <innerclass refid="structsrsgnb_1_1downlink__processor__pool__config" prot="public">srsgnb::downlink_processor_pool_config</innerclass>
    <innerclass refid="classsrsgnb_1_1downlink__processor__pool__impl" prot="public">srsgnb::downlink_processor_pool_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1downlink__processor__pool__impl__config" prot="public">srsgnb::downlink_processor_pool_impl_config</innerclass>
    <innerclass refid="classsrsgnb_1_1downlink__processor__single__executor__impl" prot="public">srsgnb::downlink_processor_single_executor_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1du__cell__config" prot="public">srsgnb::du_cell_config</innerclass>
    <innerclass refid="structsrsgnb_1_1du__cell__config__default__params" prot="public">srsgnb::du_cell_config_default_params</innerclass>
    <innerclass refid="classsrsgnb_1_1du__l2__dl__executor__mapper" prot="public">srsgnb::du_l2_dl_executor_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1du__l2__ul__executor__mapper" prot="public">srsgnb::du_l2_ul_executor_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1du__rnti__table" prot="public">srsgnb::du_rnti_table</innerclass>
    <innerclass refid="classsrsgnb_1_1dyn__blocking__queue" prot="public">srsgnb::dyn_blocking_queue</innerclass>
    <innerclass refid="classsrsgnb_1_1dyn__circular__buffer" prot="public">srsgnb::dyn_circular_buffer</innerclass>
    <innerclass refid="structsrsgnb_1_1e1ap__context__info__t" prot="public">srsgnb::e1ap_context_info_t</innerclass>
    <innerclass refid="classsrsgnb_1_1e1ap__pcap" prot="public">srsgnb::e1ap_pcap</innerclass>
    <innerclass refid="classsrsgnb_1_1eager__async__task" prot="public">srsgnb::eager_async_task</innerclass>
    <innerclass refid="classsrsgnb_1_1event__logger" prot="public">srsgnb::event_logger</innerclass>
    <innerclass refid="classsrsgnb_1_1event__signal" prot="public">srsgnb::event_signal</innerclass>
    <innerclass refid="classsrsgnb_1_1event__signal__flag" prot="public">srsgnb::event_signal_flag</innerclass>
    <innerclass refid="classsrsgnb_1_1expected" prot="public">srsgnb::expected</innerclass>
    <innerclass refid="classsrsgnb_1_1f1ap__asn1__packer" prot="public">srsgnb::f1ap_asn1_packer</innerclass>
    <innerclass refid="structsrsgnb_1_1f1ap__du__cell__context" prot="public">srsgnb::f1ap_du_cell_context</innerclass>
    <innerclass refid="structsrsgnb_1_1f1ap__du__context" prot="public">srsgnb::f1ap_du_context</innerclass>
    <innerclass refid="structsrsgnb_1_1f1ap__du__ue__context" prot="public">srsgnb::f1ap_du_ue_context</innerclass>
    <innerclass refid="classsrsgnb_1_1f1ap__packet__procedures" prot="public">srsgnb::f1ap_packet_procedures</innerclass>
    <innerclass refid="classsrsgnb_1_1f1ap__pcap" prot="public">srsgnb::f1ap_pcap</innerclass>
    <innerclass refid="classsrsgnb_1_1f1c__du__packet__handler" prot="public">srsgnb::f1c_du_packet_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1f1c__event__handler" prot="public">srsgnb::f1c_event_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1f1c__message__handler" prot="public">srsgnb::f1c_message_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1f1c__message__notifier" prot="public">srsgnb::f1c_message_notifier</innerclass>
    <innerclass refid="structsrsgnb_1_1f1c__msg" prot="public">srsgnb::f1c_msg</innerclass>
    <innerclass refid="classsrsgnb_1_1f1u__cu__message__handler" prot="public">srsgnb::f1u_cu_message_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1f1u__cu__message__notifier" prot="public">srsgnb::f1u_cu_message_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1f1u__du__message__handler" prot="public">srsgnb::f1u_du_message_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1f1u__du__message__notifier" prot="public">srsgnb::f1u_du_message_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1file__sink" prot="public">srsgnb::file_sink</innerclass>
    <innerclass refid="classsrsgnb_1_1file__vector" prot="public">srsgnb::file_vector</innerclass>
    <innerclass refid="structsrsgnb_1_1frequency__info__dl" prot="public">srsgnb::frequency_info_dl</innerclass>
    <innerclass refid="structsrsgnb_1_1frequency__info__ul" prot="public">srsgnb::frequency_info_ul</innerclass>
    <innerclass refid="classsrsgnb_1_1generic__dft__N" prot="public">srsgnb::generic_dft_N</innerclass>
    <innerclass refid="structsrsgnb_1_1grant__info" prot="public">srsgnb::grant_info</innerclass>
    <innerclass refid="classsrsgnb_1_1harq__entity" prot="public">srsgnb::harq_entity</innerclass>
    <innerclass refid="classsrsgnb_1_1harq__process" prot="public">srsgnb::harq_process</innerclass>
    <innerclass refid="classsrsgnb_1_1interval" prot="public">srsgnb::interval</innerclass>
    <innerclass refid="classsrsgnb_1_1intrusive__double__linked__list" prot="public">srsgnb::intrusive_double_linked_list</innerclass>
    <innerclass refid="structsrsgnb_1_1intrusive__double__linked__list__element" prot="public">srsgnb::intrusive_double_linked_list_element</innerclass>
    <innerclass refid="classsrsgnb_1_1intrusive__forward__list" prot="public">srsgnb::intrusive_forward_list</innerclass>
    <innerclass refid="structsrsgnb_1_1intrusive__forward__list__element" prot="public">srsgnb::intrusive_forward_list_element</innerclass>
    <innerclass refid="structsrsgnb_1_1lazy__task__launcher" prot="public">srsgnb::lazy_task_launcher</innerclass>
    <innerclass refid="structsrsgnb_1_1lcg__bsr__report" prot="public">srsgnb::lcg_bsr_report</innerclass>
    <innerclass refid="classsrsgnb_1_1lcid__ul__sch__t" prot="public">srsgnb::lcid_ul_sch_t</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__decoder" prot="public">srsgnb::ldpc_decoder</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__decoder__avx2" prot="public">srsgnb::ldpc_decoder_avx2</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__decoder__factory" prot="public">srsgnb::ldpc_decoder_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__decoder__generic" prot="public">srsgnb::ldpc_decoder_generic</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__decoder__impl" prot="public">srsgnb::ldpc_decoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__encoder" prot="public">srsgnb::ldpc_encoder</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__encoder__avx2" prot="public">srsgnb::ldpc_encoder_avx2</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__encoder__factory" prot="public">srsgnb::ldpc_encoder_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__encoder__generic" prot="public">srsgnb::ldpc_encoder_generic</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__encoder__impl" prot="public">srsgnb::ldpc_encoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__graph__impl" prot="public">srsgnb::ldpc_graph_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__rate__dematcher" prot="public">srsgnb::ldpc_rate_dematcher</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__rate__dematcher__factory" prot="public">srsgnb::ldpc_rate_dematcher_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__rate__dematcher__impl" prot="public">srsgnb::ldpc_rate_dematcher_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__rate__matcher" prot="public">srsgnb::ldpc_rate_matcher</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__rate__matcher__factory" prot="public">srsgnb::ldpc_rate_matcher_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__rate__matcher__impl" prot="public">srsgnb::ldpc_rate_matcher_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__segmenter__impl" prot="public">srsgnb::ldpc_segmenter_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__segmenter__rx" prot="public">srsgnb::ldpc_segmenter_rx</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__segmenter__rx__factory" prot="public">srsgnb::ldpc_segmenter_rx_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__segmenter__tx" prot="public">srsgnb::ldpc_segmenter_tx</innerclass>
    <innerclass refid="classsrsgnb_1_1ldpc__segmenter__tx__factory" prot="public">srsgnb::ldpc_segmenter_tx_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1log__likelihood__ratio" prot="public">srsgnb::log_likelihood_ratio</innerclass>
    <innerclass refid="classsrsgnb_1_1log__sink__message__spy" prot="public">srsgnb::log_sink_message_spy</innerclass>
    <innerclass refid="classsrsgnb_1_1log__sink__spy" prot="public">srsgnb::log_sink_spy</innerclass>
    <innerclass refid="structsrsgnb_1_1long__bsr__report" prot="public">srsgnb::long_bsr_report</innerclass>
    <innerclass refid="classsrsgnb_1_1low__papr__sequence__collection" prot="public">srsgnb::low_papr_sequence_collection</innerclass>
    <innerclass refid="classsrsgnb_1_1low__papr__sequence__generator" prot="public">srsgnb::low_papr_sequence_generator</innerclass>
    <innerclass refid="classsrsgnb_1_1low__papr__sequence__generator__impl" prot="public">srsgnb::low_papr_sequence_generator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy" prot="public">srsgnb::lower_phy</innerclass>
    <innerclass refid="structsrsgnb_1_1lower__phy__common__configuration" prot="public">srsgnb::lower_phy_common_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1lower__phy__configuration" prot="public">srsgnb::lower_phy_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__controller" prot="public">srsgnb::lower_phy_controller</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__error__notifier" prot="public">srsgnb::lower_phy_error_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__factory" prot="public">srsgnb::lower_phy_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__impl" prot="public">srsgnb::lower_phy_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__request__handler" prot="public">srsgnb::lower_phy_request_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__rg__buffer" prot="public">srsgnb::lower_phy_rg_buffer</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__rg__handler" prot="public">srsgnb::lower_phy_rg_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1lower__phy__rx__symbol__context" prot="public">srsgnb::lower_phy_rx_symbol_context</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__rx__symbol__notifier" prot="public">srsgnb::lower_phy_rx_symbol_notifier</innerclass>
    <innerclass refid="structsrsgnb_1_1lower__phy__sector__description" prot="public">srsgnb::lower_phy_sector_description</innerclass>
    <innerclass refid="structsrsgnb_1_1lower__phy__sector__port__mapping" prot="public">srsgnb::lower_phy_sector_port_mapping</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__state__fsm" prot="public">srsgnb::lower_phy_state_fsm</innerclass>
    <innerclass refid="structsrsgnb_1_1lower__phy__timing__context" prot="public">srsgnb::lower_phy_timing_context</innerclass>
    <innerclass refid="classsrsgnb_1_1lower__phy__timing__notifier" prot="public">srsgnb::lower_phy_timing_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__cell__control__information__handler" prot="public">srsgnb::mac_cell_control_information_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__cell__controller" prot="public">srsgnb::mac_cell_controller</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__cell__creation__request" prot="public">srsgnb::mac_cell_creation_request</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__cell__manager" prot="public">srsgnb::mac_cell_manager</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__cell__processor" prot="public">srsgnb::mac_cell_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__cell__rach__handler" prot="public">srsgnb::mac_cell_rach_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__cell__result__notifier" prot="public">srsgnb::mac_cell_result_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__cell__slot__handler" prot="public">srsgnb::mac_cell_slot_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__cell__start" prot="public">srsgnb::mac_cell_start</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__common__config__t" prot="public">srsgnb::mac_common_config_t</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__controller" prot="public">srsgnb::mac_controller</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ctrl__configurator" prot="public">srsgnb::mac_ctrl_configurator</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__dl__bsr__indication__message" prot="public">srsgnb::mac_dl_bsr_indication_message</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__dl__configurator" prot="public">srsgnb::mac_dl_configurator</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__dl__data__result" prot="public">srsgnb::mac_dl_data_result</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__dl__processor" prot="public">srsgnb::mac_dl_processor</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__dl__sched__result" prot="public">srsgnb::mac_dl_sched_result</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__dl__ue__manager" prot="public">srsgnb::mac_dl_ue_manager</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__impl" prot="public">srsgnb::mac_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__interface" prot="public">srsgnb::mac_interface</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__logical__channel__addmod" prot="public">srsgnb::mac_logical_channel_addmod</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__pdu__handler" prot="public">srsgnb::mac_pdu_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__prach__configuration" prot="public">srsgnb::mac_prach_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__rach__indication" prot="public">srsgnb::mac_rach_indication</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__result__notifier" prot="public">srsgnb::mac_result_notifier</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__rx__data__indication" prot="public">srsgnb::mac_rx_data_indication</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__rx__pdu" prot="public">srsgnb::mac_rx_pdu</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__scheduler" prot="public">srsgnb::mac_scheduler</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__scheduler__configurator" prot="public">srsgnb::mac_scheduler_configurator</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__sdu__rx__notifier" prot="public">srsgnb::mac_sdu_rx_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__sdu__tx__builder" prot="public">srsgnb::mac_sdu_tx_builder</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__slice__configuration" prot="public">srsgnb::mac_slice_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ue__configurator" prot="public">srsgnb::mac_ue_configurator</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ue__context" prot="public">srsgnb::mac_ue_context</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ue__control__information__handler" prot="public">srsgnb::mac_ue_control_information_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ue__create__request__message" prot="public">srsgnb::mac_ue_create_request_message</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ue__create__request__procedure" prot="public">srsgnb::mac_ue_create_request_procedure</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ue__create__response__message" prot="public">srsgnb::mac_ue_create_response_message</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ue__delete__procedure" prot="public">srsgnb::mac_ue_delete_procedure</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ue__delete__request__message" prot="public">srsgnb::mac_ue_delete_request_message</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ue__delete__response__message" prot="public">srsgnb::mac_ue_delete_response_message</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ue__reconfiguration__procedure" prot="public">srsgnb::mac_ue_reconfiguration_procedure</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ue__reconfiguration__request__message" prot="public">srsgnb::mac_ue_reconfiguration_request_message</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ue__reconfiguration__response__message" prot="public">srsgnb::mac_ue_reconfiguration_response_message</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ul__ccch__notifier" prot="public">srsgnb::mac_ul_ccch_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ul__configurator" prot="public">srsgnb::mac_ul_configurator</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ul__processor" prot="public">srsgnb::mac_ul_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ul__sch__pdu" prot="public">srsgnb::mac_ul_sch_pdu</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ul__sch__subpdu" prot="public">srsgnb::mac_ul_sch_subpdu</innerclass>
    <innerclass refid="structsrsgnb_1_1mac__ul__sched__result" prot="public">srsgnb::mac_ul_sched_result</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ul__ue__context" prot="public">srsgnb::mac_ul_ue_context</innerclass>
    <innerclass refid="classsrsgnb_1_1mac__ul__ue__manager" prot="public">srsgnb::mac_ul_ue_manager</innerclass>
    <innerclass refid="classsrsgnb_1_1manual__event" prot="public">srsgnb::manual_event</innerclass>
    <innerclass refid="classsrsgnb_1_1manual__event__flag" prot="public">srsgnb::manual_event_flag</innerclass>
    <innerclass refid="classsrsgnb_1_1manual__task__worker" prot="public">srsgnb::manual_task_worker</innerclass>
    <innerclass refid="classsrsgnb_1_1modulation__mapper" prot="public">srsgnb::modulation_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1modulation__mapper__impl" prot="public">srsgnb::modulation_mapper_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1moveonly__test__object" prot="public">srsgnb::moveonly_test_object</innerclass>
    <innerclass refid="classsrsgnb_1_1network__gateway__control__notifier" prot="public">srsgnb::network_gateway_control_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1network__gateway__data__handler" prot="public">srsgnb::network_gateway_data_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1network__gateway__data__notifier" prot="public">srsgnb::network_gateway_data_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1ngap__pcap" prot="public">srsgnb::ngap_pcap</innerclass>
    <innerclass refid="structsrsgnb_1_1noop__coroutine__promise" prot="public">srsgnb::noop_coroutine_promise</innerclass>
    <innerclass refid="structsrsgnb_1_1nr__cell__global__identity" prot="public">srsgnb::nr_cell_global_identity</innerclass>
    <innerclass refid="structsrsgnb_1_1nr__cell__identity" prot="public">srsgnb::nr_cell_identity</innerclass>
    <innerclass refid="structsrsgnb_1_1nr__up__dl__message" prot="public">srsgnb::nr_up_dl_message</innerclass>
    <innerclass refid="structsrsgnb_1_1nr__up__ul__message" prot="public">srsgnb::nr_up_ul_message</innerclass>
    <innerclass refid="structsrsgnb_1_1obj__id__comparator" prot="public">srsgnb::obj_id_comparator</innerclass>
    <innerclass refid="structsrsgnb_1_1ofdm__demodulator__common__configuration" prot="public">srsgnb::ofdm_demodulator_common_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1ofdm__demodulator__configuration" prot="public">srsgnb::ofdm_demodulator_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__demodulator__factory" prot="public">srsgnb::ofdm_demodulator_factory</innerclass>
    <innerclass refid="structsrsgnb_1_1ofdm__factory__generic__configuration" prot="public">srsgnb::ofdm_factory_generic_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1ofdm__modulator__common__configuration" prot="public">srsgnb::ofdm_modulator_common_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1ofdm__modulator__configuration" prot="public">srsgnb::ofdm_modulator_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__modulator__factory" prot="public">srsgnb::ofdm_modulator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__modulator__factory__impl" prot="public">srsgnb::ofdm_modulator_factory_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__prach__demodulator" prot="public">srsgnb::ofdm_prach_demodulator</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__prach__demodulator__factory" prot="public">srsgnb::ofdm_prach_demodulator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__prach__demodulator__impl" prot="public">srsgnb::ofdm_prach_demodulator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__slot__demodulator" prot="public">srsgnb::ofdm_slot_demodulator</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__slot__demodulator__impl" prot="public">srsgnb::ofdm_slot_demodulator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__slot__modulator" prot="public">srsgnb::ofdm_slot_modulator</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__slot__modulator__impl" prot="public">srsgnb::ofdm_slot_modulator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__symbol__demodulator" prot="public">srsgnb::ofdm_symbol_demodulator</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl" prot="public">srsgnb::ofdm_symbol_demodulator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__symbol__modulator" prot="public">srsgnb::ofdm_symbol_modulator</innerclass>
    <innerclass refid="classsrsgnb_1_1ofdm__symbol__modulator__impl" prot="public">srsgnb::ofdm_symbol_modulator_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1ofdm__symbol__range" prot="public">srsgnb::ofdm_symbol_range</innerclass>
    <innerclass refid="classsrsgnb_1_1optional" prot="public">srsgnb::optional</innerclass>
    <innerclass refid="structsrsgnb_1_1os__sched__affinity__bitmask" prot="public">srsgnb::os_sched_affinity_bitmask</innerclass>
    <innerclass refid="classsrsgnb_1_1pbch__encoder" prot="public">srsgnb::pbch_encoder</innerclass>
    <innerclass refid="classsrsgnb_1_1pbch__encoder__factory" prot="public">srsgnb::pbch_encoder_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pbch__encoder__impl" prot="public">srsgnb::pbch_encoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pbch__modulator" prot="public">srsgnb::pbch_modulator</innerclass>
    <innerclass refid="classsrsgnb_1_1pbch__modulator__factory" prot="public">srsgnb::pbch_modulator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pbch__modulator__impl" prot="public">srsgnb::pbch_modulator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pcell__ul__executor__mapper" prot="public">srsgnb::pcell_ul_executor_mapper</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__candidates__common__ss__configuration" prot="public">srsgnb::pdcch_candidates_common_ss_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__config" prot="public">srsgnb::pdcch_config</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__config__common" prot="public">srsgnb::pdcch_config_common</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__dl__information" prot="public">srsgnb::pdcch_dl_information</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__encoder" prot="public">srsgnb::pdcch_encoder</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__encoder__factory" prot="public">srsgnb::pdcch_encoder_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__encoder__impl" prot="public">srsgnb::pdcch_encoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__modulator" prot="public">srsgnb::pdcch_modulator</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__modulator__factory" prot="public">srsgnb::pdcch_modulator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__modulator__impl" prot="public">srsgnb::pdcch_modulator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__processor" prot="public">srsgnb::pdcch_processor</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__processor__config__t" prot="public">srsgnb::pdcch_processor_config_t</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__processor__factory" prot="public">srsgnb::pdcch_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__processor__impl" prot="public">srsgnb::pdcch_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__scheduler" prot="public">srsgnb::pdcch_scheduler</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcch__scheduler__impl" prot="public">srsgnb::pdcch_scheduler_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__type0__css__coreset__description" prot="public">srsgnb::pdcch_type0_css_coreset_description</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__configuration" prot="public">srsgnb::pdcch_type0_css_occasion_pattern1_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__description" prot="public">srsgnb::pdcch_type0_css_occasion_pattern1_description</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcch__ul__information" prot="public">srsgnb::pdcch_ul_information</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcp__config" prot="public">srsgnb::pdcp_config</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__entity" prot="public">srsgnb::pdcp_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1pdcp__entity__creation__message" prot="public">srsgnb::pdcp_entity_creation_message</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__entity__impl" prot="public">srsgnb::pdcp_entity_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__entity__rx" prot="public">srsgnb::pdcp_entity_rx</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__entity__tx" prot="public">srsgnb::pdcp_entity_tx</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__rx__lower__interface" prot="public">srsgnb::pdcp_rx_lower_interface</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__rx__upper__control__notifier" prot="public">srsgnb::pdcp_rx_upper_control_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__rx__upper__data__notifier" prot="public">srsgnb::pdcp_rx_upper_data_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__tx__lower__interface" prot="public">srsgnb::pdcp_tx_lower_interface</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__tx__lower__notifier" prot="public">srsgnb::pdcp_tx_lower_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__tx__upper__control__notifier" prot="public">srsgnb::pdcp_tx_upper_control_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__tx__upper__data__interface" prot="public">srsgnb::pdcp_tx_upper_data_interface</innerclass>
    <innerclass refid="classsrsgnb_1_1pdcp__ul__packet__procedure" prot="public">srsgnb::pdcp_ul_packet_procedure</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__codeword" prot="public">srsgnb::pdsch_codeword</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__config" prot="public">srsgnb::pdsch_config</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__config__common" prot="public">srsgnb::pdsch_config_common</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__default__time__allocation__config" prot="public">srsgnb::pdsch_default_time_allocation_config</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__dmrs__symbol__mask__mapping__type__A__single__configuration" prot="public">srsgnb::pdsch_dmrs_symbol_mask_mapping_type_A_single_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__encoder" prot="public">srsgnb::pdsch_encoder</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__encoder__factory" prot="public">srsgnb::pdsch_encoder_factory</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__encoder__factory__sw__configuration" prot="public">srsgnb::pdsch_encoder_factory_sw_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__encoder__impl" prot="public">srsgnb::pdsch_encoder_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__information" prot="public">srsgnb::pdsch_information</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__modulator" prot="public">srsgnb::pdsch_modulator</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__modulator__factory" prot="public">srsgnb::pdsch_modulator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__modulator__impl" prot="public">srsgnb::pdsch_modulator_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__prbs__tbs" prot="public">srsgnb::pdsch_prbs_tbs</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__processor" prot="public">srsgnb::pdsch_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__processor__factory" prot="public">srsgnb::pdsch_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pdsch__processor__impl" prot="public">srsgnb::pdsch_processor_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1pdsch__time__domain__resource__allocation" prot="public">srsgnb::pdsch_time_domain_resource_allocation</innerclass>
    <innerclass refid="classsrsgnb_1_1pdu__retx__queue__list" prot="public">srsgnb::pdu_retx_queue_list</innerclass>
    <innerclass refid="classsrsgnb_1_1pdu__rx__handler" prot="public">srsgnb::pdu_rx_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1phase__compensation__lut" prot="public">srsgnb::phase_compensation_lut</innerclass>
    <innerclass refid="classsrsgnb_1_1phy__error__adapter" prot="public">srsgnb::phy_error_adapter</innerclass>
    <innerclass refid="classsrsgnb_1_1phy__rg__gateway__adapter" prot="public">srsgnb::phy_rg_gateway_adapter</innerclass>
    <innerclass refid="classsrsgnb_1_1phy__rx__symbol__adapter" prot="public">srsgnb::phy_rx_symbol_adapter</innerclass>
    <innerclass refid="classsrsgnb_1_1phy__rx__symbol__request__adapter" prot="public">srsgnb::phy_rx_symbol_request_adapter</innerclass>
    <innerclass refid="classsrsgnb_1_1phy__time__unit" prot="public">srsgnb::phy_time_unit</innerclass>
    <innerclass refid="classsrsgnb_1_1phy__timing__adapter" prot="public">srsgnb::phy_timing_adapter</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__allocator" prot="public">srsgnb::polar_allocator</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__allocator__impl" prot="public">srsgnb::polar_allocator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__code" prot="public">srsgnb::polar_code</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__code__impl" prot="public">srsgnb::polar_code_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__deallocator" prot="public">srsgnb::polar_deallocator</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__deallocator__impl" prot="public">srsgnb::polar_deallocator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__decoder" prot="public">srsgnb::polar_decoder</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__decoder__impl" prot="public">srsgnb::polar_decoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__encoder" prot="public">srsgnb::polar_encoder</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__encoder__impl" prot="public">srsgnb::polar_encoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__factory" prot="public">srsgnb::polar_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__interleaver" prot="public">srsgnb::polar_interleaver</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__interleaver__impl" prot="public">srsgnb::polar_interleaver_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__rate__dematcher" prot="public">srsgnb::polar_rate_dematcher</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__rate__dematcher__impl" prot="public">srsgnb::polar_rate_dematcher_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__rate__matcher" prot="public">srsgnb::polar_rate_matcher</innerclass>
    <innerclass refid="classsrsgnb_1_1polar__rate__matcher__impl" prot="public">srsgnb::polar_rate_matcher_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1port__channel__estimator" prot="public">srsgnb::port_channel_estimator</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__buffer" prot="public">srsgnb::prach_buffer</innerclass>
    <innerclass refid="structsrsgnb_1_1prach__buffer__context" prot="public">srsgnb::prach_buffer_context</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__buffer__pool" prot="public">srsgnb::prach_buffer_pool</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__buffer__pool__impl" prot="public">srsgnb::prach_buffer_pool_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__buffer__static" prot="public">srsgnb::prach_buffer_static</innerclass>
    <innerclass refid="structsrsgnb_1_1prach__configuration" prot="public">srsgnb::prach_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1prach__detection__result" prot="public">srsgnb::prach_detection_result</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__detector" prot="public">srsgnb::prach_detector</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__detector__factory" prot="public">srsgnb::prach_detector_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__detector__simple__impl" prot="public">srsgnb::prach_detector_simple_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1prach__frequency__mapping__information" prot="public">srsgnb::prach_frequency_mapping_information</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__generator" prot="public">srsgnb::prach_generator</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__generator__factory" prot="public">srsgnb::prach_generator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__generator__impl" prot="public">srsgnb::prach_generator_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1prach__occasion__info" prot="public">srsgnb::prach_occasion_info</innerclass>
    <innerclass refid="structsrsgnb_1_1prach__preamble__information" prot="public">srsgnb::prach_preamble_information</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__processor" prot="public">srsgnb::prach_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__processor__baseband" prot="public">srsgnb::prach_processor_baseband</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__processor__factory" prot="public">srsgnb::prach_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__processor__impl" prot="public">srsgnb::prach_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__processor__notifier" prot="public">srsgnb::prach_processor_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__processor__request__handler" prot="public">srsgnb::prach_processor_request_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__processor__worker" prot="public">srsgnb::prach_processor_worker</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__scheduler" prot="public">srsgnb::prach_scheduler</innerclass>
    <innerclass refid="classsrsgnb_1_1prach__subcarrier__spacing" prot="public">srsgnb::prach_subcarrier_spacing</innerclass>
    <innerclass refid="structsrsgnb_1_1prb__grant" prot="public">srsgnb::prb_grant</innerclass>
    <innerclass refid="structsrsgnb_1_1prb__interval" prot="public">srsgnb::prb_interval</innerclass>
    <innerclass refid="structsrsgnb_1_1prbs__calculator__pdsch__config" prot="public">srsgnb::prbs_calculator_pdsch_config</innerclass>
    <innerclass refid="classsrsgnb_1_1preamble__format" prot="public">srsgnb::preamble_format</innerclass>
    <innerclass refid="classsrsgnb_1_1processor__notifier__adaptor" prot="public">srsgnb::processor_notifier_adaptor</innerclass>
    <innerclass refid="classsrsgnb_1_1processor__pool__repository" prot="public">srsgnb::processor_pool_repository</innerclass>
    <innerclass refid="structsrsgnb_1_1protocol__transaction" prot="public">srsgnb::protocol_transaction</innerclass>
    <innerclass refid="classsrsgnb_1_1protocol__transaction__manager" prot="public">srsgnb::protocol_transaction_manager</innerclass>
    <innerclass refid="classsrsgnb_1_1pseudo__random__generator" prot="public">srsgnb::pseudo_random_generator</innerclass>
    <innerclass refid="classsrsgnb_1_1pseudo__random__generator__factory" prot="public">srsgnb::pseudo_random_generator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pseudo__random__generator__impl" prot="public">srsgnb::pseudo_random_generator_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pss__processor" prot="public">srsgnb::pss_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1pss__processor__factory" prot="public">srsgnb::pss_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pss__processor__impl" prot="public">srsgnb::pss_processor_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1ptrs__downlink__config" prot="public">srsgnb::ptrs_downlink_config</innerclass>
    <innerclass refid="classsrsgnb_1_1pucch__helper" prot="public">srsgnb::pucch_helper</innerclass>
    <innerclass refid="classsrsgnb_1_1pucch__orthogonal__sequence" prot="public">srsgnb::pucch_orthogonal_sequence</innerclass>
    <innerclass refid="structsrsgnb_1_1pusch__config__common" prot="public">srsgnb::pusch_config_common</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__decoder" prot="public">srsgnb::pusch_decoder</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__decoder__factory" prot="public">srsgnb::pusch_decoder_factory</innerclass>
    <innerclass refid="structsrsgnb_1_1pusch__decoder__factory__sw__configuration" prot="public">srsgnb::pusch_decoder_factory_sw_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__decoder__impl" prot="public">srsgnb::pusch_decoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__demodulator" prot="public">srsgnb::pusch_demodulator</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__demodulator__factory" prot="public">srsgnb::pusch_demodulator_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__demodulator__impl" prot="public">srsgnb::pusch_demodulator_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1pusch__estimator__generic__configuration" prot="public">srsgnb::pusch_estimator_generic_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1pusch__information" prot="public">srsgnb::pusch_information</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__processor" prot="public">srsgnb::pusch_processor</innerclass>
    <innerclass refid="structsrsgnb_1_1pusch__processor__configuration" prot="public">srsgnb::pusch_processor_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__processor__factory" prot="public">srsgnb::pusch_processor_factory</innerclass>
    <innerclass refid="structsrsgnb_1_1pusch__processor__factory__sw__configuration" prot="public">srsgnb::pusch_processor_factory_sw_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1pusch__processor__impl" prot="public">srsgnb::pusch_processor_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1pusch__time__domain__resource__allocation" prot="public">srsgnb::pusch_time_domain_resource_allocation</innerclass>
    <innerclass refid="structsrsgnb_1_1ra__frequency__type1__configuration" prot="public">srsgnb::ra_frequency_type1_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1ra__frequency__type1__special__configuration" prot="public">srsgnb::ra_frequency_type1_special_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1ra__scheduler" prot="public">srsgnb::ra_scheduler</innerclass>
    <innerclass refid="structsrsgnb_1_1rach__config__common" prot="public">srsgnb::rach_config_common</innerclass>
    <innerclass refid="structsrsgnb_1_1rach__config__generic" prot="public">srsgnb::rach_config_generic</innerclass>
    <innerclass refid="classsrsgnb_1_1rach__handler" prot="public">srsgnb::rach_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1rach__handler__configurator" prot="public">srsgnb::rach_handler_configurator</innerclass>
    <innerclass refid="structsrsgnb_1_1rach__indication__message" prot="public">srsgnb::rach_indication_message</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__base" prot="public">srsgnb::radio_base</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__factory" prot="public">srsgnb::radio_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__factory__uhd__impl" prot="public">srsgnb::radio_factory_uhd_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__factory__zmq__impl" prot="public">srsgnb::radio_factory_zmq_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__management__plane" prot="public">srsgnb::radio_management_plane</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__notification__handler" prot="public">srsgnb::radio_notification_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__session" prot="public">srsgnb::radio_session</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__session__uhd__impl" prot="public">srsgnb::radio_session_uhd_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__session__zmq__impl" prot="public">srsgnb::radio_session_zmq_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__uhd__device" prot="public">srsgnb::radio_uhd_device</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__uhd__device__type" prot="public">srsgnb::radio_uhd_device_type</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__uhd__rx__stream" prot="public">srsgnb::radio_uhd_rx_stream</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__uhd__tx__stream" prot="public">srsgnb::radio_uhd_tx_stream</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__uhd__tx__stream__fsm" prot="public">srsgnb::radio_uhd_tx_stream_fsm</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__zmq__rx__channel" prot="public">srsgnb::radio_zmq_rx_channel</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__zmq__rx__channel__fsm" prot="public">srsgnb::radio_zmq_rx_channel_fsm</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__zmq__rx__stream" prot="public">srsgnb::radio_zmq_rx_stream</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__zmq__tx__channel" prot="public">srsgnb::radio_zmq_tx_channel</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__zmq__tx__channel__fsm" prot="public">srsgnb::radio_zmq_tx_channel_fsm</innerclass>
    <innerclass refid="classsrsgnb_1_1radio__zmq__tx__stream" prot="public">srsgnb::radio_zmq_tx_stream</innerclass>
    <innerclass refid="structsrsgnb_1_1rar__information" prot="public">srsgnb::rar_information</innerclass>
    <innerclass refid="classsrsgnb_1_1rar__pdu__assembler" prot="public">srsgnb::rar_pdu_assembler</innerclass>
    <innerclass refid="structsrsgnb_1_1rar__ul__grant" prot="public">srsgnb::rar_ul_grant</innerclass>
    <innerclass refid="classsrsgnb_1_1rb__allocation" prot="public">srsgnb::rb_allocation</innerclass>
    <innerclass refid="classsrsgnb_1_1re__measurement" prot="public">srsgnb::re_measurement</innerclass>
    <innerclass refid="structsrsgnb_1_1re__measurement__dimensions" prot="public">srsgnb::re_measurement_dimensions</innerclass>
    <innerclass refid="structsrsgnb_1_1re__pattern" prot="public">srsgnb::re_pattern</innerclass>
    <innerclass refid="classsrsgnb_1_1re__pattern__list" prot="public">srsgnb::re_pattern_list</innerclass>
    <innerclass refid="classsrsgnb_1_1remote__f1c__pdu__handler" prot="public">srsgnb::remote_f1c_pdu_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1resource__grid" prot="public">srsgnb::resource_grid</innerclass>
    <innerclass refid="structsrsgnb_1_1resource__grid__context" prot="public">srsgnb::resource_grid_context</innerclass>
    <innerclass refid="structsrsgnb_1_1resource__grid__coordinate" prot="public">srsgnb::resource_grid_coordinate</innerclass>
    <innerclass refid="classsrsgnb_1_1resource__grid__impl" prot="public">srsgnb::resource_grid_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1resource__grid__pool" prot="public">srsgnb::resource_grid_pool</innerclass>
    <innerclass refid="classsrsgnb_1_1resource__grid__pool__impl" prot="public">srsgnb::resource_grid_pool_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1resource__grid__reader" prot="public">srsgnb::resource_grid_reader</innerclass>
    <innerclass refid="classsrsgnb_1_1resource__grid__writer" prot="public">srsgnb::resource_grid_writer</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__am__config" prot="public">srsgnb::rlc_am_config</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__am__entity" prot="public">srsgnb::rlc_am_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__am__pdu__header" prot="public">srsgnb::rlc_am_pdu_header</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__am__status__nack" prot="public">srsgnb::rlc_am_status_nack</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__am__status__pdu" prot="public">srsgnb::rlc_am_status_pdu</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__base__entity" prot="public">srsgnb::rlc_base_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__bearer__metrics__container" prot="public">srsgnb::rlc_bearer_metrics_container</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__bearer__rx__metrics" prot="public">srsgnb::rlc_bearer_rx_metrics</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__bearer__rx__metrics__container" prot="public">srsgnb::rlc_bearer_rx_metrics_container</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__bearer__tx__metrics" prot="public">srsgnb::rlc_bearer_tx_metrics</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__bearer__tx__metrics__container" prot="public">srsgnb::rlc_bearer_tx_metrics_container</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__config" prot="public">srsgnb::rlc_config</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__entity" prot="public">srsgnb::rlc_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__entity__creation__message" prot="public">srsgnb::rlc_entity_creation_message</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__pdu__window" prot="public">srsgnb::rlc_pdu_window</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__pdu__window__base" prot="public">srsgnb::rlc_pdu_window_base</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__rx__am__config" prot="public">srsgnb::rlc_rx_am_config</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__rx__am__entity" prot="public">srsgnb::rlc_rx_am_entity</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__rx__am__status__provider" prot="public">srsgnb::rlc_rx_am_status_provider</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__rx__entity" prot="public">srsgnb::rlc_rx_entity</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__rx__pdu__handler" prot="public">srsgnb::rlc_rx_pdu_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__rx__tm__entity" prot="public">srsgnb::rlc_rx_tm_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__rx__um__config" prot="public">srsgnb::rlc_rx_um_config</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__rx__um__entity" prot="public">srsgnb::rlc_rx_um_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__rx__um__state" prot="public">srsgnb::rlc_rx_um_state</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__rx__upper__layer__data__notifier" prot="public">srsgnb::rlc_rx_upper_layer_data_notifier</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__sdu" prot="public">srsgnb::rlc_sdu</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__sdu__queue" prot="public">srsgnb::rlc_sdu_queue</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tm__entity" prot="public">srsgnb::rlc_tm_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__tx__am__config" prot="public">srsgnb::rlc_tx_am_config</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__am__entity" prot="public">srsgnb::rlc_tx_am_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__tx__am__state" prot="public">srsgnb::rlc_tx_am_state</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__am__status__handler" prot="public">srsgnb::rlc_tx_am_status_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__tx__amd__pdu__box" prot="public">srsgnb::rlc_tx_amd_pdu_box</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__tx__amd__retx" prot="public">srsgnb::rlc_tx_amd_retx</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__buffer__state__update__notifier" prot="public">srsgnb::rlc_tx_buffer_state_update_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__entity" prot="public">srsgnb::rlc_tx_entity</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__pdu__transmitter" prot="public">srsgnb::rlc_tx_pdu_transmitter</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__sdu__handler" prot="public">srsgnb::rlc_tx_sdu_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__tm__entity" prot="public">srsgnb::rlc_tx_tm_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__tx__um__config" prot="public">srsgnb::rlc_tx_um_config</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__um__entity" prot="public">srsgnb::rlc_tx_um_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__tx__um__state" prot="public">srsgnb::rlc_tx_um_state</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__tx__upper__layer__control__notifier" prot="public">srsgnb::rlc_tx_upper_layer_control_notifier</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__ue__delete__message" prot="public">srsgnb::rlc_ue_delete_message</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__ue__delete__response__message" prot="public">srsgnb::rlc_ue_delete_response_message</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__ue__reconfiguration__message" prot="public">srsgnb::rlc_ue_reconfiguration_message</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__ue__reconfiguration__response__message" prot="public">srsgnb::rlc_ue_reconfiguration_response_message</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__ue__reestablishment__message" prot="public">srsgnb::rlc_ue_reestablishment_message</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__ue__reestablishment__response__message" prot="public">srsgnb::rlc_ue_reestablishment_response_message</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__um__config" prot="public">srsgnb::rlc_um_config</innerclass>
    <innerclass refid="classsrsgnb_1_1rlc__um__entity" prot="public">srsgnb::rlc_um_entity</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__um__pdu" prot="public">srsgnb::rlc_um_pdu</innerclass>
    <innerclass refid="structsrsgnb_1_1rlc__um__pdu__header" prot="public">srsgnb::rlc_um_pdu_header</innerclass>
    <innerclass refid="classsrsgnb_1_1rnti__allocator" prot="public">srsgnb::rnti_allocator</innerclass>
    <innerclass refid="classsrsgnb_1_1rx__softbuffer" prot="public">srsgnb::rx_softbuffer</innerclass>
    <innerclass refid="classsrsgnb_1_1rx__softbuffer__codeblock__pool" prot="public">srsgnb::rx_softbuffer_codeblock_pool</innerclass>
    <innerclass refid="structsrsgnb_1_1rx__softbuffer__identifier" prot="public">srsgnb::rx_softbuffer_identifier</innerclass>
    <innerclass refid="classsrsgnb_1_1rx__softbuffer__impl" prot="public">srsgnb::rx_softbuffer_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1rx__softbuffer__pool" prot="public">srsgnb::rx_softbuffer_pool</innerclass>
    <innerclass refid="structsrsgnb_1_1rx__softbuffer__pool__description" prot="public">srsgnb::rx_softbuffer_pool_description</innerclass>
    <innerclass refid="classsrsgnb_1_1rx__softbuffer__pool__impl" prot="public">srsgnb::rx_softbuffer_pool_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1sample__statistics" prot="public">srsgnb::sample_statistics</innerclass>
    <innerclass refid="classsrsgnb_1_1sampling__rate" prot="public">srsgnb::sampling_rate</innerclass>
    <innerclass refid="structsrsgnb_1_1sch__mcs__description" prot="public">srsgnb::sch_mcs_description</innerclass>
    <innerclass refid="structsrsgnb_1_1sched__cell__configuration__request__message" prot="public">srsgnb::sched_cell_configuration_request_message</innerclass>
    <innerclass refid="classsrsgnb_1_1sched__configuration__notifier" prot="public">srsgnb::sched_configuration_notifier</innerclass>
    <innerclass refid="structsrsgnb_1_1sched__result" prot="public">srsgnb::sched_result</innerclass>
    <innerclass refid="structsrsgnb_1_1sched__ue__creation__request__message" prot="public">srsgnb::sched_ue_creation_request_message</innerclass>
    <innerclass refid="structsrsgnb_1_1sched__ue__delete__message" prot="public">srsgnb::sched_ue_delete_message</innerclass>
    <innerclass refid="structsrsgnb_1_1sched__ue__reconfiguration__message" prot="public">srsgnb::sched_ue_reconfiguration_message</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__cell" prot="public">srsgnb::scheduler_cell</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__cell__manager" prot="public">srsgnb::scheduler_cell_manager</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__configurator" prot="public">srsgnb::scheduler_configurator</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__dl__buffer__state__indicator" prot="public">srsgnb::scheduler_dl_buffer_state_indicator</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__feedback__handler" prot="public">srsgnb::scheduler_feedback_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__impl" prot="public">srsgnb::scheduler_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__policy" prot="public">srsgnb::scheduler_policy</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__slot__handler" prot="public">srsgnb::scheduler_slot_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1scheduler__strategy__params" prot="public">srsgnb::scheduler_strategy_params</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__time__rr" prot="public">srsgnb::scheduler_time_rr</innerclass>
    <innerclass refid="classsrsgnb_1_1scheduler__ue__configurator" prot="public">srsgnb::scheduler_ue_configurator</innerclass>
    <innerclass refid="structsrsgnb_1_1scs__specific__carrier" prot="public">srsgnb::scs_specific_carrier</innerclass>
    <innerclass refid="classsrsgnb_1_1sctp__network__gateway" prot="public">srsgnb::sctp_network_gateway</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__entity" prot="public">srsgnb::sdap_entity</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__entity__impl" prot="public">srsgnb::sdap_entity_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__mapper" prot="public">srsgnb::sdap_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__packet__procedures" prot="public">srsgnb::sdap_packet_procedures</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__pdu__handler" prot="public">srsgnb::sdap_pdu_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__pdu__tx__notifier" prot="public">srsgnb::sdap_pdu_tx_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__procedure__dispatcher" prot="public">srsgnb::sdap_procedure_dispatcher</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__sdu__handler" prot="public">srsgnb::sdap_sdu_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__sdu__rx__notifier" prot="public">srsgnb::sdap_sdu_rx_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1sdap__ul__packet__procedure" prot="public">srsgnb::sdap_ul_packet_procedure</innerclass>
    <innerclass refid="structsrsgnb_1_1search__space__configuration" prot="public">srsgnb::search_space_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1segmenter__config" prot="public">srsgnb::segmenter_config</innerclass>
    <innerclass refid="structsrsgnb_1_1serving__cell__ue__configuration__request" prot="public">srsgnb::serving_cell_ue_configuration_request</innerclass>
    <innerclass refid="classsrsgnb_1_1short__block__detector" prot="public">srsgnb::short_block_detector</innerclass>
    <innerclass refid="classsrsgnb_1_1short__block__detector__impl" prot="public">srsgnb::short_block_detector_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1short__block__encoder" prot="public">srsgnb::short_block_encoder</innerclass>
    <innerclass refid="classsrsgnb_1_1short__block__encoder__impl" prot="public">srsgnb::short_block_encoder_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1sib1__scheduler" prot="public">srsgnb::sib1_scheduler</innerclass>
    <innerclass refid="structsrsgnb_1_1sib__information" prot="public">srsgnb::sib_information</innerclass>
    <innerclass refid="classsrsgnb_1_1sib__pdu__assembler" prot="public">srsgnb::sib_pdu_assembler</innerclass>
    <innerclass refid="classsrsgnb_1_1slot__array" prot="public">srsgnb::slot_array</innerclass>
    <innerclass refid="classsrsgnb_1_1slot__event__list" prot="public">srsgnb::slot_event_list</innerclass>
    <innerclass refid="classsrsgnb_1_1slot__point" prot="public">srsgnb::slot_point</innerclass>
    <innerclass refid="classsrsgnb_1_1slot__span" prot="public">srsgnb::slot_span</innerclass>
    <innerclass refid="classsrsgnb_1_1slot__sync__point" prot="public">srsgnb::slot_sync_point</innerclass>
    <innerclass refid="classsrsgnb_1_1slot__vector" prot="public">srsgnb::slot_vector</innerclass>
    <innerclass refid="classsrsgnb_1_1span" prot="public">srsgnb::span</innerclass>
    <innerclass refid="classsrsgnb_1_1split__slot__span" prot="public">srsgnb::split_slot_span</innerclass>
    <innerclass refid="classsrsgnb_1_1split__slot__span_3_01const_01U_01_4" prot="public">srsgnb::split_slot_span&lt; const U &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1sr__indication__message" prot="public">srsgnb::sr_indication_message</innerclass>
    <innerclass refid="classsrsgnb_1_1srs__sched__config__adapter" prot="public">srsgnb::srs_sched_config_adapter</innerclass>
    <innerclass refid="classsrsgnb_1_1ssb__assembler" prot="public">srsgnb::ssb_assembler</innerclass>
    <innerclass refid="structsrsgnb_1_1ssb__configuration" prot="public">srsgnb::ssb_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1ssb__information" prot="public">srsgnb::ssb_information</innerclass>
    <innerclass refid="structsrsgnb_1_1ssb__mib__data__pdu" prot="public">srsgnb::ssb_mib_data_pdu</innerclass>
    <innerclass refid="classsrsgnb_1_1ssb__offset__to__pointA" prot="public">srsgnb::ssb_offset_to_pointA</innerclass>
    <innerclass refid="classsrsgnb_1_1ssb__processor" prot="public">srsgnb::ssb_processor</innerclass>
    <innerclass refid="structsrsgnb_1_1ssb__processor__config" prot="public">srsgnb::ssb_processor_config</innerclass>
    <innerclass refid="classsrsgnb_1_1ssb__processor__factory" prot="public">srsgnb::ssb_processor_factory</innerclass>
    <innerclass refid="structsrsgnb_1_1ssb__processor__factory__sw__configuration" prot="public">srsgnb::ssb_processor_factory_sw_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1ssb__processor__impl" prot="public">srsgnb::ssb_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1ssb__subcarrier__offset" prot="public">srsgnb::ssb_subcarrier_offset</innerclass>
    <innerclass refid="classsrsgnb_1_1sss__processor" prot="public">srsgnb::sss_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1sss__processor__factory" prot="public">srsgnb::sss_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1sss__processor__impl" prot="public">srsgnb::sss_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1stable__id__map" prot="public">srsgnb::stable_id_map</innerclass>
    <innerclass refid="classsrsgnb_1_1static__blocking__queue" prot="public">srsgnb::static_blocking_queue</innerclass>
    <innerclass refid="classsrsgnb_1_1static__circular__buffer" prot="public">srsgnb::static_circular_buffer</innerclass>
    <innerclass refid="classsrsgnb_1_1static__vector" prot="public">srsgnb::static_vector</innerclass>
    <innerclass refid="structsrsgnb_1_1suspend__always" prot="public">srsgnb::suspend_always</innerclass>
    <innerclass refid="structsrsgnb_1_1suspend__never" prot="public">srsgnb::suspend_never</innerclass>
    <innerclass refid="classsrsgnb_1_1task__executor" prot="public">srsgnb::task_executor</innerclass>
    <innerclass refid="classsrsgnb_1_1task__worker" prot="public">srsgnb::task_worker</innerclass>
    <innerclass refid="classsrsgnb_1_1task__worker__executor" prot="public">srsgnb::task_worker_executor</innerclass>
    <innerclass refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration" prot="public">srsgnb::tbs_calculator_pdsch_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1tdd__configuration" prot="public">srsgnb::tdd_configuration</innerclass>
    <innerclass refid="structsrsgnb_1_1tdd__ul__dl__config__common" prot="public">srsgnb::tdd_ul_dl_config_common</innerclass>
    <innerclass refid="structsrsgnb_1_1tdd__ul__dl__pattern" prot="public">srsgnb::tdd_ul_dl_pattern</innerclass>
    <innerclass refid="classsrsgnb_1_1test__delimit__logger" prot="public">srsgnb::test_delimit_logger</innerclass>
    <innerclass refid="classsrsgnb_1_1timer__manager" prot="public">srsgnb::timer_manager</innerclass>
    <innerclass refid="structsrsgnb_1_1tx__power__pdcch__information" prot="public">srsgnb::tx_power_pdcch_information</innerclass>
    <innerclass refid="classsrsgnb_1_1ue" prot="public">srsgnb::ue</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__carrier" prot="public">srsgnb::ue_carrier</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__cell__configuration" prot="public">srsgnb::ue_cell_configuration</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__cell__grid__allocator" prot="public">srsgnb::ue_cell_grid_allocator</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__event__manager" prot="public">srsgnb::ue_event_manager</innerclass>
    <innerclass refid="structsrsgnb_1_1ue__event__prefix" prot="public">srsgnb::ue_event_prefix</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__index__based__ul__executor__mapper" prot="public">srsgnb::ue_index_based_ul_executor_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__pdsch__allocator" prot="public">srsgnb::ue_pdsch_allocator</innerclass>
    <innerclass refid="structsrsgnb_1_1ue__pdsch__grant" prot="public">srsgnb::ue_pdsch_grant</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__pusch__allocator" prot="public">srsgnb::ue_pusch_allocator</innerclass>
    <innerclass refid="structsrsgnb_1_1ue__pusch__grant" prot="public">srsgnb::ue_pusch_grant</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__scheduler" prot="public">srsgnb::ue_scheduler</innerclass>
    <innerclass refid="structsrsgnb_1_1ue__scheduler__cell__params" prot="public">srsgnb::ue_scheduler_cell_params</innerclass>
    <innerclass refid="classsrsgnb_1_1ue__scheduler__impl" prot="public">srsgnb::ue_scheduler_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1uhd__exception__handler" prot="public">srsgnb::uhd_exception_handler</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__bsr__indication__message" prot="public">srsgnb::ul_bsr_indication_message</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__bsr__lcg__report" prot="public">srsgnb::ul_bsr_lcg_report</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__ccch__indication__message" prot="public">srsgnb::ul_ccch_indication_message</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__config__common" prot="public">srsgnb::ul_config_common</innerclass>
    <innerclass refid="classsrsgnb_1_1ul__harq__process" prot="public">srsgnb::ul_harq_process</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__prach__results" prot="public">srsgnb::ul_prach_results</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__rrc__transfer__message" prot="public">srsgnb::ul_rrc_transfer_message</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__sched__info" prot="public">srsgnb::ul_sched_info</innerclass>
    <innerclass refid="structsrsgnb_1_1ul__sched__result" prot="public">srsgnb::ul_sched_result</innerclass>
    <innerclass refid="classsrsgnb_1_1unique__coroutine" prot="public">srsgnb::unique_coroutine</innerclass>
    <innerclass refid="classsrsgnb_1_1unique__function" prot="public">srsgnb::unique_function</innerclass>
    <innerclass refid="classsrsgnb_1_1unique__function_3_01R_07Args_8_8_8_08_00_01Capacity_00_01ForbidAlloc_01_4" prot="public">srsgnb::unique_function&lt; R(Args...), Capacity, ForbidAlloc &gt;</innerclass>
    <innerclass refid="classsrsgnb_1_1unique__thread" prot="public">srsgnb::unique_thread</innerclass>
    <innerclass refid="classsrsgnb_1_1unique__timer" prot="public">srsgnb::unique_timer</innerclass>
    <innerclass refid="classsrsgnb_1_1uplink__processor" prot="public">srsgnb::uplink_processor</innerclass>
    <innerclass refid="structsrsgnb_1_1uplink__processor__config" prot="public">srsgnb::uplink_processor_config</innerclass>
    <innerclass refid="classsrsgnb_1_1uplink__processor__factory" prot="public">srsgnb::uplink_processor_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1uplink__processor__pool" prot="public">srsgnb::uplink_processor_pool</innerclass>
    <innerclass refid="structsrsgnb_1_1uplink__processor__pool__config" prot="public">srsgnb::uplink_processor_pool_config</innerclass>
    <innerclass refid="classsrsgnb_1_1uplink__processor__pool__impl" prot="public">srsgnb::uplink_processor_pool_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1uplink__processor__pool__impl__config" prot="public">srsgnb::uplink_processor_pool_impl_config</innerclass>
    <innerclass refid="classsrsgnb_1_1uplink__processor__single__executor__impl" prot="public">srsgnb::uplink_processor_single_executor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1uplink__request__processor" prot="public">srsgnb::uplink_request_processor</innerclass>
    <innerclass refid="classsrsgnb_1_1uplink__request__processor__impl" prot="public">srsgnb::uplink_request_processor_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy" prot="public">srsgnb::upper_phy</innerclass>
    <innerclass refid="structsrsgnb_1_1upper__phy__config" prot="public">srsgnb::upper_phy_config</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__factory" prot="public">srsgnb::upper_phy_factory</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__impl" prot="public">srsgnb::upper_phy_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__rg__gateway" prot="public">srsgnb::upper_phy_rg_gateway</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__rx__results__notifier" prot="public">srsgnb::upper_phy_rx_results_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__rx__results__notifier__proxy" prot="public">srsgnb::upper_phy_rx_results_notifier_proxy</innerclass>
    <innerclass refid="structsrsgnb_1_1upper__phy__rx__symbol__context" prot="public">srsgnb::upper_phy_rx_symbol_context</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__rx__symbol__handler" prot="public">srsgnb::upper_phy_rx_symbol_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__rx__symbol__handler__impl" prot="public">srsgnb::upper_phy_rx_symbol_handler_impl</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__rx__symbol__request__notifier" prot="public">srsgnb::upper_phy_rx_symbol_request_notifier</innerclass>
    <innerclass refid="structsrsgnb_1_1upper__phy__timing__context" prot="public">srsgnb::upper_phy_timing_context</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__timing__handler" prot="public">srsgnb::upper_phy_timing_handler</innerclass>
    <innerclass refid="classsrsgnb_1_1upper__phy__timing__notifier" prot="public">srsgnb::upper_phy_timing_notifier</innerclass>
    <innerclass refid="classsrsgnb_1_1vrb__to__prb__mapper" prot="public">srsgnb::vrb_to_prb_mapper</innerclass>
    <innerclass refid="classsrsgnb_1_1wait__manual__event__tester" prot="public">srsgnb::wait_manual_event_tester</innerclass>
    <innerclass refid="classsrsgnb_1_1wait__manual__event__tester_3_01void_01_4" prot="public">srsgnb::wait_manual_event_tester&lt; void &gt;</innerclass>
    <innernamespace refid="namespacesrsgnb_1_1band__helper">srsgnb::band_helper</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1detail">srsgnb::detail</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1du__config__helpers">srsgnb::du_config_helpers</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1fapi">srsgnb::fapi</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1fapi__adaptor">srsgnb::fapi_adaptor</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1ldpc">srsgnb::ldpc</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1pdcch__constants">srsgnb::pdcch_constants</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1phys__cell__id">srsgnb::phys_cell_id</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1prach__constants">srsgnb::prach_constants</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1pusch__constants">srsgnb::pusch_constants</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1radio__configuration">srsgnb::radio_configuration</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1srs__cu__cp">srsgnb::srs_cu_cp</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1srs__du">srsgnb::srs_du</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1srsvec">srsgnb::srsvec</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1task__details">srsgnb::task_details</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1test__helpers">srsgnb::test_helpers</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1uci__constants">srsgnb::uci_constants</innernamespace>
    <innernamespace refid="namespacesrsgnb_1_1views">srsgnb::views</innernamespace>
      <sectiondef kind="user-defined">
      <header>Common numerical constants.</header>
      <memberdef kind="variable" id="namespacesrsgnb_1aad7f4edf0b10fb8adef634046ef6ded6" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="classsrsgnb_1_1log__likelihood__ratio" kindref="compound">log_likelihood_ratio</ref></type>
        <definition>constexpr log_likelihood_ratio srsgnb::LLR_MAX</definition>
        <argsstring></argsstring>
        <name>LLR_MAX</name>
        <initializer>= <ref refid="classsrsgnb_1_1log__likelihood__ratio_1ad5095727c141c257608461d7890789ce" kindref="member">log_likelihood_ratio::max</ref>()</initializer>
        <briefdescription>
<para>Maximum finite log-likelihood ratio value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/log_likelihood_ratio.h" line="233" column="32" bodyfile="include/srsgnb/phy/upper/log_likelihood_ratio.h" bodystart="233" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1a500cb077147fb9be4d751bfc4b2235b6" compoundref="ldpc__decoder__impl_8cpp" startline="172" endline="227">srsgnb::ldpc_decoder_generic::update_check_to_variable_messages</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af06b452cb215049eca2f4b8e499bd230" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="classsrsgnb_1_1log__likelihood__ratio" kindref="compound">log_likelihood_ratio</ref></type>
        <definition>constexpr log_likelihood_ratio srsgnb::LLR_MIN</definition>
        <argsstring></argsstring>
        <name>LLR_MIN</name>
        <initializer>= <ref refid="classsrsgnb_1_1log__likelihood__ratio_1a02c71f8d2a9b64be359c4f0aa818e6a9" kindref="member">log_likelihood_ratio::min</ref>()</initializer>
        <briefdescription>
<para>Minimum finite log-likelihood ratio value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/log_likelihood_ratio.h" line="236" column="32" bodyfile="include/srsgnb/phy/upper/log_likelihood_ratio.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aef6e122792a07352d866cd4b8075ecd5" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="classsrsgnb_1_1log__likelihood__ratio" kindref="compound">log_likelihood_ratio</ref></type>
        <definition>constexpr log_likelihood_ratio srsgnb::LLR_INFINITY</definition>
        <argsstring></argsstring>
        <name>LLR_INFINITY</name>
        <initializer>= <ref refid="classsrsgnb_1_1log__likelihood__ratio_1a426852f1526b1836e449c28033d2d5c2" kindref="member">log_likelihood_ratio::infinity</ref>()</initializer>
        <briefdescription>
<para>&quot;Positive infinity&quot; log-likelihood ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/log_likelihood_ratio.h" line="239" column="32" bodyfile="include/srsgnb/phy/upper/log_likelihood_ratio.h" bodystart="239" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1a6c1341a2d4c38f5481a805691e488203" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="87" endline="113">srsgnb::ldpc_rate_dematcher_impl::allot_llrs</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504" prot="public" static="no" strong="yes">
        <type></type>
        <name>bsr_format</name>
        <enumvalue id="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504acea9be6c7a0c80474d678840962759d9" prot="public">
          <name>SHORT_BSR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504afbd4b464c75bd3ed3d9439e4eb943a68" prot="public">
          <name>LONG_BSR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504a979fdd2a5c79b91d133e041711f3459e" prot="public">
          <name>SHORT_TRUNC_BSR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504a38dd95d4f974fd6d00a47f3cc9baae47" prot="public">
          <name>LONG_TRUNC_BSR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TS 38.321, 6.1.3.1 - Buffer Status Report MAC CEs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/bsr_format.h" line="18" column="22" bodyfile="include/srsgnb/mac/bsr_format.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a8035b0d5dfde4e910dac3930930b48b7" prot="public" static="no" strong="yes">
        <type></type>
        <name>lower_phy_ta_offset</name>
        <enumvalue id="namespacesrsgnb_1a8035b0d5dfde4e910dac3930930b48b7ac16e571b9f71e740fda5018a37c10f17" prot="public">
          <name>n0</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>For FR1 FDD band with LTE-NR coexistence case. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a8035b0d5dfde4e910dac3930930b48b7a036ef862576c8b3c04ecb9cf6deaa689" prot="public">
          <name>n25600</name>
          <initializer>= 25600</initializer>
          <briefdescription>
<para>For FR1 FDD band without LTE-NR coexistence case or for FR1 TDD band without LTE-NR coexistence case. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a8035b0d5dfde4e910dac3930930b48b7a745f7976baf5aea91c8e65a6ca310d5e" prot="public">
          <name>n13792</name>
          <initializer>= 13792</initializer>
          <briefdescription>
<para>For FR2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a8035b0d5dfde4e910dac3930930b48b7a3375949649db72c7f7cb2d4879b0d1aa" prot="public">
          <name>n39936</name>
          <initializer>= 39936</initializer>
          <briefdescription>
<para>For FR1 TDD band with LTE-NR coexistence case. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Time advance offset - parameter <formula id="0">$N_{TA,offset}$</formula> in TS38.211 Section 4.3.3. </para>
        </briefdescription>
        <detaileddescription>
<para>This value must be selected from the parameter <emphasis>n-TimingAdvanceOffset</emphasis> (TS38.331 Section 6.3.2, Information Element <emphasis>ServingCellConfigCommon</emphasis>) if it is present. Otherwise, it is given by TS38.133 Section 7.1.2 depending on the duplex mode of the cell and the frequency range.</para>
<para>The values are given in units of <formula id="1">$T_c$</formula> (see TS38.211 Section 4.1). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/lower/lower_phy_configuration.h" line="53" column="31" bodyfile="include/srsgnb/phy/lower/lower_phy_configuration.h" bodystart="53" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1ac9b644248e8f38499883fd5d1efb6b6f" prot="public" static="no" strong="yes">
        <type></type>
        <name>crc_generator_poly</name>
        <enumvalue id="namespacesrsgnb_1ac9b644248e8f38499883fd5d1efb6b6faa4c3f88f5df3a24ce03e35c72f6eee0b" prot="public">
          <name>CRC24A</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac9b644248e8f38499883fd5d1efb6b6fac2bc3e3690e4fad18f206db443306f62" prot="public">
          <name>CRC24B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac9b644248e8f38499883fd5d1efb6b6fa840c380a7dc0a251a54b0bd036bbf31f" prot="public">
          <name>CRC24C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac9b644248e8f38499883fd5d1efb6b6fa8d5f4880a8a5ff2da50dc8e80c10ef60" prot="public">
          <name>CRC16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac9b644248e8f38499883fd5d1efb6b6fafdf42eea1c1d3c130f9f51f2246394f6" prot="public">
          <name>CRC11</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac9b644248e8f38499883fd5d1efb6b6fab6c7a7baaa2e8717d44e0c03222b5159" prot="public">
          <name>CRC6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CRC cyclic generator polynomials identifiers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/crc_calculator.h" line="18" column="30" bodyfile="include/srsgnb/phy/upper/channel_coding/crc_calculator.h" bodystart="18" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a784f18323eca424569a3f4b44800835c" prot="public" static="no" strong="yes">
        <type></type>
        <name>polar_code_ibil</name>
        <enumvalue id="namespacesrsgnb_1a784f18323eca424569a3f4b44800835ca4a153ad7c410eb31b5f30ddc19128119" prot="public">
          <name>not_present</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a784f18323eca424569a3f4b44800835ca47ed49958e2500d72e305f85ed316c91" prot="public">
          <name>present</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/polar/polar_code.h" line="18" column="27" bodyfile="include/srsgnb/phy/upper/channel_coding/polar/polar_code.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a11968d6ee2ba977dc2fb3e214287448a" prot="public" static="no" strong="yes">
        <type></type>
        <name>polar_interleaver_direction</name>
        <enumvalue id="namespacesrsgnb_1a11968d6ee2ba977dc2fb3e214287448aa7da685001e153f41a83eb6255069dc3d" prot="public">
          <name>tx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a11968d6ee2ba977dc2fb3e214287448aa22770fbdd1177351a869401a0e1427bc" prot="public">
          <name>rx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/polar/polar_interleaver.h" line="18" column="39" bodyfile="include/srsgnb/phy/upper/channel_coding/polar/polar_interleaver.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a1f9422ae18765516037c1ecc2c135066" prot="public" static="no" strong="yes">
        <type></type>
        <name>csi_rs_cdm_type</name>
        <enumvalue id="namespacesrsgnb_1a1f9422ae18765516037c1ecc2c135066a360bd385ef59f840bdc2aeb3ea13a483" prot="public">
          <name>NO_CDM</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No CDM, i.e. CDM group of size 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a1f9422ae18765516037c1ecc2c135066a3e8a0604885219c8f0c36b2dbca5d651" prot="public">
          <name>FD_CDM2</name>
          <briefdescription>
<para>Frequency-domain CDM group of size 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a1f9422ae18765516037c1ecc2c135066a587dd1a22ebf3b43974590cb70cf8aa1" prot="public">
          <name>CDM4_FD2_TD2</name>
          <briefdescription>
<para>CDM group of size 4 (two frequency-domain locations and two time-domain locations). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a1f9422ae18765516037c1ecc2c135066ae18065a8375b6043db818ecbf9c95584" prot="public">
          <name>CDM8_FD2_TD4</name>
          <briefdescription>
<para>CDM group of size 8 (two frequency-domain locations and four time-domain locations). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Code-Division Multiplexing (CDM) strategies for CSI-RS. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/csi_rs_processor.h" line="22" column="27" bodyfile="include/srsgnb/phy/upper/signal_processors/csi_rs_processor.h" bodystart="22" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a906125350f28dd3269e8661054f1a848" prot="public" static="no" strong="yes">
        <type></type>
        <name>csi_rs_freq_density</name>
        <enumvalue id="namespacesrsgnb_1a906125350f28dd3269e8661054f1a848a27df5d74bec7eead23384dfeba66512f" prot="public">
          <name>DOT5_EVEN_RB</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>One RE occupied in even-numbered PRB. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a906125350f28dd3269e8661054f1a848a77b60d23c082d86f0913f6524ddded17" prot="public">
          <name>DOT5_ODD_RB</name>
          <briefdescription>
<para>One RE occupied in odd-numbered PRB. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a906125350f28dd3269e8661054f1a848abc21e6484530fc9d0313cb816b733396" prot="public">
          <name>ONE</name>
          <briefdescription>
<para>One RE occupied in every PRB. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a906125350f28dd3269e8661054f1a848a413af0de1f97a2155acf2b8b26ab36e2" prot="public">
          <name>THREE</name>
          <briefdescription>
<para>Three RE occupied in every PRB. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Strategies regarding Resource Element (RE) density in the frequency domain for CSI-RS signals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/csi_rs_processor.h" line="34" column="31" bodyfile="include/srsgnb/phy/upper/signal_processors/csi_rs_processor.h" bodystart="34" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673" prot="public" static="no" strong="yes">
        <type></type>
        <name>nr_band</name>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673afedb2d84cafe20862cb4399751a8a7e3" prot="public">
          <name>invalid</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673ac82561ec215a6e31807ceedf3b3bd25e" prot="public">
          <name>n1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673aa6bbc91ae73dd21c0533f735470a9cd0" prot="public">
          <name>n2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a4443aee183b279f76a95c13c7f5bca0d" prot="public">
          <name>n3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a8eb6d8747175919f27472673a32b3eca" prot="public">
          <name>n5</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673ac364e7cd25ef8288236d31f1ed69a94a" prot="public">
          <name>n7</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a5849253c0c07f8894c9ff2e5b69e834a" prot="public">
          <name>n8</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673aa45192846640be85b0edaca33c2a3d3b" prot="public">
          <name>n12</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673acb2abde5a8b3091333e261237603e095" prot="public">
          <name>n20</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a8f3556300b355d9dd45ce6963f2ce911" prot="public">
          <name>n25</name>
          <initializer>= 25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a4962b01834ed04e3db5cd2f2bf0631d7" prot="public">
          <name>n28</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673abed2e2afe24b75921942ae7f25c73155" prot="public">
          <name>n34</name>
          <initializer>= 34</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a158cd32e37cb121d0d2e5dfddb243fab" prot="public">
          <name>n38</name>
          <initializer>= 38</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a53adb43dfb589e556b1f9d45258b71ee" prot="public">
          <name>n39</name>
          <initializer>= 39</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a660ab88c8a67592785a5e888db2305d6" prot="public">
          <name>n40</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a9ce8b671faa8c0bae21cdcc195ba1d36" prot="public">
          <name>n41</name>
          <initializer>= 41</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673aa1d07c0e006cc1716edaa2ae37922b89" prot="public">
          <name>n50</name>
          <initializer>= 50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a56fe41a310874b33bdcadafb86ec6ff8" prot="public">
          <name>n51</name>
          <initializer>= 51</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673abfe601116bad237e00b4cb78e67182e1" prot="public">
          <name>n66</name>
          <initializer>= 66</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a78c5c98477e09bda95bf37235d4c69b2" prot="public">
          <name>n70</name>
          <initializer>= 70</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a27c5450c5dfd70d6b3ba2713a0cec55b" prot="public">
          <name>n71</name>
          <initializer>= 71</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a7ea89511459707b8a3978a10ce03e5ff" prot="public">
          <name>n74</name>
          <initializer>= 74</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a9d03b37396a3ea1110fedf391d639275" prot="public">
          <name>n75</name>
          <initializer>= 75</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673ae9e878362b4da810e172858be66a309a" prot="public">
          <name>n76</name>
          <initializer>= 76</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a699474f475e08f3939da055640d46264" prot="public">
          <name>n77</name>
          <initializer>= 77</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673acff3859abc1f9722e14b88f9365149f2" prot="public">
          <name>n78</name>
          <initializer>= 78</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a205f39bcf13b51f56947aaa48b05ae53" prot="public">
          <name>n79</name>
          <initializer>= 79</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673abb646596ab4afc0788e7ed63ff6d645d" prot="public">
          <name>n80</name>
          <initializer>= 80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a3c643ef054736f69c58d14f51360f770" prot="public">
          <name>n81</name>
          <initializer>= 81</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a4ad15243266206966f0b42cffdaf89dd" prot="public">
          <name>n82</name>
          <initializer>= 82</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673ad795f093cb856f97934c5cc69e46d445" prot="public">
          <name>n83</name>
          <initializer>= 83</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673ac8435e808bc62c3ace7bf60caf682197" prot="public">
          <name>n84</name>
          <initializer>= 84</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a5bbec154b39d084d17ab356d9e50bf02" prot="public">
          <name>n86</name>
          <initializer>= 86</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a425e6856933c96973fdcbe89717ae582" prot="public">
          <name>n257</name>
          <initializer>= 257</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673ab5048aa885a2dbcb32dd2db99146b96e" prot="public">
          <name>n258</name>
          <initializer>= 258</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a652d1cfde12a3cde4753c8f1987bc50e" prot="public">
          <name>n260</name>
          <initializer>= 260</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa10717dc03c6ef10955d28db0592d673a81f8d5a3bc3eb8a9196cc9aaa1519c7d" prot="public">
          <name>n261</name>
          <initializer>= 261</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NR operating bands in FR1 and FR2. </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration abstracts the NR operating bands for FR1 and FR2 described in TS 38.104, Table 5.2-1 and Table 5.2-2, respectively. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/band_helper.h" line="34" column="19" bodyfile="include/srsgnb/ran/band_helper.h" bodystart="34" bodyend="74"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15" prot="public" static="no" strong="yes">
        <type></type>
        <name>bs_channel_bandwidth_fr1</name>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a019ab69a4a7f4c674687db8ffd9d3217" prot="public">
          <name>MHz5</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a25d1296e8e914aec29a1485771c1157f" prot="public">
          <name>MHz10</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a95c6846c1654b07d5cdebd05483ce985" prot="public">
          <name>MHz15</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a287405f1d7960f6ee5ce90b95d5015ab" prot="public">
          <name>MHz20</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a021af8a6d59707e09343f44af8354553" prot="public">
          <name>MHz25</name>
          <initializer>= 25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15ae77aeb65114c8a723d2f880609cad21b" prot="public">
          <name>MHz30</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15ad54ba9f270291405161d9393670dddc8" prot="public">
          <name>MHz40</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a291c765b56a54ef8453ee3aceef60ed3" prot="public">
          <name>MHz50</name>
          <initializer>= 50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a6764ca30ac22e19fdd7ae11c8e4ef095" prot="public">
          <name>MHz60</name>
          <initializer>= 60</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15ac0361d742aa94c880ee6f6a9299b76c5" prot="public">
          <name>MHz70</name>
          <initializer>= 70</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a60030c06d00043c2804a8333538198e4" prot="public">
          <name>MHz80</name>
          <initializer>= 80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15af805b418b2c0642046901ad51b90c7a7" prot="public">
          <name>MHz90</name>
          <initializer>= 90</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15a21a08bfcdb0222695a7c16981b6a6343" prot="public">
          <name>MHz100</name>
          <initializer>= 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Labels for the BS Channel Bandwidth for FR1, described in TS38.104, Table 5.3.2-1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/bs_channel_bandwidth.h" line="16" column="36" bodyfile="include/srsgnb/ran/bs_channel_bandwidth.h" bodystart="16" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a928643ce67658447b5b7ab02831d080a" prot="public" static="no" strong="yes">
        <type></type>
        <name>min_channel_bandwidth</name>
        <enumvalue id="namespacesrsgnb_1a928643ce67658447b5b7ab02831d080aa019ab69a4a7f4c674687db8ffd9d3217" prot="public">
          <name>MHz5</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a928643ce67658447b5b7ab02831d080aa25d1296e8e914aec29a1485771c1157f" prot="public">
          <name>MHz10</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a928643ce67658447b5b7ab02831d080aad54ba9f270291405161d9393670dddc8" prot="public">
          <name>MHz40</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a928643ce67658447b5b7ab02831d080aafedb2d84cafe20862cb4399751a8a7e3" prot="public">
          <name>invalid</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Labels for the <emphasis>Minimum Channel Bandwidth for FR1&lt;<emphasis></emphasis> &gt;. This is not explicitly defined in the TS, but it is used by TS 38.213, Section 13 for the Coreset 0 configuration. As per TS 38.104, Table 5.3.5-1, there are three possible minimum BW: 5MHz, 10MHz, and 40MHz. </emphasis></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/bs_channel_bandwidth.h" line="41" column="33" bodyfile="include/srsgnb/ran/bs_channel_bandwidth.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" prot="public" static="no" strong="no">
        <type>uint16_t</type>
        <name>du_ue_index_t</name>
        <enumvalue id="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0ca7730986c672fac0f541a83239a190d54" prot="public">
          <name>MIN_DU_UE_INDEX</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0ca05b54da3b99e55d5f319f026dd2cc07a" prot="public">
          <name>MAX_DU_UE_INDEX</name>
          <initializer>= 1023</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0ca5e17b140664a9dc143e41277d8697a1d" prot="public">
          <name>MAX_NOF_DU_UES</name>
          <initializer>= 1024</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Maximum number of UEs supported by DU (implementation-defined). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_types.h" line="19" column="19" bodyfile="include/srsgnb/ran/du_types.h" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abc" prot="public" static="no" strong="no">
        <type>uint16_t</type>
        <name>du_cell_index_t</name>
        <enumvalue id="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abca78034828db5223b56d68f7e34a2e2aca" prot="public">
          <name>MIN_DU_CELL_INDEX</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abca207a150893678133d3636589b8084543" prot="public">
          <name>MAX_DU_CELL_INDEX</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abca6a2f1e4fcc24033184fa5b31f4481754" prot="public">
          <name>MAX_NOF_DU_CELLS</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Maximum number of cells supported by DU (implementation-defined). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_types.h" line="22" column="21" bodyfile="include/srsgnb/ran/du_types.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a467fce4f5a024b9732a88f1eb27e4fa3" prot="public" static="no" strong="no">
        <type>uint16_t</type>
        <name>ue_cell_index_t</name>
        <enumvalue id="namespacesrsgnb_1a467fce4f5a024b9732a88f1eb27e4fa3ad6d2580265867aa94d41b3c01ea795d1" prot="public">
          <name>PCELL_INDEX</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a467fce4f5a024b9732a88f1eb27e4fa3a7ab46628466f6a7bc6b1ed244b538bba" prot="public">
          <name>MAX_UE_SCELL_INDEX</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a467fce4f5a024b9732a88f1eb27e4fa3a003bcdfb065db4ef6c0ad9ed17476bfd" prot="public">
          <name>MAX_NOF_SCELL_INDEXES</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Maximum number of cells supported by a single UE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_types.h" line="42" column="21" bodyfile="include/srsgnb/ran/du_types.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1" prot="public" static="no" strong="yes">
        <type></type>
        <name>duplex_mode</name>
        <enumvalue id="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1aeec6da44109af7259e81b505436583ff" prot="public">
          <name>FDD</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Paired FDD. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1a1ffd07437a30fba5785ce6557acca2b2" prot="public">
          <name>TDD</name>
          <briefdescription>
<para>Unpaired TDD. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1aa203d5f2c811f85341bed32623f5bdf6" prot="public">
          <name>SDL</name>
          <briefdescription>
<para>Supplementary DownLink (Unpaired). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1ab6e4d934ab0c243d22087d3dd6dda0ac" prot="public">
          <name>SUL</name>
          <briefdescription>
<para>Supplementary UpLink (Unpaired). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1accc0377a8afbf50e7094f5c23a8af223" prot="public">
          <name>INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NR Duplex mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/duplex_mode.h" line="16" column="23" bodyfile="include/srsgnb/ran/duplex_mode.h" bodystart="16" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11" prot="public" static="no" strong="yes">
        <type></type>
        <name>frequency_range</name>
        <enumvalue id="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11a34d1cf1496d544eb35e3461a5235f7e9" prot="public">
          <name>FR1</name>
          <briefdescription>
<para>Frequency range 1, from 410 to 7125 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11afa5a56762dde2d741e3330d4f018ee38" prot="public">
          <name>FR2</name>
          <briefdescription>
<para>Frequency range 2, from 24250 to 52600 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Labels for the frequency ranges described in TS38.104 Table 5.1-1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/frequency_range.h" line="16" column="27" bodyfile="include/srsgnb/ran/frequency_range.h" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339e" prot="public" static="no" strong="no">
        <type>uint16_t</type>
        <name>lcid_t</name>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339ea095e58e798ce2ddd153e438c28db6723" prot="public">
          <name>LCID_SRB0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339ea65b5550bb3574c57be4b63a686c5f08e" prot="public">
          <name>LCID_SRB1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339eac633a310df13c5118bad45368adbb1c9" prot="public">
          <name>LCID_SRB2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339eac82aad41bcddaa262a30ca7f1809d325" prot="public">
          <name>LCID_SRB3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339ea2f04aa396a8e4c6d75a40988fa0c298e" prot="public">
          <name>LCID_MIN_DRB</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339eaa4f244f723dd13881065189e5f2e1d01" prot="public">
          <name>LCID_MAX_DRB</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339eaf63de988c55def68d6d7f08d549851bc" prot="public">
          <name>MAX_NOF_RB_LCIDS</name>
          <initializer>= 33</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339ead3b1f3e9bd8a8ed942c9cd6128523746" prot="public">
          <name>INVALID_LCID</name>
          <initializer>= 64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Logical Channel Identity used to associate one logical channel to the corresponding RLC bearer. Values (0..32) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="18" column="12" bodyfile="include/srsgnb/ran/lcid.h" bodystart="18" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a2f1b6f856d8049ee183b5efb70a8bbe3" prot="public" static="no" strong="no">
        <type>uint16_t</type>
        <name>srb_id_t</name>
        <enumvalue id="namespacesrsgnb_1a2f1b6f856d8049ee183b5efb70a8bbe3a96ca1a499c18f415ad0b4f17af8ca06f" prot="public">
          <name>srb0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a2f1b6f856d8049ee183b5efb70a8bbe3a1979ef5fbbde4e621cc7ee06e12b9184" prot="public">
          <name>srb1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a2f1b6f856d8049ee183b5efb70a8bbe3ab0d25476fa17ad6a7ce9202a57776da4" prot="public">
          <name>srb2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a2f1b6f856d8049ee183b5efb70a8bbe3a21114dce0b2c4bd2da133888d048bf7a" prot="public">
          <name>srb3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a2f1b6f856d8049ee183b5efb70a8bbe3a78ae406b4f2214f7d7ba57f18a5a8d11" prot="public">
          <name>nulltype</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="33" column="14" bodyfile="include/srsgnb/ran/lcid.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607" prot="public" static="no" strong="yes">
        <type>uint16_t</type>
        <name>drb_id_t</name>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a2155db676778b29dcb967b3310b6ec28" prot="public">
          <name>drb1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607abd05efcaa908e60cf8097a425c615b78" prot="public">
          <name>drb2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a520085837cad0bcbc6c187d8aa0e69bb" prot="public">
          <name>drb3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a407c25af2b8fce4f022a1bafc1f0f941" prot="public">
          <name>drb4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607aa4c508eb075c2119ea53064b693dc203" prot="public">
          <name>drb5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607aa0582306901e216041ff5669bdef33c9" prot="public">
          <name>drb6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a9352ae369a45403257bd2543ed3efa24" prot="public">
          <name>drb7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607afd5476a2864f17f2132dd4142dc1313c" prot="public">
          <name>drb8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a9e501255da58c7b34e0eade7d622bcbc" prot="public">
          <name>drb9</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a44fb4d79d8c78fb55221b145198969f0" prot="public">
          <name>drb10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a41cd8dfd87cd7748dfbdf9b6cc861f8b" prot="public">
          <name>drb11</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a0ccdcacd11178e0e798f3b16c117b336" prot="public">
          <name>drb12</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a041fec9f6c57f426c00154c39805caa6" prot="public">
          <name>drb13</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607affd0ff58309b89f0c6ee93b0d6b94750" prot="public">
          <name>drb14</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607ac3ab83f5920d59ab877d577d6a02c36d" prot="public">
          <name>drb15</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a8da9a885b7f262350e75813abc6b4603" prot="public">
          <name>drb16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607ae716ccc8b35fbdd4989186040153f76d" prot="public">
          <name>drb17</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607ad29b5a539a412edd5c3280d2686112dd" prot="public">
          <name>drb18</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607ad4119fdc8886ceb14eaf3e9007411fb6" prot="public">
          <name>drb19</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a646596bd109a8df741af0fbe328d675e" prot="public">
          <name>drb20</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607aa29fc3074e02c7995f80bce3c9ce5cbc" prot="public">
          <name>drb21</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a469a9ae735f5c915442877f017f30c59" prot="public">
          <name>drb22</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607aed2b10804f3a5bf6a6365615c46e78c0" prot="public">
          <name>drb23</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a7fd6bf3b77796a561940d5ad23660908" prot="public">
          <name>drb24</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a06c7a5f56cdf1422779c5bda09592afc" prot="public">
          <name>drb25</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a3a20d182090504297ef5c0db49f0cdcf" prot="public">
          <name>drb26</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a66483d815af983fcb1817726ffc5c6a3" prot="public">
          <name>drb27</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a3e7570914a2d1a816b4f9da3d0d7e294" prot="public">
          <name>drb28</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607a6e71687cbe3373d9f68de1002d1bc1eb" prot="public">
          <name>drb29</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa7728c91d81676ad53287af88e21d607afedb2d84cafe20862cb4399751a8a7e3" prot="public">
          <name>invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="57" column="20" bodyfile="include/srsgnb/ran/lcid.h" bodystart="57" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1aef8df2da7a55cf1ada5a749a6433330c" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>ldpc_base_graph_type</name>
        <enumvalue id="namespacesrsgnb_1aef8df2da7a55cf1ada5a749a6433330ca8054fb02cd7dfc395f333858f2fcf170" prot="public">
          <name>BG1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aef8df2da7a55cf1ada5a749a6433330ca510651725fb738f091df7dcea9e1769b" prot="public">
          <name>BG2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LDPC Base graph types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ldpc_base_graph.h" line="18" column="32" bodyfile="include/srsgnb/ran/ldpc_base_graph.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4" prot="public" static="no" strong="yes">
        <type></type>
        <name>modulation_scheme</name>
        <enumvalue id="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a68b5dd822c6ef8ad44f98f56dfbe016e" prot="public">
          <name>PI_2_BPSK</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>90-degree shifting Binary Phase Shift Keying (π/2-BPSK) described in TS38.211 Section 5.1.1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4acfd8f331d281b0da79e7c6ed6988243c" prot="public">
          <name>BPSK</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Binary Phase Shift Keying (BPSK) modulation described in TS38.211 Section 5.1.2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a4539d029e1781f9347b6d7d173c04a6a" prot="public">
          <name>QPSK</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Quadrature Phase Shift Keying (QPSK) modulation described in TS38.211 Section 5.1.3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a03029a441fe46ebecd2135ba5d8b330f" prot="public">
          <name>QAM16</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>16-point Quadrature Amplitude Modulation (16-QAM) described in TS38.211 Section 5.1.4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a5e0dd7cb58cf81fd6bed561c7e4b351b" prot="public">
          <name>QAM64</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>64-point Quadrature Amplitude Modulation (64-QAM) described in TS38.211 Section 5.1.5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a69a2bdd96ac2c6035d0c8ca23563aec9" prot="public">
          <name>QAM256</name>
          <initializer>= MODULATION_MAX_BITS_PER_SYMBOL</initializer>
          <briefdescription>
<para>256-point Quadrature Amplitude Modulation (256-QAM) described in TS38.211 Section 5.1.6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modulation schemes as described in TS38.211 Section 5.1. </para>
        </briefdescription>
        <detaileddescription>
<para>Each modulation identifier is mapped to the corresponding modulation order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/modulation_scheme.h" line="26" column="29" bodyfile="include/srsgnb/ran/modulation_scheme.h" bodystart="26" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>aggregation_level</name>
        <enumvalue id="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1ac82561ec215a6e31807ceedf3b3bd25e" prot="public">
          <name>n1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1aa6bbc91ae73dd21c0533f735470a9cd0" prot="public">
          <name>n2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1aed23e9d533a3992b2bfeef6f8601a945" prot="public">
          <name>n4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1a5849253c0c07f8894c9ff2e5b69e834a" prot="public">
          <name>n8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1a584ca0f1368aa7a4debffbbdb7aa1730" prot="public">
          <name>n16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Aggregation Level of PDCCH allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/aggregation_level.h" line="18" column="29" bodyfile="include/srsgnb/ran/pdcch/aggregation_level.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a97aea9eebec7b3fb0a0257cf325dadd9" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>coreset_id</name>
        <enumvalue id="namespacesrsgnb_1a97aea9eebec7b3fb0a0257cf325dadd9ae4c9ffaa52943d0074f17d30e5495515" prot="public">
          <name>MAX_CORESET_ID</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a97aea9eebec7b3fb0a0257cf325dadd9a248b9948ed52aef5559adebb99b23f96" prot="public">
          <name>MAX_NOF_CORESETS</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CORESET identifier. This value is UE-specific, which means that a UE can have up to &quot;maxNrofControlResourceSets&quot; CORESETS configured. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>See TS 38.331, &quot;maxNrofControlResourceSets&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/coreset.h" line="31" column="16" bodyfile="include/srsgnb/ran/pdcch/coreset.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a16e8b80de636751c538ab34977b05f94" prot="public" static="no" strong="yes">
        <type></type>
        <name>ssb_coreset0_mplex_pattern</name>
        <enumvalue id="namespacesrsgnb_1a16e8b80de636751c538ab34977b05f94aec26100fd39eff8decdcc1350bce221c" prot="public">
          <name>mplx_pattern1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a16e8b80de636751c538ab34977b05f94ae7ef11170732b7b3c42c95f10e6293e9" prot="public">
          <name>mplx_pattern2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a16e8b80de636751c538ab34977b05f94a89ef08ea376e292775f8cd14722c3592" prot="public">
          <name>mplx_pattern3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a16e8b80de636751c538ab34977b05f94a9afa1f6989ef5902ff9964ab530f71d8" prot="public">
          <name>mplex_invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Refer to &quot;SS/PBCH block and CORESET multiplexing pattern&quot;, TS 38.213, Section 13. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/pdcch_type0_css_coreset_config.h" line="20" column="38" bodyfile="include/srsgnb/ran/pdcch/pdcch_type0_css_coreset_config.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934e" prot="public" static="no" strong="yes">
        <type></type>
        <name>pdsch_mcs_table</name>
        <enumvalue id="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934eafe97d5927e34d78b68330ae92f2773cb" prot="public">
          <name>qam64</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Identifies MCS index table 1, TS38.214 Table 5.1.3.1-1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934ead6020165a82bfc26499c2cd4dd812255" prot="public">
          <name>qam256</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Identifies MCS index table 2, TS38.214 Table 5.1.3.1-2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934ea6089420740a4993f5408855cd5ee74b4" prot="public">
          <name>qam64LowSe</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Identifies MCS index table 3, TS38.214 Table 5.1.3.1-3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modulation and Code Scheme table identifiers for PDSCH. </para>
        </briefdescription>
        <detaileddescription>
<para>The identifiers are inspired by TS38.331 Section as 6.3.2 (see field <emphasis>mcs-Table</emphasis> in various Information Elements). For the actual tables and the selection procedure, see TS38.214 Section 5.1.3.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdsch/pdsch_mcs.h" line="21" column="27" bodyfile="include/srsgnb/ran/pdsch/pdsch_mcs.h" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a61d2ce93a55d7e2ea84a3758d57cff28" prot="public" static="no" strong="yes">
        <type></type>
        <name>restricted_set_config</name>
        <enumvalue id="namespacesrsgnb_1a61d2ce93a55d7e2ea84a3758d57cff28acf3201392738d6b816b744df14897825" prot="public">
          <name>UNRESTRICTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a61d2ce93a55d7e2ea84a3758d57cff28a200f7e489ec675b47c4d5fea7376b9b6" prot="public">
          <name>TYPE_A</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a61d2ce93a55d7e2ea84a3758d57cff28a7d28c31fe6982434140a90974f3f5550" prot="public">
          <name>TYPE_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PRACH Restricted set configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>PRACH <formula id="10">$N_{CS}$</formula> restricted set configuration. Used for interpreting TS38.211 Tables 6.3.3.1-5 and 6.3.3.1-6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/restricted_set_config.h" line="18" column="33" bodyfile="include/srsgnb/ran/prach/restricted_set_config.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a9c795f60d401d5c5a789b190c460c14b" prot="public" static="no" strong="yes">
        <type></type>
        <name>pucch_group_hopping</name>
        <enumvalue id="namespacesrsgnb_1a9c795f60d401d5c5a789b190c460c14ba9fc49374420f4310fb89e88ea2689da5" prot="public">
          <name>NEITHER</name>
          <briefdescription>
<para>Implies neither group or sequence hopping is enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a9c795f60d401d5c5a789b190c460c14bab332708e4304e13c9b424e7465254954" prot="public">
          <name>ENABLE</name>
          <briefdescription>
<para>Enables group hopping and disables sequence hopping. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a9c795f60d401d5c5a789b190c460c14bafc93ea58f6d27ffed2b6518ffecf3e4e" prot="public">
          <name>DISABLE</name>
          <briefdescription>
<para>Disables group hopping and enables sequence hopping. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Configuration of group and sequence hopping as described in TS38.331 PUCCH-ConfigCommon IE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pucch_mapping.h" line="16" column="31" bodyfile="include/srsgnb/ran/pucch_mapping.h" bodystart="16" bodyend="23"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835" prot="public" static="no" strong="yes">
        <type></type>
        <name>pucch_format</name>
        <enumvalue id="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835a319639b161fc777d438147c1f9d7d17c" prot="public">
          <name>FORMAT_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835abea8ad3f3d9cdf677943248011fc597b" prot="public">
          <name>FORMAT_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835af3ece63b63a56a07938b7686e79af04f" prot="public">
          <name>FORMAT_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835ad3a9c15af26c557c9bba748e837dfbc7" prot="public">
          <name>FORMAT_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835a875862130954cd6d3b53cadff905f275" prot="public">
          <name>FORMAT_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835a04dcc1ab52daae144d5c562d1ad21559" prot="public">
          <name>NOF_FORMATS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PUCCH Formats as described in TS 38.213 clause 9.2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pucch_mapping.h" line="26" column="24" bodyfile="include/srsgnb/ran/pucch_mapping.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6" prot="public" static="no" strong="yes">
        <type></type>
        <name>pusch_mcs_table</name>
        <enumvalue id="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6afe97d5927e34d78b68330ae92f2773cb" prot="public">
          <name>qam64</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Identifies MCS index table 1, TS38.214 Table 5.1.3.1-1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6ad6020165a82bfc26499c2cd4dd812255" prot="public">
          <name>qam256</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Identifies MCS index table 2, TS38.214 Table 5.1.3.1-2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6a6089420740a4993f5408855cd5ee74b4" prot="public">
          <name>qam64LowSe</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Identifies MCS index table 3, TS38.214 Table 5.1.3.1-3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6ae67a1bbf00e52e178d4fbcea8a6e2d85" prot="public">
          <name>qam64_tp</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Identifies MCS index table 1 with transform precoding, TS38.214 Table 6.1.4.1-1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6a4cd6920d953f5ddf0ca77cb1394e1848" prot="public">
          <name>qam64LowSe_tp</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Identifies MCS index table 2 with transform precoding, TS38.214 Table 6.1.4.1-2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modulation and Code Scheme table identifiers for PUSCH. </para>
        </briefdescription>
        <detaileddescription>
<para>The identifiers are inspired by TS38.331 Section as 6.3.2 (see field <emphasis>mcs-Table</emphasis> in various Information Elements). For the actual tables and the selection procedure, see TS38.214 Section 6.1.4.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pusch/pusch_mcs.h" line="21" column="27" bodyfile="include/srsgnb/ran/pusch/pusch_mcs.h" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" prot="public" static="no" strong="no">
        <type>uint16_t</type>
        <name>rnti_t</name>
        <enumvalue id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46fa94b2abb061314a251b6e85e1ed550cff" prot="public">
          <name>INVALID_RNTI</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46fa06be6bafee9aa4ee50ed06cb699cd98b" prot="public">
          <name>MIN_CRNTI</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46fad41eb77efdc7a1eb2cd4fe0c1464c6b0" prot="public">
          <name>MAX_CRNTI</name>
          <initializer>= 0xffef</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46fa34f33b42c90ef88d1a85a8636e275e4a" prot="public">
          <name>MIN_RESERVED_RNTI</name>
          <initializer>= 0xfff0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46fa2e21ed8b757ed2a4652b8d4469a069bf" prot="public">
          <name>MAX_RESERVED_RNTI</name>
          <initializer>= 0xfffd</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46fafb4dcd01e305f22a87e9f0a3d9c254d2" prot="public">
          <name>P_RNTI</name>
          <initializer>= 0xfffe</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46fa81a4268edc4f7c9a20b3576c8deb60bf" prot="public">
          <name>SI_RNTI</name>
          <initializer>= 0xffff</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>See TS 38.331 - RNTI-Value and TS 38.321, Table 7.1-1: RNTI Values. Values: (0..65535) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/rnti.h" line="19" column="12" bodyfile="include/srsgnb/ran/rnti.h" bodystart="19" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1ce" prot="public" static="no" strong="yes">
        <type></type>
        <name>sib1_rtx_periodicity</name>
        <enumvalue id="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1cea7e2b38b62271933a9d5450d6f77dd1dd" prot="public">
          <name>ms5</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1cea0997275588bab37c2d278d74e9460e42" prot="public">
          <name>ms10</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1cea1e42912e8e5e81015d0208bdff2123ae" prot="public">
          <name>ms20</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1ceaa565f4398ba375b7af6bb58a87ae61ef" prot="public">
          <name>ms40</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1cea634a6b84c77a33b63dcd818c08c1a1f5" prot="public">
          <name>ms80</name>
          <initializer>= 80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1ceac50ac1c6dde7e0526441c48e38d643e7" prot="public">
          <name>ms160</name>
          <initializer>= 160</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SIB retransmission periodicity in milliseconds as per TS38.331 Section 5.2.1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is used for retransmission periodicity only; SIB1 periodicity is given as 160ms. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/sib_configuration.h" line="17" column="32" bodyfile="include/srsgnb/ran/sib_configuration.h" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445c" prot="public" static="no" strong="yes">
        <type></type>
        <name>ssb_periodicity</name>
        <enumvalue id="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445ca7e2b38b62271933a9d5450d6f77dd1dd" prot="public">
          <name>ms5</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445ca0997275588bab37c2d278d74e9460e42" prot="public">
          <name>ms10</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445ca1e42912e8e5e81015d0208bdff2123ae" prot="public">
          <name>ms20</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445caa565f4398ba375b7af6bb58a87ae61ef" prot="public">
          <name>ms40</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445ca634a6b84c77a33b63dcd818c08c1a1f5" prot="public">
          <name>ms80</name>
          <initializer>= 80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445cac50ac1c6dde7e0526441c48e38d643e7" prot="public">
          <name>ms160</name>
          <initializer>= 160</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SSB periodicity in milliseconds as per TS38.331 Section 6.3.2 IE ssb-periodicityServingCell. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_properties.h" line="21" column="27" bodyfile="include/srsgnb/ran/ssb_properties.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a0a28d96ea33568af5c7d3cff15e7aea0" prot="public" static="no" strong="yes">
        <type></type>
        <name>ssb_pss_to_sss_epre</name>
        <enumvalue id="namespacesrsgnb_1a0a28d96ea33568af5c7d3cff15e7aea0a41419ad507ef7d3ea572893a45e12ef3" prot="public">
          <name>dB_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0a28d96ea33568af5c7d3cff15e7aea0a860a90d49360b3947db7d59999865f70" prot="public">
          <name>dB_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PSS EPRE to SSS EPRE for SSB, as per TS 38.213, Section 4.1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_properties.h" line="30" column="31" bodyfile="include/srsgnb/ran/ssb_properties.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ff" prot="public" static="no" strong="yes">
        <type></type>
        <name>ssb_pattern_case</name>
        <enumvalue id="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa7fc56270e7a70fa81a5935b72eacbe29" prot="public">
          <name>A</name>
          <briefdescription>
<para>Case A - 15 kHz SCS, FR1: index pattern <formula id="164">$\{2, 8\} + 14\cdot n$</formula>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa9d5ed678fe57bcca610140957afab571" prot="public">
          <name>B</name>
          <briefdescription>
<para>Case B - 30 kHz SCS, FR1: index pattern <formula id="165">$\{4, 8, 16, 20\} + 28\cdot n$</formula>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa0d61f8370cad1d412f80b84d143e1257" prot="public">
          <name>C</name>
          <briefdescription>
<para>Case C - 30 kHz SCS, FR1: index pattern <formula id="164">$\{2, 8\} + 14\cdot n$</formula>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffaf623e75af30e62bbd73d6df5b50bb7b5" prot="public">
          <name>D</name>
          <briefdescription>
<para>Case D - 120 kHz SCS, FR2: index pattern <formula id="165">$\{4, 8, 16, 20\} + 28\cdot n$</formula>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa3a3ea00cfc35332cedf6e5e9a32e94da" prot="public">
          <name>E</name>
          <briefdescription>
<para>Case E - 240 kHz SCS, FR2: index pattern <formula id="166">$\{8, 12, 16, 20, 32, 36, 40, 44 \} + 56\cdot n$</formula>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffafedb2d84cafe20862cb4399751a8a7e3" prot="public">
          <name>invalid</name>
          <briefdescription>
<para>Invalid case. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Labels for the different SS/PBCH block patterns defined in TS38.213 Section 4.1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_properties.h" line="33" column="28" bodyfile="include/srsgnb/ran/ssb_properties.h" bodystart="33" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" prot="public" static="no" strong="yes">
        <type></type>
        <name>subcarrier_spacing</name>
        <enumvalue id="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98ac295707ac45751358c3b2119838e4f44" prot="public">
          <name>kHz15</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98ad1b76ad61dcdfb6703c9e7df47591e65" prot="public">
          <name>kHz30</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98a33f2782405f187fed9d2d8856fb4dce9" prot="public">
          <name>kHz60</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98ae0cf662fe34d7c815bd7cc03eb3d8f55" prot="public">
          <name>kHz120</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98aa58a432fb7b3104e9884de1507d4416b" prot="public">
          <name>kHz240</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98afedb2d84cafe20862cb4399751a8a7e3" prot="public">
          <name>invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Representation of subcarrier spacing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="22" column="30" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a458b38a21f3e3f90d07210252ef2cbec" prot="public" static="no" strong="yes">
        <type></type>
        <name>rlc_mode</name>
        <enumvalue id="namespacesrsgnb_1a458b38a21f3e3f90d07210252ef2cbeca6a962563e235e1789e663e356ac8d9e4" prot="public">
          <name>tm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a458b38a21f3e3f90d07210252ef2cbecaf819086b6ac2e38ef466f58f15b170d5" prot="public">
          <name>um_bidir</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a458b38a21f3e3f90d07210252ef2cbeca4cc127c19ccb19f5410db5fb905b9e5f" prot="public">
          <name>um_unidir_ul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a458b38a21f3e3f90d07210252ef2cbecaf154ea2a50e1c0de72cbded3078c3249" prot="public">
          <name>um_unidir_dl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a458b38a21f3e3f90d07210252ef2cbecac04cd38aeb30f3ad1f8ab4e64a0ded7b" prot="public">
          <name>am</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RLC NR modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="21" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a025e5cc1228682e3e9accdef0914a93c" prot="public" static="no" strong="yes">
        <type>uint16_t</type>
        <name>rlc_um_sn_size</name>
        <enumvalue id="namespacesrsgnb_1a025e5cc1228682e3e9accdef0914a93ca1defc81ee1d75ac6a97a492110f1051d" prot="public">
          <name>size6bits</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a025e5cc1228682e3e9accdef0914a93cae8999550aa65df12e22c075289f9b805" prot="public">
          <name>size12bits</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RLC UM NR sequence number field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="24" column="26" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241" prot="public" static="no" strong="yes">
        <type>uint16_t</type>
        <name>rlc_am_sn_size</name>
        <enumvalue id="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241ae8999550aa65df12e22c075289f9b805" prot="public">
          <name>size12bits</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241ab76bf9512aa2d15f96e7d10b2f797aff" prot="public">
          <name>size18bits</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RLC AM NR sequence number field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="31" column="26" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1af5169a4341a98afd81102cd0ba38e2e1" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>rlc_dc_field</name>
        <enumvalue id="namespacesrsgnb_1af5169a4341a98afd81102cd0ba38e2e1afc5364bf9dbfa34954526becad136d4b" prot="public">
          <name>control</name>
          <initializer>= 0b00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1af5169a4341a98afd81102cd0ba38e2e1a8d777f385d3dfec8815d20f7496026dc" prot="public">
          <name>data</name>
          <initializer>= 0b01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RLC AM NR segmentation info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="60" column="24" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a0a246fa8059639a178e17af4df90c173" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>rlc_si_field</name>
        <enumvalue id="namespacesrsgnb_1a0a246fa8059639a178e17af4df90c173a4dff537721d1435566e8a133eeac2bdf" prot="public">
          <name>full_sdu</name>
          <initializer>= 0b00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0a246fa8059639a178e17af4df90c173ac765a37c312f93b9f28d7cfca6553ac2" prot="public">
          <name>first_segment</name>
          <initializer>= 0b01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0a246fa8059639a178e17af4df90c173ad1cd941e9361399f0433d63e6f7d7c76" prot="public">
          <name>last_segment</name>
          <initializer>= 0b10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0a246fa8059639a178e17af4df90c173ad412dc4a0fc06627a670a14512f8f247" prot="public">
          <name>middle_segment</name>
          <initializer>= 0b11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RLC AM NR segmentation info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="67" column="24" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a455d7a15a7850584f1a3ae0afff0e02e" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>rlc_control_pdu_type</name>
        <enumvalue id="namespacesrsgnb_1a455d7a15a7850584f1a3ae0afff0e02eac3499e167fdd16e1925698dbc031016f" prot="public">
          <name>status_pdu</name>
          <initializer>= 0b000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="79" column="32" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a66a5b6e7f9a3179978042eb82e981c65" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>search_space_id</name>
        <enumvalue id="namespacesrsgnb_1a66a5b6e7f9a3179978042eb82e981c65a4ff780d3b92dadb4bc1bd0537ca906cd" prot="public">
          <name>MIN_SEARCH_SPACE_ID</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a66a5b6e7f9a3179978042eb82e981c65a87129af74a94613347300abadd58128d" prot="public">
          <name>MAX_SEARCH_SPACE_ID</name>
          <initializer>= 39</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a66a5b6e7f9a3179978042eb82e981c65a72e37ce08210407219b8b0fad5d30f9d" prot="public">
          <name>MAX_NOF_SEARCH_SPACES</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Search Space identifier. This value is UE-specific, which means that a UE can have up to &quot;maxNrofSearchSpaces=40&quot; Search Spaces configured. The ID space is used across BWPs of a serving cell. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/bwp_configuration.h" line="28" column="21" bodyfile="include/srsgnb/scheduler/bwp_configuration.h" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1ad4a1f149c8fe7de5f0d38f8cc58928d4" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>bwp_id_t</name>
        <enumvalue id="namespacesrsgnb_1ad4a1f149c8fe7de5f0d38f8cc58928d4ae3ad055052270d59e55d47b7f00a3828" prot="public">
          <name>MIN_BWP_ID</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ad4a1f149c8fe7de5f0d38f8cc58928d4ab4fc1e4d17a8f2390797157d38eec56d" prot="public">
          <name>MAX_BWP_ID</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ad4a1f149c8fe7de5f0d38f8cc58928d4aa2d915df0e6fd6a98fd6d4dc29976db6" prot="public">
          <name>MAX_NOF_BWPS</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BWP-Id used to identify a BWP from the perspective of a UE. <simplesect kind="remark"><para>See TS 38.331, &quot;BWP-Id&quot; and &quot;maxNrofBWPs&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/bwp_configuration.h" line="98" column="14" bodyfile="include/srsgnb/scheduler/bwp_configuration.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1af2104f3e64925932823a8d5419d3eec8" prot="public" static="no" strong="yes">
        <type></type>
        <name>pdsch_mapping_type</name>
        <enumvalue id="namespacesrsgnb_1af2104f3e64925932823a8d5419d3eec8a05b5a15c8e7491d69e7850a3a2316466" prot="public">
          <name>typeA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1af2104f3e64925932823a8d5419d3eec8a13a6f6aa76ed2413a4fa2aa92eb13c16" prot="public">
          <name>typeB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PDSCH Mapping Type. TypeA can start only at symbol 2 or 3 within a slot. <simplesect kind="remark"><para>see TS 38.214, clause 5.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/bwp_configuration.h" line="122" column="30" bodyfile="include/srsgnb/scheduler/bwp_configuration.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1abb6ad055937d8532d1b9c7ea61354ab1" prot="public" static="no" strong="yes">
        <type></type>
        <name>dmrs_typeA_position</name>
        <enumvalue id="namespacesrsgnb_1abb6ad055937d8532d1b9c7ea61354ab1ac3d8abf7d8027091835ebb6dc5f3fc82" prot="public">
          <name>pos2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1abb6ad055937d8532d1b9c7ea61354ab1abe3f1ecceedd56ca894baaeec7027563" prot="public">
          <name>pos3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Position of first DM-RS for Downlink (see TS 38.211, clause 7.4.1.1.1) and Uplink (see TS 38.211, clause 6.4.1.1.3). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/dmrs.h" line="20" column="31" bodyfile="include/srsgnb/scheduler/dmrs.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a04ccd5cf24a52e33afac9cf0d74d4f06" prot="public" static="no" strong="yes">
        <type></type>
        <name>dmrs_config_type</name>
        <enumvalue id="namespacesrsgnb_1a04ccd5cf24a52e33afac9cf0d74d4f06a3156e42ab24604b8de92a93ed761532d" prot="public">
          <name>type1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a04ccd5cf24a52e33afac9cf0d74d4f06a8fe8b170aa076a4233d8eda7d28804d4" prot="public">
          <name>type2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of DMRS to be used in DL and UL. <simplesect kind="remark"><para>See TS 38.331, DMRS-DownlinkConfig and DMRS-UplinkConfig. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/dmrs.h" line="29" column="28" bodyfile="include/srsgnb/scheduler/dmrs.h" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a0decac01cef344163e4de1563fd6dcd2" prot="public" static="no" strong="yes">
        <type></type>
        <name>dmrs_additional_positions</name>
        <enumvalue id="namespacesrsgnb_1a0decac01cef344163e4de1563fd6dcd2ae5d0dcb49acc8a9d415e00aa4f068d06" prot="public">
          <name>pos0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0decac01cef344163e4de1563fd6dcd2a50382a6dd992239d450f5d6a828c5b4e" prot="public">
          <name>pos1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0decac01cef344163e4de1563fd6dcd2ac3d8abf7d8027091835ebb6dc5f3fc82" prot="public">
          <name>pos2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a0decac01cef344163e4de1563fd6dcd2abe3f1ecceedd56ca894baaeec7027563" prot="public">
          <name>pos3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Position for additional DM-RS in DL (see TS 38.211, Tables 7.4.1.1.2-3 and 7.4.1.1.2-4). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>See TS 38.331, DMRS-DownlinkConfig and DMRS-UplinkConfig. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/dmrs.h" line="33" column="37" bodyfile="include/srsgnb/scheduler/dmrs.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1ac6c9121b5ebcb0df28672e7af29c06a0" prot="public" static="no" strong="yes">
        <type></type>
        <name>dmrs_max_length</name>
        <enumvalue id="namespacesrsgnb_1ac6c9121b5ebcb0df28672e7af29c06a0a966f906527841bc390cc8bfbfa2df1ca" prot="public">
          <name>len1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac6c9121b5ebcb0df28672e7af29c06a0a7ad5ed956f48b3afb76b09507bc9f166" prot="public">
          <name>len2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The maximum number of OFDM symbols for DL front loaded DMRS. If set to len2, the UE determines the actual number of DM-RS symbols by the associated DCI. (see TS 38.214, clause 7.4.1.1.2). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>See TS 38.214, DMRS-DownlinkConfig. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/dmrs.h" line="38" column="27" bodyfile="include/srsgnb/scheduler/dmrs.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>nominal_rbg_size</name>
        <enumvalue id="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94a5890595e16cbebb8866e1842e4bd6ec7" prot="public">
          <name>P2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94a905ad4f16a809a8f8408ed499e75be09" prot="public">
          <name>P4</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94ad6e72950c12bb200b862f63920a37de8" prot="public">
          <name>P8</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94a26c101e385de28bb9767537780505083" prot="public">
          <name>P16</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Nominal RBG-size (P value). <simplesect kind="remark"><para>See TS 38.214, Sections 5.1.2.2 and 6.1.2.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="24" column="28" bodyfile="include/srsgnb/scheduler/resource_block_group.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a6a5ffcbe1e6c9ebde1a77853979c51cf" prot="public" static="no" strong="yes">
        <type></type>
        <name>dci_dl_format</name>
        <enumvalue id="namespacesrsgnb_1a6a5ffcbe1e6c9ebde1a77853979c51cfaf95559ed7234045d84106fa64a899466" prot="public">
          <name>f1_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a6a5ffcbe1e6c9ebde1a77853979c51cfa39e112eae200523443907668064d05e7" prot="public">
          <name>f1_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a6a5ffcbe1e6c9ebde1a77853979c51cfa30fff99d94e177c4fb708ea0fa11ef91" prot="public">
          <name>f2_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_dci.h" line="29" column="25" bodyfile="include/srsgnb/scheduler/scheduler_dci.h" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1ac263ca20e7ffc635bb0cd1af37c0bfbf" prot="public" static="no" strong="yes">
        <type></type>
        <name>dci_ul_format</name>
        <enumvalue id="namespacesrsgnb_1ac263ca20e7ffc635bb0cd1af37c0bfbfa945d754cb0dc06d04243fcba25fc0802" prot="public">
          <name>f0_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1ac263ca20e7ffc635bb0cd1af37c0bfbfa9b1aee847cfb597942d106a4135d4fe6" prot="public">
          <name>f0_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_dci.h" line="30" column="25" bodyfile="include/srsgnb/scheduler/scheduler_dci.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a43136566cec3f0e6aeaa5091134bed20" prot="public" static="no" strong="yes">
        <type></type>
        <name>dci_dl_rnti_config_type</name>
        <enumvalue id="namespacesrsgnb_1a43136566cec3f0e6aeaa5091134bed20aca625705afc42445b2d71612165f3aa5" prot="public">
          <name>si_f1_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a43136566cec3f0e6aeaa5091134bed20abe840f23e31d8ea3b058c56381ae85a4" prot="public">
          <name>ra_f1_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a43136566cec3f0e6aeaa5091134bed20a2cf9cbcc794401ff8f830b0a898defc5" prot="public">
          <name>ue_f1_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines which fields are stored in the DCI payload, based on the chosen DCI format and RNTI type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_dci.h" line="52" column="35" bodyfile="include/srsgnb/scheduler/scheduler_dci.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a6e493313fc102cb1b0efb1ed96f073cb" prot="public" static="no" strong="yes">
        <type>int</type>
        <name>os_thread_realtime_priority</name>
        <enumvalue id="namespacesrsgnb_1a6e493313fc102cb1b0efb1ed96f073cba259cca3039ea47f28ca94bf46c58f8ef" prot="public">
          <name>NO_REALTIME</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a6e493313fc102cb1b0efb1ed96f073cba4793667f913bc050c383da85b87d7a84" prot="public">
          <name>MIN_PRIO</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a6e493313fc102cb1b0efb1ed96f073cba88f6787eef3febf1886bc842ac71e5a8" prot="public">
          <name>MAX_PRIO</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OS thread RT scheduling priority. Note: posix defines a minimum spread between sched_get_priority_max() and sched_get_priority_min() of 32. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="25" column="39" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="namespacesrsgnb_1a5ca7f9bafa9885386c1b0a3f75d02c20" prot="public" static="no" strong="no">
        <type></type>
        <name>harq_id_t</name>
        <enumvalue id="namespacesrsgnb_1a5ca7f9bafa9885386c1b0a3f75d02c20a486f15fc7e52d4579a5f6c0bb45fdbb0" prot="public">
          <name>MAX_HARQ_ID</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacesrsgnb_1a5ca7f9bafa9885386c1b0a3f75d02c20a57a8e9af3bcad73a228b21598d049093" prot="public">
          <name>MAX_NOF_HARQS</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Identification of an HARQ process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/ue_scheduling/harq_process.h" line="23" column="15" bodyfile="lib/scheduler/ue_scheduling/harq_process.h" bodystart="23" bodyend="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" prot="public" static="no">
        <type>std::complex&lt; float &gt;</type>
        <definition>using srsgnb::cf_t = typedef std::complex&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>cf_t</name>
        <briefdescription>
<para>Type to store complex samples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/complex.h" line="19" column="1" bodyfile="include/srsgnb/adt/complex.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a63b30fdb6c293d4100a85551358ce420" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref>&lt; <ref refid="structsrsgnb_1_1default__success__t" kindref="compound">default_success_t</ref>, E &gt;</type>
        <definition>using srsgnb::error_type = typedef expected&lt;default_success_t, E&gt;</definition>
        <argsstring></argsstring>
        <name>error_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="235" column="1" bodyfile="include/srsgnb/adt/expected.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a41a19b2b84f48fa92674ab3fc46f3bda" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const T &gt;</type>
        <definition>using srsgnb::const_span = typedef span&lt;const T&gt;</definition>
        <argsstring></argsstring>
        <name>const_span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="234" column="1" bodyfile="include/srsgnb/adt/span.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a6adb9f62765e5ba93085cd5f6f66f740" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1unique__function" kindref="compound">unique_function</ref>&lt; void(), default_unique_task_buffer_size &gt;</type>
        <definition>using srsgnb::unique_task = typedef unique_function&lt;void(), default_unique_task_buffer_size&gt;</definition>
        <argsstring></argsstring>
        <name>unique_task</name>
        <briefdescription>
<para>Generic moveable task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/unique_function.h" line="190" column="1" bodyfile="include/srsgnb/adt/unique_function.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1ae5b939cbd6df410e55e6229f3f3e5f1d" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using srsgnb::baseband_gateway_timestamp = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>baseband_gateway_timestamp</name>
        <briefdescription>
<para>Describes a baseband gateway timestamp. It is expressed in multiples of the sample time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/gateways/baseband/baseband_gateway.h" line="11" column="1" bodyfile="include/srsgnb/gateways/baseband/baseband_gateway.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a76ff57ca7c8111aa8936364c876c0940" prot="public" static="no">
        <type>std::complex&lt; float &gt;</type>
        <definition>using srsgnb::radio_sample_type = typedef std::complex&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>radio_sample_type</name>
        <briefdescription>
<para>Defines the radio sample type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/gateways/baseband/baseband_gateway_buffer.h" line="24" column="1" bodyfile="include/srsgnb/gateways/baseband/baseband_gateway_buffer.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a6e4b07853e91b9f80c884cc68088c424" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using srsgnb::lcg_id_t = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>lcg_id_t</name>
        <briefdescription>
<para>Logical Channel Group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/bsr_format.h" line="12" column="1" bodyfile="include/srsgnb/mac/bsr_format.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a4a0759c18c87a187bc7d732b35ff4f7a" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using srsgnb::cqi_report = typedef uint8_t</definition>
        <argsstring></argsstring>
        <name>cqi_report</name>
        <briefdescription>
<para>CQI Value reported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_cell_control_information_handler.h" line="18" column="1" bodyfile="include/srsgnb/mac/mac_cell_control_information_handler.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1af7cff7a2aa750225c0e68eee57eaaeb9" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using srsgnb::rssi_report = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>rssi_report</name>
        <briefdescription>
<para>RSSI value reported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_cell_control_information_handler.h" line="21" column="1" bodyfile="include/srsgnb/mac/mac_cell_control_information_handler.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a1e18529775688ca22be5d3cbd7df3228" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using srsgnb::harq_pid_value = typedef uint8_t</definition>
        <argsstring></argsstring>
        <name>harq_pid_value</name>
        <briefdescription>
<para>HARQ process ID value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_pdu_handler.h" line="18" column="1" bodyfile="include/srsgnb/mac/mac_pdu_handler.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a9bd09b2d773250759f6334208011e64e" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; <ref refid="structsrsgnb_1_1mac__rx__pdu" kindref="compound">mac_rx_pdu</ref>, <ref refid="namespacesrsgnb_1ac738f843f4c0fe159d9d683d053ba76c" kindref="member">MAX_UL_PDUS_PER_SLOT</ref> &gt;</type>
        <definition>using srsgnb::mac_rx_pdu_list = typedef static_vector&lt;mac_rx_pdu, MAX_UL_PDUS_PER_SLOT&gt;</definition>
        <argsstring></argsstring>
        <name>mac_rx_pdu_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_pdu_handler.h" line="27" column="1" bodyfile="include/srsgnb/mac/mac_pdu_handler.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1abc28dc311a6391fbac33e23e8d81f95f" prot="public" static="no">
        <type>unsigned</type>
        <definition>using srsgnb::crc_calculator_checksum_t = typedef unsigned</definition>
        <argsstring></argsstring>
        <name>crc_calculator_checksum_t</name>
        <briefdescription>
<para>Checksum type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/crc_calculator.h" line="29" column="1" bodyfile="include/srsgnb/phy/upper/channel_coding/crc_calculator.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1ad0dae40a23573409ca7d16a25349dc49" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref>, <ref refid="namespacesrsgnb_1af40753bae96e83217c5c164004701efe" kindref="member">MAX_NOF_LAYER_DMRS_SYMBOLS</ref> &gt;</type>
        <definition>using srsgnb::dmrs_symbol_list = typedef static_vector&lt;cf_t, MAX_NOF_LAYER_DMRS_SYMBOLS&gt;</definition>
        <argsstring></argsstring>
        <name>dmrs_symbol_list</name>
        <briefdescription>
<para>Container for DM-RS symbols. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_estimation.h" line="268" column="1" bodyfile="include/srsgnb/phy/upper/channel_estimation.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1ac1a9baeb190d17635a09913b75d98edb" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; uint8_t, <ref refid="namespacesrsgnb_1a5699ca017750b4064f751ba8720cab35" kindref="member">MAX_SEG_LENGTH</ref> &gt;</type>
        <definition>using srsgnb::segment_data = typedef static_vector&lt;uint8_t, MAX_SEG_LENGTH&gt;</definition>
        <argsstring></argsstring>
        <name>segment_data</name>
        <briefdescription>
<para>Alias for the segment data container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/codeblock_metadata.h" line="78" column="1" bodyfile="include/srsgnb/phy/upper/codeblock_metadata.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1ad41ed02f6daa58503e9ea995271fac42" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespacesrsgnb_1ac1a9baeb190d17635a09913b75d98edb" kindref="member">segment_data</ref>, <ref refid="structsrsgnb_1_1codeblock__metadata" kindref="compound">codeblock_metadata</ref> &gt;</type>
        <definition>using srsgnb::described_segment = typedef std::pair&lt;segment_data, codeblock_metadata&gt;</definition>
        <argsstring></argsstring>
        <name>described_segment</name>
        <briefdescription>
<para>Alias for the full segment characterization. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>described_segment.first()</computeroutput> Contains the segment data, including CRC, in unpacked format (each bit is represented by a <computeroutput>uint8_t</computeroutput> entry).</para>
</listitem><listitem><para><computeroutput>described_segment.second()</computeroutput> Contains the segment metadata, useful for processing the corresponding segment (e.g., encoding, rate-matching). </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/codeblock_metadata.h" line="86" column="1" bodyfile="include/srsgnb/phy/upper/codeblock_metadata.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1adb47dd7548f967ed12fded0a86cae891" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="classsrsgnb_1_1log__likelihood__ratio" kindref="compound">log_likelihood_ratio</ref> &gt;, <ref refid="structsrsgnb_1_1codeblock__metadata" kindref="compound">codeblock_metadata</ref> &gt;</type>
        <definition>using srsgnb::described_rx_codeblock = typedef std::pair&lt;span&lt;const log_likelihood_ratio&gt;, codeblock_metadata&gt;</definition>
        <argsstring></argsstring>
        <name>described_rx_codeblock</name>
        <briefdescription>
<para>Alias for the full codeblock characterization at the receiver. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>described_rx_codeblock.first()</computeroutput> Contains a view to the LLRs corresponding to one codeblock.</para>
</listitem><listitem><para><computeroutput>described_rx_codeblock.second()</computeroutput> Contains the codeblock metadata, useful for processing the corresponding codeblock (e.g., decoding, rate-dematching). </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/codeblock_metadata.h" line="93" column="1" bodyfile="include/srsgnb/phy/upper/codeblock_metadata.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1ad21702ac78e2e7fe791781335bd32840" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1slot__array" kindref="compound">slot_array</ref>&lt; T, MAX_NOF_DU_UES &gt;</type>
        <definition>using srsgnb::du_ue_list = typedef slot_array&lt;T, MAX_NOF_DU_UES&gt;</definition>
        <argsstring></argsstring>
        <name>du_ue_list</name>
        <briefdescription>
<para>Representation of a list of UEs indexed by DU UE Index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_ue_list.h" line="20" column="1" bodyfile="include/srsgnb/ran/du_ue_list.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1aeade94aaea718e0825ce98aadf28d60e" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using srsgnb::pci_t = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>pci_t</name>
        <briefdescription>
<para>3GPP TS 38.331, PhysCellId ::= INTEGER (0..1007) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pci.h" line="18" column="1" bodyfile="include/srsgnb/ran/pci.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a112edd1c16d511ee5d0197173bfdabcb" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; uint16_t, pdcch_constants::MAX_NOF_RB_PDCCH &gt;</type>
        <definition>using srsgnb::prb_index_list = typedef static_vector&lt;uint16_t, pdcch_constants::MAX_NOF_RB_PDCCH&gt;</definition>
        <argsstring></argsstring>
        <name>prb_index_list</name>
        <briefdescription>
<para>Describes a PRB index list of unsigned 16 bit indicating the PRB index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" line="22" column="1" bodyfile="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a3157a421c097a0136294963d0f1cd743" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; pdcch_constants::MAX_NOF_FREQ_RESOURCES &gt;</type>
        <definition>using srsgnb::freq_resource_bitmap = typedef bounded_bitset&lt;pdcch_constants::MAX_NOF_FREQ_RESOURCES&gt;</definition>
        <argsstring></argsstring>
        <name>freq_resource_bitmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Describes a frequency resource bitmap for CORESET allocation. Each resource represents a group of 6 PRBs. <simplesect kind="remark"><para>See TS 38.331, &quot;ControlResourceSet&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/coreset.h" line="26" column="1" bodyfile="include/srsgnb/ran/pdcch/coreset.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1aef34f0c515daeb131c38cc38acf8e73e" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; pdcch_constants::MAX_DCI_PAYLOAD_SIZE &gt;</type>
        <definition>using srsgnb::dci_payload = typedef bounded_bitset&lt;pdcch_constants::MAX_DCI_PAYLOAD_SIZE&gt;</definition>
        <argsstring></argsstring>
        <name>dci_payload</name>
        <briefdescription>
<para>DCI payload data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/dci_packing.h" line="20" column="1" bodyfile="include/srsgnb/ran/pdcch/dci_packing.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a6b0e3a5a27525e2e5f7ca89f16b9f838" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; uint8_t, <ref refid="namespacesrsgnb_1a268ee8e748532d91e7426b537736c78d" kindref="member">PDCCH_MAX_NOF_CANDIDATES_SS</ref> &gt;</type>
        <definition>using srsgnb::pdcch_candidate_list = typedef static_vector&lt;uint8_t, PDCCH_MAX_NOF_CANDIDATES_SS&gt;</definition>
        <argsstring></argsstring>
        <name>pdcch_candidate_list</name>
        <briefdescription>
<para>PDCCH candidate data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/pdcch_candidates.h" line="22" column="1" bodyfile="include/srsgnb/ran/pdcch/pdcch_candidates.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1ae3fb8f3d5f93d2f5e54c48697b708d53" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1bounded__integer" kindref="compound">bounded_integer</ref>&lt; uint8_t, 0, 31 &gt;</type>
        <definition>using srsgnb::sch_mcs_index = typedef bounded_integer&lt;uint8_t, 0, 31&gt;</definition>
        <argsstring></argsstring>
        <name>sch_mcs_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Physical Downlink and Uplink Shared Channel Modulation and Code Scheme Index, parameter $fI_{MCS}$f in TS38.214 Section 5.1.3.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/sch_mcs.h" line="20" column="1" bodyfile="include/srsgnb/ran/sch_mcs.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1aac2a9e8034b525270a087f4daf642e59" prot="public" static="no">
        <type>int</type>
        <definition>using srsgnb::slot_difference = typedef int</definition>
        <argsstring></argsstring>
        <name>slot_difference</name>
        <briefdescription>
<para>Represents the difference between two slot points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="25" column="1" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a07a2abca7d74448142de4d755b8d9b83" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; <ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref> &gt;</type>
        <definition>using srsgnb::slot_interval = typedef interval&lt;slot_point&gt;</definition>
        <argsstring></argsstring>
        <name>slot_interval</name>
        <briefdescription>
<para>Slot Interval [start, stop). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="253" column="1" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a09493a1533975003c552024f78c38923" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; 14 &gt;</type>
        <definition>using srsgnb::dmrs_symbol_mask = typedef bounded_bitset&lt;14&gt;</definition>
        <argsstring></argsstring>
        <name>dmrs_symbol_mask</name>
        <briefdescription>
<para>Data type used to represent a DMRS symbol mask for PDSCH and PUSCH transmissions. </para>
        </briefdescription>
        <detaileddescription>
<para>Each bit set in the bitset represents a symbol within the slot. The first bit corresponds to the first symbol. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/dmrs.h" line="61" column="1" bodyfile="include/srsgnb/scheduler/dmrs.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1aeb085d261a3b2f11c25da1e4596ef25f" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a1d2a8109fbd41e51c8237141a29edf2a" kindref="member">MAX_NOF_PRBS</ref>, true &gt;</type>
        <definition>using srsgnb::prb_bitmap = typedef bounded_bitset&lt;MAX_NOF_PRBS, true&gt;</definition>
        <argsstring></argsstring>
        <name>prb_bitmap</name>
        <briefdescription>
<para>Bitset of PRBs with size up to 275. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/prb_grant.h" line="22" column="1" bodyfile="include/srsgnb/scheduler/prb_grant.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a1d9867efbcd5ea5779e082900fd4ec22" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1ae3d6e3dabfd788b45abce99de004b55f" kindref="member">MAX_NOF_RBGS</ref>, true &gt;</type>
        <definition>using srsgnb::rbg_bitmap = typedef bounded_bitset&lt;MAX_NOF_RBGS, true&gt;</definition>
        <argsstring></argsstring>
        <name>rbg_bitmap</name>
        <briefdescription>
<para>Bitset of RBGs with size up to 18. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="32" column="1" bodyfile="include/srsgnb/scheduler/resource_block_group.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1ad482cbce73fc7b67b68e9aad2dd639ea" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; <ref refid="structsrsgnb_1_1ul__bsr__lcg__report" kindref="compound">ul_bsr_lcg_report</ref>, <ref refid="namespacesrsgnb_1af2999c0d7bb76074e5c1a8a417dae315" kindref="member">MAX_LOGICAL_CHANNEL_GROUP</ref> &gt;</type>
        <definition>using srsgnb::ul_bsr_lcg_report_list = typedef static_vector&lt;ul_bsr_lcg_report, MAX_LOGICAL_CHANNEL_GROUP&gt;</definition>
        <argsstring></argsstring>
        <name>ul_bsr_lcg_report_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_feedback_handler.h" line="36" column="1" bodyfile="include/srsgnb/scheduler/scheduler_feedback_handler.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a56193587a325a59bade6d6c104e5bdb7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="structsrsgnb_1_1base__resumable__procedure" kindref="compound">base_resumable_procedure</ref>&lt; <ref refid="classsrsgnb_1_1async__task" kindref="compound">async_task</ref>&lt; R &gt; &gt;</type>
        <definition>using srsgnb::async_procedure = typedef base_resumable_procedure&lt;async_task&lt;R&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>async_procedure</name>
        <briefdescription>
<para>Base class of non-coroutine resumable tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="127" column="1" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a30642626821464cb7881dd5189630bd4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FutureType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structsrsgnb_1_1detail_1_1base__coro__frame" kindref="compound">detail::base_coro_frame</ref>&lt; typename FutureType::promise_type &gt;</type>
        <definition>using srsgnb::coro_context = typedef detail::base_coro_frame&lt;typename FutureType::promise_type&gt;</definition>
        <argsstring></argsstring>
        <name>coro_context</name>
        <briefdescription>
<para>Helper to pass coroutine frame context to operator() of coroutines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="332" column="1" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a0be707e6e824031784f5a15d82d7b055" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using srsgnb::timer_tick_difference_t = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>timer_tick_difference_t</name>
        <briefdescription>
<para>Type to represent a time difference measured in ticks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/timers.h" line="26" column="1" bodyfile="include/srsgnb/support/timers.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a7b91e95e400c28407d219ea3caf55f40" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using srsgnb::timer_id_t = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>timer_id_t</name>
        <briefdescription>
<para>Type to represent a unique timer identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/timers.h" line="29" column="1" bodyfile="include/srsgnb/support/timers.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a5cfd7bee680289488016d58843cb5a50" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; <ref refid="structsrsgnb_1_1lcg__bsr__report" kindref="compound">lcg_bsr_report</ref>, <ref refid="namespacesrsgnb_1af2999c0d7bb76074e5c1a8a417dae315" kindref="member">MAX_LOGICAL_CHANNEL_GROUP</ref> &gt;</type>
        <definition>using srsgnb::lcg_bsr_report_list = typedef static_vector&lt;lcg_bsr_report, MAX_LOGICAL_CHANNEL_GROUP&gt;</definition>
        <argsstring></argsstring>
        <name>lcg_bsr_report_list</name>
        <briefdescription>
<para>List of reported UL BSRs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ul/ul_bsr.h" line="29" column="1" bodyfile="lib/mac/mac_ul/ul_bsr.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1abf86a5538874e8272b0c274211e2598b" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a1d2a8109fbd41e51c8237141a29edf2a" kindref="member">MAX_NOF_PRBS</ref>, true &gt;</type>
        <definition>using srsgnb::crb_bitmap = typedef bounded_bitset&lt;MAX_NOF_PRBS, true&gt;</definition>
        <argsstring></argsstring>
        <name>crb_bitmap</name>
        <briefdescription>
<para>Bitset of CRBs with size up to 275. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/cell/resource_grid.h" line="23" column="1" bodyfile="lib/scheduler/cell/resource_grid.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a36ba0a1e765183ae121b247a9408fc1d" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">srsgnb::static_vector</ref>&lt; <ref refid="structsrsgnb_1_1ssb__information" kindref="compound">ssb_information</ref>, <ref refid="namespacesrsgnb_1a021bb1d44a621a4c05406c3f68ee832f" kindref="member">MAX_SSB_PER_SLOT</ref> &gt;</type>
        <definition>using srsgnb::ssb_information_list = typedef srsgnb::static_vector&lt;ssb_information, MAX_SSB_PER_SLOT&gt;</definition>
        <argsstring></argsstring>
        <name>ssb_information_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/common_scheduling/ssb_scheduler.h" line="23" column="1" bodyfile="lib/scheduler/common_scheduling/ssb_scheduler.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrsgnb_1a0b60c0be58b71d996f81318347814e55" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1stable__id__map" kindref="compound">stable_id_map</ref>&lt; <ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref>, <ref refid="classsrsgnb_1_1ue" kindref="compound">ue</ref>, MAX_NOF_DU_UES &gt;</type>
        <definition>using srsgnb::ue_list = typedef stable_id_map&lt;du_ue_index_t, ue, MAX_NOF_DU_UES&gt;</definition>
        <argsstring></argsstring>
        <name>ue_list</name>
        <briefdescription>
<para>Container that stores all scheduler UEs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/ue_scheduling/ue.h" line="123" column="1" bodyfile="lib/scheduler/ue_scheduling/ue.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacesrsgnb_1a1fde5fbc21b4525ed7ca591961011dd9" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::default_unique_function_buffer_size</definition>
        <argsstring></argsstring>
        <name>default_unique_function_buffer_size</name>
        <initializer>= 32</initializer>
        <briefdescription>
<para>Size of the small buffer embedded in &quot;unique_function&lt;R(Args...)&gt;&quot;, used to store functors without calling &quot;new&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/unique_function.h" line="26" column="18" bodyfile="include/srsgnb/adt/unique_function.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1acd983d5cf1bbcff5d554d295f5e667d6" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::default_unique_task_buffer_size</definition>
        <argsstring></argsstring>
        <name>default_unique_task_buffer_size</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/unique_function.h" line="187" column="18" bodyfile="include/srsgnb/adt/unique_function.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af2999c0d7bb76074e5c1a8a417dae315" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacesrsgnb_1a6e4b07853e91b9f80c884cc68088c424" kindref="member">lcg_id_t</ref></type>
        <definition>const lcg_id_t srsgnb::MAX_LOGICAL_CHANNEL_GROUP</definition>
        <argsstring></argsstring>
        <name>MAX_LOGICAL_CHANNEL_GROUP</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>TS 38.321, 6.1.3.1 - Buffer Status Report MAC CEs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/bsr_format.h" line="15" column="16" bodyfile="include/srsgnb/mac/bsr_format.h" bodystart="15" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1pdu__rx__handler_1a644439727a22fdabd3a2a3f73d0ddd1a" compoundref="pdu__rx__handler_8cpp" startline="119" endline="178">srsgnb::pdu_rx_handler::handle_mac_ce</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a6535d35c5a405f7ad5647400f9132fa7" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::MAX_DL_PDUS_PER_SLOT</definition>
        <argsstring></argsstring>
        <name>MAX_DL_PDUS_PER_SLOT</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_cell_result.h" line="14" column="18" bodyfile="include/srsgnb/mac/mac_cell_result.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ac738f843f4c0fe159d9d683d053ba76c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::MAX_UL_PDUS_PER_SLOT</definition>
        <argsstring></argsstring>
        <name>MAX_UL_PDUS_PER_SLOT</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of PDUs per slot. This value is implementation-defined. <simplesect kind="remark"><para>It should match FAPI MaxULPDUsPerSlot. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_pdu_handler.h" line="15" column="18" bodyfile="include/srsgnb/mac/mac_pdu_handler.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_RB</definition>
        <argsstring></argsstring>
        <name>MAX_RB</name>
        <initializer>= 275</initializer>
        <briefdescription>
<para>Defines the maximum number of Resource Blocks (RB) that a resource grid can carry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/constants.h" line="16" column="27" bodyfile="include/srsgnb/phy/constants.h" bodystart="16" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1a1bbd236c017e7ac47011d43e75b43e3a" compoundref="channel__estimation_8h" startline="57" endline="90">srsgnb::channel_estimate::channel_estimate</referencedby>
        <referencedby refid="classsrsgnb_1_1re__measurement_1a7f339d3ba2e1fd4fdfabd9ae211116d3" compoundref="channel__equalizer_8h" startline="62" endline="83">srsgnb::re_measurement&lt; cf_t &gt;::re_measurement</referencedby>
        <referencedby refid="classsrsgnb_1_1re__measurement_1a95f890bfb8bd45a85686e99e8356eaae" compoundref="channel__equalizer_8h" startline="119" endline="144">srsgnb::re_measurement&lt; cf_t &gt;::resize</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" compoundref="rb__allocation_8cpp" startline="113" endline="129">srsgnb::rb_allocation::get_prb_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a9e9c90b67ebb0b15838289d73ce6475c" compoundref="rb__allocation_8cpp" startline="131" endline="153">srsgnb::rb_allocation::get_prb_indices</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::NRE</definition>
        <argsstring></argsstring>
        <name>NRE</name>
        <initializer>= 12</initializer>
        <briefdescription>
<para>Defines the number of Resource Elements (RE) per Resource Block (RB) in frequency domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/constants.h" line="19" column="27" bodyfile="include/srsgnb/phy/constants.h" bodystart="19" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1a1bbd236c017e7ac47011d43e75b43e3a" compoundref="channel__estimation_8h" startline="57" endline="90">srsgnb::channel_estimate::channel_estimate</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__type_1aa69ed66127c1e0fa6f7c4b0714f98b46" compoundref="dmrs__mapping_8h" startline="67" endline="97">srsgnb::dmrs_type::get_dmrs_pattern</referencedby>
        <referencedby refid="classsrsgnb_1_1re__measurement_1a95f890bfb8bd45a85686e99e8356eaae" compoundref="channel__equalizer_8h" startline="119" endline="144">srsgnb::re_measurement&lt; cf_t &gt;::resize</referencedby>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__collection_1adf68bec8ccfd6f0ba80639e2cb06d3c5" compoundref="low__papr__sequence__collection_8h" startline="50" endline="76">srsgnb::low_papr_sequence_collection::low_papr_sequence_collection</referencedby>
        <referencedby refid="namespacesrsgnb_1ae54949545c17d2fdbb763dbf097adffe" compoundref="ssb__mapping_8h" startline="103" endline="158">ssb_get_k_first</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1adb89f3b5110d488d6a098b43a60bc53c" compoundref="pdsch__modulator__impl_8cpp" startline="160" endline="232">srsgnb::pdsch_modulator_impl::map_to_prb_other</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__processor__impl_1ad7f3fc8d1b12b86035f4802afa77c4b5" compoundref="pdsch__processor__impl_8cpp" startline="16" endline="38">srsgnb::pdsch_processor_impl::compute_nof_data_re</referencedby>
        <referencedby refid="structsrsgnb_1_1re__pattern_1a8fc78e95d1602645c2317f3b7970731f" compoundref="re__pattern_8cpp" startline="23" endline="45">srsgnb::re_pattern::get_inclusion_mask</referencedby>
        <referencedby refid="structsrsgnb_1_1re__pattern_1a84ec64f68577a00dea6ac8098724a0e5" compoundref="re__pattern_8cpp" startline="47" endline="69">srsgnb::re_pattern::get_exclusion_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1re__pattern__list_1a8f5e432aaa7eb45a4e6cb30156fd712f" compoundref="re__pattern_8cpp" startline="71" endline="115">srsgnb::re_pattern_list::merge</referencedby>
        <referencedby refid="classsrsgnb_1_1re__pattern__list_1a6abc7e3880486673129696217a78890e" compoundref="re__pattern_8cpp" startline="144" endline="173">srsgnb::re_pattern_list::get_inclusion_count</referencedby>
        <referencedby refid="namespacesrsgnb_1adf0de14f34490ba84d770e68336cd6cf" compoundref="resource__grid__helpers_8h" startline="23" endline="34">get_rg_subc_mask_reference</referencedby>
        <referencedby refid="namespacesrsgnb_1a91f1622ff821b787192eb0b889692a87" compoundref="resource__grid__helpers_8h" startline="48" endline="83">get_rg_subc_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1csi__rs__processor__impl_1a30c332617ff3e1d643e6a61e5dfe86db" compoundref="csi__rs__processor__impl_8cpp" startline="652" endline="703">srsgnb::csi_rs_processor_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format1__impl_1a6a23c1f5e0738c7699f9cece454edeed" compoundref="dmrs__pucch__processor__format1__impl_8cpp" startline="110" endline="116">srsgnb::dmrs_pucch_processor_format1_impl::mapping</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format1__impl_1a70192cadc4585598521887b8d46274a0" compoundref="dmrs__pucch__processor__format1__impl_8cpp" startline="118" endline="217">srsgnb::dmrs_pucch_processor_format1_impl::estimate</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl_1a906f86bce6dbba0218f6e1aec5f24be4" compoundref="dmrs__pucch__processor__format2__impl_8cpp" startline="40" endline="54">srsgnb::dmrs_pucch_processor_format2_impl::mapping</referencedby>
        <referencedby refid="classsrsgnb_1_1pucch__helper_1a5e2150ab9042afa57d513e3c31c54b71" compoundref="pucch__helper_8h" startline="66" endline="100">srsgnb::pucch_helper::get_alpha_index</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a2d5e050f83b9b5ced241a225bbbd68ce" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::SSB_BW_RB</definition>
        <argsstring></argsstring>
        <name>SSB_BW_RB</name>
        <initializer>= 20</initializer>
        <briefdescription>
<para>Defines the SSB bandwidth in Resource Blocks (RBs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/constants.h" line="22" column="27" bodyfile="include/srsgnb/phy/constants.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a64601698533b895bcfc1f59692d8a80e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::SSB_DURATION_NSYMB</definition>
        <argsstring></argsstring>
        <name>SSB_DURATION_NSYMB</name>
        <initializer>= 4</initializer>
        <briefdescription>
<para>SS/PBCH Block duration in OFDM symbols. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/constants.h" line="25" column="27" bodyfile="include/srsgnb/phy/constants.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a385c6cfdf6d6806602dd5034aa26504f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::SSB_BW_RE</definition>
        <argsstring></argsstring>
        <name>SSB_BW_RE</name>
        <initializer>= <ref refid="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" kindref="member">NRE</ref> * <ref refid="namespacesrsgnb_1a2d5e050f83b9b5ced241a225bbbd68ce" kindref="member">SSB_BW_RB</ref></initializer>
        <briefdescription>
<para>Defines the SSB bandwidth in Resource Elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/constants.h" line="28" column="27" bodyfile="include/srsgnb/phy/constants.h" bodystart="28" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1pbch__modulator__impl_1a760c76d42c43c13b744ef088b79f2cde" compoundref="pbch__modulator__impl_8cpp" startline="33" endline="78">srsgnb::pbch_modulator_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pbch__processor__impl_1a6815328c914ba213489abdda61a04a32" compoundref="dmrs__pbch__processor__impl_8cpp" startline="38" endline="79">srsgnb::dmrs_pbch_processor_impl::mapping</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ad5f97b253a73d08e22686b95802f6182" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_PORTS</definition>
        <argsstring></argsstring>
        <name>MAX_PORTS</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Defines the maximum number of ports for any channel transmission. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/constants.h" line="31" column="27" bodyfile="include/srsgnb/phy/constants.h" bodystart="31" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a99d144ad4330e7b1851df0de1b8ca6f0" compoundref="pdsch__modulator__impl_8cpp" startline="234" endline="286">srsgnb::pdsch_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1aa6aed4e5ed838d9ee66e3e814aa32380" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="71" endline="132">srsgnb::dmrs_pdsch_processor_impl::mapping</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a5e11127ef81316d9d2c9675b2e97d246" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t srsgnb::PLACEHOLDER_ONE</definition>
        <argsstring></argsstring>
        <name>PLACEHOLDER_ONE</name>
        <initializer>= 255</initializer>
        <briefdescription>
<para>UCI placeholder bit. </para>
        </briefdescription>
        <detaileddescription>
<para>A placeholder for setting a bit to 1 in the scrambler. It is denoted as &quot;\c x&quot; in TS38.212 Section 5.3.3 and in TS38.211 Section 6.3.1.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/short/short_block_encoder.h" line="29" column="19" bodyfile="include/srsgnb/phy/upper/channel_coding/short/short_block_encoder.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a9c5ba19e335aa256c0815988a715338c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t srsgnb::PLACEHOLDER_REPEAT</definition>
        <argsstring></argsstring>
        <name>PLACEHOLDER_REPEAT</name>
        <initializer>= 254</initializer>
        <briefdescription>
<para>UCI placeholder bit. </para>
        </briefdescription>
        <detaileddescription>
<para>A placeholder for repeating the previous bit in the scrambler. It is denoted as &quot;\c y&quot; in TS38.212 Section 5.3.3 and in TS38.211 Section 6.3.1.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/short/short_block_encoder.h" line="34" column="19" bodyfile="include/srsgnb/phy/upper/channel_coding/short/short_block_encoder.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af40753bae96e83217c5c164004701efe" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_NOF_LAYER_DMRS_SYMBOLS</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_LAYER_DMRS_SYMBOLS</name>
        <initializer>= <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> * <ref refid="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" kindref="member">NRE</ref> / 2 * 4 * 2</initializer>
        <briefdescription>
<para>Maximum number of DM-RS symbols for one layer. </para>
        </briefdescription>
        <detaileddescription>
<para>At most half of the total number of subcarriers (i.e., <computeroutput>MAX_RB * NRE / 2</computeroutput>) is assigned a DM-RS symbol. Moreover, the number of OFDM symbols carrying DM-RS in a slot is at most <formula id="23">$4 \times 2$</formula>, being 4 the maximum number of positions <formula id="24">$\bar{l}$</formula> and 2 the maximum number of indices <formula id="25">$l&apos;$</formula>, as per TS38.211 Section 6.4.1.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_estimation.h" line="265" column="27" bodyfile="include/srsgnb/phy/upper/channel_estimation.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a5699ca017750b4064f751ba8720cab35" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_SEG_LENGTH</definition>
        <argsstring></argsstring>
        <name>MAX_SEG_LENGTH</name>
        <initializer>= 22 * 384</initializer>
        <briefdescription>
<para>Maximum segment length. </para>
        </briefdescription>
        <detaileddescription>
<para>This is given by the maximum lifting size (i.e., 384) times the maximum number of information bits in base graph BG1 (i.e., 22), as per TS38.212 Section 5.2.2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/codeblock_metadata.h" line="72" column="27" bodyfile="include/srsgnb/phy/upper/codeblock_metadata.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a64a27ddc884f4517e79d5435a337e554" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_NOF_SEGMENTS</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_SEGMENTS</name>
        <initializer>= 52</initializer>
        <briefdescription>
<para>Maximum number of segments per transport block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/codeblock_metadata.h" line="75" column="27" bodyfile="include/srsgnb/phy/upper/codeblock_metadata.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a14ddaa941b37485645613e923618fe0b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::DMRS_MAX_NPORTS</definition>
        <argsstring></argsstring>
        <name>DMRS_MAX_NPORTS</name>
        <initializer>=
    std::max(<ref refid="classsrsgnb_1_1dmrs__type" kindref="compound">dmrs_type</ref>(dmrs_type::TYPE1).dmrs_max_ports_type(), <ref refid="classsrsgnb_1_1dmrs__type" kindref="compound">dmrs_type</ref>(dmrs_type::TYPE2).dmrs_max_ports_type())</initializer>
        <briefdescription>
<para>Defines the maximum number of ports DMRS can be mapped to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/dmrs_mapping.h" line="105" column="27" bodyfile="include/srsgnb/phy/upper/dmrs_mapping.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a7ab8f792dce989fcaf9787fca5e2d23f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::RADIO_MAX_NOF_CHANNELS</definition>
        <argsstring></argsstring>
        <name>RADIO_MAX_NOF_CHANNELS</name>
        <initializer>= 4</initializer>
        <briefdescription>
<para>Maximum number of channels per stream in a radio baseband unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/radio/radio_constants.h" line="16" column="27" bodyfile="include/srsgnb/radio/radio_constants.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a5b41e5671085adda366c518f316ae646" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::RADIO_MAX_NOF_STREAMS</definition>
        <argsstring></argsstring>
        <name>RADIO_MAX_NOF_STREAMS</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>Maximum number of streams that a radio baseband unit can support. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/radio/radio_constants.h" line="19" column="27" bodyfile="include/srsgnb/radio/radio_constants.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a93f87cbda3eb933c20f1398faf1c1778" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::RADIO_MAX_NOF_PORTS</definition>
        <argsstring></argsstring>
        <name>RADIO_MAX_NOF_PORTS</name>
        <initializer>= <ref refid="namespacesrsgnb_1a7ab8f792dce989fcaf9787fca5e2d23f" kindref="member">RADIO_MAX_NOF_CHANNELS</ref> * <ref refid="namespacesrsgnb_1a5b41e5671085adda366c518f316ae646" kindref="member">RADIO_MAX_NOF_STREAMS</ref></initializer>
        <briefdescription>
<para>Total maximum number of ports that a radio baseband unit can support. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/radio/radio_constants.h" line="22" column="27" bodyfile="include/srsgnb/radio/radio_constants.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1afc334c41fadec01c2b6d00348493cd53" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::KHZ_TO_HZ</definition>
        <argsstring></argsstring>
        <name>KHZ_TO_HZ</name>
        <initializer>= 1000U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/band_helper.h" line="27" column="16" bodyfile="include/srsgnb/ran/band_helper.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ad9ef56d231741a77cc8b95ce5ea7eceb" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double srsgnb::HZ_TO_KHZ</definition>
        <argsstring></argsstring>
        <name>HZ_TO_KHZ</name>
        <initializer>= 1e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/band_helper.h" line="28" column="16" bodyfile="include/srsgnb/ran/band_helper.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a368f9716311e0bea205a7b8a9b255c20" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_NSYMB_PER_SLOT</definition>
        <argsstring></argsstring>
        <name>MAX_NSYMB_PER_SLOT</name>
        <initializer>=
    std::max(<ref refid="namespacesrsgnb_1a524380b60d9cee8d38b67a46de799154" kindref="member">get_nsymb_per_slot</ref>(<ref refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ae49c4ab8646a82adaaf309ba3c2eb467" kindref="member">cyclic_prefix::NORMAL</ref>), <ref refid="namespacesrsgnb_1a524380b60d9cee8d38b67a46de799154" kindref="member">get_nsymb_per_slot</ref>(<ref refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ab3d17759472e137f642546ebceceb485" kindref="member">cyclic_prefix::EXTENDED</ref>))</initializer>
        <briefdescription>
<para>Returns the maximum number of OFDM symbols per slot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="108" column="27" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="108" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1a1bbd236c017e7ac47011d43e75b43e3a" compoundref="channel__estimation_8h" startline="57" endline="90">srsgnb::channel_estimate::channel_estimate</referencedby>
        <referencedby refid="classsrsgnb_1_1re__measurement_1a7f339d3ba2e1fd4fdfabd9ae211116d3" compoundref="channel__equalizer_8h" startline="62" endline="83">srsgnb::re_measurement&lt; cf_t &gt;::re_measurement</referencedby>
        <referencedby refid="classsrsgnb_1_1re__measurement_1a95f890bfb8bd45a85686e99e8356eaae" compoundref="channel__equalizer_8h" startline="119" endline="144">srsgnb::re_measurement&lt; cf_t &gt;::resize</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1adb89f3b5110d488d6a098b43a60bc53c" compoundref="pdsch__modulator__impl_8cpp" startline="160" endline="232">srsgnb::pdsch_modulator_impl::map_to_prb_other</referencedby>
        <referencedby refid="classsrsgnb_1_1re__pattern__list_1a8f5e432aaa7eb45a4e6cb30156fd712f" compoundref="re__pattern_8cpp" startline="71" endline="115">srsgnb::re_pattern_list::merge</referencedby>
        <referencedby refid="classsrsgnb_1_1re__pattern__list_1af8ba0866fd1590216a36b58c07b1cc83" compoundref="re__pattern_8cpp" startline="117" endline="134">srsgnb::re_pattern_list::operator==</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1abd59f0a94a5a45c82d5e767bc5ba25a9" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="134" endline="169">srsgnb::dmrs_pdsch_processor_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1pucch__helper_1a5e2150ab9042afa57d513e3c31c54b71" compoundref="pucch__helper_8h" startline="66" endline="100">srsgnb::pucch_helper::get_alpha_index</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aa558f255506148cec1603985918359ab" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::NOF_OFDM_SYM_PER_SLOT_NORMAL_CP</definition>
        <argsstring></argsstring>
        <name>NOF_OFDM_SYM_PER_SLOT_NORMAL_CP</name>
        <initializer>= 14</initializer>
        <briefdescription>
<para>The number of OFDM symbols per slot is constant for all numerologies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/frame_types.h" line="18" column="16" bodyfile="include/srsgnb/ran/frame_types.h" bodystart="18" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1ad2ec6b5d29686ac0c48938c0a5356056" compoundref="ofdm__symbol__range_8h" startline="27" endline="32">sliv_to_ofdm_symbols</referencedby>
        <referencedby refid="classsrsgnb_1_1carrier__subslot__resource__grid_1a27ccc216d3099e49700aa3a0f1362ed9" compoundref="resource__grid_8cpp" startline="33" endline="43">srsgnb::carrier_subslot_resource_grid::fill</referencedby>
        <referencedby refid="classsrsgnb_1_1carrier__subslot__resource__grid_1a9240696310f6958a03f53bd94b1fa412" compoundref="resource__grid_8cpp" startline="45" endline="58">srsgnb::carrier_subslot_resource_grid::collides</referencedby>
        <referencedby refid="classsrsgnb_1_1carrier__subslot__resource__grid_1a7c600702eaac7a1f49c0082dfe0f96df" compoundref="resource__grid_8cpp" startline="60" endline="68">srsgnb::carrier_subslot_resource_grid::used_crbs</referencedby>
        <referencedby refid="classsrsgnb_1_1carrier__subslot__resource__grid_1aed60a3357ae8744b9fb69c6629a1fd95" compoundref="resource__grid_8cpp" startline="70" endline="83">srsgnb::carrier_subslot_resource_grid::all_set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a5f2f9f68827aabfd2fd097785a2df4a5" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::NOF_OFDM_SYM_PER_SLOT_EXTENDED_CP</definition>
        <argsstring></argsstring>
        <name>NOF_OFDM_SYM_PER_SLOT_EXTENDED_CP</name>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/frame_types.h" line="19" column="16" bodyfile="include/srsgnb/ran/frame_types.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a458f46e58572aeb3c966534c4c6dde8d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339e" kindref="member">lcid_t</ref></type>
        <definition>constexpr lcid_t srsgnb::MAX_LCID</definition>
        <argsstring></argsstring>
        <name>MAX_LCID</name>
        <initializer>= LCID_MAX_DRB</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum value of Logical Channel ID. <simplesect kind="remark"><para>See TS 38.331, maxLC-ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="31" column="18" bodyfile="include/srsgnb/ran/lcid.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ade0dd083078a556d8ad4e9d8e7340349" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t srsgnb::MAX_NOF_SRBS</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_SRBS</name>
        <initializer>= srb3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="34" column="23" bodyfile="include/srsgnb/ran/lcid.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a93482e6cc167b02024b5f422d40e112d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MODULATION_MAX_BITS_PER_SYMBOL</definition>
        <argsstring></argsstring>
        <name>MODULATION_MAX_BITS_PER_SYMBOL</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>Maximum number of bits per symbol. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/modulation_scheme.h" line="21" column="27" bodyfile="include/srsgnb/ran/modulation_scheme.h" bodystart="21" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1a0d8c69bda1d828c45f83f9e92e23b0b1" compoundref="modulation__scheme_8h" startline="63" endline="76">get_bits_per_symbol</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a1d161b20917886cafe8e3624ce270774" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespacesrsgnb_1aeade94aaea718e0825ce98aadf28d60e" kindref="member">pci_t</ref></type>
        <definition>constexpr pci_t srsgnb::MAX_PCI</definition>
        <argsstring></argsstring>
        <name>MAX_PCI</name>
        <initializer>= 1007</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pci.h" line="19" column="17" bodyfile="include/srsgnb/ran/pci.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ac6872ad121ba8cec7324a154bf79f06d" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t srsgnb::MAX_NOF_CORESETS_PER_BWP</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_CORESETS_PER_BWP</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max number of CORESETs per BWP per cell (including UE-specific and common CORESETs). <simplesect kind="remark"><para>See TS 38.331, &quot;PDCCH-Config&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/coreset.h" line="22" column="14" bodyfile="include/srsgnb/ran/pdcch/coreset.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a268ee8e748532d91e7426b537736c78d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::PDCCH_MAX_NOF_CANDIDATES_SS</definition>
        <argsstring></argsstring>
        <name>PDCCH_MAX_NOF_CANDIDATES_SS</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>Maximum number of candidates per aggregation level in a SS as per TS38.331 SearchSpace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/pdcch_candidates.h" line="19" column="27" bodyfile="include/srsgnb/ran/pdcch/pdcch_candidates.h" bodystart="19" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1a5a42cfe5ef88be2034b52ffbfef531c2" compoundref="pdcch__candidates_8cpp" startline="16" endline="42">pdcch_candidates_common_ss_get_lowest_cce</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a2c56e5ebffb2e3d155a00c190950d5c7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structsrsgnb_1_1pdcch__type0__css__coreset__description" kindref="compound">pdcch_type0_css_coreset_description</ref></type>
        <definition>constexpr pdcch_type0_css_coreset_description srsgnb::PDCCH_TYPE0_CSS_CORESET_RESERVED</definition>
        <argsstring></argsstring>
        <name>PDCCH_TYPE0_CSS_CORESET_RESERVED</name>
        <initializer>=
    {ssb_coreset0_mplex_pattern::mplex_invalid, 0, 0, 0}</initializer>
        <briefdescription>
<para>Reserved CORESET for Type0-PDCCH CSS. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/pdcch_type0_css_coreset_config.h" line="37" column="54" bodyfile="include/srsgnb/ran/pdcch/pdcch_type0_css_coreset_config.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a173c9d84828687363e0f66d268e480fe" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structsrsgnb_1_1prach__configuration" kindref="compound">prach_configuration</ref></type>
        <definition>const prach_configuration srsgnb::PRACH_CONFIG_RESERVED</definition>
        <argsstring></argsstring>
        <name>PRACH_CONFIG_RESERVED</name>
        <initializer>=
    {preamble_format::OTHER, UINT32_MAX, UINT32_MAX, {}, 0, 0, 0, 0}</initializer>
        <briefdescription>
<para>Reserved PRACH configuration. Indicates the configuration parameters are invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/prach_configuration.h" line="48" column="34" bodyfile="include/srsgnb/ran/prach/prach_configuration.h" bodystart="48" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1a9944cdc11b9b2291d2acaec7df21107c" compoundref="prach__configuration_8cpp" startline="115" endline="122">prach_configuration_get</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a066c9700eff6552307432454d7e8d8ad" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t srsgnb::PRACH_CYCLIC_SHIFTS_RESERVED</definition>
        <argsstring></argsstring>
        <name>PRACH_CYCLIC_SHIFTS_RESERVED</name>
        <initializer>= 430</initializer>
        <briefdescription>
<para>Reserved number of cyclic shifts. It indicates the number of cyclic shifts is invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/prach_cyclic_shifts.h" line="20" column="27" bodyfile="include/srsgnb/ran/prach/prach_cyclic_shifts.h" bodystart="20" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1af4cb37be7d95f0b5112c65a2b887bfce" compoundref="prach__cyclic__shifts_8cpp" startline="17" endline="108">prach_cyclic_shifts_get</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a13d0955c3694d41b59a80b830b15adba" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structsrsgnb_1_1prach__frequency__mapping__information" kindref="compound">prach_frequency_mapping_information</ref></type>
        <definition>constexpr prach_frequency_mapping_information srsgnb::PRACH_FREQUENCY_MAPPING_INFORMATION_RESERVED</definition>
        <argsstring></argsstring>
        <name>PRACH_FREQUENCY_MAPPING_INFORMATION_RESERVED</name>
        <initializer>= {0, 0}</initializer>
        <briefdescription>
<para>Reserved PRACH frequency-domain mapping information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/prach_frequency_mapping.h" line="28" column="54" bodyfile="include/srsgnb/ran/prach/prach_frequency_mapping.h" bodystart="28" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="namespacesrsgnb_1a67fbfc584f45a838f893a16659889a12" compoundref="prach__frequency__mapping_8cpp" startline="15" endline="89">prach_frequency_mapping_get</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af73c3ba10b49771055180c70a571cf02" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::PUCCH_FORMAT1_N_MAX</definition>
        <argsstring></argsstring>
        <name>PUCCH_FORMAT1_N_MAX</name>
        <initializer>= 7</initializer>
        <briefdescription>
<para>Maximum number of symbols (without DMRS) that NR-PUCCH format 1 can transmit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pucch_mapping.h" line="29" column="27" bodyfile="include/srsgnb/ran/pucch_mapping.h" bodystart="29" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format1__impl_1a70192cadc4585598521887b8d46274a0" compoundref="dmrs__pucch__processor__format1__impl_8cpp" startline="118" endline="217">srsgnb::dmrs_pucch_processor_format1_impl::estimate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aac882ba2c2595d3f38153e4331fa6427" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::PUCCH_FORMAT2_MIN_NSYMB</definition>
        <argsstring></argsstring>
        <name>PUCCH_FORMAT2_MIN_NSYMB</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Minimum number of symbols that NR-PUCCH format 2 can transmit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pucch_mapping.h" line="32" column="27" bodyfile="include/srsgnb/ran/pucch_mapping.h" bodystart="32" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl_1a5abdc76577587c098307ff8dc50bce00" compoundref="dmrs__pucch__processor__format2__impl_8cpp" startline="56" endline="120">srsgnb::dmrs_pucch_processor_format2_impl::estimate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a5aa8ca63c84d7b1981d2cf1d4a44e722" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::PUCCH_FORMAT2_MAX_NSYMB</definition>
        <argsstring></argsstring>
        <name>PUCCH_FORMAT2_MAX_NSYMB</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Maximum number of symbols that NR-PUCCH format 2 can transmit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pucch_mapping.h" line="35" column="27" bodyfile="include/srsgnb/ran/pucch_mapping.h" bodystart="35" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl_1a5abdc76577587c098307ff8dc50bce00" compoundref="dmrs__pucch__processor__format2__impl_8cpp" startline="56" endline="120">srsgnb::dmrs_pucch_processor_format2_impl::estimate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aa6f98e44536bde4e22454a0abb5fc686" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::PUCCH_FORMAT2_MAX_NPRB</definition>
        <argsstring></argsstring>
        <name>PUCCH_FORMAT2_MAX_NPRB</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Maximum number of PRBs allocated for NR-PUCCH format 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pucch_mapping.h" line="38" column="27" bodyfile="include/srsgnb/ran/pucch_mapping.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a1d2a8109fbd41e51c8237141a29edf2a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t srsgnb::MAX_NOF_PRBS</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_PRBS</name>
        <initializer>= 275</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of PRBs of a UE carrier, for any SCS. <simplesect kind="remark"><para>See TS 38.331 - &quot;maxNrofPhysicalResourceBlocks&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_block.h" line="20" column="23" bodyfile="include/srsgnb/ran/resource_block.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ac7b08b474fef6046774e360d801bc753" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t srsgnb::NOF_SUBCARRIERS_PER_RB</definition>
        <argsstring></argsstring>
        <name>NOF_SUBCARRIERS_PER_RB</name>
        <initializer>= 12</initializer>
        <briefdescription>
<para>See TS 38.211, 4.4.4.1 - Resource Blocks, General. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_block.h" line="23" column="23" bodyfile="include/srsgnb/ran/resource_block.h" bodystart="23" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1a76694b953cb532434be08c62256d2e30" compoundref="resource__block_8h" startline="26" endline="29">get_rb_bw_khz</referencedby>
        <referencedby refid="namespacesrsgnb_1a885ad687d7d0c7ccfb874a30eac45806" compoundref="prbs__calculator_8cpp" startline="16" endline="79">get_nof_prbs</referencedby>
        <referencedby refid="namespacesrsgnb_1a5c971875d38d9f26f657a05a63bf4b89" compoundref="tbs__calculator_8cpp" startline="112" endline="124">tbs_calculator_pdsch_calculate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a5c4ba94fed0cbf9f0928dd5af3ce0b88" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::NOF_SUBFRAMES_PER_FRAME</definition>
        <argsstring></argsstring>
        <name>NOF_SUBFRAMES_PER_FRAME</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>Number of subframers per frame. This constant doesn&apos;t depend on the numerology used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="19" column="20" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="19" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1slot__point_1a6ce8d114bc09e094fc485c6d95620ff0" compoundref="slot__point_8h" startline="66" endline="77">srsgnb::slot_point::slot_point</referencedby>
        <referencedby refid="classsrsgnb_1_1slot__point_1a774cfcee0b441d570bced7d62d526b46" compoundref="slot__point_8h" startline="102" endline="102">srsgnb::slot_point::nof_slots_per_frame</referencedby>
        <referencedby refid="classsrsgnb_1_1slot__point_1a85af7c5cfd24d2a8d4274b681014d400" compoundref="slot__point_8h" startline="116" endline="116">srsgnb::slot_point::is_odd_hrf</referencedby>
        <referencedby refid="classsrsgnb_1_1pucch__helper_1a5e2150ab9042afa57d513e3c31c54b71" compoundref="pucch__helper_8h" startline="66" endline="100">srsgnb::pucch_helper::get_alpha_index</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aba334da86c75ebbb12844ceaa8cd3aae" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::SUBFRAME_DURATION_MSEC</definition>
        <argsstring></argsstring>
        <name>SUBFRAME_DURATION_MSEC</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Duration of a subframe in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="22" column="20" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aa0b1d7f45c13c64173953c780892aa39" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::NOF_BEAMS</definition>
        <argsstring></argsstring>
        <name>NOF_BEAMS</name>
        <initializer>= 64</initializer>
        <briefdescription>
<para>Maximum number of SS/PBCH beams in a SS/PBCH period as per TS38.213 Section 4.1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_configuration.h" line="19" column="18" bodyfile="include/srsgnb/ran/ssb_configuration.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a5918ad236471d46463ff808aaa3967aa" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::NOF_SSB_PRBS</definition>
        <argsstring></argsstring>
        <name>NOF_SSB_PRBS</name>
        <initializer>= 20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_properties.h" line="18" column="16" bodyfile="include/srsgnb/ran/ssb_properties.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aa4e1861ad81105adc74ceabe7e465a46" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t srsgnb::NOF_NUMEROLOGIES</definition>
        <argsstring></argsstring>
        <name>NOF_NUMEROLOGIES</name>
        <initializer>= 5</initializer>
        <briefdescription>
<para>Number of possible numerology values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="19" column="14" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="19" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1processor__pool__repository_1a4c5990aff2d60da9f733912128b700be" compoundref="processor__pool__helpers_8h" startline="38" endline="48">srsgnb::processor_pool_repository&lt; T &gt;::get_processor</referencedby>
        <referencedby refid="classsrsgnb_1_1processor__pool__repository_1aca44acb737536eb2cfbab929ef718527" compoundref="processor__pool__helpers_8h" startline="54" endline="63">srsgnb::processor_pool_repository&lt; T &gt;::insert</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a6f1c1b67c23a36b03d431bf8752e5b04" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::MAX_NOF_SEARCH_SPACE_PER_BWP</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_SEARCH_SPACE_PER_BWP</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>See TS 38.331, &quot;SearchSpaceId&quot; - The number of Search Spaces per BWP is limited to 10 including the common and UE specific Search Spaces. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/bwp_configuration.h" line="32" column="18" bodyfile="include/srsgnb/scheduler/bwp_configuration.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ae3d6e3dabfd788b45abce99de004b55f" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t srsgnb::MAX_NOF_RBGS</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_RBGS</name>
        <initializer>= 18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of resource block groups per BWP. <simplesect kind="remark"><para>See TS 38.214, Sections 5.1.2.2.1 and 6.1.2.2.1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="20" column="14" bodyfile="include/srsgnb/scheduler/resource_block_group.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a4f51986f700ad018df3e256ce337ab87" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t srsgnb::MAX_NOF_LAYERS</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_LAYERS</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Maximum number of layers (implementation-defined) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/sched_consts.h" line="19" column="14" bodyfile="include/srsgnb/scheduler/sched_consts.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ab8686341cd5376a5c8fb8499ee1c51f1" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::FR1_MAX_FREQUENCY_ARFCN</definition>
        <argsstring></argsstring>
        <name>FR1_MAX_FREQUENCY_ARFCN</name>
        <initializer>= 875000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SSB constants. FR1 = <ulink url="TS 38.101, Section 5.1">410 MHz – 7125 MHz</ulink> and ARFCN corresponding to 7.125GHz is 875000. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/sched_consts.h" line="23" column="16" bodyfile="include/srsgnb/scheduler/sched_consts.h" bodystart="23" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1a7b61af2239baf4702a09b33f3c499532" compoundref="ssb__scheduler_8cpp" startline="165" endline="209">schedule_ssb</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a17b953996ae0c7dda753d3fddda378f2" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::CUTOFF_FREQ_ARFCN_CASE_A_B_C</definition>
        <argsstring></argsstring>
        <name>CUTOFF_FREQ_ARFCN_CASE_A_B_C</name>
        <initializer>= 600000</initializer>
        <briefdescription>
<para>The cutoff frequency for case A, B and C paired is 3GHz, corresponding to 600000 ARFCN (TS 38.213, Section 4.1). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/sched_consts.h" line="25" column="16" bodyfile="include/srsgnb/scheduler/sched_consts.h" bodystart="25" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1a7b61af2239baf4702a09b33f3c499532" compoundref="ssb__scheduler_8cpp" startline="165" endline="209">schedule_ssb</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a570e4d7e1acf25c785c63350fd0f1c24" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::CUTOFF_FREQ_ARFCN_CASE_C_UNPAIRED</definition>
        <argsstring></argsstring>
        <name>CUTOFF_FREQ_ARFCN_CASE_C_UNPAIRED</name>
        <initializer>= 376000</initializer>
        <briefdescription>
<para>The cutoff frequency for case C unpaired is 1.88GHz, corresponding to 376000 ARFCN (TS 38.213, Section 4.1). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/sched_consts.h" line="27" column="16" bodyfile="include/srsgnb/scheduler/sched_consts.h" bodystart="27" bodyend="-1"/>
        <referencedby refid="namespacesrsgnb_1a7b61af2239baf4702a09b33f3c499532" compoundref="ssb__scheduler_8cpp" startline="165" endline="209">schedule_ssb</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a489857e78343a0fe02cdb315c3d5458b" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::NOF_SSB_OFDM_SYMBOLS</definition>
        <argsstring></argsstring>
        <name>NOF_SSB_OFDM_SYMBOLS</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/sched_consts.h" line="28" column="16" bodyfile="include/srsgnb/scheduler/sched_consts.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ae3aaf5cd20191a042ef97d95b8eab4e7" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::SIB1_PERIODICITY</definition>
        <argsstring></argsstring>
        <name>SIB1_PERIODICITY</name>
        <initializer>= 160</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SIB1 constants. SIB1 periodicity, see TS 38.331, Section 5.2.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/sched_consts.h" line="32" column="16" bodyfile="include/srsgnb/scheduler/sched_consts.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ae0f5a0550ba853d70b51d3dde519fe5b" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::MAX_NUM_BEAMS</definition>
        <argsstring></argsstring>
        <name>MAX_NUM_BEAMS</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>[Implementation defined] Max numbers of beams, to be used for SIB1 scheduler. NOTE: This is temporary, and valid only for FR1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/sched_consts.h" line="35" column="16" bodyfile="include/srsgnb/scheduler/sched_consts.h" bodystart="35" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1ab13df715de7b2f178fda642f3e1c74b8" compoundref="sib__scheduler_8cpp" startline="85" endline="123">srsgnb::sib1_scheduler::schedule_sib1</referencedby>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1ac41cb886463a4c8f6033c66cc1e91934" compoundref="sib__scheduler_8cpp" startline="127" endline="153">srsgnb::sib1_scheduler::precompute_sib1_n0</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aff8cc2ccac7d0544969b833186dba1b0" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t srsgnb::MAX_GRANTS</definition>
        <argsstring></argsstring>
        <name>MAX_GRANTS</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Maximum grants per slot. Implementation-specific. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_slot_handler.h" line="34" column="14" bodyfile="include/srsgnb/scheduler/scheduler_slot_handler.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ad12674c9be70c17fbbe6fe7119e0d25a" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t srsgnb::MAX_LC_GRANTS</definition>
        <argsstring></argsstring>
        <name>MAX_LC_GRANTS</name>
        <initializer>= 4</initializer>
        <briefdescription>
<para>Maximum Logical channels per TB. Implementation-specific. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_slot_handler.h" line="36" column="14" bodyfile="include/srsgnb/scheduler/scheduler_slot_handler.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a021bb1d44a621a4c05406c3f68ee832f" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t srsgnb::MAX_SSB_PER_SLOT</definition>
        <argsstring></argsstring>
        <name>MAX_SSB_PER_SLOT</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum SSB opportunity per slot. This can be derived from the candidate ODFM symbols indices within the ranges 0-13, 14-27, 28-41, 42-55, etc.. from TS 38.213, Section 4.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_slot_handler.h" line="39" column="14" bodyfile="include/srsgnb/scheduler/scheduler_slot_handler.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af111f3cca9ac08c65829f90b610bcd4c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::MAX_SIB1_PDUS_PER_SLOT</definition>
        <argsstring></argsstring>
        <name>MAX_SIB1_PDUS_PER_SLOT</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>[Implementation defined] This corresponds to &quot;Number of search space sets per slot&quot; in Table 13-11, TS 38.213. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_slot_handler.h" line="41" column="18" bodyfile="include/srsgnb/scheduler/scheduler_slot_handler.h" bodystart="41" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1fapi__adaptor_1_1mac__to__fapi__translator_1a3c528fd905a14735515d278d292c7058" compoundref="mac__to__fapi__translator_8cpp" startline="154" endline="188">srsgnb::fapi_adaptor::mac_to_fapi_translator::on_new_downlink_data</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af1a471308d6e7ce5c24cbca015e9c2ed" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::MAX_RAR_PDUS_PER_SLOT</definition>
        <argsstring></argsstring>
        <name>MAX_RAR_PDUS_PER_SLOT</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>[Implementation defined] This corresponds to maximum number of RARs that can be scheduled per slot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_slot_handler.h" line="43" column="18" bodyfile="include/srsgnb/scheduler/scheduler_slot_handler.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a7863734a4349d2617f962f064566ab90" prot="public" static="yes" mutable="no">
        <type>const static size_t</type>
        <definition>const static size_t srsgnb::MAX_NOF_PRACHS_PER_SLOT</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_PRACHS_PER_SLOT</name>
        <initializer>= 56</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of PRACH occasions within a slot as per TS38.211, Tables 6.3.3.2-[2-4] and maximum msg1-FDM of 8 according to TS 38.331. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_slot_handler.h" line="46" column="21" bodyfile="include/srsgnb/scheduler/scheduler_slot_handler.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aef4a14dbc550cac800ee65f3b72448ec" prot="public" static="yes" mutable="no">
        <type>const static size_t</type>
        <definition>const static size_t srsgnb::MAX_NOF_CODEWORDS_PER_PDSCH</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_CODEWORDS_PER_PDSCH</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Maximum number of codewords per PDSCH grant. Implementation-specific. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_slot_handler.h" line="48" column="21" bodyfile="include/srsgnb/scheduler/scheduler_slot_handler.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a32efaf05457269141b4d7cb8c20477b2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float srsgnb::TWOPI</definition>
        <argsstring></argsstring>
        <name>TWOPI</name>
        <initializer>= 2.0F * static_cast&lt;float&gt;(M_PI)</initializer>
        <briefdescription>
<para>Defines two times Pi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="27" column="24" bodyfile="include/srsgnb/support/math_utils.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ab5297baf2bf47f76e4c679c52fdab4dd" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::NOF_SSB_SUBCARRIERS</definition>
        <argsstring></argsstring>
        <name>NOF_SSB_SUBCARRIERS</name>
        <initializer>= NOF_SSB_PRBS * <ref refid="namespacesrsgnb_1ac7b08b474fef6046774e360d801bc753" kindref="member">NOF_SUBCARRIERS_PER_RB</ref></initializer>
        <briefdescription>
<para>Number of subcarriers within a SSB block, as per TS 38.211, Section 7.4.3.1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="18" column="16" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a4084c56bc4031d085aa60d2376b15d01" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::MIN_ARFCN_3_GHZ_24_5_GHZ</definition>
        <argsstring></argsstring>
        <name>MIN_ARFCN_3_GHZ_24_5_GHZ</name>
        <initializer>= 600000</initializer>
        <briefdescription>
<para>Min ARFCN value for range of frequencies 3GHz-24.25GHz, as per Table 5.4.2.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="20" column="16" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="20" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1ab76890f8d59877eb37a852219606bcfa" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="133" endline="141">srsgnb::srs_du::ssb_freq_position_generator::get_ss_ref_hz</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1a1dbb01e4b3fba247beb7c44a8471053f" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="178" endline="224">srsgnb::srs_du::ssb_freq_position_generator::get_next_ssb_location</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a8e7e789b2406675b7bfb30600230bf4f" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::MIN_ARFCN_24_5_GHZ_100_GHZ</definition>
        <argsstring></argsstring>
        <name>MIN_ARFCN_24_5_GHZ_100_GHZ</name>
        <initializer>= 2016667</initializer>
        <briefdescription>
<para>Min ARFCN value for range of frequencies above 24.25GHz, as per Table 5.4.2.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="22" column="16" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a2996a832d7c7feced63333b68af47ace" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double srsgnb::N_REF_OFFSET_3_GHZ_24_5_GHZ</definition>
        <argsstring></argsstring>
        <name>N_REF_OFFSET_3_GHZ_24_5_GHZ</name>
        <initializer>= 3e9</initializer>
        <briefdescription>
<para>Offet <formula id="194">$F_{REF-Offs}$</formula> expressed in Hz, for 3GHz-24.25GHz freq. range, as per Table 5.4.2.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="24" column="14" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="24" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1ab76890f8d59877eb37a852219606bcfa" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="133" endline="141">srsgnb::srs_du::ssb_freq_position_generator::get_ss_ref_hz</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a1b6d4c98f32220d0267eaec63ca71504" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double srsgnb::N_SIZE_SYNC_RASTER_1_HZ</definition>
        <argsstring></argsstring>
        <name>N_SIZE_SYNC_RASTER_1_HZ</name>
        <initializer>= 1200e3</initializer>
        <briefdescription>
<para>Freq. step in Hz, corresponding to <formula id="13">$N$</formula> for 0GHz-3GHz freq. range, as per Table 5.4.3.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="26" column="14" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="26" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1ab76890f8d59877eb37a852219606bcfa" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="133" endline="141">srsgnb::srs_du::ssb_freq_position_generator::get_ss_ref_hz</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aaf817f2639284bd05ac651cbc7d864d4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double srsgnb::M_SIZE_SYNC_RASTER_1_HZ</definition>
        <argsstring></argsstring>
        <name>M_SIZE_SYNC_RASTER_1_HZ</name>
        <initializer>= 50e3</initializer>
        <briefdescription>
<para>Freq. step in Hz, corresponding to <formula id="169">$M$</formula> for 0GHz-3GHz freq. range, as per Table 5.4.3.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="28" column="14" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="28" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1ab76890f8d59877eb37a852219606bcfa" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="133" endline="141">srsgnb::srs_du::ssb_freq_position_generator::get_ss_ref_hz</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ad4db417cc698cd9f228ef314a389976e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double srsgnb::N_SIZE_SYNC_RASTER_2_HZ</definition>
        <argsstring></argsstring>
        <name>N_SIZE_SYNC_RASTER_2_HZ</name>
        <initializer>= 1440e3</initializer>
        <briefdescription>
<para>Freq. step in Hz, corresponding to <formula id="169">$M$</formula> for 3GHz-24.25GHz freq. range, as per Table 5.4.3.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="30" column="14" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="30" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1ab76890f8d59877eb37a852219606bcfa" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="133" endline="141">srsgnb::srs_du::ssb_freq_position_generator::get_ss_ref_hz</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1accbeee8e253048da92fb17a0dc606a5c" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::N_UB_SYNC_RASTER_1</definition>
        <argsstring></argsstring>
        <name>N_UB_SYNC_RASTER_1</name>
        <initializer>= 2500</initializer>
        <briefdescription>
<para>Upper-bound for <formula id="13">$N$</formula> within 0GHz-3GHz freq. range, as per Table 5.4.3.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="32" column="16" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="32" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1a1dbb01e4b3fba247beb7c44a8471053f" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="178" endline="224">srsgnb::srs_du::ssb_freq_position_generator::get_next_ssb_location</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a2a0366ef5e5a8a0b0e0927000e7acdd0" prot="public" static="no" mutable="no">
        <type>const unsigned</type>
        <definition>const unsigned srsgnb::N_UB_SYNC_RASTER_2</definition>
        <argsstring></argsstring>
        <name>N_UB_SYNC_RASTER_2</name>
        <initializer>= 14757</initializer>
        <briefdescription>
<para>Upper-bound for <formula id="13">$N$</formula> within 3GHz-24.25GHz freq. range, as per Table 5.4.3.1-1, TS 38.104. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" line="34" column="16" bodyfile="lib/du_manager/converters/ssb_coreset0_freq_pos_generator.h" bodystart="34" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1a1dbb01e4b3fba247beb7c44a8471053f" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="178" endline="224">srsgnb::srs_du::ssb_freq_position_generator::get_next_ssb_location</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a552cef0a747eb50da9d0be2f6af103c8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_TBS</definition>
        <argsstring></argsstring>
        <name>MAX_TBS</name>
        <initializer>= 1277992</initializer>
        <briefdescription>
<para>Maximum accepted transport block size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/ldpc/ldpc_segmenter_impl.h" line="24" column="27" bodyfile="lib/phy/upper/channel_coding/ldpc/ldpc_segmenter_impl.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a298d4b4cba8e73d72f82581db0efecc6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_BLOCK_LENGTH</definition>
        <argsstring></argsstring>
        <name>MAX_BLOCK_LENGTH</name>
        <initializer>= 32</initializer>
        <briefdescription>
<para>Maximum length of a codeword. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" line="21" column="27" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" bodystart="21" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" compoundref="short__block__detector__impl_8cpp" startline="107" endline="135">srsgnb::short_block_detector_impl::detect_3_11</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a19623e946a11e01acf68e233517b5816" compoundref="short__block__detector__impl_8cpp" startline="150" endline="183">srsgnb::short_block_detector_impl::detect</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ae71c35cc07ebfca0bdceed162f6d76f3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_MSG_LENGTH</definition>
        <argsstring></argsstring>
        <name>MAX_MSG_LENGTH</name>
        <initializer>= 11</initializer>
        <briefdescription>
<para>Maximum length of a message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" line="23" column="27" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a7a6d5adc63a0b40aa84ea68f280e9312" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::MAX_NOF_CODEWORDS_2</definition>
        <argsstring></argsstring>
        <name>MAX_NOF_CODEWORDS_2</name>
        <initializer>= 1U &lt;&lt; (<ref refid="namespacesrsgnb_1ae71c35cc07ebfca0bdceed162f6d76f3" kindref="member">MAX_MSG_LENGTH</ref> - 1)</initializer>
        <briefdescription>
<para>Half of the maximum codebook size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" line="25" column="27" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ad2fd226ebaaef1cd30f868ab37637e47" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t srsgnb::INVALID_RLC_SN</definition>
        <argsstring></argsstring>
        <name>INVALID_RLC_SN</name>
        <initializer>= 0xffffffff</initializer>
        <briefdescription>
<para>Reserved number representing an invalid RLC sequence number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="17" column="16" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="17" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1rlc__tx__am__entity_1a722242b95fd712889bb30761bf9383c8" compoundref="rlc__tx__am__entity_8cpp" startline="60" endline="100">srsgnb::rlc_tx_am_entity::pull_pdu</referencedby>
        <referencedby refid="classsrsgnb_1_1rlc__tx__am__entity_1a2bba6bbf36fd7f28fd9aeb624fa3f085" compoundref="rlc__tx__am__entity_8cpp" startline="379" endline="452">srsgnb::rlc_tx_am_entity::get_polling_bit</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1afa67b01d45775f9eba6786ff4a42c5c6" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t srsgnb::RETX_COUNT_NOT_STARTED</definition>
        <argsstring></argsstring>
        <name>RETX_COUNT_NOT_STARTED</name>
        <initializer>= 0xffffffff</initializer>
        <briefdescription>
<para>Reserved number representing that RETX has not started. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="18" column="16" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ae71faf133986dba3d2bd34502931f9a4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::rlc_am_nr_status_pdu_sizeof_header_ack_sn</definition>
        <argsstring></argsstring>
        <name>rlc_am_nr_status_pdu_sizeof_header_ack_sn</name>
        <initializer>= 3</initializer>
        <briefdescription>
<para>Header fixed part and ACK SN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="20" column="20" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ac2972c338a36558689ea356a5e925d59" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::rlc_am_nr_status_pdu_sizeof_nack_sn_ext_12bit_sn</definition>
        <argsstring></argsstring>
        <name>rlc_am_nr_status_pdu_sizeof_nack_sn_ext_12bit_sn</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>NACK SN and extension fields (12 bit SN) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="21" column="20" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a280691689aa3fda26b9f4b2a3f991993" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::rlc_am_nr_status_pdu_sizeof_nack_sn_ext_18bit_sn</definition>
        <argsstring></argsstring>
        <name>rlc_am_nr_status_pdu_sizeof_nack_sn_ext_18bit_sn</name>
        <initializer>= 3</initializer>
        <briefdescription>
<para>NACK SN and extension fields (18 bit SN) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="22" column="20" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af503351d5715239d3f6760ae440ba211" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::rlc_am_nr_status_pdu_sizeof_nack_so</definition>
        <argsstring></argsstring>
        <name>rlc_am_nr_status_pdu_sizeof_nack_so</name>
        <initializer>= 4</initializer>
        <briefdescription>
<para>NACK segment offsets (start and end) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="23" column="20" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a38e80b3773ce532db6f3b0aa23ae1e3b" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::rlc_am_nr_status_pdu_sizeof_nack_range</definition>
        <argsstring></argsstring>
        <name>rlc_am_nr_status_pdu_sizeof_nack_range</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>NACK range (nof consecutively lost SDUs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="24" column="20" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a96099061f86fcdd3ed47efb290eafd99" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::RLC_AM_NR_TYP_NACKS</definition>
        <argsstring></argsstring>
        <name>RLC_AM_NR_TYP_NACKS</name>
        <initializer>= 512</initializer>
        <briefdescription>
<para>Expected number of NACKs in status PDU before needing to realloc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="27" column="20" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a18bfb962c3fefa664e76e5d0801bbf96" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_am_pdu_header_so_size</definition>
        <argsstring></argsstring>
        <name>rlc_am_pdu_header_so_size</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="29" column="18" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a2a63f680757da16e98a5ada32f718d47" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_am_pdu_header_min_size_12bit</definition>
        <argsstring></argsstring>
        <name>rlc_am_pdu_header_min_size_12bit</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="30" column="18" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a69464be91547fc11b8de51053a71b7db" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_am_pdu_header_min_size_18bit</definition>
        <argsstring></argsstring>
        <name>rlc_am_pdu_header_min_size_18bit</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="31" column="18" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ac492b1d2aa3725562986e3681a9b4181" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_um_pdu_header_size_complete_sdu</definition>
        <argsstring></argsstring>
        <name>rlc_um_pdu_header_size_complete_sdu</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="18" column="18" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a44f9f143cd3c7c4dc46ee494f044ff8e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_um_pdu_header_size_6bit_sn_no_so</definition>
        <argsstring></argsstring>
        <name>rlc_um_pdu_header_size_6bit_sn_no_so</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="20" column="18" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1aa5aaade6e1db24c7bb9fa4521678377c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_um_pdu_header_size_12bit_sn_no_so</definition>
        <argsstring></argsstring>
        <name>rlc_um_pdu_header_size_12bit_sn_no_so</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="21" column="18" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1a34515b39269a795efc587dc98175ce1b" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_um_pdu_header_size_6bit_sn_with_so</definition>
        <argsstring></argsstring>
        <name>rlc_um_pdu_header_size_6bit_sn_with_so</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="35" column="18" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1ae6c70088a5dc8ce8f5644dd3a4e714d9" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_um_pdu_header_size_12bit_sn_with_so</definition>
        <argsstring></argsstring>
        <name>rlc_um_pdu_header_size_12bit_sn_with_so</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="36" column="18" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacesrsgnb_1af583b225f1ba91966686df9adef4111d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structsrsgnb_1_1pdsch__default__time__allocation__config" kindref="compound">pdsch_default_time_allocation_config</ref></type>
        <definition>constexpr pdsch_default_time_allocation_config srsgnb::PDSCH_DEFAULT_TIME_ALLOCATION_RESERVED</definition>
        <argsstring></argsstring>
        <name>PDSCH_DEFAULT_TIME_ALLOCATION_RESERVED</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Reserved default PDSCH time-domain allocation. It indicates the configuration is invalid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/pdsch/pdsch_default_time_allocation.h" line="36" column="55" bodyfile="lib/scheduler/support/pdsch/pdsch_default_time_allocation.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacesrsgnb_1a23bccee713255519df8f127a430b319c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::set_bitmap_bit</definition>
        <argsstring>(Integer &amp;bitmap, unsigned bit, bool enable)</argsstring>
        <name>set_bitmap_bit</name>
        <param>
          <type>Integer &amp;</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Sets the value of a bit in the bitmap. When enable is true, it sets the bit, otherwise it clears the bit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit to change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set. If true, sets the bit(1), otherwise clears it(0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Use this function with integer data types, otherwise it produces undefined behaviour. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bitmap_utils.h" line="25" column="6" bodyfile="include/srsgnb/adt/bitmap_utils.h" bodystart="25" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad2ad634b0a8dfdc7d8228f87c549e069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::check_bitmap_bit</definition>
        <argsstring>(Integer bitmap, unsigned bit)</argsstring>
        <name>check_bitmap_bit</name>
        <param>
          <type>Integer</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Checks the value of a bit in the bitmap and returns a true if the bit is set, otherwise false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True when the bit equals 1, otherwise false. </para>
</simplesect>
<simplesect kind="note"><para>Use this function with integer data types, otherwise it produces undefined behaviour. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bitmap_utils.h" line="43" column="6" bodyfile="include/srsgnb/adt/bitmap_utils.h" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a502705b923eedd9f73d2960754bf20c4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>constexpr Integer</type>
        <definition>constexpr Integer srsgnb::mask_msb_zeros</definition>
        <argsstring>(size_t N)</argsstring>
        <name>mask_msb_zeros</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns an unsigned integer with the N most significant bits (MSB) set to zero, and the remaining bits set to 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of unsigned integer returned by the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of MSB bits set to zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting integer bitmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="19" column="19" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a33184677e98ae9082cbfba34dfa13306" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>constexpr Integer</type>
        <definition>constexpr Integer srsgnb::mask_lsb_ones</definition>
        <argsstring>(size_t N)</argsstring>
        <name>mask_lsb_ones</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns an unsigned integer with the N least significant bits (LSB) set to zero, and the remaining bits set to 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of unsigned integer returned by the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of LSB bits set to zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting integer bitmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="31" column="19" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a484323a751721921c5cdfa4be7fcd31b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>constexpr Integer</type>
        <definition>constexpr Integer srsgnb::mask_msb_ones</definition>
        <argsstring>(size_t N)</argsstring>
        <name>mask_msb_ones</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns an unsigned integer with the N most significant bits (MSB) set to one, and the remaining bits set to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of unsigned integer returned by the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of MSB bits set to one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting integer bitmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="42" column="19" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af60ec95500518b1e27aee40d5ed3c2c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>Integer</type>
        <definition>Integer srsgnb::mask_lsb_zeros</definition>
        <argsstring>(size_t N)</argsstring>
        <name>mask_lsb_zeros</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns an unsigned integer with the N least significant bits (LSB) set to one, and the remaining bits set to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of unsigned integer returned by the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of LSB bits set to one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting integer bitmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="53" column="9" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a0ce3d069fa115fd8678f84382af87d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>Integer</type>
        <definition>Integer srsgnb::zero_msb_count</definition>
        <argsstring>(Integer value)</argsstring>
        <name>zero_msb_count</name>
        <param>
          <type>Integer</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Counts the number of contiguous bits set to zero, starting from the MSB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type of received bitmap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer bitmap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of bits set to zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="163" column="9" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="163" bodyend="166"/>
        <references refid="structsrsgnb_1_1detail_1_1bitset__builtin__helper_1a9a23606cad3c852a4be72ec66dfc1960" compoundref="bounded__bitset_8h" startline="64" endline="79">srsgnb::detail::bitset_builtin_helper&lt; Integer &gt;::zero_msb_count</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1daa3d5eaa342f837d8e18e56d594280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>Integer</type>
        <definition>Integer srsgnb::find_first_msb_one</definition>
        <argsstring>(Integer value)</argsstring>
        <name>find_first_msb_one</name>
        <param>
          <type>Integer</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Finds the position of the first bit set to one, starting from the MSB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type of received bitmap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer bitmap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MSB position with the bit set to one. The MSB has position sizeof(Integer) * 8 - 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="173" column="9" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a06afb1454d06e33c0c6ee5800a5cc2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>Integer</type>
        <definition>Integer srsgnb::find_first_lsb_one</definition>
        <argsstring>(Integer value)</argsstring>
        <name>find_first_lsb_one</name>
        <param>
          <type>Integer</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Finds the position of the first bit set to one, starting from the LSB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type of received bitmap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer bitmap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LSB position with the bit set to one. The LSB has position zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="184" column="9" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="184" bodyend="187"/>
        <references refid="structsrsgnb_1_1detail_1_1bitset__builtin__helper_1a090cbd3ee0e484040c240e6cefe1335d" compoundref="bounded__bitset_8h" startline="82" endline="97">srsgnb::detail::bitset_builtin_helper&lt; Integer &gt;::zero_lsb_count</references>
        <referencedby refid="namespacesrsgnb_1a2932e903fa0b2f74ed093619577ff78e" compoundref="config__helpers_8h" startline="40" endline="48">get_coreset_start_crb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1abbaa586aabbdf4b0adb62d55faed0a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int srsgnb::count_ones</definition>
        <argsstring>(Integer value)</argsstring>
        <name>count_ones</name>
        <param>
          <type>Integer</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="190" column="5" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a4e3261c94c82a67346608ea65680d5b0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>reversed</declname>
            <defname>reversed</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt;</type>
        <definition>bounded_bitset&lt;N, reversed&gt; srsgnb::operator&amp;</definition>
        <argsstring>(const bounded_bitset&lt; N, reversed &gt; &amp;lhs, const bounded_bitset&lt; N, reversed &gt; &amp;rhs) noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Bitwise AND operation result = lhs &amp; rhs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref> that results from the Bitwise AND operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="915" column="23" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="915" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a70f3d604bfdbd9f253b749579f042638" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>reversed</declname>
            <defname>reversed</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt;</type>
        <definition>bounded_bitset&lt;N, reversed&gt; srsgnb::operator|</definition>
        <argsstring>(const bounded_bitset&lt; N, reversed &gt; &amp;lhs, const bounded_bitset&lt; N, reversed &gt; &amp;rhs) noexcept</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Bitwise AND operation result = lhs | rhs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref> that results from the Bitwise OR operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="926" column="23" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="926" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afc2d178f9bf858393460f3f5fe0f5736" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>reversed</declname>
            <defname>reversed</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt;</type>
        <definition>bounded_bitset&lt;N, reversed&gt; srsgnb::fliplr</definition>
        <argsstring>(const bounded_bitset&lt; N, reversed &gt; &amp;other) noexcept</argsstring>
        <name>fliplr</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Flip bits from left to right. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref> that results from the fliplr operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="937" column="23" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="937" bodyend="946"/>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1af2620345786af61e5ed75adadf1e6156" compoundref="bounded__bitset_8h" startline="267" endline="275">srsgnb::bounded_bitset&lt; N, reversed &gt;::set</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1abbb64987e52967a116958bcef24fc934" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>reversed</declname>
            <defname>reversed</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N2, reversed &gt;</type>
        <definition>bounded_bitset&lt;N2, reversed&gt; srsgnb::fold_and_accumulate</definition>
        <argsstring>(const bounded_bitset&lt; N, reversed &gt; &amp;other, size_t fold_length, size_t slice_offset, size_t slice_length) noexcept</argsstring>
        <name>fold_and_accumulate</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fold_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>slice_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>slice_length</declname>
        </param>
        <briefdescription>
<para>Divides a bitset of size &quot;S&quot; into &quot;M&quot; smaller bitsets, where each bitset has length &quot;L=S/M&quot;. A bitwise-or operation is performed across bitsets. At the end, a slice with an offset &quot;O&quot; and length &quot;K&quot; is taken from the bitset of length &quot;L&quot; that resulted from the bitwise-or operation. This operation is equivalent to reshaping an array of bits of size &quot;S&quot; into a matrix of dimensions &quot;(M, L)&quot; and applying an &quot;or&quot; operation across all bits of each column. The resulting array of &quot;L&quot; bits, is then sliced with an offset &quot;O&quot; and length &quot;K&quot;. The operation asserts if &quot;S % L != 0&quot;. E.g. Consider the bitset 1000 0100 0000 1001 (S=16), L=4, O=1, K=2. This function performs the following steps: </para>
        </briefdescription>
        <detaileddescription>
<para><orderedlist>
<listitem><para>Break the bitset into M=S/L=4 parts: {1000, 0100, 0000, 1001}.</para>
</listitem><listitem><para>Bitwise-or all the M parts: 1101.</para>
</listitem><listitem><para>Slice the bitset obtained in 2. with offset O=1 and slice length K=2: 10.</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N2</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum bitset size for returned bitset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>original bitset of length &quot;S&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fold_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of each folded bitset &quot;L&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slice_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset from where to slice each fold &quot;O&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slice_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the slice taken from each fold &quot;K&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bitset of size slice_length with the or-accumulated folds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="967" column="23" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="967" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a79f78bc05f6d07e141dc55a4bc44689b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>reversed</declname>
            <defname>reversed</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N2, reversed &gt;</type>
        <definition>bounded_bitset&lt;N2, reversed&gt; srsgnb::fold_and_accumulate</definition>
        <argsstring>(const bounded_bitset&lt; N, reversed &gt; &amp;other, size_t fold_length) noexcept</argsstring>
        <name>fold_and_accumulate</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; N, reversed &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fold_length</declname>
        </param>
        <briefdescription>
<para>Performs the fold and accumulate operation, but without slicing at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N2</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum bitset size for returned bitset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reversed</parametername>
</parameternamelist>
<parameterdescription>
<para>internal bit order representation of returned bitset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>original bitset from where folds are generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fold_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of each fold bitset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bitset of size fold_length with the accumulated folds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/bounded_bitset.h" line="989" column="23" bodyfile="include/srsgnb/adt/bounded_bitset.h" bodystart="989" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9734690cb44ac8d86fe9f6641abae55b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::operator==</definition>
        <argsstring>(const byte_buffer &amp;buf, span&lt; const uint8_t &gt; bytes)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/byte_buffer.h" line="625" column="13" bodyfile="include/srsgnb/adt/byte_buffer.h" bodystart="625" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1acb49a9340e6c7832f682f1626e227cd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::operator==</definition>
        <argsstring>(span&lt; const uint8_t &gt; bytes, const byte_buffer &amp;buf)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/byte_buffer.h" line="636" column="13" bodyfile="include/srsgnb/adt/byte_buffer.h" bodystart="636" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a28449a5956f10594212a26233c45142c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::operator!=</definition>
        <argsstring>(const byte_buffer &amp;buf, span&lt; const uint8_t &gt; bytes)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/byte_buffer.h" line="640" column="13" bodyfile="include/srsgnb/adt/byte_buffer.h" bodystart="640" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5a993b19da051a49b29e4aa987b73b6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::operator!=</definition>
        <argsstring>(span&lt; const uint8_t &gt; bytes, const byte_buffer &amp;buf)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const uint8_t &gt;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/byte_buffer.h" line="644" column="13" bodyfile="include/srsgnb/adt/byte_buffer.h" bodystart="644" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a4d60c45a17cb198fb8ada6ac58ffc7ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref></type>
        <definition>byte_buffer srsgnb::make_byte_buffer</definition>
        <argsstring>(std::string hex_str)</argsstring>
        <name>make_byte_buffer</name>
        <param>
          <type>std::string</type>
          <declname>hex_str</declname>
        </param>
        <briefdescription>
<para>Converts a hex string (e.g. 01FA02) to a byte buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/byte_buffer.h" line="905" column="20" bodyfile="include/srsgnb/adt/byte_buffer.h" bodystart="905" bodyend="915"/>
        <references refid="classsrsgnb_1_1byte__buffer_1a43805fbaf448988220ddc9385b3db2dd" compoundref="byte__buffer_8h" startline="362" endline="377">srsgnb::byte_buffer::append</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a04e04b8a6d8cc5d4cae901cc7db6a769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator==</definition>
        <argsstring>(const interval&lt; T &gt; &amp;lhs, const interval&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/interval.h" line="122" column="6" bodyfile="include/srsgnb/adt/interval.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a6ee8f44a50cd682d0eb04996b881e653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator!=</definition>
        <argsstring>(const interval&lt; T &gt; &amp;lhs, const interval&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/interval.h" line="128" column="6" bodyfile="include/srsgnb/adt/interval.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1d1ef75981d9572c96f9bdf623d4e343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator&lt;</definition>
        <argsstring>(const interval&lt; T &gt; &amp;lhs, const interval&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares interval starting points. In case the starting point is the same, the interval with shorter length is the lowest. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/interval.h" line="136" column="1" bodyfile="include/srsgnb/adt/interval.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a70e7879d5473d422045c99b3c13d0606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt;</type>
        <definition>interval&lt;T&gt; srsgnb::operator|</definition>
        <argsstring>(const interval&lt; T &gt; &amp;lhs, const interval&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Make union of intervals. If intervals do not overlap, the empty interval is returned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/interval.h" line="143" column="10" bodyfile="include/srsgnb/adt/interval.h" bodystart="143" bodyend="149"/>
        <references refid="classsrsgnb_1_1interval_1a4266e738523a7bdb5f95b146164d4875" compoundref="interval_8h" startline="92" endline="96">srsgnb::interval&lt; T &gt;::overlaps</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3b12c1df2e134d44cba86ab00c232a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt;</type>
        <definition>interval&lt;T&gt; srsgnb::operator&amp;</definition>
        <argsstring>(const interval&lt; T &gt; &amp;lhs, const interval&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1interval" kindref="compound">interval</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Make intersection of intervals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/interval.h" line="153" column="10" bodyfile="include/srsgnb/adt/interval.h" bodystart="153" bodyend="159"/>
        <references refid="classsrsgnb_1_1interval_1a4266e738523a7bdb5f95b146164d4875" compoundref="interval_8h" startline="92" endline="96">srsgnb::interval&lt; T &gt;::overlaps</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a42c164ca46487f27af8042cdf8856f54" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator==</definition>
        <argsstring>(const optional&lt; T &gt; &amp;lhs, const optional&lt; T &gt; &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/optional.h" line="114" column="6" bodyfile="include/srsgnb/adt/optional.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aced7e1874fa090a7f41ab6a56d46014b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator==</definition>
        <argsstring>(const optional&lt; T &gt; &amp;lhs, const T &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/optional.h" line="120" column="6" bodyfile="include/srsgnb/adt/optional.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa72b63eaf3f47cdfbbbe33f396e90f26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator!=</definition>
        <argsstring>(const optional&lt; T &gt; &amp;lhs, const optional&lt; T &gt; &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/optional.h" line="126" column="6" bodyfile="include/srsgnb/adt/optional.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a74ada0a675b43a26bec605cea791a59d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator!=</definition>
        <argsstring>(const optional&lt; T &gt; &amp;lhs, const T &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/optional.h" line="132" column="6" bodyfile="include/srsgnb/adt/optional.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a73412a9ca4cd2fcb0538c0610aa707c6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator&lt;</definition>
        <argsstring>(const optional&lt; T &gt; &amp;lhs, const optional&lt; T &gt; &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/optional.h" line="138" column="1" bodyfile="include/srsgnb/adt/optional.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a72614e9314106cd2cc11a8aa3294d802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1split__slot__span" kindref="compound">split_slot_span</ref>&lt; T &gt;</type>
        <definition>split_slot_span&lt;T&gt; srsgnb::make_slot_span</definition>
        <argsstring>(T *array, typename std::conditional&lt; std::is_const&lt; T &gt;::value, const bool, bool &gt;::type *present, size_t N)</argsstring>
        <name>make_slot_span</name>
        <param>
          <type>T *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>typename std::conditional&lt; std::is_const&lt; T &gt;::value, const bool, bool &gt;::type *</type>
          <declname>present</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="459" column="1" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a8b02456d72835fd2cf7bf8a30c6a9cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1split__slot__span" kindref="compound">split_slot_span</ref>&lt; T &gt;</type>
        <definition>split_slot_span&lt;T&gt; srsgnb::make_slot_span</definition>
        <argsstring>(T(&amp;array)[N], typename std::conditional&lt; std::is_const&lt; T &gt;::value, const bool, bool &gt;::type(&amp;present)[N])</argsstring>
        <name>make_slot_span</name>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>typename std::conditional&lt; std::is_const&lt; T &gt;::value, const bool, bool &gt;::type(&amp;)</type>
          <declname>present</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/slot_array.h" line="465" column="1" bodyfile="include/srsgnb/adt/slot_array.h" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1accc1fdf50246dd36344043a87086590b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator==</definition>
        <argsstring>(span&lt; T &gt; lhs, span&lt; T &gt; rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="222" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a0d98614f27642249c05b037a5e39176e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::operator!=</definition>
        <argsstring>(span&lt; T &gt; lhs, span&lt; T &gt; rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; T &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; T &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="228" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a352c4a4b137b79c2c6dc162e9a6794c7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::array&lt; std::remove_cv_t&lt; T &gt;, N &gt;</type>
        <definition>constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; srsgnb::to_array</definition>
        <argsstring>(T(&amp;a)[N])</argsstring>
        <name>to_array</name>
        <param>
          <type>T(&amp;)</type>
          <declname>a</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Helper method to generate an std::array from a C array without needing to derive the size N. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/to_array.h" line="27" column="22" bodyfile="include/srsgnb/adt/to_array.h" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9f2626793a553368ac3dad25ef73b147" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::array&lt; std::remove_cv_t&lt; T &gt;, N &gt;</type>
        <definition>constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; srsgnb::to_array</definition>
        <argsstring>(T(&amp;&amp;a)[N])</argsstring>
        <name>to_array</name>
        <param>
          <type>T(&amp;&amp;)</type>
          <declname>a</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/to_array.h" line="32" column="22" bodyfile="include/srsgnb/adt/to_array.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a8c9b0d5c8b210f7816dafd6e0d0e586f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">error_type</ref>&lt; std::string &gt;</type>
        <definition>check_outcome srsgnb::is_du_cell_config_valid</definition>
        <argsstring>(const du_cell_config &amp;cell_cfg)</argsstring>
        <name>is_du_cell_config_valid</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1du__cell__config" kindref="compound">du_cell_config</ref> &amp;</type>
          <declname>cell_cfg</declname>
        </param>
        <briefdescription>
<para>Checks whether the provided DU cell configuration is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cell_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>DU cell configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>in case an invalid parameter is detected, returns a string containing an error message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/du/du_cell_config_validation.h" line="22" column="12" bodyfile="lib/du/du_cell_config_validation.cpp" bodystart="272" bodyend="281" declfile="include/srsgnb/du/du_cell_config_validation.h" declline="22" declcolumn="12"/>
        <references refid="structsrsgnb_1_1du__cell__config_1ab3823a7a973cdae1fb5cf9c0207e7a8b" compoundref="du__cell__config_8h" startline="31">srsgnb::du_cell_config::scs_common</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a0c6d3634af47f5a5eeb064166b900378" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srsgnb::to_string</definition>
        <argsstring>(bsr_format bsr)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504" kindref="member">bsr_format</ref></type>
          <declname>bsr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/bsr_format.h" line="20" column="19" bodyfile="include/srsgnb/mac/bsr_format.h" bodystart="20" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af58f99ffd34a3fe877df0dfff1f58b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1sched__cell__configuration__request__message" kindref="compound">sched_cell_configuration_request_message</ref></type>
        <definition>sched_cell_configuration_request_message srsgnb::make_scheduler_cell_configuration_request</definition>
        <argsstring>(const mac_cell_creation_request &amp;request)</argsstring>
        <name>make_scheduler_cell_configuration_request</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1mac__cell__creation__request" kindref="compound">mac_cell_creation_request</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Convert a cell configuration request to the MAC into a cell configuration request of the scheduler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_configuration_helpers.h" line="12" column="1" declfile="include/srsgnb/mac/mac_configuration_helpers.h" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a341a361d1908c3d11d21d238226157e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1sched__ue__creation__request__message" kindref="compound">sched_ue_creation_request_message</ref></type>
        <definition>sched_ue_creation_request_message srsgnb::make_scheduler_ue_creation_request</definition>
        <argsstring>(const mac_ue_create_request_message &amp;request)</argsstring>
        <name>make_scheduler_ue_creation_request</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1mac__ue__create__request__message" kindref="compound">mac_ue_create_request_message</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Convert a UE creation request for the MAC into a UE creation request of the scheduler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_configuration_helpers.h" line="15" column="35" bodyfile="lib/mac/mac_ctrl/mac_configuration_helpers.cpp" bodystart="16" bodyend="25" declfile="include/srsgnb/mac/mac_configuration_helpers.h" declline="15" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a0305aa14c2a20bd4e35f0b1c6f1b7aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1mac__interface" kindref="compound">mac_interface</ref> &gt;</type>
        <definition>std::unique_ptr&lt; mac_interface &gt; srsgnb::create_mac</definition>
        <argsstring>(mac_ul_ccch_notifier &amp;event_notifier, du_l2_ul_executor_mapper &amp;ul_exec_mapper, du_l2_dl_executor_mapper &amp;dl_exec_mapper, task_executor &amp;ctrl_exec, mac_result_notifier &amp;phy_notifier)</argsstring>
        <name>create_mac</name>
        <param>
          <type><ref refid="classsrsgnb_1_1mac__ul__ccch__notifier" kindref="compound">mac_ul_ccch_notifier</ref> &amp;</type>
          <declname>event_notifier</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1du__l2__ul__executor__mapper" kindref="compound">du_l2_ul_executor_mapper</ref> &amp;</type>
          <declname>ul_exec_mapper</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1du__l2__dl__executor__mapper" kindref="compound">du_l2_dl_executor_mapper</ref> &amp;</type>
          <declname>dl_exec_mapper</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1task__executor" kindref="compound">task_executor</ref> &amp;</type>
          <declname>ctrl_exec</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1mac__result__notifier" kindref="compound">mac_result_notifier</ref> &amp;</type>
          <declname>phy_notifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/mac/mac_factory.h" line="12" column="17" bodyfile="lib/mac/mac_factory.cpp" bodystart="18" bodyend="27" declfile="include/srsgnb/mac/mac_factory.h" declline="12" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1c3892bdc193959d91802aec5a110cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1pdcp__entity" kindref="compound">pdcp_entity</ref> &gt;</type>
        <definition>std::unique_ptr&lt; pdcp_entity &gt; srsgnb::create_pdcp_entity</definition>
        <argsstring>(pdcp_entity_creation_message &amp;msg)</argsstring>
        <name>create_pdcp_entity</name>
        <param>
          <type><ref refid="structsrsgnb_1_1pdcp__entity__creation__message" kindref="compound">pdcp_entity_creation_message</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Creates an instance of a PDCP entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/pdcp/pdcp_factory.h" line="39" column="17" bodyfile="lib/pdcp/pdcp_factory.cpp" bodystart="18" bodyend="21" declfile="include/srsgnb/pdcp/pdcp_factory.h" declline="39" declcolumn="17"/>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1du__processor_1a19d9b47ab4efcb9d92fb6a1b8d7a456c" compoundref="du__processor_8cpp" startline="191" endline="243">srsgnb::srs_cu_cp::du_processor::create_srb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a089a2c757729c9133af793a543f29e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dft__processor__factory" kindref="compound">dft_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; dft_processor_factory &gt; srsgnb::create_dft_processor_factory_generic</definition>
        <argsstring>()</argsstring>
        <name>create_dft_processor_factory_generic</name>
        <briefdescription>
<para>Creates a DFT processor factory based on a generic Radix-2 DFT implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/generic_functions/generic_functions_factories.h" line="31" column="17" bodyfile="lib/phy/generic_functions/generic_functions_factories.cpp" bodystart="68" bodyend="71" declfile="include/srsgnb/phy/generic_functions/generic_functions_factories.h" declline="31" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afa515529747057202bff9146482ee6bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dft__processor__factory" kindref="compound">dft_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; dft_processor_factory &gt; srsgnb::create_dft_processor_factory_fftx</definition>
        <argsstring>()</argsstring>
        <name>create_dft_processor_factory_fftx</name>
        <briefdescription>
<para>Creates a DFT processor factory based on SPIRAL&apos;s FFTX. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/generic_functions/generic_functions_factories.h" line="34" column="17" bodyfile="lib/phy/generic_functions/generic_functions_factories.cpp" bodystart="73" bodyend="76" declfile="include/srsgnb/phy/generic_functions/generic_functions_factories.h" declline="34" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a6ca80a689bec30e46153c22f8374f89f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dft__processor__factory" kindref="compound">dft_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; dft_processor_factory &gt; srsgnb::create_dft_processor_factory_fftw</definition>
        <argsstring>(bool avoid_wisdom=false, const std::string &amp;wisdom_filename=&quot;&quot;)</argsstring>
        <name>create_dft_processor_factory_fftw</name>
        <param>
          <type>bool</type>
          <declname>avoid_wisdom</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>wisdom_filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Creates a DFT processor factory based on FFTW library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">avoid_wisdom</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to avoid loading FFTW wisdom from a file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wisdom_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the FFTW wisdom filename. Leave empty for default value. It is ignored if the option <computeroutput>avoid_wisdom</computeroutput> is true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid pointer to a DFT processor factory if FFTW is available. Otherwise, nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/generic_functions/generic_functions_factories.h" line="41" column="17" bodyfile="lib/phy/generic_functions/generic_functions_factories.cpp" bodystart="78" bodyend="86" declfile="include/srsgnb/phy/generic_functions/generic_functions_factories.h" declline="41" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a692ea2733a968455dfc0c01a20dc03a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1lower__phy__factory" kindref="compound">lower_phy_factory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; lower_phy_factory &gt; srsgnb::create_lower_phy_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; ofdm_modulator_factory &gt; modulator_factory, std::shared_ptr&lt; ofdm_demodulator_factory &gt; demodulator_factory, std::shared_ptr&lt; prach_processor_factory &gt; prach_processor_factory)</argsstring>
        <name>create_lower_phy_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ofdm__modulator__factory" kindref="compound">ofdm_modulator_factory</ref> &gt;</type>
          <declname>modulator_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ofdm__demodulator__factory" kindref="compound">ofdm_demodulator_factory</ref> &gt;</type>
          <declname>demodulator_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1prach__processor__factory" kindref="compound">prach_processor_factory</ref> &gt;</type>
          <declname>prach_processor_factory</declname>
        </param>
        <briefdescription>
<para>Creates a software based lower physical layer factory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/lower/lower_phy_factory.h" line="33" column="1" bodyfile="lib/phy/lower/lower_phy_factory.cpp" bodystart="85" bodyend="90" declfile="include/srsgnb/phy/lower/lower_phy_factory.h" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7f7317a1a01cc98cc78537beabed2cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ofdm__modulator__factory" kindref="compound">ofdm_modulator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ofdm_modulator_factory &gt; srsgnb::create_ofdm_modulator_factory_generic</definition>
        <argsstring>(ofdm_factory_generic_configuration &amp;config)</argsstring>
        <name>create_ofdm_modulator_factory_generic</name>
        <param>
          <type><ref refid="structsrsgnb_1_1ofdm__factory__generic__configuration" kindref="compound">ofdm_factory_generic_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a generic OFDM modulator factory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/lower/modulation/modulation_factories.h" line="79" column="1" bodyfile="lib/phy/lower/modulation/modulation_factories.cpp" bodystart="106" bodyend="109" declfile="include/srsgnb/phy/lower/modulation/modulation_factories.h" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a6435402e2a736e588eeec2126a3743b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ofdm__demodulator__factory" kindref="compound">ofdm_demodulator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ofdm_demodulator_factory &gt; srsgnb::create_ofdm_demodulator_factory_generic</definition>
        <argsstring>(ofdm_factory_generic_configuration &amp;config)</argsstring>
        <name>create_ofdm_demodulator_factory_generic</name>
        <param>
          <type><ref refid="structsrsgnb_1_1ofdm__factory__generic__configuration" kindref="compound">ofdm_factory_generic_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a generic OFDM demodulator factory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/lower/modulation/modulation_factories.h" line="83" column="1" bodyfile="lib/phy/lower/modulation/modulation_factories.cpp" bodystart="112" bodyend="115" declfile="include/srsgnb/phy/lower/modulation/modulation_factories.h" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a0e54c10f82c0c66ee926f7e202b9e7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ofdm__prach__demodulator__factory" kindref="compound">ofdm_prach_demodulator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ofdm_prach_demodulator_factory &gt; srsgnb::create_ofdm_prach_demodulator_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; dft_processor_factory &gt; dft_factory, unsigned dft_size_15kHz)</argsstring>
        <name>create_ofdm_prach_demodulator_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dft__processor__factory" kindref="compound">dft_processor_factory</ref> &gt;</type>
          <declname>dft_factory</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dft_size_15kHz</declname>
        </param>
        <briefdescription>
<para>Creates a software generic PRACH demodulator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dft_factory</parametername>
</parameternamelist>
<parameterdescription>
<para>DFT factory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dft_size_15kHz</parametername>
</parameternamelist>
<parameterdescription>
<para>DFT size for 15kHz subcarrier spacing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/lower/modulation/modulation_factories.h" line="89" column="1" bodyfile="lib/phy/lower/modulation/modulation_factories.cpp" bodystart="118" bodyend="122" declfile="include/srsgnb/phy/lower/modulation/modulation_factories.h" declline="89" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a4d11bf2e103f452e3c996702117fd2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1prach__processor__factory" kindref="compound">prach_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; prach_processor_factory &gt; srsgnb::create_prach_processor_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; ofdm_prach_demodulator_factory &gt; ofdm_prach_factory, unsigned dft_size_15kHz, unsigned max_nof_concurrent_requests)</argsstring>
        <name>create_prach_processor_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ofdm__prach__demodulator__factory" kindref="compound">ofdm_prach_demodulator_factory</ref> &gt;</type>
          <declname>ofdm_prach_factory</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dft_size_15kHz</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_nof_concurrent_requests</declname>
        </param>
        <briefdescription>
<para>Creates a software based PRACH processor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/lower/processors/prach/prach_processor_factories.h" line="34" column="1" bodyfile="lib/phy/lower/processors/prach/prach_processor_factories.cpp" bodystart="56" bodyend="61" declfile="include/srsgnb/phy/lower/processors/prach/prach_processor_factories.h" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a771584132cc61720b0ff151535b098b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1resource__grid" kindref="compound">resource_grid</ref> &gt;</type>
        <definition>std::unique_ptr&lt; resource_grid &gt; srsgnb::create_resource_grid</definition>
        <argsstring>(unsigned nof_ports, unsigned nof_symbols, unsigned nof_subc)</argsstring>
        <name>create_resource_grid</name>
        <param>
          <type>unsigned</type>
          <declname>nof_ports</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nof_symbols</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nof_subc</declname>
        </param>
        <briefdescription>
<para>Creates a generic resource grid instance for a number of ports, symbols and subcarriers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nof_ports</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of ports. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nof_symbols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of OFDM symbols. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nof_subc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of subcarriers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A resource grid object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/support/support_factories.h" line="26" column="17" bodyfile="lib/phy/support/support_factories.cpp" bodystart="20" bodyend="23" declfile="include/srsgnb/phy/support/support_factories.h" declline="26" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad56ff347a08470f72e134024d7794124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1resource__grid__pool" kindref="compound">resource_grid_pool</ref> &gt;</type>
        <definition>std::unique_ptr&lt; resource_grid_pool &gt; srsgnb::create_resource_grid_pool</definition>
        <argsstring>(unsigned nof_sectors, unsigned nof_slots, std::vector&lt; std::unique_ptr&lt; resource_grid &gt;&gt; &amp;&amp;grids)</argsstring>
        <name>create_resource_grid_pool</name>
        <param>
          <type>unsigned</type>
          <declname>nof_sectors</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nof_slots</declname>
        </param>
        <param>
          <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classsrsgnb_1_1resource__grid" kindref="compound">resource_grid</ref> &gt;&gt; &amp;&amp;</type>
          <declname>grids</declname>
        </param>
        <briefdescription>
<para>Creates a generic resource grid pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nof_sectors</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of radio sectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nof_slots</parametername>
</parameternamelist>
<parameterdescription>
<para>umber of slots to be buffered, per sector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">grids</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource grids, ownerships are transferred to the pool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A generic resource grid pool. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/support/support_factories.h" line="33" column="17" bodyfile="lib/phy/support/support_factories.cpp" bodystart="26" bodyend="31" declfile="include/srsgnb/phy/support/support_factories.h" declline="33" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a52d60a05fef81c81f572711bd6dc61e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1prach__buffer" kindref="compound">prach_buffer</ref> &gt;</type>
        <definition>std::unique_ptr&lt; prach_buffer &gt; srsgnb::create_prach_buffer_long</definition>
        <argsstring>()</argsstring>
        <name>create_prach_buffer_long</name>
        <briefdescription>
<para>Creates a long PRACH sequence buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Long buffers contain 839-element PRACH sequences for up to 4 OFDM symbols. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/support/support_factories.h" line="40" column="17" bodyfile="lib/phy/support/support_factories.cpp" bodystart="39" bodyend="43" declfile="include/srsgnb/phy/support/support_factories.h" declline="40" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab7013f5a16777c8fbb48e65408c589b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1prach__buffer" kindref="compound">prach_buffer</ref> &gt;</type>
        <definition>std::unique_ptr&lt; prach_buffer &gt; srsgnb::create_prach_buffer_short</definition>
        <argsstring>()</argsstring>
        <name>create_prach_buffer_short</name>
        <briefdescription>
<para>Creates a short PRACH sequence buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Short buffers contain 139-element PRACH sequences for up to 12 OFDM symbols. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/support/support_factories.h" line="45" column="17" bodyfile="lib/phy/support/support_factories.cpp" bodystart="45" bodyend="49" declfile="include/srsgnb/phy/support/support_factories.h" declline="45" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af549a117563c0da10c7592e82b50cd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1prach__buffer__pool" kindref="compound">prach_buffer_pool</ref> &gt;</type>
        <definition>std::unique_ptr&lt; prach_buffer_pool &gt; srsgnb::create_prach_buffer_pool</definition>
        <argsstring>(std::vector&lt; std::unique_ptr&lt; prach_buffer &gt;&gt; &amp;&amp;elements)</argsstring>
        <name>create_prach_buffer_pool</name>
        <param>
          <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classsrsgnb_1_1prach__buffer" kindref="compound">prach_buffer</ref> &gt;&gt; &amp;&amp;</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
<para>Returns a pool for the given PRACH buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/support/support_factories.h" line="48" column="17" bodyfile="lib/phy/support/support_factories.cpp" bodystart="34" bodyend="37" declfile="include/srsgnb/phy/support/support_factories.h" declline="48" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9e3ae40a39780b35dbd85525ea4aacfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1crc__calculator__factory" kindref="compound">crc_calculator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; crc_calculator_factory &gt; srsgnb::create_crc_calculator_factory_sw</definition>
        <argsstring>()</argsstring>
        <name>create_crc_calculator_factory_sw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="37" column="17" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="189" bodyend="192" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="37" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a395f3d285d3b7f1c547c8a16bf28f428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ldpc__decoder__factory" kindref="compound">ldpc_decoder_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ldpc_decoder_factory &gt; srsgnb::create_ldpc_decoder_factory_sw</definition>
        <argsstring>(const std::string &amp;dec_type)</argsstring>
        <name>create_ldpc_decoder_factory_sw</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dec_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="46" column="17" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="158" bodyend="161" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="46" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a01d880aec017787ef2654a9643fffa4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ldpc__encoder__factory" kindref="compound">ldpc_encoder_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ldpc_encoder_factory &gt; srsgnb::create_ldpc_encoder_factory_sw</definition>
        <argsstring>(const std::string &amp;enc_type)</argsstring>
        <name>create_ldpc_encoder_factory_sw</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>enc_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="55" column="17" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="163" bodyend="166" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="55" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a02627b16b07560cd3ffb31742d3641d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ldpc__rate__dematcher__factory" kindref="compound">ldpc_rate_dematcher_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ldpc_rate_dematcher_factory &gt; srsgnb::create_ldpc_rate_dematcher_factory_sw</definition>
        <argsstring>()</argsstring>
        <name>create_ldpc_rate_dematcher_factory_sw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="64" column="17" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="168" bodyend="171" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="64" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1abd1531def140e87d3e934c2c8585facb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ldpc__rate__matcher__factory" kindref="compound">ldpc_rate_matcher_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ldpc_rate_matcher_factory &gt; srsgnb::create_ldpc_rate_matcher_factory_sw</definition>
        <argsstring>()</argsstring>
        <name>create_ldpc_rate_matcher_factory_sw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="73" column="17" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="173" bodyend="176" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="73" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9edb0d534da06b90c38efcdacea9f66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ldpc__segmenter__rx__factory" kindref="compound">ldpc_segmenter_rx_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ldpc_segmenter_rx_factory &gt; srsgnb::create_ldpc_segmenter_rx_factory_sw</definition>
        <argsstring>()</argsstring>
        <name>create_ldpc_segmenter_rx_factory_sw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="82" column="17" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="184" bodyend="187" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="82" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a50cda022bd93c7830d2c2bce0a1ce38c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ldpc__segmenter__tx__factory" kindref="compound">ldpc_segmenter_tx_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ldpc_segmenter_tx_factory &gt; srsgnb::create_ldpc_segmenter_tx_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; crc_calculator_factory &gt; crc_factory)</argsstring>
        <name>create_ldpc_segmenter_tx_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1crc__calculator__factory" kindref="compound">crc_calculator_factory</ref> &gt;</type>
          <declname>crc_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="92" column="1" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="179" bodyend="182" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="92" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a243c07035e1e59cc3fd3af809d8794d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1polar__factory" kindref="compound">polar_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; polar_factory &gt; srsgnb::create_polar_factory_sw</definition>
        <argsstring>()</argsstring>
        <name>create_polar_factory_sw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" line="108" column="17" bodyfile="lib/phy/upper/channel_coding/channel_coding_factories.cpp" bodystart="194" bodyend="197" declfile="include/srsgnb/phy/upper/channel_coding/channel_coding_factories.h" declline="108" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad614eaf5a126e453039e0b821a696159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1short__block__detector" kindref="compound">short_block_detector</ref> &gt;</type>
        <definition>std::unique_ptr&lt; short_block_detector &gt; srsgnb::create_short_block_detector</definition>
        <argsstring>()</argsstring>
        <name>create_short_block_detector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/short/short_block_detector.h" line="43" column="17" bodyfile="lib/phy/upper/channel_coding/short/short_block_detector_impl.cpp" bodystart="185" bodyend="188" declfile="include/srsgnb/phy/upper/channel_coding/short/short_block_detector.h" declline="43" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a82b41f134dbed5d86d45956f1899603d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1short__block__encoder" kindref="compound">short_block_encoder</ref> &gt;</type>
        <definition>std::unique_ptr&lt; short_block_encoder &gt; srsgnb::create_short_block_encoder</definition>
        <argsstring>()</argsstring>
        <name>create_short_block_encoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_coding/short/short_block_encoder.h" line="58" column="17" bodyfile="lib/phy/upper/channel_coding/short/short_block_encoder_impl.cpp" bodystart="139" bodyend="142" declfile="include/srsgnb/phy/upper/channel_coding/short/short_block_encoder.h" declline="58" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a47788b9177b69d98d7c55894604125f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1channel__modulation__factory" kindref="compound">channel_modulation_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; channel_modulation_factory &gt; srsgnb::create_channel_modulation_sw_factory</definition>
        <argsstring>()</argsstring>
        <name>create_channel_modulation_sw_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_modulation/channel_modulation_factories.h" line="27" column="17" bodyfile="lib/phy/upper/channel_modulation/channel_modulation_factories.cpp" bodystart="34" bodyend="37" declfile="include/srsgnb/phy/upper/channel_modulation/channel_modulation_factories.h" declline="27" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a993dc4e8670cfac25b4f42054ae659e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pbch__encoder__factory" kindref="compound">pbch_encoder_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pbch_encoder_factory &gt; srsgnb::create_pbch_encoder_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; crc_calculator_factory &gt; crc_factory, std::shared_ptr&lt; pseudo_random_generator_factory &gt; prg_factory, std::shared_ptr&lt; polar_factory &gt; polar_factory)</argsstring>
        <name>create_pbch_encoder_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1crc__calculator__factory" kindref="compound">crc_calculator_factory</ref> &gt;</type>
          <declname>crc_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
          <declname>prg_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1polar__factory" kindref="compound">polar_factory</ref> &gt;</type>
          <declname>polar_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="45" column="1" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="373" bodyend="379" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7da506173bd4bb2ba83ea98097d85e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pbch__modulator__factory" kindref="compound">pbch_modulator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pbch_modulator_factory &gt; srsgnb::create_pbch_modulator_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; channel_modulation_factory &gt;, std::shared_ptr&lt; pseudo_random_generator_factory &gt;)</argsstring>
        <name>create_pbch_modulator_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1channel__modulation__factory" kindref="compound">channel_modulation_factory</ref> &gt;</type>
          <defname>modulator_factory</defname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
          <defname>prg_factory</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="57" column="5" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="382" bodyend="386" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="57" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aec7025b3dc39250cacf4c7f7972d0fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdcch__modulator__factory" kindref="compound">pdcch_modulator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pdcch_modulator_factory &gt; srsgnb::create_pdcch_modulator_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; channel_modulation_factory &gt;, std::shared_ptr&lt; pseudo_random_generator_factory &gt;)</argsstring>
        <name>create_pdcch_modulator_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1channel__modulation__factory" kindref="compound">channel_modulation_factory</ref> &gt;</type>
          <defname>modulator_factory</defname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
          <defname>prg_factory</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="68" column="5" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="396" bodyend="400" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2e4bef064e29e29f2e70367eb9142828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdcch__encoder__factory" kindref="compound">pdcch_encoder_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pdcch_encoder_factory &gt; srsgnb::create_pdcch_encoder_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; crc_calculator_factory &gt; crc_factory, std::shared_ptr&lt; polar_factory &gt; encoder_factory)</argsstring>
        <name>create_pdcch_encoder_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1crc__calculator__factory" kindref="compound">crc_calculator_factory</ref> &gt;</type>
          <declname>crc_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1polar__factory" kindref="compound">polar_factory</ref> &gt;</type>
          <declname>encoder_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="79" column="1" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="389" bodyend="393" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af0781da9ff1fb9f29fefab80b20d7cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdcch__processor__factory" kindref="compound">pdcch_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pdcch_processor_factory &gt; srsgnb::create_pdcch_processor_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; pdcch_encoder_factory &gt; encoder_factory, std::shared_ptr&lt; pdcch_modulator_factory &gt; modulator_factory, std::shared_ptr&lt; dmrs_pdcch_processor_factory &gt; dmrs_factory)</argsstring>
        <name>create_pdcch_processor_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdcch__encoder__factory" kindref="compound">pdcch_encoder_factory</ref> &gt;</type>
          <declname>encoder_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdcch__modulator__factory" kindref="compound">pdcch_modulator_factory</ref> &gt;</type>
          <declname>modulator_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dmrs__pdcch__processor__factory" kindref="compound">dmrs_pdcch_processor_factory</ref> &gt;</type>
          <declname>dmrs_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="90" column="1" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="403" bodyend="409" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afe26e9ef6deda18413c8fb4274feb5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdsch__encoder__factory" kindref="compound">pdsch_encoder_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pdsch_encoder_factory &gt; srsgnb::create_pdsch_encoder_factory_sw</definition>
        <argsstring>(pdsch_encoder_factory_sw_configuration &amp;config)</argsstring>
        <name>create_pdsch_encoder_factory_sw</name>
        <param>
          <type><ref refid="structsrsgnb_1_1pdsch__encoder__factory__sw__configuration" kindref="compound">pdsch_encoder_factory_sw_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="107" column="17" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="412" bodyend="415" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="107" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1e769d914f7979cc7e2424ba76db790e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdsch__modulator__factory" kindref="compound">pdsch_modulator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pdsch_modulator_factory &gt; srsgnb::create_pdsch_modulator_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; channel_modulation_factory &gt;, std::shared_ptr&lt; pseudo_random_generator_factory &gt;)</argsstring>
        <name>create_pdsch_modulator_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1channel__modulation__factory" kindref="compound">channel_modulation_factory</ref> &gt;</type>
          <defname>modulator_factory</defname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
          <defname>prg_factory</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="117" column="5" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="418" bodyend="422" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="117" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aed0280f6c31163f31c100475ca32665e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdsch__processor__factory" kindref="compound">pdsch_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pdsch_processor_factory &gt; srsgnb::create_pdsch_processor_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; pdsch_encoder_factory &gt; encoder_factory, std::shared_ptr&lt; pdsch_modulator_factory &gt; modulator_factory, std::shared_ptr&lt; dmrs_pdsch_processor_factory &gt; dmrs_factory)</argsstring>
        <name>create_pdsch_processor_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdsch__encoder__factory" kindref="compound">pdsch_encoder_factory</ref> &gt;</type>
          <declname>encoder_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pdsch__modulator__factory" kindref="compound">pdsch_modulator_factory</ref> &gt;</type>
          <declname>modulator_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dmrs__pdsch__processor__factory" kindref="compound">dmrs_pdsch_processor_factory</ref> &gt;</type>
          <declname>dmrs_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="128" column="1" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="425" bodyend="431" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="128" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ada00f700a446e845ba96dc002d848706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1prach__detector__factory" kindref="compound">prach_detector_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; prach_detector_factory &gt; srsgnb::create_prach_detector_factory_simple</definition>
        <argsstring>(std::shared_ptr&lt; dft_processor_factory &gt; dft_factory, std::shared_ptr&lt; prach_generator_factory &gt; prach_gen_factory)</argsstring>
        <name>create_prach_detector_factory_simple</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dft__processor__factory" kindref="compound">dft_processor_factory</ref> &gt;</type>
          <declname>dft_factory</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1prach__generator__factory" kindref="compound">prach_generator_factory</ref> &gt;</type>
          <declname>prach_gen_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="140" column="1" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="434" bodyend="438" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a59e8735b274cf7f44ca2e7b6d7537e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1prach__generator__factory" kindref="compound">prach_generator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; prach_generator_factory &gt; srsgnb::create_prach_generator_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; dft_processor_factory &gt; dft_factory)</argsstring>
        <name>create_prach_generator_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dft__processor__factory" kindref="compound">dft_processor_factory</ref> &gt;</type>
          <declname>dft_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="151" column="1" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="441" bodyend="444" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="151" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab7869612feeee69a09ed7877153b749e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pusch__decoder__factory" kindref="compound">pusch_decoder_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pusch_decoder_factory &gt; srsgnb::create_pusch_decoder_factory_sw</definition>
        <argsstring>(pusch_decoder_factory_sw_configuration &amp;config)</argsstring>
        <name>create_pusch_decoder_factory_sw</name>
        <param>
          <type><ref refid="structsrsgnb_1_1pusch__decoder__factory__sw__configuration" kindref="compound">pusch_decoder_factory_sw_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="167" column="17" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="447" bodyend="450" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="167" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a09b5e2ad0b9e318a3e73bd5fb7970048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pusch__processor__factory" kindref="compound">pusch_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pusch_processor_factory &gt; srsgnb::create_pusch_processor_factory_sw</definition>
        <argsstring>(pusch_processor_factory_sw_configuration &amp;config)</argsstring>
        <name>create_pusch_processor_factory_sw</name>
        <param>
          <type><ref refid="structsrsgnb_1_1pusch__processor__factory__sw__configuration" kindref="compound">pusch_processor_factory_sw_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="189" column="1" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="453" bodyend="456" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="189" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a15d3b87e6bbe9b117007c7c4ce1c0dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1ssb__processor__factory" kindref="compound">ssb_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ssb_processor_factory &gt; srsgnb::create_ssb_processor_factory_sw</definition>
        <argsstring>(ssb_processor_factory_sw_configuration &amp;config)</argsstring>
        <name>create_ssb_processor_factory_sw</name>
        <param>
          <type><ref refid="structsrsgnb_1_1ssb__processor__factory__sw__configuration" kindref="compound">ssb_processor_factory_sw_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" line="206" column="17" bodyfile="lib/phy/upper/channel_processors/channel_processor_factories.cpp" bodystart="459" bodyend="462" declfile="include/srsgnb/phy/upper/channel_processors/channel_processor_factories.h" declline="206" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af016083ace0bfd7e9d946cce48cb0490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pseudo_random_generator_factory &gt; srsgnb::create_pseudo_random_generator_sw_factory</definition>
        <argsstring>()</argsstring>
        <name>create_pseudo_random_generator_sw_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/sequence_generators/sequence_generator_factories.h" line="24" column="17" bodyfile="lib/phy/upper/sequence_generators/sequence_generator_factories.cpp" bodystart="29" bodyend="32" declfile="include/srsgnb/phy/upper/sequence_generators/sequence_generator_factories.h" declline="24" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a96d5ed97dc64877d42ddbf41210572c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1dmrs__pucch__processor" kindref="compound">dmrs_pucch_processor</ref> &gt;</type>
        <definition>std::unique_ptr&lt; dmrs_pucch_processor &gt; srsgnb::create_dmrs_pucch_processor</definition>
        <argsstring>(const pucch_format &amp;format, const low_papr_sequence_collection *c=nullptr, const pucch_orthogonal_sequence *occ=nullptr)</argsstring>
        <name>create_dmrs_pucch_processor</name>
        <param>
          <type>const <ref refid="namespacesrsgnb_1aa983416f35b055b813c6bdf3ef9d5835" kindref="member">pucch_format</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1low__papr__sequence__collection" kindref="compound">low_papr_sequence_collection</ref> *</type>
          <declname>c</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1pucch__orthogonal__sequence" kindref="compound">pucch_orthogonal_sequence</ref> *</type>
          <declname>occ</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Creates a generic DMRS for PUCCH instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/dmrs_pucch_processor.h" line="82" column="17" bodyfile="lib/phy/upper/signal_processors/pucch/dmrs_pucch_processor_factories.cpp" bodystart="36" bodyend="45" declfile="include/srsgnb/phy/upper/signal_processors/dmrs_pucch_processor.h" declline="82" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad7bc70afc9d3bc251e988e9a3b330b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1csi__rs__processor" kindref="compound">csi_rs_processor</ref> &gt;</type>
        <definition>std::unique_ptr&lt; srsgnb::csi_rs_processor &gt; srsgnb::create_csi_rs_processor</definition>
        <argsstring>()</argsstring>
        <name>create_csi_rs_processor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" line="14" column="17" bodyfile="lib/phy/upper/signal_processors/csi_rs_processor_impl.cpp" bodystart="769" bodyend="772" declfile="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" declline="14" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aaccaf7d663293ecb5c50d0d4a88ee039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dmrs__pbch__processor__factory" kindref="compound">dmrs_pbch_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; dmrs_pbch_processor_factory &gt; srsgnb::create_dmrs_pbch_processor_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; pseudo_random_generator_factory &gt; prg_factory)</argsstring>
        <name>create_dmrs_pbch_processor_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
          <declname>prg_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" line="24" column="1" bodyfile="lib/phy/upper/signal_processors/signal_processor_factories.cpp" bodystart="91" bodyend="94" declfile="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a8e9ec3f488c452753513876d71e6d952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dmrs__pdcch__processor__factory" kindref="compound">dmrs_pdcch_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; dmrs_pdcch_processor_factory &gt; srsgnb::create_dmrs_pdcch_processor_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; pseudo_random_generator_factory &gt; prg_factory)</argsstring>
        <name>create_dmrs_pdcch_processor_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
          <declname>prg_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" line="34" column="1" bodyfile="lib/phy/upper/signal_processors/signal_processor_factories.cpp" bodystart="97" bodyend="100" declfile="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a8e2796ab1fbf9b29f2f0a85d72675ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1dmrs__pdsch__processor__factory" kindref="compound">dmrs_pdsch_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; dmrs_pdsch_processor_factory &gt; srsgnb::create_dmrs_pdsch_processor_factory_sw</definition>
        <argsstring>(std::shared_ptr&lt; pseudo_random_generator_factory &gt; prg_factory)</argsstring>
        <name>create_dmrs_pdsch_processor_factory_sw</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pseudo__random__generator__factory" kindref="compound">pseudo_random_generator_factory</ref> &gt;</type>
          <declname>prg_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" line="44" column="1" bodyfile="lib/phy/upper/signal_processors/signal_processor_factories.cpp" bodystart="103" bodyend="106" declfile="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1c365cb3c4f55d832bf0de1135023355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1dmrs__pusch__estimator" kindref="compound">dmrs_pusch_estimator</ref> &gt;</type>
        <definition>std::unique_ptr&lt;dmrs_pusch_estimator&gt; srsgnb::create_pusch_estimator_generic</definition>
        <argsstring>(pusch_estimator_generic_configuration &amp;config)</argsstring>
        <name>create_pusch_estimator_generic</name>
        <param>
          <type><ref refid="structsrsgnb_1_1pusch__estimator__generic__configuration" kindref="compound">pusch_estimator_generic_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" line="50" column="17" declfile="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" declline="50" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a85147f9a1eeff6b05d7178a023b055aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1pss__processor__factory" kindref="compound">pss_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; pss_processor_factory &gt; srsgnb::create_pss_processor_factory_sw</definition>
        <argsstring>()</argsstring>
        <name>create_pss_processor_factory_sw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" line="59" column="17" bodyfile="lib/phy/upper/signal_processors/signal_processor_factories.cpp" bodystart="108" bodyend="111" declfile="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a051c9429cb26106624c061e211559298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1sss__processor__factory" kindref="compound">sss_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; sss_processor_factory &gt; srsgnb::create_sss_processor_factory_sw</definition>
        <argsstring>()</argsstring>
        <name>create_sss_processor_factory_sw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" line="68" column="17" bodyfile="lib/phy/upper/signal_processors/signal_processor_factories.cpp" bodystart="113" bodyend="116" declfile="include/srsgnb/phy/upper/signal_processors/signal_processor_factories.h" declline="68" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae353bcd8f4862c80ef38d36838044ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1uplink__processor__pool" kindref="compound">uplink_processor_pool</ref> &gt;</type>
        <definition>std::unique_ptr&lt; uplink_processor_pool &gt; srsgnb::create_uplink_processor_pool</definition>
        <argsstring>(uplink_processor_pool_config config)</argsstring>
        <name>create_uplink_processor_pool</name>
        <param>
          <type><ref refid="structsrsgnb_1_1uplink__processor__pool__config" kindref="compound">uplink_processor_pool_config</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates and returns an uplink processor pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/upper_phy_factories.h" line="63" column="17" bodyfile="lib/phy/upper/upper_phy_factories.cpp" bodystart="337" bodyend="348" declfile="include/srsgnb/phy/upper/upper_phy_factories.h" declline="63" declcolumn="17"/>
        <references refid="structsrsgnb_1_1uplink__processor__pool__impl__config_1a44dd434408234a8e8b3020352d090634" compoundref="uplink__processor__pool__impl_8h" startline="33">srsgnb::uplink_processor_pool_impl_config::num_sectors</references>
        <references refid="structsrsgnb_1_1uplink__processor__pool__config_1a10a95ea3a20cdc3fa51ad95114c817af" compoundref="upper__phy__factories_8h" startline="59">srsgnb::uplink_processor_pool_config::num_sectors</references>
        <references refid="structsrsgnb_1_1uplink__processor__pool__config_1a00e515fe622808569c4c49e86a2dbf77" compoundref="upper__phy__factories_8h" startline="57">srsgnb::uplink_processor_pool_config::ul_processors</references>
        <references refid="structsrsgnb_1_1uplink__processor__pool__impl__config_1abd13736d84b4db08b93c9a37e0327ebd" compoundref="uplink__processor__pool__impl_8h" startline="31">srsgnb::uplink_processor_pool_impl_config::procs</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a11f0bea564b923016c358289071f2f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1downlink__processor__factory" kindref="compound">downlink_processor_factory</ref> &gt;</type>
        <definition>std::shared_ptr&lt; downlink_processor_factory &gt; srsgnb::create_downlink_processor_factory_sw</definition>
        <argsstring>(const downlink_processor_factory_sw_config &amp;config)</argsstring>
        <name>create_downlink_processor_factory_sw</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1downlink__processor__factory__sw__config" kindref="compound">downlink_processor_factory_sw_config</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a full software based downlink processor factory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/upper_phy_factories.h" line="99" column="1" bodyfile="lib/phy/upper/upper_phy_factories.cpp" bodystart="230" bodyend="335" declfile="include/srsgnb/phy/upper/upper_phy_factories.h" declline="99" declcolumn="1"/>
        <references refid="structsrsgnb_1_1downlink__processor__factory__sw__config_1a62ad2d02258888b440bbe10592e928a5" compoundref="upper__phy__factories_8h" startline="94">srsgnb::downlink_processor_factory_sw_config::ldpc_encoder_type</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3077e5e8fbf3742ad7d24cfc34979016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1downlink__processor__pool" kindref="compound">downlink_processor_pool</ref> &gt;</type>
        <definition>std::unique_ptr&lt; downlink_processor_pool &gt; srsgnb::create_dl_processor_pool</definition>
        <argsstring>(downlink_processor_pool_config config)</argsstring>
        <name>create_dl_processor_pool</name>
        <param>
          <type><ref refid="structsrsgnb_1_1downlink__processor__pool__config" kindref="compound">downlink_processor_pool_config</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates and returns a downlink processor pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/upper_phy_factories.h" line="120" column="17" bodyfile="lib/phy/upper/upper_phy_factories.cpp" bodystart="350" bodyend="361" declfile="include/srsgnb/phy/upper/upper_phy_factories.h" declline="120" declcolumn="17"/>
        <references refid="structsrsgnb_1_1downlink__processor__pool__impl__config_1a17bb08c78a4742d6ec9c02ce69914ecf" compoundref="downlink__processor__pool__impl_8h" startline="33">srsgnb::downlink_processor_pool_impl_config::num_sectors</references>
        <references refid="structsrsgnb_1_1downlink__processor__pool__config_1a4a783b08239507826341ff3ad30e2938" compoundref="upper__phy__factories_8h" startline="116">srsgnb::downlink_processor_pool_config::num_sectors</references>
        <references refid="structsrsgnb_1_1downlink__processor__pool__config_1a94d7566b0fa4fd323e808ec3d46f8f7e" compoundref="upper__phy__factories_8h" startline="114">srsgnb::downlink_processor_pool_config::dl_processors</references>
        <references refid="structsrsgnb_1_1downlink__processor__pool__impl__config_1a2fd44816dac765928c451b78717bfe18" compoundref="downlink__processor__pool__impl_8h" startline="31">srsgnb::downlink_processor_pool_impl_config::procs</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aedf2ea9adb38b15f650194024bf30554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1upper__phy__factory" kindref="compound">upper_phy_factory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; upper_phy_factory &gt; srsgnb::create_upper_phy_factory</definition>
        <argsstring>(std::shared_ptr&lt; downlink_processor_factory &gt; downlink_proc_factory)</argsstring>
        <name>create_upper_phy_factory</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsrsgnb_1_1downlink__processor__factory" kindref="compound">downlink_processor_factory</ref> &gt;</type>
          <declname>downlink_proc_factory</declname>
        </param>
        <briefdescription>
<para>Creates and returns an upper PHY factory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/upper_phy_factories.h" line="158" column="1" bodyfile="lib/phy/upper/upper_phy_factories.cpp" bodystart="364" bodyend="367" declfile="include/srsgnb/phy/upper/upper_phy_factories.h" declline="158" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af99f07bc1fef032c56f40a4758e5d712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1radio__factory" kindref="compound">radio_factory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; radio_factory &gt; srsgnb::create_radio_factory</definition>
        <argsstring>(std::string driver_name)</argsstring>
        <name>create_radio_factory</name>
        <param>
          <type>std::string</type>
          <declname>driver_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/radio/radio_factory.h" line="33" column="17" bodyfile="lib/radio/radio_factory.cpp" bodystart="37" bodyend="70" declfile="include/srsgnb/radio/radio_factory.h" declline="33" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa50664e24cec03c883ff1204103d2b0b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::bs_channel_bandwidth_to_MHz</definition>
        <argsstring>(bs_channel_bandwidth_fr1 bw)</argsstring>
        <name>bs_channel_bandwidth_to_MHz</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a3a938fe6642f4c4aa1e079d2f3f24a15" kindref="member">bs_channel_bandwidth_fr1</ref></type>
          <declname>bw</declname>
        </param>
        <briefdescription>
<para>Converts the BS channel bandwidth label into the actual BW value in MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/bs_channel_bandwidth.h" line="33" column="27" bodyfile="include/srsgnb/ran/bs_channel_bandwidth.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a524380b60d9cee8d38b67a46de799154" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::get_nsymb_per_slot</definition>
        <argsstring>(const cyclic_prefix cp)</argsstring>
        <name>get_nsymb_per_slot</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1cyclic__prefix" kindref="compound">cyclic_prefix</ref></type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>Defines the number of OFDM symbols per slot, according to TS 38.211 Tables 4.3.2-1 and 4.3.2-2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="99" column="27" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="99" bodyend="105"/>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ab3d17759472e137f642546ebceceb485" compoundref="cyclic__prefix_8h" startline="31">srsgnb::cyclic_prefix::EXTENDED</references>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1a568ae22931f2fc32f8262ff9c4158f58" compoundref="ofdm__demodulator__impl_8cpp" startline="47" endline="59">srsgnb::ofdm_symbol_demodulator_impl::get_cp_offset</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1acfc1edc79e5e564998fec17482f4aa46" compoundref="ofdm__demodulator__impl_8cpp" startline="61" endline="101">srsgnb::ofdm_symbol_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__demodulator__impl_1aa45ccdf34b77ff04a77460b601e4e494" compoundref="ofdm__demodulator__impl_8cpp" startline="103" endline="114">srsgnb::ofdm_slot_demodulator_impl::get_slot_size</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__demodulator__impl_1a074b6bd669a83a0d65ed79b4ff753e0f" compoundref="ofdm__demodulator__impl_8cpp" startline="116" endline="133">srsgnb::ofdm_slot_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__modulator__impl_1a1cff8fbd637007a914121b91a99affc9" compoundref="ofdm__modulator__impl_8cpp" startline="43" endline="87">srsgnb::ofdm_symbol_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__modulator__impl_1a159720f92bcb3df92ba1b3a9762044d8" compoundref="ofdm__modulator__impl_8cpp" startline="89" endline="100">srsgnb::ofdm_slot_modulator_impl::get_slot_size</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__modulator__impl_1ae31bb9b40eed78f1cb23270fbdea3433" compoundref="ofdm__modulator__impl_8cpp" startline="102" endline="126">srsgnb::ofdm_slot_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1phase__compensation__lut_1ae37a449b492ec3f4d1280844c108faae" compoundref="phase__compensation__lut_8h" startline="37" endline="71">srsgnb::phase_compensation_lut::phase_compensation_lut</referencedby>
        <referencedby refid="classsrsgnb_1_1ssb__processor__impl_1a2c563b7416c71aeb7d08be55e0194726" compoundref="ssb__processor__impl_8cpp" startline="17" endline="95">srsgnb::ssb_processor_impl::process</referencedby>
        <referencedby refid="classsrsgnb_1_1csi__rs__processor__impl_1affdb13875a9f5e03379ffa0987993681" compoundref="csi__rs__processor__impl_8cpp" startline="588" endline="616">srsgnb::csi_rs_processor_impl::generate_sequence</referencedby>
        <referencedby refid="classsrsgnb_1_1csi__rs__processor__impl_1a30c332617ff3e1d643e6a61e5dfe86db" compoundref="csi__rs__processor__impl_8cpp" startline="652" endline="703">srsgnb::csi_rs_processor_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdcch__processor__impl_1a3258e494264fa593b34c4ddceab24ac5" compoundref="dmrs__pdcch__processor__impl_8cpp" startline="18" endline="24">srsgnb::dmrs_pdcch_processor_impl::c_init</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1a1cc105e7a4d0123d7dc91a3b2d8997d7" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="47" endline="69">srsgnb::dmrs_pdsch_processor_impl::sequence_generation</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl_1a657ab3d994e577bf1a115d62ddf457e5" compoundref="dmrs__pucch__processor__format2__impl_8cpp" startline="17" endline="23">srsgnb::dmrs_pucch_processor_format2_impl::c_init</referencedby>
        <referencedby refid="classsrsgnb_1_1pucch__helper_1a5e2150ab9042afa57d513e3c31c54b71" compoundref="pucch__helper_8h" startline="66" endline="100">srsgnb::pucch_helper::get_alpha_index</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a67a5e6aebfb8323de1df7a5b4bc1eacb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
        <definition>constexpr du_ue_index_t srsgnb::to_du_ue_index</definition>
        <argsstring>(std::underlying_type_t&lt; du_ue_index_t &gt; idx)</argsstring>
        <name>to_du_ue_index</name>
        <param>
          <type>std::underlying_type_t&lt; <ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref> &gt;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Convert integer to DU UE index type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_types.h" line="25" column="32" bodyfile="include/srsgnb/ran/du_types.h" bodystart="25" bodyend="28"/>
        <referencedby refid="classsrsgnb_1_1ue__index__based__ul__executor__mapper_1ae9d9e173bb724f5e1aafbe428ddd574a" compoundref="du__high__executor__strategies_8h" startline="33" endline="37">srsgnb::ue_index_based_ul_executor_mapper::executor</referencedby>
        <referencedby refid="classsrsgnb_1_1pcell__ul__executor__mapper_1a3097294f42fefb343b6d8ff3d6c40a89" compoundref="du__high__executor__strategies_8h" startline="65" endline="69">srsgnb::pcell_ul_executor_mapper::executor</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1abf699262eba26e78f71c34e0b3ddc3cb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool srsgnb::is_du_ue_index_valid</definition>
        <argsstring>(du_ue_index_t ue_idx)</argsstring>
        <name>is_du_ue_index_valid</name>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_types.h" line="30" column="23" bodyfile="include/srsgnb/ran/du_types.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a65c7d928113d2d1fa07f58a130acc93f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abc" kindref="member">du_cell_index_t</ref></type>
        <definition>du_cell_index_t srsgnb::to_du_cell_index</definition>
        <argsstring>(std::underlying_type_t&lt; du_cell_index_t &gt; idx)</argsstring>
        <name>to_du_cell_index</name>
        <param>
          <type>std::underlying_type_t&lt; <ref refid="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abc" kindref="member">du_cell_index_t</ref> &gt;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Convert integer to DU cell index type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_types.h" line="36" column="24" bodyfile="include/srsgnb/ran/du_types.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad57ad2af846e4aae7451b549c980b808" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a467fce4f5a024b9732a88f1eb27e4fa3" kindref="member">ue_cell_index_t</ref></type>
        <definition>ue_cell_index_t srsgnb::to_ue_cell_index</definition>
        <argsstring>(std::underlying_type_t&lt; ue_cell_index_t &gt; idx)</argsstring>
        <name>to_ue_cell_index</name>
        <param>
          <type>std::underlying_type_t&lt; <ref refid="namespacesrsgnb_1a467fce4f5a024b9732a88f1eb27e4fa3" kindref="member">ue_cell_index_t</ref> &gt;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/du_types.h" line="44" column="24" bodyfile="include/srsgnb/ran/du_types.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3493179a6be27d166b5a077f99c083f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::is_srb</definition>
        <argsstring>(lcid_t lcid)</argsstring>
        <name>is_srb</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339e" kindref="member">lcid_t</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="36" column="13" bodyfile="include/srsgnb/ran/lcid.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afa5be4759c52629e6407e140e6448d64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::is_lcid_valid</definition>
        <argsstring>(lcid_t lcid)</argsstring>
        <name>is_lcid_valid</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339e" kindref="member">lcid_t</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="41" column="13" bodyfile="include/srsgnb/ran/lcid.h" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af50985ee300bd56dff0e02b6398467a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>srb_id_t</type>
        <definition>srb_id_t srsgnb::to_srb_id</definition>
        <argsstring>(lcid_t lcid)</argsstring>
        <name>to_srb_id</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339e" kindref="member">lcid_t</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="46" column="17" bodyfile="include/srsgnb/ran/lcid.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aabb540caee8957567fead6a2eae9fe6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a27826553cbb7866e22f1ed49d585339e" kindref="member">lcid_t</ref></type>
        <definition>lcid_t srsgnb::srb_id_to_lcid</definition>
        <argsstring>(srb_id_t srb_id)</argsstring>
        <name>srb_id_to_lcid</name>
        <param>
          <type>srb_id_t</type>
          <declname>srb_id</declname>
        </param>
        <briefdescription>
<para>Convert SRB ID to LCID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/lcid.h" line="52" column="15" bodyfile="include/srsgnb/ran/lcid.h" bodystart="52" bodyend="55"/>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1du__processor_1a19d9b47ab4efcb9d92fb6a1b8d7a456c" compoundref="du__processor_8cpp" startline="191" endline="243">srsgnb::srs_cu_cp::du_processor::create_srb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5c37c1faa640c677778e681f6fd5434f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1aef8df2da7a55cf1ada5a749a6433330c" kindref="member">ldpc_base_graph_type</ref></type>
        <definition>constexpr ldpc_base_graph_type srsgnb::get_ldpc_base_graph</definition>
        <argsstring>(float R, unsigned A)</argsstring>
        <name>get_ldpc_base_graph</name>
        <param>
          <type>float</type>
          <declname>R</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the LDPC base graph based on the given code rate and transport block size in bytes, as per TS 38.212 section 7.2.2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>Target code rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ldpc_base_graph.h" line="26" column="32" bodyfile="include/srsgnb/ran/ldpc_base_graph.h" bodystart="26" bodyend="33"/>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa7fc56270e7a70fa81a5935b72eacbe29">A</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae513ad7c1c0fdae780d0d84165ce10ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string srsgnb::to_string</definition>
        <argsstring>(modulation_scheme mod)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4" kindref="member">modulation_scheme</ref></type>
          <declname>mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/modulation_scheme.h" line="41" column="20" bodyfile="include/srsgnb/ran/modulation_scheme.h" bodystart="41" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a0d8c69bda1d828c45f83f9e92e23b0b1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::get_bits_per_symbol</definition>
        <argsstring>(modulation_scheme mod)</argsstring>
        <name>get_bits_per_symbol</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4" kindref="member">modulation_scheme</ref></type>
          <declname>mod</declname>
        </param>
        <briefdescription>
<para>Bits per symbol for a given modulation scheme. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mod</parametername>
</parameternamelist>
<parameterdescription>
<para>Modulation scheme. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bits per modulated symbol (sometimes referred to as modulation order). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/modulation_scheme.h" line="63" column="27" bodyfile="include/srsgnb/ran/modulation_scheme.h" bodystart="63" bodyend="76"/>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a68b5dd822c6ef8ad44f98f56dfbe016e">PI_2_BPSK</references>
        <references refid="namespacesrsgnb_1a93482e6cc167b02024b5f422d40e112d" compoundref="modulation__scheme_8h" startline="21">MODULATION_MAX_BITS_PER_SYMBOL</references>
        <referencedby refid="structsrsgnb_1_1sch__mcs__description_1a2411a7821fa466143b422f76497b2777" compoundref="sch__mcs_8h" startline="32" endline="35">srsgnb::sch_mcs_description::get_spectral_efficiency</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1a5ade53eac3a340feb5225fa1d0909683" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="19" endline="27">srsgnb::ldpc_rate_dematcher_impl::init</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__segmenter__impl_1a414d7063dc81499bdbc5947b2b4482e4" compoundref="ldpc__segmenter__impl_8cpp" startline="79" endline="89">srsgnb::ldpc_segmenter_impl::compute_rm_length</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__segmenter__impl_1ac42240fce4bb7e502661967508115d76" compoundref="ldpc__segmenter__impl_8cpp" startline="133" endline="209">srsgnb::ldpc_segmenter_impl::segment</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a19623e946a11e01acf68e233517b5816" compoundref="short__block__detector__impl_8cpp" startline="150" endline="183">srsgnb::short_block_detector_impl::detect</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__encoder__impl_1a9e874fc2f6b85564deb48c666e0023fa" compoundref="short__block__encoder__impl_8cpp" startline="116" endline="137">srsgnb::short_block_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1demodulation__mapper__impl_1a41fe683ab1a2139de42ddb8e776aa866" compoundref="demodulation__mapper__impl_8cpp" startline="365" endline="397">srsgnb::demodulation_mapper_impl::demodulate_soft</referencedby>
        <referencedby refid="classsrsgnb_1_1modulation__mapper__impl_1a6b15ec922595693c948d3c5eae8f0497" compoundref="modulation__mapper__impl_8cpp" startline="141" endline="171">srsgnb::modulation_mapper_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a99d144ad4330e7b1851df0de1b8ca6f0" compoundref="pdsch__modulator__impl_8cpp" startline="234" endline="286">srsgnb::pdsch_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__processor__impl_1abf69b73a2c47ea0539fa4e32ca622e64" compoundref="pdsch__processor__impl_8cpp" startline="40" endline="68">srsgnb::pdsch_processor_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a32b9bcfcc6ae452c2d0516a8518d8d16" compoundref="sib__scheduler_8cpp" startline="155" endline="218">srsgnb::sib1_scheduler::allocate_sib1</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad2ec6b5d29686ac0c48938c0a5356056" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1ofdm__symbol__range" kindref="compound">ofdm_symbol_range</ref></type>
        <definition>ofdm_symbol_range srsgnb::sliv_to_ofdm_symbols</definition>
        <argsstring>(uint32_t sliv)</argsstring>
        <name>sliv_to_ofdm_symbols</name>
        <param>
          <type>uint32_t</type>
          <declname>sliv</declname>
        </param>
        <briefdescription>
<para>Converts SLIV to OFDM symbol start S and length L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sliv</parametername>
</parameternamelist>
<parameterdescription>
<para>An index giving a combination (jointly encoded) of start symbols and length indicator (SLIV). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">symbols</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol interval as [S, S+L). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ofdm_symbol_range.h" line="27" column="26" bodyfile="include/srsgnb/ran/ofdm_symbol_range.h" bodystart="27" bodyend="32"/>
        <references refid="namespacesrsgnb_1a576337bdf10c37dbb564e109cc5ea094" compoundref="sliv_8h" startline="14" endline="26">sliv_to_s_and_l</references>
        <references refid="namespacesrsgnb_1aa558f255506148cec1603985918359ab" compoundref="frame__types_8h" startline="18">NOF_OFDM_SYM_PER_SLOT_NORMAL_CP</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afdf0e5507577ca94ce16f4bb44e9d047" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::to_nof_cces</definition>
        <argsstring>(aggregation_level lvl)</argsstring>
        <name>to_nof_cces</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1" kindref="member">aggregation_level</ref></type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
<para>Calculates number of CCEs based on Aggregation Level as per TS38.211 Table 7.3.2.1-1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/aggregation_level.h" line="21" column="17" bodyfile="include/srsgnb/ran/pdcch/aggregation_level.h" bodystart="21" bodyend="24"/>
        <referencedby refid="namespacesrsgnb_1a5a42cfe5ef88be2034b52ffbfef531c2" compoundref="pdcch__candidates_8cpp" startline="16" endline="42">pdcch_candidates_common_ss_get_lowest_cce</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a18ec8a1c30a8a1dbc89437ea74c98307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::to_aggregation_level_index</definition>
        <argsstring>(aggregation_level lvl)</argsstring>
        <name>to_aggregation_level_index</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1" kindref="member">aggregation_level</ref></type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
<para>Calculates the index associated to the passed aggregation level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/aggregation_level.h" line="27" column="17" bodyfile="include/srsgnb/ran/pdcch/aggregation_level.h" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a295919f59dbc3b4c26249c0071186e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a112edd1c16d511ee5d0197173bfdabcb" kindref="member">prb_index_list</ref></type>
        <definition>prb_index_list srsgnb::cce_to_prb_mapping_coreset0</definition>
        <argsstring>(unsigned N_coreset0_start, unsigned N_coreset0_size, unsigned N_symb_coreset, pci_t N_id_cell, unsigned aggregation_level, unsigned cce_index)</argsstring>
        <name>cce_to_prb_mapping_coreset0</name>
        <param>
          <type>unsigned</type>
          <declname>N_coreset0_start</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N_coreset0_size</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N_symb_coreset</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aeade94aaea718e0825ce98aadf28d60e" kindref="member">pci_t</ref></type>
          <declname>N_id_cell</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>aggregation_level</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>cce_index</declname>
        </param>
        <briefdescription>
<para>Calculates the PDCCH CCE to PRB mapping for a PDCCH transmission in CORESET0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N_coreset0_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The lowest RB index of the CORESET0 relative to CRB0 (PointA). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N_coreset0_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The CORESET0 bandwidth in RBs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N_symb_coreset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of symbols for the PDCCH transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N_id_cell</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical cell identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aggregation_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of CCE used for the PDCCH transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cce_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial CCE index for the PDCCH transmision. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of the resource blocks used by the PDCCH transmission. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" line="33" column="16" bodyfile="lib/ran/pdcch/cce_to_prb_mapping.cpp" bodystart="140" bodyend="152" declfile="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" declline="33" declcolumn="16"/>
        <referencedby refid="classsrsgnb_1_1pdcch__processor__impl_1a5ed68866b058ea9ccc9a04539bc35681" compoundref="pdcch__processor__impl_8cpp" startline="18" endline="52">srsgnb::pdcch_processor_impl::compute_rb_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1abf758ba2053d50a0b628cc341fd177a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a112edd1c16d511ee5d0197173bfdabcb" kindref="member">prb_index_list</ref></type>
        <definition>prb_index_list srsgnb::cce_to_prb_mapping_non_interleaved</definition>
        <argsstring>(unsigned N_bwp_start, const freq_resource_bitmap &amp;freq_resources, unsigned N_symb_coreset, unsigned aggregation_level, unsigned cce_index)</argsstring>
        <name>cce_to_prb_mapping_non_interleaved</name>
        <param>
          <type>unsigned</type>
          <declname>N_bwp_start</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesrsgnb_1a3157a421c097a0136294963d0f1cd743" kindref="member">freq_resource_bitmap</ref> &amp;</type>
          <declname>freq_resources</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N_symb_coreset</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>aggregation_level</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>cce_index</declname>
        </param>
        <briefdescription>
<para>Calculates the PDCCH CCE to PRB mapping for a non-interleaved PDCCH transmission. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N_bwp_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of the BWP relative to CRB0 (PointA). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq_resources</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the frequency resources active for the CORESET. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N_symb_coreset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of symbols for the PDCCH transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aggregation_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of CCE used for the PDCCH transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cce_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial CCE index for the PDCCH transmision. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of the resource blocks used by the PDCCH transmission. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" line="48" column="16" bodyfile="lib/ran/pdcch/cce_to_prb_mapping.cpp" bodystart="154" bodyend="165" declfile="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" declline="48" declcolumn="16"/>
        <referencedby refid="classsrsgnb_1_1pdcch__processor__impl_1a5ed68866b058ea9ccc9a04539bc35681" compoundref="pdcch__processor__impl_8cpp" startline="18" endline="52">srsgnb::pdcch_processor_impl::compute_rb_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a477d949f11fc791bf27454f2e8672ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a112edd1c16d511ee5d0197173bfdabcb" kindref="member">prb_index_list</ref></type>
        <definition>prb_index_list srsgnb::cce_to_prb_mapping_interleaved</definition>
        <argsstring>(unsigned N_bwp_start, const freq_resource_bitmap &amp;freq_resources, unsigned N_symb_coreset, unsigned reg_bundle_size, unsigned interleaver_size, unsigned shift_index, unsigned aggregation_level, unsigned cce_index)</argsstring>
        <name>cce_to_prb_mapping_interleaved</name>
        <param>
          <type>unsigned</type>
          <declname>N_bwp_start</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesrsgnb_1a3157a421c097a0136294963d0f1cd743" kindref="member">freq_resource_bitmap</ref> &amp;</type>
          <declname>freq_resources</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>N_symb_coreset</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>reg_bundle_size</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>interleaver_size</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>shift_index</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>aggregation_level</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>cce_index</declname>
        </param>
        <briefdescription>
<para>Calculates the PDCCH CCE to PRB mapping for an interleaved PDCCH transmission. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N_bwp_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of the BWP relative to CRB0 (PointA). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq_resources</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the frequency resources active for the CORESET. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N_symb_coreset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of symbols for the PDCCH transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg_bundle_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter <computeroutput>reg-BundleSize</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interleaver_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter <computeroutput>interleaverSize</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter <computeroutput>shiftIndex</computeroutput> if available, otherwise <formula id="105">$N_{ID}^{cell}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aggregation_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of CCE used for the PDCCH transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cce_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial CCE index for the PDCCH transmision. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of the resource blocks used by the PDCCH transmission. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" line="65" column="16" bodyfile="lib/ran/pdcch/cce_to_prb_mapping.cpp" bodystart="167" bodyend="187" declfile="include/srsgnb/ran/pdcch/cce_to_prb_mapping.h" declline="65" declcolumn="16"/>
        <references refid="classsrsgnb_1_1bounded__bitset_1ac144398b8b6c75c17e986b6027a7fea4" compoundref="bounded__bitset_8h" startline="591" endline="598">srsgnb::bounded_bitset&lt; N, reversed &gt;::count</references>
        <referencedby refid="classsrsgnb_1_1pdcch__processor__impl_1a5ed68866b058ea9ccc9a04539bc35681" compoundref="pdcch__processor__impl_8cpp" startline="18" endline="52">srsgnb::pdcch_processor_impl::compute_rb_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a204b723f6457f7e58797ac7c99f85a5a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1a97aea9eebec7b3fb0a0257cf325dadd9" kindref="member">coreset_id</ref></type>
        <definition>constexpr coreset_id srsgnb::to_coreset_id</definition>
        <argsstring>(unsigned cs_id)</argsstring>
        <name>to_coreset_id</name>
        <param>
          <type>unsigned</type>
          <declname>cs_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/coreset.h" line="33" column="29" bodyfile="include/srsgnb/ran/pdcch/coreset.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae3d59219a86271fe4a2d2623fda5915a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1aef34f0c515daeb131c38cc38acf8e73e" kindref="member">dci_payload</ref></type>
        <definition>dci_payload srsgnb::dci_1_0_p_rnti_pack</definition>
        <argsstring>(const dci_1_0_p_rnti_configuration &amp;config)</argsstring>
        <name>dci_1_0_p_rnti_pack</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration" kindref="compound">dci_1_0_p_rnti_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Packs a DCI format 1_0 scrambled by P-RNTI. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/dci_packing.h" line="62" column="13" bodyfile="lib/ran/pdcch/dci_packing.cpp" bodystart="16" bodyend="66" declfile="include/srsgnb/ran/pdcch/dci_packing.h" declline="62" declcolumn="13"/>
        <references refid="namespacesrsgnb_1aa91e37127f185a5bc158964970704fc3" compoundref="math__utils_8h" startline="64" endline="73">log2_ceil</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1af3fa1535a321b2d1027d668e800b5714" compoundref="dci__packing_8h" startline="35">srsgnb::dci_1_0_p_rnti_configuration::N_rb_dl_bwp</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1af2d3221149180b511120095a3c951e29" compoundref="dci__packing_8h" startline="37">srsgnb::dci_1_0_p_rnti_configuration::short_messages_indicator</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1ab3177216618a2eabd7409eb51524e2c6aafade6347ac569620ae8cd56c8490896">srsgnb::dci_1_0_p_rnti_configuration::scheduling_information</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a28067d9a1c62435d18c5ac6cf0642c49" compoundref="bounded__bitset_8h" startline="304" endline="309">srsgnb::bounded_bitset&lt; N, reversed &gt;::push_back</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1ab3177216618a2eabd7409eb51524e2c6a1fa3f1a52d62fcaf9b9550a5766aff42">srsgnb::dci_1_0_p_rnti_configuration::short_messages</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1ab3177216618a2eabd7409eb51524e2c6af6cb3e816496528d4187db53bc66567f">srsgnb::dci_1_0_p_rnti_configuration::both</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1aa34e8425776475f89b8e18cd34f48c5e" compoundref="dci__packing_8h" startline="44">srsgnb::dci_1_0_p_rnti_configuration::frequency_resource</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1aed799dfabdc063f21b73f6fd4acbe493" compoundref="dci__packing_8h" startline="47">srsgnb::dci_1_0_p_rnti_configuration::time_resource</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1a783df247ba71429ef15fb2b34b6aeaff" compoundref="dci__packing_8h" startline="50">srsgnb::dci_1_0_p_rnti_configuration::vrb_to_prb_mapping</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1a7019e24269a526817b6d8bf46fac6ced" compoundref="dci__packing_8h" startline="53">srsgnb::dci_1_0_p_rnti_configuration::modulation_coding_scheme</references>
        <references refid="structsrsgnb_1_1dci__1__0__p__rnti__configuration_1a9a66cf257342bf38d8e5eb88731559b9" compoundref="dci__packing_8h" startline="57">srsgnb::dci_1_0_p_rnti_configuration::tb_scaling</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab271e68693127a36a613fe0b2c66454f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1aef34f0c515daeb131c38cc38acf8e73e" kindref="member">dci_payload</ref></type>
        <definition>dci_payload srsgnb::dci_1_0_si_rnti_pack</definition>
        <argsstring>(const dci_1_0_si_rnti_configuration &amp;config)</argsstring>
        <name>dci_1_0_si_rnti_pack</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration" kindref="compound">dci_1_0_si_rnti_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Packs a DCI format 1_0 scrambled by SI-RNTI. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/dci_packing.h" line="86" column="13" bodyfile="lib/ran/pdcch/dci_packing.cpp" bodystart="68" bodyend="95" declfile="include/srsgnb/ran/pdcch/dci_packing.h" declline="86" declcolumn="13"/>
        <references refid="namespacesrsgnb_1aa91e37127f185a5bc158964970704fc3" compoundref="math__utils_8h" startline="64" endline="73">log2_ceil</references>
        <references refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration_1afe5bf231feb70a1d9279488b85f8bdd8" compoundref="dci__packing_8h" startline="68">srsgnb::dci_1_0_si_rnti_configuration::N_rb_dl_bwp</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a28067d9a1c62435d18c5ac6cf0642c49" compoundref="bounded__bitset_8h" startline="304" endline="309">srsgnb::bounded_bitset&lt; N, reversed &gt;::push_back</references>
        <references refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration_1aa969263ce52e034f39128ebe36b83be2" compoundref="dci__packing_8h" startline="71">srsgnb::dci_1_0_si_rnti_configuration::frequency_resource</references>
        <references refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration_1a2e33f85caad643486da03576ed4fbaf9" compoundref="dci__packing_8h" startline="73">srsgnb::dci_1_0_si_rnti_configuration::time_resource</references>
        <references refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration_1a396580b3a7b02e1d2270aa178cf1f0ac" compoundref="dci__packing_8h" startline="75">srsgnb::dci_1_0_si_rnti_configuration::vrb_to_prb_mapping</references>
        <references refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration_1a9ec65cf97b3f6b9cc20ea52f21a812b8" compoundref="dci__packing_8h" startline="77">srsgnb::dci_1_0_si_rnti_configuration::modulation_coding_scheme</references>
        <references refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration_1a418b49783a7fa2f035a2aa1dd3fcd95b" compoundref="dci__packing_8h" startline="79">srsgnb::dci_1_0_si_rnti_configuration::redundancy_version</references>
        <references refid="structsrsgnb_1_1dci__1__0__si__rnti__configuration_1a1b76e1d6b204d7a3f06a0e1d0725c30e" compoundref="dci__packing_8h" startline="81">srsgnb::dci_1_0_si_rnti_configuration::system_information_indicator</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2401e3b23a5b3ce37bfc76c167f294ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1aef34f0c515daeb131c38cc38acf8e73e" kindref="member">dci_payload</ref></type>
        <definition>dci_payload srsgnb::dci_1_0_ra_rnti_pack</definition>
        <argsstring>(const dci_1_0_ra_rnti_configuration &amp;config)</argsstring>
        <name>dci_1_0_ra_rnti_pack</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration" kindref="compound">dci_1_0_ra_rnti_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Packs a DCI format 1_0 scrambled by RA-RNTI. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/dci_packing.h" line="113" column="13" bodyfile="lib/ran/pdcch/dci_packing.cpp" bodystart="97" bodyend="121" declfile="include/srsgnb/ran/pdcch/dci_packing.h" declline="113" declcolumn="13"/>
        <references refid="namespacesrsgnb_1aa91e37127f185a5bc158964970704fc3" compoundref="math__utils_8h" startline="64" endline="73">log2_ceil</references>
        <references refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration_1acba9ef194160776a49afd7feca63dca0" compoundref="dci__packing_8h" startline="96">srsgnb::dci_1_0_ra_rnti_configuration::N_rb_dl_bwp</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a28067d9a1c62435d18c5ac6cf0642c49" compoundref="bounded__bitset_8h" startline="304" endline="309">srsgnb::bounded_bitset&lt; N, reversed &gt;::push_back</references>
        <references refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration_1aae1e821d0357c41c254d1f4cd72506f0" compoundref="dci__packing_8h" startline="99">srsgnb::dci_1_0_ra_rnti_configuration::frequency_resource</references>
        <references refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration_1a9cf11a883c741540be4f3ad67b9a7567" compoundref="dci__packing_8h" startline="101">srsgnb::dci_1_0_ra_rnti_configuration::time_resource</references>
        <references refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration_1a56917eb7d59f37c3bd6d6a138d075bec" compoundref="dci__packing_8h" startline="103">srsgnb::dci_1_0_ra_rnti_configuration::vrb_to_prb_mapping</references>
        <references refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration_1ac395c86cd70487b6e58848370d5b93f6" compoundref="dci__packing_8h" startline="105">srsgnb::dci_1_0_ra_rnti_configuration::modulation_coding_scheme</references>
        <references refid="structsrsgnb_1_1dci__1__0__ra__rnti__configuration_1a564e29c8e1a7112de70662426b7b6525" compoundref="dci__packing_8h" startline="108">srsgnb::dci_1_0_ra_rnti_configuration::tb_scaling</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5a42cfe5ef88be2034b52ffbfef531c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a6b0e3a5a27525e2e5f7ca89f16b9f838" kindref="member">pdcch_candidate_list</ref></type>
        <definition>pdcch_candidate_list srsgnb::pdcch_candidates_common_ss_get_lowest_cce</definition>
        <argsstring>(const pdcch_candidates_common_ss_configuration &amp;config)</argsstring>
        <name>pdcch_candidates_common_ss_get_lowest_cce</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1pdcch__candidates__common__ss__configuration" kindref="compound">pdcch_candidates_common_ss_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Generates a PDCCH candidate list for Common SS as per TS38.213 Section 10.1. </para>
        </briefdescription>
        <detaileddescription>
<para>Assertion is triggered if:<itemizedlist>
<listitem><para>the aggregation level is invalid (<simplesect kind="see"><para>srsgnb::aggregation_level::is_valid for more information),</para>
</simplesect>
</para>
</listitem><listitem><para>the number of CCE in the CORESET is zero, or</para>
</listitem><listitem><para>the number of candidates times the aggregation level exceeds the number of CCE in the CORESET.</para>
</listitem></itemizedlist>
</para>
<para>The resultant list contains the lowest CCE index of the <computeroutput>config.nof_candidates</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/pdcch_candidates.h" line="56" column="22" bodyfile="lib/ran/pdcch/pdcch_candidates.cpp" bodystart="16" bodyend="42" declfile="include/srsgnb/ran/pdcch/pdcch_candidates.h" declline="56" declcolumn="22"/>
        <references refid="namespacesrsgnb_1afdf0e5507577ca94ce16f4bb44e9d047" compoundref="aggregation__level_8h" startline="21" endline="24">to_nof_cces</references>
        <references refid="structsrsgnb_1_1pdcch__candidates__common__ss__configuration_1aa3078726da748fd3994c559147ca3869" compoundref="pdcch__candidates_8h" startline="40">srsgnb::pdcch_candidates_common_ss_configuration::L</references>
        <references refid="structsrsgnb_1_1pdcch__candidates__common__ss__configuration_1a6305e2a697574eb566df482243a11b61" compoundref="pdcch__candidates_8h" startline="45">srsgnb::pdcch_candidates_common_ss_configuration::nof_cce_coreset</references>
        <references refid="structsrsgnb_1_1pdcch__candidates__common__ss__configuration_1a48f7ad7c23eee71e79a723d105006841" compoundref="pdcch__candidates_8h" startline="43">srsgnb::pdcch_candidates_common_ss_configuration::nof_candidates</references>
        <references refid="namespacesrsgnb_1a268ee8e748532d91e7426b537736c78d" compoundref="pdcch__candidates_8h" startline="19">PDCCH_MAX_NOF_CANDIDATES_SS</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac670faf159e553b0322f0f2e154151e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1pdcch__type0__css__coreset__description" kindref="compound">pdcch_type0_css_coreset_description</ref></type>
        <definition>pdcch_type0_css_coreset_description srsgnb::pdcch_type0_css_coreset_get</definition>
        <argsstring>(min_channel_bandwidth minimum_bandwidth_MHz, subcarrier_spacing ssb_scs, subcarrier_spacing pdcch_scs, uint8_t coreset_zero_index, uint8_t subcarrier_offset)</argsstring>
        <name>pdcch_type0_css_coreset_get</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a928643ce67658447b5b7ab02831d080a" kindref="member">min_channel_bandwidth</ref></type>
          <declname>minimum_bandwidth_MHz</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>ssb_scs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>pdcch_scs</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>coreset_zero_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subcarrier_offset</declname>
        </param>
        <briefdescription>
<para>Get the CORESET configuration for Type0-PDCCH CSS. </para>
        </briefdescription>
        <detaileddescription>
<para>The CORESET configuration is retrieved as per TS38.213 Tables 13-1, 13-2, 13-3, 13-4, 13-5, 13-6, 13-7, 13-8, 13-9 and 13-10 depending on the subcarrier combination of the SS/PBCH block and PDCCH, and the minimum channel bandwidth.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">minimum_bandwidth_MHz</parametername>
</parameternamelist>
<parameterdescription>
<para>Band minimum bandwidth in MHz as per TS38.104 Table 5.3.5-1 for FR 1 and Table 5.3.5-2 for FR2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssb_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>SS/PBCH block subcarrier spacing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pdcch_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>PDCCH subcarrier spacing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coreset_zero_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter <computeroutput>controlResourceSetZero</computeroutput> as per TS38.331 PDCCH-ConfigSIB1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcarrier_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset between the CRB and the beginning of the SS/PBCH block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid CORESET description if <computeroutput>config</computeroutput> is valid. Otherwise, <computeroutput>PDCCH_TYPE0_CSS_CORESET_RESERVED</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdcch/pdcch_type0_css_coreset_config.h" line="52" column="37" bodyfile="lib/ran/pdcch/pdcch_type0_css_coreset_config.cpp" bodystart="17" bodyend="202" declfile="include/srsgnb/ran/pdcch/pdcch_type0_css_coreset_config.h" declline="52" declcolumn="37"/>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1ac41cb886463a4c8f6033c66cc1e91934" compoundref="sib__scheduler_8cpp" startline="127" endline="153">srsgnb::sib1_scheduler::precompute_sib1_n0</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3e9b74a378fe34278fcb9800bad5194d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1sch__mcs__description" kindref="compound">sch_mcs_description</ref></type>
        <definition>sch_mcs_description srsgnb::pdsch_mcs_get_config</definition>
        <argsstring>(pdsch_mcs_table table, sch_mcs_index index)</argsstring>
        <name>pdsch_mcs_get_config</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934e" kindref="member">pdsch_mcs_table</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1ae3fb8f3d5f93d2f5e54c48697b708d53" kindref="member">sch_mcs_index</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets the Modulation and Coding Scheme configuration for PDSCH. </para>
        </briefdescription>
        <detaileddescription>
<para>Reserved target code rates and spectral efficiencies are indicated with zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">table</parametername>
</parameternamelist>
<parameterdescription>
<para>MCS table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>MCS index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulation and Coding Scheme parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pdsch/pdsch_mcs.h" line="37" column="21" bodyfile="lib/ran/pdsch/pdsch_mcs.cpp" bodystart="16" bodyend="70" declfile="include/srsgnb/ran/pdsch/pdsch_mcs.h" declline="37" declcolumn="21"/>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a4539d029e1781f9347b6d7d173c04a6a">QPSK</references>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a03029a441fe46ebecd2135ba5d8b330f">QAM16</references>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a5e0dd7cb58cf81fd6bed561c7e4b351b">QAM64</references>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a69a2bdd96ac2c6035d0c8ca23563aec9">QAM256</references>
        <references refid="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934eafe97d5927e34d78b68330ae92f2773cb">qam64</references>
        <references refid="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934ead6020165a82bfc26499c2cd4dd812255">qam256</references>
        <references refid="namespacesrsgnb_1a21ef16d6a637e18275f487d9e9d6934ea6089420740a4993f5408855cd5ee74b4">qam64LowSe</references>
        <referencedby refid="namespacesrsgnb_1a13fe5fae9c13dcc053b85385b1ea2463" compoundref="pusch__mcs_8cpp" startline="17" endline="78">pusch_mcs_get_config</referencedby>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa7f5ee78860e7768890012a950bb289c" compoundref="ra__scheduler_8cpp" startline="320" endline="410">srsgnb::ra_scheduler::fill_rar_grant</referencedby>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a9273e6714497a71a3b4fc86660e88727" compoundref="sib__scheduler_8cpp" startline="220" endline="274">srsgnb::sib1_scheduler::fill_sib1_grant</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5d89e9478de57d421e8cead9b15e4e8a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>constexpr U</type>
        <definition>constexpr U srsgnb::to_sampling_rate_Hz</definition>
        <argsstring>(subcarrier_spacing scs, unsigned dft_size)</argsstring>
        <name>to_sampling_rate_Hz</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dft_size</declname>
        </param>
        <briefdescription>
<para>Gets the sampling rate from a subcarrier spacing and a DFT size combination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Return data type. Must be convertible to unsigned (default: double). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scs</parametername>
</parameternamelist>
<parameterdescription>
<para>Subcarrier spacing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dft_size</parametername>
</parameternamelist>
<parameterdescription>
<para>DFT size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sampling rate in hertz from the given SCS and DFT size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/phy_time_unit.h" line="161" column="20" bodyfile="include/srsgnb/ran/phy_time_unit.h" bodystart="161" bodyend="165"/>
        <references refid="namespacesrsgnb_1a1e7bf788a6e1125670387568e03b4b89" compoundref="subcarrier__spacing_8h" startline="44" endline="48">scs_to_khz</references>
        <referencedby refid="classsrsgnb_1_1phase__compensation__lut_1ae37a449b492ec3f4d1280844c108faae" compoundref="phase__compensation__lut_8h" startline="37" endline="71">srsgnb::phase_compensation_lut::phase_compensation_lut</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9944cdc11b9b2291d2acaec7df21107c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1prach__configuration" kindref="compound">prach_configuration</ref></type>
        <definition>prach_configuration srsgnb::prach_configuration_get</definition>
        <argsstring>(frequency_range fr, duplex_mode dm, uint8_t prach_config_index)</argsstring>
        <name>prach_configuration_get</name>
        <param>
          <type><ref refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11" kindref="member">frequency_range</ref></type>
          <declname>fr</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1" kindref="member">duplex_mode</ref></type>
          <declname>dm</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>prach_config_index</declname>
        </param>
        <briefdescription>
<para>Gets a PRACH configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Arguments are considered valid if:<itemizedlist>
<listitem><para>They are consistent with the TS38.211 Tables 6.3.3.2-2, 6.3.3.2-3 and 6.3.3.2-4, and</para>
</listitem><listitem><para>the combination is implemented.</para>
</listitem></itemizedlist>
</para>
<para>Currently, only long preamble formats for FR1 in FDD mode are implemented.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fr</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency range (see <ref refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11" kindref="member">here</ref> for more information). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dm</parametername>
</parameternamelist>
<parameterdescription>
<para>Duplex mode (see <ref refid="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1" kindref="member">here</ref> for more information). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prach_config_index</parametername>
</parameternamelist>
<parameterdescription>
<para>PRACH configuration index with range {0, ..., 255}. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid PRACH configuration if the provided arguments are valid. Otherwise, <ref refid="namespacesrsgnb_1a173c9d84828687363e0f66d268e480fe" kindref="member">PRACH_CONFIG_RESERVED</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/prach_configuration.h" line="63" column="21" bodyfile="lib/ran/prach/prach_configuration.cpp" bodystart="115" bodyend="122" declfile="include/srsgnb/ran/prach/prach_configuration.h" declline="63" declcolumn="21"/>
        <references refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11a34d1cf1496d544eb35e3461a5235f7e9">FR1</references>
        <references refid="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1aeec6da44109af7259e81b505436583ff">FDD</references>
        <references refid="namespacesrsgnb_1a83f6ffefc7d0a575c536ffac0750f2f1ab6e4d934ab0c243d22087d3dd6dda0ac">SUL</references>
        <references refid="namespacesrsgnb_1a173c9d84828687363e0f66d268e480fe" compoundref="prach__configuration_8h" startline="48">PRACH_CONFIG_RESERVED</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af4cb37be7d95f0b5112c65a2b887bfce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t srsgnb::prach_cyclic_shifts_get</definition>
        <argsstring>(prach_subcarrier_spacing prach_scs, restricted_set_config restricted_set, unsigned zero_correlation_zone)</argsstring>
        <name>prach_cyclic_shifts_get</name>
        <param>
          <type><ref refid="classsrsgnb_1_1prach__subcarrier__spacing" kindref="compound">prach_subcarrier_spacing</ref></type>
          <declname>prach_scs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a61d2ce93a55d7e2ea84a3758d57cff28" kindref="member">restricted_set_config</ref></type>
          <declname>restricted_set</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>zero_correlation_zone</declname>
        </param>
        <briefdescription>
<para>Calculates the number of cyclic shifts <formula id="10">$N_{CS}$</formula> used in the sequence generation as per TS38.211 Section 6.3.3.1. </para>
        </briefdescription>
        <detaileddescription>
<para>The number of cyclic shifts <formula id="10">$N_{CS}$</formula> is extracted from:<itemizedlist>
<listitem><para>TS38.211 Table 6.3.3.1-5 for preambles 0, 1 and 2</para>
</listitem><listitem><para>TS38.211 Table 6.3.3.1-6 for preamble 3, and</para>
</listitem><listitem><para>TS38.211 Table 6.3.3.1-7 for the remaining preambles.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prach_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>PRACH subcarrier spacing (parameter <formula id="136">$\Delta f^{RA}$</formula> as defined in TS38.211 Section 6.3.3.1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">restricted_set</parametername>
</parameternamelist>
<parameterdescription>
<para>Restricted set (see <emphasis>restrictedSetConfig</emphasis> in TS38.331 Section 6.3.2, Information Element <emphasis>RACH-ConfigCommon</emphasis>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">zero_correlation_zone</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero correlation zone (see <emphasis>zeroCorrelationZoneConfig</emphasis> in TS38.331 Section 6.3.2, Information Element <emphasis>RACH-ConfigGeneric</emphasis>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of cyclic shifts if the input parameters are valid. Otherwise, PRACH_CYCLIC_SHIFTS_RESERVED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/prach_cyclic_shifts.h" line="37" column="10" bodyfile="lib/ran/prach/prach_cyclic_shifts.cpp" bodystart="17" bodyend="108" declfile="include/srsgnb/ran/prach/prach_cyclic_shifts.h" declline="37" declcolumn="10"/>
        <references refid="namespacesrsgnb_1a066c9700eff6552307432454d7e8d8ad" compoundref="prach__cyclic__shifts_8h" startline="20">PRACH_CYCLIC_SHIFTS_RESERVED</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a67fbfc584f45a838f893a16659889a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1prach__frequency__mapping__information" kindref="compound">prach_frequency_mapping_information</ref></type>
        <definition>prach_frequency_mapping_information srsgnb::prach_frequency_mapping_get</definition>
        <argsstring>(prach_subcarrier_spacing prach_scs, subcarrier_spacing pusch_scs)</argsstring>
        <name>prach_frequency_mapping_get</name>
        <param>
          <type><ref refid="classsrsgnb_1_1prach__subcarrier__spacing" kindref="compound">prach_subcarrier_spacing</ref></type>
          <declname>prach_scs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>pusch_scs</declname>
        </param>
        <briefdescription>
<para>Gets the PRACH frequency mapping information contained in TS38.211 Table 6.3.3.2-1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prach_scs_Hz</parametername>
</parameternamelist>
<parameterdescription>
<para>PRACH subcarrier spacing (parameter <formula id="137">$\Delta f_{RA}$</formula>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pusch_scs_Hz</parametername>
</parameternamelist>
<parameterdescription>
<para>PUSCH subcarrier spacing (parameter <formula id="138">$\Delta f$</formula>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The requested PRACH frequency mapping information if the combination of input parameters is valid, <computeroutput>PRACH_FREQUENCY_MAPPING_INFORMATION_RESERVED</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/prach_frequency_mapping.h" line="35" column="37" bodyfile="lib/ran/prach/prach_frequency_mapping.cpp" bodystart="15" bodyend="89" declfile="include/srsgnb/ran/prach/prach_frequency_mapping.h" declline="35" declcolumn="37"/>
        <references refid="namespacesrsgnb_1a13d0955c3694d41b59a80b830b15adba" compoundref="prach__frequency__mapping_8h" startline="28">PRACH_FREQUENCY_MAPPING_INFORMATION_RESERVED</references>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7b1cf34a338e96f95b01b1569c2cb014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1prach__preamble__information" kindref="compound">prach_preamble_information</ref></type>
        <definition>prach_preamble_information srsgnb::get_prach_preamble_long_info</definition>
        <argsstring>(preamble_format format)</argsstring>
        <name>get_prach_preamble_long_info</name>
        <param>
          <type><ref refid="classsrsgnb_1_1preamble__format" kindref="compound">preamble_format</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Get long PRACH preamble information as per TS38.211 Table 6.3.3.1-1. </para>
        </briefdescription>
        <detaileddescription>
<para>An assertion is triggered if the PRACH preamble format is not long.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>PRACH preamble format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PRACH preamble information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/prach/prach_preamble_information.h" line="41" column="28" bodyfile="lib/ran/prach/prach_preamble_information.cpp" bodystart="15" bodyend="45" declfile="include/srsgnb/ran/prach/prach_preamble_information.h" declline="41" declcolumn="28"/>
        <references refid="classsrsgnb_1_1phy__time__unit_1ac4e440469aa865f3f67323e42b73faf5" compoundref="phy__time__unit_8h" startline="137" endline="140">srsgnb::phy_time_unit::from_units_of_kappa</references>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__processor__worker_1ac99ed39908cafc0087e913bc81452ff2" compoundref="prach__processor__worker_8cpp" startline="100" endline="120">srsgnb::prach_processor_worker::handle_request</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__detector__simple__impl_1af439ed4a39c98d672be9afd14d863f3a" compoundref="prach__detector__simple__impl_8cpp" startline="22" endline="117">srsgnb::prach_detector_simple_impl::detect</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a13fe5fae9c13dcc053b85385b1ea2463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1sch__mcs__description" kindref="compound">sch_mcs_description</ref></type>
        <definition>sch_mcs_description srsgnb::pusch_mcs_get_config</definition>
        <argsstring>(pusch_mcs_table table, sch_mcs_index index, bool tp_pi2bpsk_present)</argsstring>
        <name>pusch_mcs_get_config</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6" kindref="member">pusch_mcs_table</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1ae3fb8f3d5f93d2f5e54c48697b708d53" kindref="member">sch_mcs_index</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tp_pi2bpsk_present</declname>
        </param>
        <briefdescription>
<para>Gets the Modulation and Coding Scheme configuration for PUSCH. </para>
        </briefdescription>
        <detaileddescription>
<para>Reserved target code rates and spectral efficiencies are indicated with zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">table</parametername>
</parameternamelist>
<parameterdescription>
<para>MCS table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>MCS index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tp_pi2bpsk_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if higher layer parameter <emphasis>tp-pi2BPSK</emphasis> is enabled. See TS38.331 Section 6.3.2 Information Element <emphasis>PUSCH-Config</emphasis> for more information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulation and Coding Scheme parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/pusch/pusch_mcs.h" line="43" column="21" bodyfile="lib/ran/pusch/pusch_mcs.cpp" bodystart="17" bodyend="78" declfile="include/srsgnb/ran/pusch/pusch_mcs.h" declline="43" declcolumn="21"/>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a68b5dd822c6ef8ad44f98f56dfbe016e">PI_2_BPSK</references>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a4539d029e1781f9347b6d7d173c04a6a">QPSK</references>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a03029a441fe46ebecd2135ba5d8b330f">QAM16</references>
        <references refid="namespacesrsgnb_1a7dc7e5216033df2e1888688074e992b4a5e0dd7cb58cf81fd6bed561c7e4b351b">QAM64</references>
        <references refid="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6afe97d5927e34d78b68330ae92f2773cb">qam64</references>
        <references refid="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6ad6020165a82bfc26499c2cd4dd812255">qam256</references>
        <references refid="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6a6089420740a4993f5408855cd5ee74b4">qam64LowSe</references>
        <references refid="namespacesrsgnb_1a3e9b74a378fe34278fcb9800bad5194d" compoundref="pdsch__mcs_8cpp" startline="16" endline="70">pdsch_mcs_get_config</references>
        <references refid="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6ae67a1bbf00e52e178d4fbcea8a6e2d85">qam64_tp</references>
        <references refid="namespacesrsgnb_1a9c58d2e8814b1f455fd88adfdcf37ba6a4cd6920d953f5ddf0ca77cb1394e1848">qam64LowSe_tp</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aede2872e435490d81f52241b47f934a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned int srsgnb::ra_frequency_type1_get_riv</definition>
        <argsstring>(const ra_frequency_type1_configuration &amp;config)</argsstring>
        <name>ra_frequency_type1_get_riv</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1ra__frequency__type1__configuration" kindref="compound">ra_frequency_type1_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Calculates the resource indication value <formula id="142">$RIV$</formula> as per TS38.214 Section 5.1.2.2.2 for Downlink and Section 6.1.2.2 for Uplink. </para>
        </briefdescription>
        <detaileddescription>
<para>if <formula id="143">$(L_{RB} - 1) \leq \left \lfloor N_{BWP}^{size}/2 \right \rfloor$</formula>, then <linebreak/>
 <formula id="144">$RIV = N_{BWP}^{size}(L_{RBs}-1)+RB_{start}$</formula> <linebreak/>
 Otherwise, <linebreak/>
 <formula id="145">$RIV = N_{BWP}^{size}(N_{BWP}^{size}-L_{RBs}+1)+(N_{BWP}^{size}-1-RB_{start})$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_allocation/resource_allocation_frequency.h" line="52" column="10" bodyfile="lib/ran/resource_allocation/resource_allocation_frequency.cpp" bodystart="17" bodyend="26" declfile="include/srsgnb/ran/resource_allocation/resource_allocation_frequency.h" declline="52" declcolumn="10"/>
        <references refid="structsrsgnb_1_1ra__frequency__type1__configuration_1a4482a6284958fe9981d89003bacf683e" compoundref="resource__allocation__frequency_8h" startline="42">srsgnb::ra_frequency_type1_configuration::length_vrb</references>
        <references refid="structsrsgnb_1_1ra__frequency__type1__configuration_1a926cc8277f830e8ccf1c2f55dc2bea07" compoundref="resource__allocation__frequency_8h" startline="38">srsgnb::ra_frequency_type1_configuration::N_bwp_size</references>
        <references refid="structsrsgnb_1_1ra__frequency__type1__configuration_1a5b2168504b2c9fb9289026c047c2b5e8" compoundref="resource__allocation__frequency_8h" startline="40">srsgnb::ra_frequency_type1_configuration::start_vrb</references>
        <references refid="namespacesrsgnb_1ac429e8c0745823d3eafed02ef628d210" compoundref="sliv_8h" startline="33" endline="39">sliv_from_s_and_l</references>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa7f5ee78860e7768890012a950bb289c" compoundref="ra__scheduler_8cpp" startline="320" endline="410">srsgnb::ra_scheduler::fill_rar_grant</referencedby>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a9273e6714497a71a3b4fc86660e88727" compoundref="sib__scheduler_8cpp" startline="220" endline="274">srsgnb::sib1_scheduler::fill_sib1_grant</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a4fbe94989d8f0440fd0ed62a158a872c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1ra__frequency__type1__configuration" kindref="compound">ra_frequency_type1_configuration</ref></type>
        <definition>ra_frequency_type1_configuration srsgnb::ra_frequency_type1_from_riv</definition>
        <argsstring>(unsigned N_bwp_size, unsigned riv)</argsstring>
        <name>ra_frequency_type1_from_riv</name>
        <param>
          <type>unsigned</type>
          <declname>N_bwp_size</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>riv</declname>
        </param>
        <briefdescription>
<para>Calculates the PRBs from <formula id="142">$RIV$</formula> as per TS 38.214 Section 5.1.2.2.2 for Downlink and Section 6.1.2.2 for Uplink. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_allocation/resource_allocation_frequency.h" line="56" column="34" bodyfile="lib/ran/resource_allocation/resource_allocation_frequency.cpp" bodystart="28" bodyend="34" declfile="include/srsgnb/ran/resource_allocation/resource_allocation_frequency.h" declline="56" declcolumn="34"/>
        <references refid="structsrsgnb_1_1ra__frequency__type1__configuration_1a926cc8277f830e8ccf1c2f55dc2bea07" compoundref="resource__allocation__frequency_8h" startline="38">srsgnb::ra_frequency_type1_configuration::N_bwp_size</references>
        <references refid="namespacesrsgnb_1a576337bdf10c37dbb564e109cc5ea094" compoundref="sliv_8h" startline="14" endline="26">sliv_to_s_and_l</references>
        <references refid="structsrsgnb_1_1ra__frequency__type1__configuration_1a5b2168504b2c9fb9289026c047c2b5e8" compoundref="resource__allocation__frequency_8h" startline="40">srsgnb::ra_frequency_type1_configuration::start_vrb</references>
        <references refid="structsrsgnb_1_1ra__frequency__type1__configuration_1a4482a6284958fe9981d89003bacf683e" compoundref="resource__allocation__frequency_8h" startline="42">srsgnb::ra_frequency_type1_configuration::length_vrb</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa574eda2f648c7f69c3f4579ba922d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::ra_frequency_type1_special_get_riv</definition>
        <argsstring>(const ra_frequency_type1_special_configuration &amp;config)</argsstring>
        <name>ra_frequency_type1_special_get_riv</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1ra__frequency__type1__special__configuration" kindref="compound">ra_frequency_type1_special_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Calculates the resource indication value <formula id="142">$RIV$</formula> for special cases as per TS38.214 Section 5.1.2.2.2 for Downlink and Section 6.1.2.2 for Uplink. </para>
        </briefdescription>
        <detaileddescription>
<para>if <formula id="146">$(L&apos;_{RB} - 1) \leq \left \lfloor N_{BWP}^{initial}/2 \right \rfloor$</formula>, then <linebreak/>
 <formula id="147">$RIV = N_{BWP}^{initial}(L&apos;_{RBs}-1)+RB&apos;_{start}$</formula> <linebreak/>
 Otherwise, <linebreak/>
 <formula id="148">$RIV = N_{BWP}^{initial}(N_{BWP}^{initial}-L&apos;_{RBs}+1)+(N_{BWP}^{initial}-1-RB&apos;_{start})$</formula>. <linebreak/>
 Where <formula id="149">$L&apos;_{RB}=L_{RB}/K$</formula>, <formula id="150">$RB&apos;_{start}=RB_{start}/K$</formula>. <linebreak/>
 if <formula id="151">$N_{BWP}^{active}&gt;N_{BWP}^{initial}$</formula> then <formula id="152">$K$</formula> is the maximum value from set {1,2,4,8} which satisfies <formula id="153">$K \leq \left \lfloor N_{BWP}^{active}/ N_{BWP}^{initial}\right \rfloor$</formula>; otherwise <formula id="154">$K=1$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_allocation/resource_allocation_frequency.h" line="96" column="10" bodyfile="lib/ran/resource_allocation/resource_allocation_frequency.cpp" bodystart="36" bodyend="63" declfile="include/srsgnb/ran/resource_allocation/resource_allocation_frequency.h" declline="96" declcolumn="10"/>
        <references refid="structsrsgnb_1_1ra__frequency__type1__special__configuration_1a14790a67894f713d3a1fc8c1ece934f6" compoundref="resource__allocation__frequency_8h" startline="79">srsgnb::ra_frequency_type1_special_configuration::N_bwp_active</references>
        <references refid="structsrsgnb_1_1ra__frequency__type1__special__configuration_1ad0cdbe798f00664551e513629838fe6f" compoundref="resource__allocation__frequency_8h" startline="77">srsgnb::ra_frequency_type1_special_configuration::N_bwp_initial</references>
        <references refid="structsrsgnb_1_1ra__frequency__type1__special__configuration_1a3ab403e3a6e0f5913578593f504fa613" compoundref="resource__allocation__frequency_8h" startline="81">srsgnb::ra_frequency_type1_special_configuration::start_vrb</references>
        <references refid="structsrsgnb_1_1ra__frequency__type1__special__configuration_1a507fb491e8ab93c9ba13773ba6c14aa8" compoundref="resource__allocation__frequency_8h" startline="83">srsgnb::ra_frequency_type1_special_configuration::length_vrb</references>
        <references refid="namespacesrsgnb_1ac429e8c0745823d3eafed02ef628d210" compoundref="sliv_8h" startline="33" endline="39">sliv_from_s_and_l</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a76694b953cb532434be08c62256d2e30" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t srsgnb::get_rb_bw_khz</definition>
        <argsstring>(subcarrier_spacing scs)</argsstring>
        <name>get_rb_bw_khz</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <briefdescription>
<para>Compute RB bandwidth in kHz, based on the used numerology. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_block.h" line="26" column="30" bodyfile="include/srsgnb/ran/resource_block.h" bodystart="26" bodyend="29"/>
        <references refid="namespacesrsgnb_1ac7b08b474fef6046774e360d801bc753" compoundref="resource__block_8h" startline="23">NOF_SUBCARRIERS_PER_RB</references>
        <references refid="namespacesrsgnb_1a1e7bf788a6e1125670387568e03b4b89" compoundref="subcarrier__spacing_8h" startline="44" endline="48">scs_to_khz</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae467ab611d7a939790d1a60a39d8ae91" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t srsgnb::channel_bw_mhz_to_index</definition>
        <argsstring>(unsigned dl_bw_mhz)</argsstring>
        <name>channel_bw_mhz_to_index</name>
        <param>
          <type>unsigned</type>
          <declname>dl_bw_mhz</declname>
        </param>
        <briefdescription>
<para>Converts channel bandwidth in MHz to index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_block.h" line="32" column="30" bodyfile="include/srsgnb/ran/resource_block.h" bodystart="32" bodyend="69"/>
        <referencedby refid="namespacesrsgnb_1ae9c85b3cfd1056d71a69d9e88b7a5778" compoundref="resource__block_8h" startline="73" endline="112">get_max_Nprb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae9c85b3cfd1056d71a69d9e88b7a5778" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t srsgnb::get_max_Nprb</definition>
        <argsstring>(unsigned dl_bw_mhz, subcarrier_spacing scs, frequency_range fr)</argsstring>
        <name>get_max_Nprb</name>
        <param>
          <type>unsigned</type>
          <declname>dl_bw_mhz</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11" kindref="member">frequency_range</ref></type>
          <declname>fr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the maximum transmission bandwidth in number of PRBs for a UE channel. <simplesect kind="remark"><para>See TS 38.101-1/2, 5.3.2 - Maximum transmission bandwidth configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/resource_block.h" line="73" column="20" bodyfile="include/srsgnb/ran/resource_block.h" bodystart="73" bodyend="112"/>
        <references refid="namespacesrsgnb_1a42dc3c5c246d71c1a24666323104431f" compoundref="subcarrier__spacing_8h" startline="25" endline="28">is_scs_valid</references>
        <references refid="namespacesrsgnb_1ae467ab611d7a939790d1a60a39d8ae91" compoundref="resource__block_8h" startline="32" endline="69">channel_bw_mhz_to_index</references>
        <references refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11a34d1cf1496d544eb35e3461a5235f7e9">FR1</references>
        <references refid="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" compoundref="subcarrier__spacing_8h" startline="38" endline="41">to_numerology_value</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1a3dc9170a28bf88f15f9d86371f031a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool srsgnb::is_crnti</definition>
        <argsstring>(rnti_t rnti)</argsstring>
        <name>is_crnti</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
          <declname>rnti</declname>
        </param>
        <briefdescription>
<para>Checks whether RNTI value corresponds to a C-RNTI value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/rnti.h" line="32" column="16" bodyfile="include/srsgnb/ran/rnti.h" bodystart="32" bodyend="35"/>
        <referencedby refid="classsrsgnb_1_1mac__ul__ue__manager_1a968072d9c55e66562e44ad0b68bfca7d" compoundref="mac__ul__ue__manager_8h" startline="52" endline="69">srsgnb::mac_ul_ue_manager::add_ue</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a061fb0d6bbe0a7462c555854c5dace03" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
        <definition>constexpr rnti_t srsgnb::to_rnti</definition>
        <argsstring>(std::underlying_type_t&lt; rnti_t &gt; number)</argsstring>
        <name>to_rnti</name>
        <param>
          <type>std::underlying_type_t&lt; <ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref> &gt;</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Converts integer to RNTI value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/rnti.h" line="38" column="18" bodyfile="include/srsgnb/ran/rnti.h" bodystart="38" bodyend="41"/>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1f1ap__du__processor__adapter_1a88e55ee2587a0718b7922c20eeba863d" compoundref="f1ap__adapters_8h" startline="53" endline="63">srsgnb::srs_cu_cp::f1ap_du_processor_adapter::on_create_ue</referencedby>
        <referencedby refid="namespacesrsgnb_1aa98fde684570d7b2f5e839d417620312" compoundref="mac__ul__sch__pdu_8h" startline="71" endline="79">decode_crnti_ce</referencedby>
        <referencedby refid="classsrsgnb_1_1rnti__allocator_1ae64a1eeb639d9abe969d0b9f545c51fc" compoundref="rach__handler_8h" startline="26" endline="39">srsgnb::rnti_allocator::allocate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa2a2614e00742e1cd072be4818a328d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::sib1_rtx_periodicity_to_value</definition>
        <argsstring>(sib1_rtx_periodicity periodicity)</argsstring>
        <name>sib1_rtx_periodicity_to_value</name>
        <param>
          <type><ref refid="namespacesrsgnb_1aa59a88ee2c85e491520e511f6576f1ce" kindref="member">sib1_rtx_periodicity</ref></type>
          <declname>periodicity</declname>
        </param>
        <briefdescription>
<para>Converts the SIB1 periodicity property to its corresponding value in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/sib_configuration.h" line="20" column="17" bodyfile="include/srsgnb/ran/sib_configuration.h" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a576337bdf10c37dbb564e109cc5ea094" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void srsgnb::sliv_to_s_and_l</definition>
        <argsstring>(unsigned N, unsigned sliv, Integer &amp;S, Integer &amp;L)</argsstring>
        <name>sliv_to_s_and_l</name>
        <param>
          <type>unsigned</type>
          <declname>N</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>sliv</declname>
        </param>
        <param>
          <type>Integer &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>Integer &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Convert SLIV to start S and length L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sliv</parametername>
</parameternamelist>
<parameterdescription>
<para>An index giving a combination (jointly encoded) of start and length indicator (SLIV). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">S</parametername>
</parameternamelist>
<parameterdescription>
<para>Start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">L</parametername>
</parameternamelist>
<parameterdescription>
<para>Length. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/sliv.h" line="14" column="23" bodyfile="include/srsgnb/ran/sliv.h" bodystart="14" bodyend="26"/>
        <referencedby refid="namespacesrsgnb_1ad2ec6b5d29686ac0c48938c0a5356056" compoundref="ofdm__symbol__range_8h" startline="27" endline="32">sliv_to_ofdm_symbols</referencedby>
        <referencedby refid="namespacesrsgnb_1a4fbe94989d8f0440fd0ed62a158a872c" compoundref="resource__allocation__frequency_8cpp" startline="28" endline="34">ra_frequency_type1_from_riv</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac429e8c0745823d3eafed02ef628d210" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::sliv_from_s_and_l</definition>
        <argsstring>(unsigned N, unsigned S, unsigned L)</argsstring>
        <name>sliv_from_s_and_l</name>
        <param>
          <type>unsigned</type>
          <declname>N</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>S</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Convert start S and length L into SLIV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">S</parametername>
</parameternamelist>
<parameterdescription>
<para>Start symbols. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">L</parametername>
</parameternamelist>
<parameterdescription>
<para>Length. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index giving a combination (jointly encoded) of start symbols and length indicator (SLIV). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/sliv.h" line="33" column="27" bodyfile="include/srsgnb/ran/sliv.h" bodystart="33" bodyend="39"/>
        <referencedby refid="namespacesrsgnb_1aede2872e435490d81f52241b47f934a5" compoundref="resource__allocation__frequency_8cpp" startline="17" endline="26">ra_frequency_type1_get_riv</referencedby>
        <referencedby refid="namespacesrsgnb_1aa574eda2f648c7f69c3f4579ba922d2b" compoundref="resource__allocation__frequency_8cpp" startline="36" endline="63">ra_frequency_type1_special_get_riv</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad79a6f6d548c4b749f48ba10f9baffa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::operator+</definition>
        <argsstring>(slot_point slot, Integer jump)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>slot</declname>
        </param>
        <param>
          <type>Integer</type>
          <declname>jump</declname>
        </param>
        <briefdescription>
<para>Sum and subtraction operations between <ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref> types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="213" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="213" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7e53de799a5c83e0bf1572138dd80b25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::operator+</definition>
        <argsstring>(uint32_t jump, slot_point slot)</argsstring>
        <name>operator+</name>
        <param>
          <type>uint32_t</type>
          <declname>jump</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="219" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a827e9ea33ccef3946ef05fcfa964b875" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::operator+</definition>
        <argsstring>(int jump, slot_point slot)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
          <declname>jump</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="224" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae1a48f02da15d77d661d845fd083f9a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::operator-</definition>
        <argsstring>(slot_point slot, uint32_t jump)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>slot</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>jump</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="229" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae37d22e8ba311a875c9afc3316415f0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::operator-</definition>
        <argsstring>(slot_point slot, int jump)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>slot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jump</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="234" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7ed8cdcaf2365ffedb551d855a288426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::max</definition>
        <argsstring>(slot_point lhs, slot_point rhs)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Get maximum of two slot points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="241" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac068925d01a7d6fbf98915f0521bd73c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::min</definition>
        <argsstring>(slot_point lhs, slot_point rhs)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Get minimum of two slot points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="247" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac7af21fff7f536782c70d0eb0fd09b47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
        <definition>slot_point srsgnb::set_slot_numerology</definition>
        <argsstring>(slot_point sl, unsigned new_numerology)</argsstring>
        <name>set_slot_numerology</name>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>sl</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>new_numerology</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a slot point to another numerology. This function applies a &quot;floor&quot; operation when the new numerology is lower than the old one. E.g. Given two numerologies mu1 and mu2, where m1 &lt; m2, this conversion function &quot;f&quot; will always ensure that, for a slot t1 with m1 numerology, the condition &quot;f(f(t1, mu2), m1) &lt;= t1&quot; is satisfied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/slot_point.h" line="258" column="19" bodyfile="include/srsgnb/ran/slot_point.h" bodystart="258" bodyend="268"/>
        <references refid="classsrsgnb_1_1slot__point_1a7a7cfffb183af6291f83ab1d12ac37d6" compoundref="slot__point_8h" startline="86" endline="86">srsgnb::slot_point::numerology</references>
        <referencedby refid="namespacesrsgnb_1a06984d7256480a44cd46842d6f5faedd" compoundref="cell__configuration_8cpp" startline="24" endline="46">slot_is_dl</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a46fada6faf5d18b183d1c3b2fac898ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::ssb_get_l_first</definition>
        <argsstring>(ssb_pattern_case pattern_case, unsigned ssb_idx)</argsstring>
        <name>ssb_get_l_first</name>
        <param>
          <type><ref refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ff" kindref="member">ssb_pattern_case</ref></type>
          <declname>pattern_case</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>ssb_idx</declname>
        </param>
        <briefdescription>
<para>Calculates the first OFDM symbol in a 5ms SS/PBCH block burst. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pattern_case</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the pattern </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssb_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the SS/PBCH block opportunity index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the first OFDM symbol index in a half-frame </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_mapping.h" line="29" column="17" bodyfile="include/srsgnb/ran/ssb_mapping.h" bodystart="29" bodyend="81"/>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa7fc56270e7a70fa81a5935b72eacbe29">A</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa9d5ed678fe57bcca610140957afab571">B</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa0d61f8370cad1d412f80b84d143e1257">C</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffaf623e75af30e62bbd73d6df5b50bb7b5">D</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa3a3ea00cfc35332cedf6e5e9a32e94da">E</references>
        <referencedby refid="classsrsgnb_1_1ssb__processor__impl_1a2c563b7416c71aeb7d08be55e0194726" compoundref="ssb__processor__impl_8cpp" startline="17" endline="95">srsgnb::ssb_processor_impl::process</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae54949545c17d2fdbb763dbf097adffe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::ssb_get_k_first</definition>
        <argsstring>(frequency_range fr, subcarrier_spacing ssb_scs, subcarrier_spacing common_scs, ssb_offset_to_pointA offset_to_pointA, ssb_subcarrier_offset subcarrier_offset)</argsstring>
        <name>ssb_get_k_first</name>
        <param>
          <type><ref refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11" kindref="member">frequency_range</ref></type>
          <declname>fr</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>ssb_scs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>common_scs</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1ssb__offset__to__pointA" kindref="compound">ssb_offset_to_pointA</ref></type>
          <declname>offset_to_pointA</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1ssb__subcarrier__offset" kindref="compound">ssb_subcarrier_offset</ref></type>
          <declname>subcarrier_offset</declname>
        </param>
        <briefdescription>
<para>Calculates the position of the first SS/PBCH block subcarrier relative to Point A. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is expressed in units of subcarriers of SS/PBCH block SCS <computeroutput>ssb_scs</computeroutput> assuming that:<itemizedlist>
<listitem><para>the lowest subcarrier of the resource grid overlaps with Point A, and</para>
</listitem><listitem><para>the resource grid SCS matches the SS/PBCH block SCS.</para>
</listitem></itemizedlist>
</para>
<para>In other words, it is not possible to determine an SS/PBCH block position in the grid if the SS/PBCH block subcarrier offset does not match the position of the resource grid subcarriers. Because of this, the parameters must result in an integer subcarrier index of the SS/PBCH block SCS.</para>
<para>Assertions are triggered if:<itemizedlist>
<listitem><para>the provided SS/PBCH SCS and frequency range combination is invalid, or</para>
</listitem><listitem><para>the result would point to a non-integer subcarrier index.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fr</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssb_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>SS/PBCH block subcarrier spacing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">common_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>Higher layer parameter <emphasis>subCarrierSpacingCommon</emphasis> as per TS38.331 <emphasis>MIB</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset_to_pointA</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset to Point A (see <ref refid="classsrsgnb_1_1ssb__offset__to__pointA" kindref="compound">here</ref> for more information). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcarrier_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Subcarrier offset (see <ref refid="classsrsgnb_1_1ssb__subcarrier__offset" kindref="compound">here</ref> for more information). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the lowest subcarrier of the SS/PBCH block. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_mapping.h" line="103" column="17" bodyfile="include/srsgnb/ran/ssb_mapping.h" bodystart="103" bodyend="158"/>
        <references refid="namespacesrsgnb_1a42dc3c5c246d71c1a24666323104431f" compoundref="subcarrier__spacing_8h" startline="25" endline="28">is_scs_valid</references>
        <references refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11a34d1cf1496d544eb35e3461a5235f7e9">FR1</references>
        <references refid="namespacesrsgnb_1a1e7bf788a6e1125670387568e03b4b89" compoundref="subcarrier__spacing_8h" startline="44" endline="48">scs_to_khz</references>
        <references refid="classsrsgnb_1_1bounded__integer_1ab792fb5e45a4d90b0e264b12759c5c4c" compoundref="bounded__integer_8h" startline="57" endline="57">srsgnb::bounded_integer&lt; Integer, MIN_VALUE, MAX_VALUE &gt;::is_valid</references>
        <references refid="classsrsgnb_1_1ssb__subcarrier__offset_1aa7250eaa3a999ec2cdcf967fea65b0b7" compoundref="ssb__properties_8h" startline="145" endline="145">srsgnb::ssb_subcarrier_offset::is_valid</references>
        <references refid="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" compoundref="constants_8h" startline="19">NRE</references>
        <referencedby refid="classsrsgnb_1_1ssb__processor__impl_1a2c563b7416c71aeb7d08be55e0194726" compoundref="ssb__processor__impl_8cpp" startline="17" endline="95">srsgnb::ssb_processor_impl::process</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad39f8ccde355456fcb4551782c6667fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ff" kindref="member">ssb_pattern_case</ref></type>
        <definition>ssb_pattern_case srsgnb::ssb_get_ssb_pattern</definition>
        <argsstring>(subcarrier_spacing ssb_scs, unsigned dl_arfcn)</argsstring>
        <name>ssb_get_ssb_pattern</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>ssb_scs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dl_arfcn</declname>
        </param>
        <briefdescription>
<para>Calculates SSB pattern from SSB subcarrier spacing and DL ARFCN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_mapping.h" line="161" column="18" bodyfile="lib/ran/ssb_mapping.cpp" bodystart="18" bodyend="23" declfile="include/srsgnb/ran/ssb_mapping.h" declline="161" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7f7ec59d8d3f9673c93e64a209e9c9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t srsgnb::ssb_get_L_max</definition>
        <argsstring>(subcarrier_spacing ssb_scs, unsigned dl_arfcn)</argsstring>
        <name>ssb_get_L_max</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>ssb_scs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dl_arfcn</declname>
        </param>
        <briefdescription>
<para>Calculates L_max, ie max number of SSB occasions per SSB period. Possible values are {4, 8, 64}. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>See TS 38.213, Section 4.1. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssb_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>SSB Subcarrier Spacing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dl_arfcn</parametername>
</parameternamelist>
<parameterdescription>
<para>DL ARFCN. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>L_max value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_mapping.h" line="168" column="9" bodyfile="lib/ran/ssb_mapping.cpp" bodystart="25" bodyend="51" declfile="include/srsgnb/ran/ssb_mapping.h" declline="168" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2bf4f99a684cd938e06186dff57d7aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
        <definition>crb_interval srsgnb::get_ssb_crbs</definition>
        <argsstring>(subcarrier_spacing ssb_scs, subcarrier_spacing scs_common, ssb_offset_to_pointA offset_to_pA, ssb_subcarrier_offset k_ssb)</argsstring>
        <name>get_ssb_crbs</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>ssb_scs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs_common</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1ssb__offset__to__pointA" kindref="compound">ssb_offset_to_pointA</ref></type>
          <declname>offset_to_pA</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1ssb__subcarrier__offset" kindref="compound">ssb_subcarrier_offset</ref></type>
          <declname>k_ssb</declname>
        </param>
        <briefdescription>
<para>Calculate the CRBs (with reference to SCS common grid) where the SSB is allocated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ssb_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>is the SSB Sub-Carrier Spacing, as per TS 38.213, Section 4.1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scs_common</parametername>
</parameternamelist>
<parameterdescription>
<para>is the Sub-Carrier Spacing of the Initial DL BWP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset_to_pA</parametername>
</parameternamelist>
<parameterdescription>
<para>is the OffsetToPointA, , as per TS 38.211, Section 4.4.4.2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">k_ssb</parametername>
</parameternamelist>
<parameterdescription>
<para>is the SSB subcarrier offset, or k_ssb, as per TS 38.211, Section 7.4.3.1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CRB interval (with reference to SCS common grid) where the SSB is allocated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_mapping.h" line="176" column="14" bodyfile="lib/ran/ssb_mapping.cpp" bodystart="53" bodyend="78" declfile="include/srsgnb/ran/ssb_mapping.h" declline="176" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a68bf38c281ace99aa904480dcb767cd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::ssb_periodicity_to_value</definition>
        <argsstring>(ssb_periodicity periodicity)</argsstring>
        <name>ssb_periodicity_to_value</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a85f1dc76050db70b4f4d2d407579445c" kindref="member">ssb_periodicity</ref></type>
          <declname>periodicity</declname>
        </param>
        <briefdescription>
<para>Converts the SSB periodicity property to its corresponding value in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_properties.h" line="24" column="17" bodyfile="include/srsgnb/ran/ssb_properties.h" bodystart="24" bodyend="27"/>
        <referencedby refid="namespacesrsgnb_1a7b61af2239baf4702a09b33f3c499532" compoundref="ssb__scheduler_8cpp" startline="165" endline="209">schedule_ssb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1adaa204fd7dac2de5291d90e88510471c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
        <definition>subcarrier_spacing srsgnb::to_subcarrier_spacing</definition>
        <argsstring>(ssb_pattern_case pattern_case)</argsstring>
        <name>to_subcarrier_spacing</name>
        <param>
          <type><ref refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ff" kindref="member">ssb_pattern_case</ref></type>
          <declname>pattern_case</declname>
        </param>
        <briefdescription>
<para>Returns the subcarrier spacing corresponding to an SS/PBCH block pattern. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_properties.h" line="49" column="27" bodyfile="include/srsgnb/ran/ssb_properties.h" bodystart="49" bodyend="65"/>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa7fc56270e7a70fa81a5935b72eacbe29">A</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa9d5ed678fe57bcca610140957afab571">B</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa0d61f8370cad1d412f80b84d143e1257">C</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffaf623e75af30e62bbd73d6df5b50bb7b5">D</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa3a3ea00cfc35332cedf6e5e9a32e94da">E</references>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__modulator__impl_1ae31bb9b40eed78f1cb23270fbdea3433" compoundref="ofdm__modulator__impl_8cpp" startline="102" endline="126">srsgnb::ofdm_slot_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ssb__processor__impl_1a2c563b7416c71aeb7d08be55e0194726" compoundref="ssb__processor__impl_8cpp" startline="17" endline="95">srsgnb::ssb_processor_impl::process</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7c3b612621baac4a432056ae08c1f7e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11" kindref="member">frequency_range</ref></type>
        <definition>frequency_range srsgnb::to_frequency_range</definition>
        <argsstring>(ssb_pattern_case pattern_case)</argsstring>
        <name>to_frequency_range</name>
        <param>
          <type><ref refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ff" kindref="member">ssb_pattern_case</ref></type>
          <declname>pattern_case</declname>
        </param>
        <briefdescription>
<para>Returns the frequency range corresponding to an SS/PBCH block pattern. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/ssb_properties.h" line="68" column="24" bodyfile="include/srsgnb/ran/ssb_properties.h" bodystart="68" bodyend="76"/>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffafedb2d84cafe20862cb4399751a8a7e3">invalid</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffaf623e75af30e62bbd73d6df5b50bb7b5">D</references>
        <references refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11a34d1cf1496d544eb35e3461a5235f7e9">FR1</references>
        <references refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11afa5a56762dde2d741e3330d4f018ee38">FR2</references>
        <referencedby refid="classsrsgnb_1_1ssb__processor__impl_1a2c563b7416c71aeb7d08be55e0194726" compoundref="ssb__processor__impl_8cpp" startline="17" endline="95">srsgnb::ssb_processor_impl::process</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a42dc3c5c246d71c1a24666323104431f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool srsgnb::is_scs_valid</definition>
        <argsstring>(subcarrier_spacing scs)</argsstring>
        <name>is_scs_valid</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <briefdescription>
<para>Check if SCS value is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="25" column="23" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="25" bodyend="28"/>
        <referencedby refid="namespacesrsgnb_1ae9c85b3cfd1056d71a69d9e88b7a5778" compoundref="resource__block_8h" startline="73" endline="112">get_max_Nprb</referencedby>
        <referencedby refid="namespacesrsgnb_1ae54949545c17d2fdbb763dbf097adffe" compoundref="ssb__mapping_8h" startline="103" endline="158">ssb_get_k_first</referencedby>
        <referencedby refid="namespacesrsgnb_1a117fa3309c0bf25f194490cff6bc3185" compoundref="subcarrier__spacing_8h" startline="31" endline="35">is_scs_valid</referencedby>
        <referencedby refid="namespacesrsgnb_1a1e7bf788a6e1125670387568e03b4b89" compoundref="subcarrier__spacing_8h" startline="44" endline="48">scs_to_khz</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a117fa3309c0bf25f194490cff6bc3185" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool srsgnb::is_scs_valid</definition>
        <argsstring>(subcarrier_spacing scs, frequency_range fr)</argsstring>
        <name>is_scs_valid</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11" kindref="member">frequency_range</ref></type>
          <declname>fr</declname>
        </param>
        <briefdescription>
<para>Checks whether the provided SCS<ndash/>FR pair is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="31" column="23" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="31" bodyend="35"/>
        <references refid="namespacesrsgnb_1a42dc3c5c246d71c1a24666323104431f" compoundref="subcarrier__spacing_8h" startline="25" endline="28">is_scs_valid</references>
        <references refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11afa5a56762dde2d741e3330d4f018ee38">FR2</references>
        <references refid="namespacesrsgnb_1ae51e11d1cd0a0d99d339b43e798a3f11a34d1cf1496d544eb35e3461a5235f7e9">FR1</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::to_numerology_value</definition>
        <argsstring>(subcarrier_spacing scs)</argsstring>
        <name>to_numerology_value</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <briefdescription>
<para>Convert SCS to numerology index ( <formula id="5">$\mu$</formula>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="38" column="27" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="38" bodyend="41"/>
        <referencedby refid="classsrsgnb_1_1cyclic__prefix_1a29ba774a74dff3237823f4129e962e28" compoundref="cyclic__prefix_8h" startline="65" endline="78">srsgnb::cyclic_prefix::is_valid</referencedby>
        <referencedby refid="classsrsgnb_1_1cyclic__prefix_1a912612f8fa115e0924099fd22a718ac6" compoundref="cyclic__prefix_8h" startline="84" endline="95">srsgnb::cyclic_prefix::get_length</referencedby>
        <referencedby refid="classsrsgnb_1_1phy__time__unit_1a61391ed7d44d3aae421439e8aad97e39" compoundref="phy__time__unit_8h" startline="103" endline="106">srsgnb::phy_time_unit::to_Ta</referencedby>
        <referencedby refid="namespacesrsgnb_1ae9c85b3cfd1056d71a69d9e88b7a5778" compoundref="resource__block_8h" startline="73" endline="112">get_max_Nprb</referencedby>
        <referencedby refid="namespacesrsgnb_1a1e7bf788a6e1125670387568e03b4b89" compoundref="subcarrier__spacing_8h" startline="44" endline="48">scs_to_khz</referencedby>
        <referencedby refid="namespacesrsgnb_1a853ffff2923ec0ef765ff70bace76422" compoundref="subcarrier__spacing_8h" startline="57" endline="60">get_nof_slots_per_subframe</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi__adaptor_1_1fapi__to__mac__time__msg__translator_1a6e5eeea2729ecf08e324e4e4a3eed790" compoundref="fapi__to__mac__time__msg__translator_8cpp" startline="40" endline="46">srsgnb::fapi_adaptor::fapi_to_mac_time_msg_translator::on_slot_indication</referencedby>
        <referencedby refid="classlower__phy__factory__generic_1aa1153a3215d75d07a13d3b22fe074956" compoundref="lower__phy__factory_8cpp" startline="35" endline="81">lower_phy_factory_generic::create</referencedby>
        <referencedby refid="classsrsgnb_1_1processor__pool__repository_1aca44acb737536eb2cfbab929ef718527" compoundref="processor__pool__helpers_8h" startline="54" endline="63">srsgnb::processor_pool_repository&lt; T &gt;::insert</referencedby>
        <referencedby refid="namespacesrsgnb_1a06984d7256480a44cd46842d6f5faedd" compoundref="cell__configuration_8cpp" startline="24" endline="46">slot_is_dl</referencedby>
        <referencedby refid="structsrsgnb_1_1cell__resource__allocator_1aaabf70a4007c1e2983668e0351824d57" compoundref="resource__grid_8cpp" startline="220" endline="237">srsgnb::cell_resource_allocator::slot_indication</referencedby>
        <referencedby refid="namespacesrsgnb_1a890506b2184eacc8a9091b7349eda0bf" compoundref="ra__scheduler_8cpp" startline="21" endline="35">get_msg3_delay</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1e7bf788a6e1125670387568e03b4b89" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::scs_to_khz</definition>
        <argsstring>(subcarrier_spacing scs)</argsstring>
        <name>scs_to_khz</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <briefdescription>
<para>Converts SCS into integer in kHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="44" column="27" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="44" bodyend="48"/>
        <references refid="namespacesrsgnb_1a42dc3c5c246d71c1a24666323104431f" compoundref="subcarrier__spacing_8h" startline="25" endline="28">is_scs_valid</references>
        <references refid="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" compoundref="subcarrier__spacing_8h" startline="38" endline="41">to_numerology_value</references>
        <referencedby refid="classsrsgnb_1_1sampling__rate_1aaaf5a287cf943a68feee6392e425370c" compoundref="sampling__rate_8h" startline="52" endline="52">srsgnb::sampling_rate::is_valid</referencedby>
        <referencedby refid="classsrsgnb_1_1sampling__rate_1abde3f93b5960c97499480079a941c3d1" compoundref="sampling__rate_8h" startline="74" endline="74">srsgnb::sampling_rate::get_dft_size</referencedby>
        <referencedby refid="namespacesrsgnb_1a5d89e9478de57d421e8cead9b15e4e8a" compoundref="phy__time__unit_8h" startline="161" endline="165">to_sampling_rate_Hz</referencedby>
        <referencedby refid="namespacesrsgnb_1a76694b953cb532434be08c62256d2e30" compoundref="resource__block_8h" startline="26" endline="29">get_rb_bw_khz</referencedby>
        <referencedby refid="namespacesrsgnb_1ae54949545c17d2fdbb763dbf097adffe" compoundref="ssb__mapping_8h" startline="103" endline="158">ssb_get_k_first</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1a611885bc9c46a7a14ee646b97c39af0d" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="143" endline="176">srsgnb::srs_du::ssb_freq_position_generator::find_M_raster</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1ssb__freq__position__generator_1a1dbb01e4b3fba247beb7c44a8471053f" compoundref="ssb__coreset0__freq__pos__generator_8cpp" startline="178" endline="224">srsgnb::srs_du::ssb_freq_position_generator::get_next_ssb_location</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1acfc1edc79e5e564998fec17482f4aa46" compoundref="ofdm__demodulator__impl_8cpp" startline="61" endline="101">srsgnb::ofdm_symbol_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__modulator__impl_1a1cff8fbd637007a914121b91a99affc9" compoundref="ofdm__modulator__impl_8cpp" startline="43" endline="87">srsgnb::ofdm_symbol_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1phase__compensation__lut_1ae37a449b492ec3f4d1280844c108faae" compoundref="phase__compensation__lut_8h" startline="37" endline="71">srsgnb::phase_compensation_lut::phase_compensation_lut</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac4141fc052f14c48cfd121212c9b07e2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
        <definition>constexpr subcarrier_spacing srsgnb::to_subcarrier_spacing</definition>
        <argsstring>(unsigned numerology)</argsstring>
        <name>to_subcarrier_spacing</name>
        <param>
          <type>unsigned</type>
          <declname>numerology</declname>
        </param>
        <briefdescription>
<para>Convert numerology index ( <formula id="5">$\mu$</formula>) to SCS. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="51" column="37" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a853ffff2923ec0ef765ff70bace76422" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::get_nof_slots_per_subframe</definition>
        <argsstring>(subcarrier_spacing scs)</argsstring>
        <name>get_nof_slots_per_subframe</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <briefdescription>
<para>Calculates number of slots per subframe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/subcarrier_spacing.h" line="57" column="27" bodyfile="include/srsgnb/ran/subcarrier_spacing.h" bodystart="57" bodyend="60"/>
        <references refid="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" compoundref="subcarrier__spacing_8h" startline="38" endline="41">to_numerology_value</references>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__modulator__impl_1ae31bb9b40eed78f1cb23270fbdea3433" compoundref="ofdm__modulator__impl_8cpp" startline="102" endline="126">srsgnb::ofdm_slot_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1phase__compensation__lut_1ae37a449b492ec3f4d1280844c108faae" compoundref="phase__compensation__lut_8h" startline="37" endline="71">srsgnb::phase_compensation_lut::phase_compensation_lut</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9b3b48c3433ab146e560cfc6819b0025" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t srsgnb::to_number</definition>
        <argsstring>(rlc_um_sn_size sn_size)</argsstring>
        <name>to_number</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a025e5cc1228682e3e9accdef0914a93c" kindref="member">rlc_um_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="25" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa53439efa37579e37b15e9551a717a46" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t srsgnb::to_number</definition>
        <argsstring>(rlc_am_sn_size sn_size)</argsstring>
        <name>to_number</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241" kindref="member">rlc_am_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
<para>Converts sequence number field to numeric its value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sn_size</parametername>
</parameternamelist>
<parameterdescription>
<para>sequence number size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>numeric value of the sequence number field </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="36" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1eaed18b62e5e415ab28856a8b091e25" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::cardinality</definition>
        <argsstring>(uint16_t sn_size)</argsstring>
        <name>cardinality</name>
        <param>
          <type>uint16_t</type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
<para>Returns the value range of the sequence numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sn_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the sequence number field in bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cardinality of sn_size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="44" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="44" bodyend="48"/>
        <referencedby refid="namespacesrsgnb_1ad93ba81b397ec62192f1fa75e6540a0b" compoundref="rlc__config_8h" startline="54" endline="57">window_size</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad93ba81b397ec62192f1fa75e6540a0b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t srsgnb::window_size</definition>
        <argsstring>(uint16_t sn_size)</argsstring>
        <name>window_size</name>
        <param>
          <type>uint16_t</type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
<para>Returns the UM_Window_Size and AM_Window_Size Ref: 3GPP TS 38.322 Sec. 7.2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sn_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the sequence number field in bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of the window </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="54" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="54" bodyend="57"/>
        <references refid="namespacesrsgnb_1a1eaed18b62e5e415ab28856a8b091e25" compoundref="rlc__config_8h" startline="44" endline="48">cardinality</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5c40904970c5f5084875f69af9791777" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::to_number</definition>
        <argsstring>(rlc_dc_field dc)</argsstring>
        <name>to_number</name>
        <param>
          <type><ref refid="namespacesrsgnb_1af5169a4341a98afd81102cd0ba38e2e1" kindref="member">rlc_dc_field</ref></type>
          <declname>dc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="61" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9c561836679f88928d69047574160dda" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t srsgnb::to_number</definition>
        <argsstring>(rlc_si_field si_field)</argsstring>
        <name>to_number</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a0a246fa8059639a178e17af4df90c173" kindref="member">rlc_si_field</ref></type>
          <declname>si_field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="74" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a16b05c037db30721014c6ff57119ce93" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t srsgnb::to_number</definition>
        <argsstring>(rlc_control_pdu_type type)</argsstring>
        <name>to_number</name>
        <param>
          <type>rlc_control_pdu_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_config.h" line="80" column="20" bodyfile="include/srsgnb/rlc/rlc_config.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac87d79c7e4e66983c8ca505496b088ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1rlc__entity" kindref="compound">rlc_entity</ref> &gt;</type>
        <definition>std::unique_ptr&lt; rlc_entity &gt; srsgnb::create_rlc_entity</definition>
        <argsstring>(const rlc_entity_creation_message &amp;msg)</argsstring>
        <name>create_rlc_entity</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1rlc__entity__creation__message" kindref="compound">rlc_entity_creation_message</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Creates an instance of a RLC bearer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/rlc/rlc_factory.h" line="32" column="17" bodyfile="lib/rlc/rlc_factory.cpp" bodystart="18" bodyend="37" declfile="include/srsgnb/rlc/rlc_factory.h" declline="32" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a747892dbad0f34caf637f57aa4ec8c7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a66a5b6e7f9a3179978042eb82e981c65" kindref="member">search_space_id</ref></type>
        <definition>search_space_id srsgnb::to_search_space_id</definition>
        <argsstring>(unsigned ss_id)</argsstring>
        <name>to_search_space_id</name>
        <param>
          <type>unsigned</type>
          <declname>ss_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/bwp_configuration.h" line="34" column="24" bodyfile="include/srsgnb/scheduler/bwp_configuration.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3614e18e74ace047749548774655e342" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::is_search_space_valid</definition>
        <argsstring>(search_space_id ss_id)</argsstring>
        <name>is_search_space_valid</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a66a5b6e7f9a3179978042eb82e981c65" kindref="member">search_space_id</ref></type>
          <declname>ss_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/bwp_configuration.h" line="38" column="13" bodyfile="include/srsgnb/scheduler/bwp_configuration.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afc447f83dd82df9edfdc16a791329cc0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1ad4a1f149c8fe7de5f0d38f8cc58928d4" kindref="member">bwp_id_t</ref></type>
        <definition>constexpr bwp_id_t srsgnb::to_bwp_id</definition>
        <argsstring>(std::underlying_type_t&lt; bwp_id_t &gt; value)</argsstring>
        <name>to_bwp_id</name>
        <param>
          <type>std::underlying_type_t&lt; <ref refid="namespacesrsgnb_1ad4a1f149c8fe7de5f0d38f8cc58928d4" kindref="member">bwp_id_t</ref> &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts integer value to BWP-Id". </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/bwp_configuration.h" line="101" column="27" bodyfile="include/srsgnb/scheduler/bwp_configuration.h" bodystart="101" bodyend="104"/>
        <referencedby refid="classsrsgnb_1_1ue__cell__configuration_1ae922a931ac84afa77f38ac82f4b46d63" compoundref="ue__configuration_8h" startline="37" endline="43">srsgnb::ue_cell_configuration::get_dl_search_spaces</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a8c9d1b3a23e86bf6a6a7fa38bcc694b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::to_symbol_index</definition>
        <argsstring>(dmrs_typeA_position pos)</argsstring>
        <name>to_symbol_index</name>
        <param>
          <type><ref refid="namespacesrsgnb_1abb6ad055937d8532d1b9c7ea61354ab1" kindref="member">dmrs_typeA_position</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/dmrs.h" line="22" column="17" bodyfile="include/srsgnb/scheduler/dmrs.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af9eb59929925c7836f5fbe46415faa14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1aeb085d261a3b2f11c25da1e4596ef25f" kindref="member">prb_bitmap</ref> &amp;</type>
        <definition>prb_bitmap&amp; srsgnb::operator|=</definition>
        <argsstring>(prb_bitmap &amp;prb_bitmap, const prb_interval &amp;grant)</argsstring>
        <name>operator|=</name>
        <param>
          <type><ref refid="namespacesrsgnb_1aeb085d261a3b2f11c25da1e4596ef25f" kindref="member">prb_bitmap</ref> &amp;</type>
          <declname>prb_bitmap</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1prb__interval" kindref="compound">prb_interval</ref> &amp;</type>
          <declname>grant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/prb_grant.h" line="144" column="19" bodyfile="include/srsgnb/scheduler/prb_grant.h" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afabee33f3d756f808b6730caa4c30db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1aeb085d261a3b2f11c25da1e4596ef25f" kindref="member">prb_bitmap</ref></type>
        <definition>prb_bitmap srsgnb::convert_rbgs_to_prbs</definition>
        <argsstring>(const rbg_bitmap &amp;rbgs, crb_interval bwp_rbs, nominal_rbg_size P)</argsstring>
        <name>convert_rbgs_to_prbs</name>
        <param>
          <type>const <ref refid="namespacesrsgnb_1a1d9867efbcd5ea5779e082900fd4ec22" kindref="member">rbg_bitmap</ref> &amp;</type>
          <declname>rbgs</declname>
        </param>
        <param>
          <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
          <declname>bwp_rbs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94" kindref="member">nominal_rbg_size</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts RBG bitmap to PRB bitmap given a BWP PRB dimensions and the nominal RBG-size. <simplesect kind="remark"><para>See TS 38.214, Sections 5.1.2.2.1 and 6.1.2.2.1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/prb_grant.h" line="152" column="12" bodyfile="lib/scheduler/cell/prb_grant.cpp" bodystart="16" bodyend="34" declfile="include/srsgnb/scheduler/prb_grant.h" declline="152" declcolumn="12"/>
        <references refid="namespacesrsgnb_1a1d573d78fa3c2aebc1baedcee846603d" compoundref="resource__block__group_8cpp" startline="42" endline="54">get_rbg_size</references>
        <references refid="classsrsgnb_1_1interval_1afaa426e56c4e96208758552d97a7b43c" compoundref="interval_8h" startline="45" endline="45">srsgnb::interval&lt; T &gt;::length</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a8bb3b1a08877033b44f0c6ad6e076a16" compoundref="bounded__bitset_8h" startline="404" endline="404">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_lowest</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a7e3a54e061a9173d147eb8b202867fc5" compoundref="bounded__bitset_8h" startline="353" endline="364">srsgnb::bounded_bitset&lt; N, reversed &gt;::fill</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1abd0a40f79f69d5f9a63ff2eff48d925a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::to_nominal_rbg_size_value</definition>
        <argsstring>(nominal_rbg_size sz)</argsstring>
        <name>to_nominal_rbg_size_value</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94" kindref="member">nominal_rbg_size</ref></type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="26" column="17" bodyfile="include/srsgnb/scheduler/resource_block_group.h" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a859fc49bebb959bb234dcf245f21ce67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94" kindref="member">nominal_rbg_size</ref></type>
        <definition>nominal_rbg_size srsgnb::get_nominal_rbg_size</definition>
        <argsstring>(unsigned bwp_nof_prb, bool config_1_or_2)</argsstring>
        <name>get_nominal_rbg_size</name>
        <param>
          <type>unsigned</type>
          <declname>bwp_nof_prb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>config_1_or_2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates Nominal RBG size (P) based on the BWP number of PRBs and configuration type. <simplesect kind="remark"><para>See TS 38.214, Table 5.1.2.2.1-1 and 6.1.2.2.1-1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="36" column="18" bodyfile="lib/scheduler/cell/resource_block_group.cpp" bodystart="15" bodyend="28" declfile="include/srsgnb/scheduler/resource_block_group.h" declline="36" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3fd8bf9a94be3ee7dec8468f3226218e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::get_nof_rbgs</definition>
        <argsstring>(crb_interval bwp_rb_dims, nominal_rbg_size P)</argsstring>
        <name>get_nof_rbgs</name>
        <param>
          <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
          <declname>bwp_rb_dims</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94" kindref="member">nominal_rbg_size</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the total number of RBGs for a bandwidth part. <simplesect kind="remark"><para>See TS 38.214, Sections 5.1.2.2.1 and 6.1.2.2.1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="40" column="10" bodyfile="lib/scheduler/cell/resource_block_group.cpp" bodystart="30" bodyend="34" declfile="include/srsgnb/scheduler/resource_block_group.h" declline="40" declcolumn="10"/>
        <references refid="namespacesrsgnb_1a6026a6056e7f39c043a2bba26daab476" compoundref="math__utils_8h" startline="34" endline="38">divide_ceil</references>
        <references refid="classsrsgnb_1_1interval_1afaa426e56c4e96208758552d97a7b43c" compoundref="interval_8h" startline="45" endline="45">srsgnb::interval&lt; T &gt;::length</references>
        <referencedby refid="namespacesrsgnb_1a1d573d78fa3c2aebc1baedcee846603d" compoundref="resource__block__group_8cpp" startline="42" endline="54">get_rbg_size</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5dacf1e2b3c98ed92c27a53dc6959d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::get_nof_rbgs</definition>
        <argsstring>(crb_interval bwp_rb_dims, bool config1_or_2)</argsstring>
        <name>get_nof_rbgs</name>
        <param>
          <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
          <declname>bwp_rb_dims</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>config1_or_2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="41" column="10" bodyfile="lib/scheduler/cell/resource_block_group.cpp" bodystart="36" bodyend="40" declfile="include/srsgnb/scheduler/resource_block_group.h" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1d573d78fa3c2aebc1baedcee846603d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>unsigned srsgnb::get_rbg_size</definition>
        <argsstring>(crb_interval bwp_rbs, nominal_rbg_size P, uint32_t rbg_idx)</argsstring>
        <name>get_rbg_size</name>
        <param>
          <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
          <declname>bwp_rbs</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a4edad02a40b5f8ab55d34d7dc9e2eb94" kindref="member">nominal_rbg_size</ref></type>
          <declname>P</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rbg_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates size of indexed RBG in number of RBs. <simplesect kind="remark"><para>See TS 38.214, Sections 5.1.2.2.1 and 6.1.2.2.1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/resource_block_group.h" line="45" column="10" bodyfile="lib/scheduler/cell/resource_block_group.cpp" bodystart="42" bodyend="54" declfile="include/srsgnb/scheduler/resource_block_group.h" declline="45" declcolumn="10"/>
        <references refid="namespacesrsgnb_1a3fd8bf9a94be3ee7dec8468f3226218e" compoundref="resource__block__group_8cpp" startline="30" endline="34">get_nof_rbgs</references>
        <referencedby refid="namespacesrsgnb_1afabee33f3d756f808b6730caa4c30db5" compoundref="prb__grant_8cpp" startline="16" endline="34">convert_rbgs_to_prbs</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a66e90aca534d9468e4ca44cec8f44975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1mac__scheduler" kindref="compound">mac_scheduler</ref> &gt;</type>
        <definition>std::unique_ptr&lt; mac_scheduler &gt; srsgnb::create_scheduler</definition>
        <argsstring>(sched_configuration_notifier &amp;config_notifier)</argsstring>
        <name>create_scheduler</name>
        <param>
          <type><ref refid="classsrsgnb_1_1sched__configuration__notifier" kindref="compound">sched_configuration_notifier</ref> &amp;</type>
          <declname>config_notifier</declname>
        </param>
        <briefdescription>
<para>Create L2 scheduler object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/scheduler/scheduler_factory.h" line="18" column="17" bodyfile="lib/scheduler/scheduler_factory.cpp" bodystart="16" bodyend="19" declfile="include/srsgnb/scheduler/scheduler_factory.h" declline="18" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af79ff201c69347a031deef52bfe7d434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1sdap__entity" kindref="compound">sdap_entity</ref> &gt;</type>
        <definition>std::unique_ptr&lt; sdap_entity &gt; srsgnb::create_sdap_entity</definition>
        <argsstring>()</argsstring>
        <name>create_sdap_entity</name>
        <briefdescription>
<para>Creates an instance of a SDAP entity interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Factories are at a low level point of abstraction, as such, they are the &quot;only&quot; (best effort) objects that depend on concrete class implementations instead of interfaces, intrinsically giving them tight coupling to the objects being created. Keeping this coupling in a single file, is the best, as the rest of the code can be kept decoupled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/sdap/sdap_entity_factory.h" line="22" column="17" bodyfile="lib/sdap/sdap_entity_factory.cpp" bodystart="22" bodyend="25" declfile="include/srsgnb/sdap/sdap_entity_factory.h" declline="22" declcolumn="17"/>
        <referencedby refid="namespacesrsgnb_1a2c2a5cc2a7d1ec0878f4cc389e042dbb" compoundref="sdap__factory_8cpp" startline="24" endline="30">create_sdap</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2c2a5cc2a7d1ec0878f4cc389e042dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1sdap__pdu__handler" kindref="compound">sdap_pdu_handler</ref> &gt;</type>
        <definition>std::unique_ptr&lt; sdap_pdu_handler &gt; srsgnb::create_sdap</definition>
        <argsstring>(sdap_sdu_rx_notifier &amp;listener)</argsstring>
        <name>create_sdap</name>
        <param>
          <type><ref refid="classsrsgnb_1_1sdap__sdu__rx__notifier" kindref="compound">sdap_sdu_rx_notifier</ref> &amp;</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Creates an instance of a SDAP interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Factories are at a low level point of abstraction, as such, they are the &quot;only&quot; (best effort) objects that depend on concrete class implementations instead of interfaces, intrinsically giving them tight coupling to the objects being created. Keeping this coupling in a single file, is the best, as the rest of the code can be kept decoupled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/sdap/sdap_factory.h" line="23" column="17" bodyfile="lib/sdap/sdap_factory.cpp" bodystart="24" bodyend="30" declfile="include/srsgnb/sdap/sdap_factory.h" declline="23" declcolumn="17"/>
        <references refid="namespacesrsgnb_1af79ff201c69347a031deef52bfe7d434" compoundref="sdap__entity__factory_8cpp" startline="22" endline="25">create_sdap_entity</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a393e78c43d7ee8c8024aa86af1aa0082" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1coro__handle" kindref="compound">coro_handle</ref>&lt; <ref refid="structsrsgnb_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref> &gt;</type>
        <definition>coro_handle&lt;noop_coroutine_promise&gt; srsgnb::noop_coroutine</definition>
        <argsstring>() noexcept</argsstring>
        <name>noop_coroutine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="302" column="20" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="302" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9cd4c0eea90a43b866d5e318a46ad8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto srsgnb::launch_async</definition>
        <argsstring>(Args &amp;&amp;... args) -&gt; typename detail::future_of&lt; FunT &gt;</argsstring>
        <name>launch_async</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates coroutine frame and launches task if eager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="316" column="6" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="316" bodyend="320"/>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1f1ap__cu__impl_1afc92b2c46a4f724d8084ce9e6a1d6412" compoundref="f1ap__cu__impl_8cpp" startline="120" endline="143">srsgnb::srs_cu_cp::f1ap_cu_impl::handle_ue_context_setup_request</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1f1ap__cu__impl_1a3bad7dfa2fb3930ddbe7017b8dbbd0ae" compoundref="f1ap__cu__impl_8cpp" startline="146" endline="167">srsgnb::srs_cu_cp::f1ap_cu_impl::handle_ue_context_release_command</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1f1ap__cu__impl_1ab020e58aec5bb232a28beac56e5a3592" compoundref="f1ap__cu__impl_8cpp" startline="170" endline="194">srsgnb::srs_cu_cp::f1ap_cu_impl::handle_ue_context_modification</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1f1ap__du__impl_1ac5b989f1b44881f157309a2c6f54b056" compoundref="f1ap__du__impl_8cpp" startline="41" endline="59">srsgnb::srs_du::f1ap_du_impl::handle_ue_creation_request</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1f1ap__du__impl_1a0c3422bc000808f4944d3d59a37cb9f4" compoundref="f1ap__du__impl_8cpp" startline="68" endline="92">srsgnb::srs_du::f1ap_du_impl::handle_ue_context_modification</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__sched__config__adapter_1a5cc9355adf89c50a520efffd293fe485" compoundref="srs__sched__config__adapter_8h" startline="74" endline="87">srsgnb::srs_sched_config_adapter::handle_ue_deletion_request</referencedby>
        <referencedby refid="classsrsgnb_1_1mac__dl__processor_1a7308fd72a882c66984e6345109488be7" compoundref="mac__dl__processor_8cpp" startline="46" endline="62">srsgnb::mac_dl_processor::add_ue</referencedby>
        <referencedby refid="classsrsgnb_1_1mac__dl__processor_1aabf6cc32ec0ff42ddb9744d966c7d5ac" compoundref="mac__dl__processor_8cpp" startline="64" endline="80">srsgnb::mac_dl_processor::remove_ue</referencedby>
        <referencedby refid="classsrsgnb_1_1mac__dl__processor_1a3b2227698711d3cd1e384e581e4cd63e" compoundref="mac__dl__processor_8cpp" startline="82" endline="101">srsgnb::mac_dl_processor::reconfigure_ue</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac68670013e5674f791d31f16d00a8b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto srsgnb::launch_async</definition>
        <argsstring>(FunT &amp;&amp;f) -&gt; typename detail::future_of&lt; FunT &gt;</argsstring>
        <name>launch_async</name>
        <param>
          <type>FunT &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Creates coroutine frame and launches task if eager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/coroutine.h" line="324" column="6" bodyfile="include/srsgnb/support/async/coroutine.h" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a95e00024966fcec53c0981870b48f7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TaskExecutor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto srsgnb::execute_on</definition>
        <argsstring>(TaskExecutor &amp;exec)</argsstring>
        <name>execute_on</name>
        <param>
          <type>TaskExecutor &amp;</type>
          <declname>exec</declname>
        </param>
        <briefdescription>
<para>Awaiter that switches to execution context provided by given executor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/execute_on.h" line="20" column="6" bodyfile="include/srsgnb/support/async/execute_on.h" bodystart="20" bodyend="41"/>
        <referencedby refid="classsrsgnb_1_1mac__dl__processor_1a7308fd72a882c66984e6345109488be7" compoundref="mac__dl__processor_8cpp" startline="46" endline="62">srsgnb::mac_dl_processor::add_ue</referencedby>
        <referencedby refid="classsrsgnb_1_1mac__dl__processor_1aabf6cc32ec0ff42ddb9744d966c7d5ac" compoundref="mac__dl__processor_8cpp" startline="64" endline="80">srsgnb::mac_dl_processor::remove_ue</referencedby>
        <referencedby refid="classsrsgnb_1_1mac__dl__processor_1a3b2227698711d3cd1e384e581e4cd63e" compoundref="mac__dl__processor_8cpp" startline="82" endline="101">srsgnb::mac_dl_processor::reconfigure_ue</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa65f66c1cd001ebdc623023fd7fe0362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TaskExecutor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto srsgnb::defer_to</definition>
        <argsstring>(TaskExecutor &amp;exec)</argsstring>
        <name>defer_to</name>
        <param>
          <type>TaskExecutor &amp;</type>
          <declname>exec</declname>
        </param>
        <briefdescription>
<para>Awaiter that defers continuation to execution context provided by given executor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/execute_on.h" line="45" column="6" bodyfile="include/srsgnb/support/async/execute_on.h" bodystart="45" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a6c50fd07cd7570daaf6c8d6d2ca6aead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DispatchTaskExecutor</type>
          </param>
          <param>
            <type>typename ResumeTaskExecutor</type>
          </param>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename ResultType</type>
            <defval>detail::function_return_t&lt;decltype(&amp;std::decay_t&lt;Callable&gt;::operator())&gt;</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; not std::is_same&lt; ResultType, void &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto srsgnb::offload_to_executor</definition>
        <argsstring>(DispatchTaskExecutor &amp;dispatch_exec, ResumeTaskExecutor &amp;resume_exec, Callable &amp;&amp;callable)</argsstring>
        <name>offload_to_executor</name>
        <param>
          <type>DispatchTaskExecutor &amp;</type>
          <declname>dispatch_exec</declname>
        </param>
        <param>
          <type>ResumeTaskExecutor &amp;</type>
          <declname>resume_exec</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an awaitable that performs a task in a &quot;dispatch_exec&quot; executor, and resumes in &quot;resume_exec&quot; executor. Note: This is a specialization for tasks with non-void return values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatch_exec</parametername>
</parameternamelist>
<parameterdescription>
<para>task executor where given task is going to run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resume_exec</parametername>
</parameternamelist>
<parameterdescription>
<para>task executor where coroutine will resume once the task is run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>task to run. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>awaitable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/execute_on.h" line="79" column="6" bodyfile="include/srsgnb/support/async/execute_on.h" bodystart="79" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a72ebd4f76da2e68c511cb143da35e447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DispatchTaskExecutor</type>
          </param>
          <param>
            <type>typename CurrentTaskExecutor</type>
          </param>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename ReturnType</type>
            <defval>detail::function_return_t&lt;decltype(&amp;Callable::operator())&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; ReturnType, void &gt;::value, <ref refid="classsrsgnb_1_1async__task" kindref="compound">async_task</ref>&lt; void &gt; &gt;</type>
        <definition>std::enable_if_t&lt;std::is_same&lt;ReturnType, void&gt;::value, async_task&lt;void&gt; &gt; srsgnb::dispatch_and_resume_on</definition>
        <argsstring>(DispatchTaskExecutor &amp;dispatch_exec, CurrentTaskExecutor &amp;return_exec, Callable &amp;&amp;callable)</argsstring>
        <name>dispatch_and_resume_on</name>
        <param>
          <type>DispatchTaskExecutor &amp;</type>
          <declname>dispatch_exec</declname>
        </param>
        <param>
          <type>CurrentTaskExecutor &amp;</type>
          <declname>return_exec</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/execute_on.h" line="157" column="1" bodyfile="include/srsgnb/support/async/execute_on.h" bodystart="157" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1adf1f5caba834f9a0fbba0897fa5ee749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DispatchTaskExecutor</type>
          </param>
          <param>
            <type>typename CurrentTaskExecutor</type>
          </param>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename ReturnType</type>
            <defval>detail::function_return_t&lt;decltype(&amp;Callable::operator())&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; not std::is_same&lt; ReturnType, void &gt;::value, <ref refid="classsrsgnb_1_1async__task" kindref="compound">async_task</ref>&lt; ReturnType &gt; &gt;</type>
        <definition>std::enable_if_t&lt;not std::is_same&lt;ReturnType, void&gt;::value, async_task&lt;ReturnType&gt; &gt; srsgnb::dispatch_and_resume_on</definition>
        <argsstring>(DispatchTaskExecutor &amp;dispatch_exec, CurrentTaskExecutor &amp;return_exec, Callable &amp;&amp;callable)</argsstring>
        <name>dispatch_and_resume_on</name>
        <param>
          <type>DispatchTaskExecutor &amp;</type>
          <declname>dispatch_exec</declname>
        </param>
        <param>
          <type>CurrentTaskExecutor &amp;</type>
          <declname>return_exec</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/execute_on.h" line="174" column="1" bodyfile="include/srsgnb/support/async/execute_on.h" bodystart="174" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a481e20f962521f661a661228e50ba0c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_trivially_copyable&lt; T &gt;::value &amp;&amp;(sizeof(T)&lt;=sizeof(T *))&gt;</type>
        <definition>std::enable_if_t&lt;std::is_trivially_copyable&lt;T&gt;::value &amp;&amp; (sizeof(T) &lt;= sizeof(T*))&gt; srsgnb::do_not_optimize</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>do_not_optimize</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This function forbids the compiler from optimizing away expressions without side-effects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/benchmark_utils.h" line="22" column="1" bodyfile="include/srsgnb/support/benchmark_utils.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5b9751ae8c6b04ef093e3836c1155379" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_trivially_copyable&lt; T &gt;::value||(sizeof(T) &gt; sizeof(T *))&gt;</type>
        <definition>std::enable_if_t&lt;!std::is_trivially_copyable&lt;T&gt;::value || (sizeof(T) &gt; sizeof(T*))&gt; srsgnb::do_not_optimize</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>do_not_optimize</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/benchmark_utils.h" line="28" column="1" bodyfile="include/srsgnb/support/benchmark_utils.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7bc83f3df135b66af058b89ddcaee136" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_trivially_copyable&lt; T &gt;::value &amp;&amp;(sizeof(T)&lt;=sizeof(T *))&gt;</type>
        <definition>std::enable_if_t&lt;std::is_trivially_copyable&lt;T&gt;::value &amp;&amp; (sizeof(T) &lt;= sizeof(T*))&gt; srsgnb::do_not_optimize</definition>
        <argsstring>(T &amp;value)</argsstring>
        <name>do_not_optimize</name>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/benchmark_utils.h" line="33" column="26" bodyfile="include/srsgnb/support/benchmark_utils.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a87cd36dd6e698bcc9d462e37c751fc77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_trivially_copyable&lt; T &gt;::value||(sizeof(T) &gt; sizeof(T *))&gt;</type>
        <definition>std::enable_if_t&lt;!std::is_trivially_copyable&lt;T&gt;::value || (sizeof(T) &gt; sizeof(T*))&gt; srsgnb::do_not_optimize</definition>
        <argsstring>(T &amp;value)</argsstring>
        <name>do_not_optimize</name>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/benchmark_utils.h" line="38" column="26" bodyfile="include/srsgnb/support/benchmark_utils.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a613a5281e40da0c57e8de772f36d558f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::srsgnb_terminate</definition>
        <argsstring>(const char *fmt, Args &amp;&amp;... args) noexcept</argsstring>
        <name>srsgnb_terminate</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Command to terminate application with an error message, ensuring first that the log is flushed. Attribute noinline is used to signal to the compiler that this path should rarely occur and therefore doesn&apos;t need to get optimized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/error_handling.h" line="21" column="14" bodyfile="include/srsgnb/support/error_handling.h" bodystart="21" bodyend="26"/>
        <referencedby refid="namespacesrsgnb_1a640b0588b9e868d648b52e8abea44950" compoundref="error__handling_8h" startline="31" endline="34">report_fatal_error</referencedby>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__generator__impl_1a2da15f34893ca8831dd0b321abc708ff" compoundref="low__papr__sequence__generator__impl_8cpp" startline="165" endline="182">srsgnb::low_papr_sequence_generator_impl::r_uv_arg</referencedby>
        <referencedby refid="classsrsgnb_1_1pucch__helper_1a10ec3066a018433ac8af101cac64b4e1" compoundref="pucch__helper_8h" startline="36" endline="55">srsgnb::pucch_helper::compute_group_sequence</referencedby>
        <referencedby refid="namespacesrsgnb_1a1ca84d77b0e7ace862675e8670d4a810" compoundref="math__utils_8cpp" startline="47" endline="56">prime_greater_than</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a640b0588b9e868d648b52e8abea44950" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::report_fatal_error</definition>
        <argsstring>(const char *reason_fmt, Args &amp;&amp;... args) noexcept</argsstring>
        <name>report_fatal_error</name>
        <param>
          <type>const char *</type>
          <declname>reason_fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Reports a fatal error and handles the application shutdown. This function is intended to be used for error conditions that aren&apos;t neither caught by the compiler nor possible to handle by the application at runtime. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/error_handling.h" line="31" column="14" bodyfile="include/srsgnb/support/error_handling.h" bodystart="31" bodyend="34"/>
        <references refid="namespacesrsgnb_1a613a5281e40da0c57e8de772f36d558f" compoundref="error__handling_8h" startline="21" endline="26">srsgnb_terminate</references>
        <referencedby refid="namespacesrsgnb_1aead91d225a5378b4c91e62573204935b" compoundref="f1ap__asn1__utils_8h" startline="39" endline="52">get_message_type_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1acf82522972ac7839e8c1c7b6201ca49b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1task__executor" kindref="compound">task_executor</ref> &gt;</type>
        <definition>std::unique_ptr&lt;task_executor&gt; srsgnb::make_task_executor</definition>
        <argsstring>(task_worker &amp;w)</argsstring>
        <name>make_task_executor</name>
        <param>
          <type><ref refid="classsrsgnb_1_1task__worker" kindref="compound">task_worker</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/executors/task_worker.h" line="104" column="24" bodyfile="include/srsgnb/support/executors/task_worker.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aba47356c5a51ec842eaeb45b0e8d765a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* srsgnb::to_c_str</definition>
        <argsstring>(fmt::basic_memory_buffer&lt; char, N &gt; &amp;mem_buffer)</argsstring>
        <name>to_c_str</name>
        <param>
          <type>fmt::basic_memory_buffer&lt; char, N &gt; &amp;</type>
          <declname>mem_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/format_utils.h" line="18" column="12" bodyfile="include/srsgnb/support/format_utils.h" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad41106b422cf71ee616885573ae5d72f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref></type>
        <definition>static constexpr cf_t srsgnb::COMPLEX_J</definition>
        <argsstring>(0, 1)</argsstring>
        <name>COMPLEX_J</name>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
<para>Defines the complex imaginary unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="24" column="23" declfile="include/srsgnb/support/math_utils.h" declline="24" declcolumn="23"/>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__generator__impl_1aea28f49f1ff7e19f27bf4e0751c6d33d" compoundref="low__papr__sequence__generator__impl_8cpp" startline="184" endline="189">srsgnb::low_papr_sequence_generator_impl::cexp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a6026a6056e7f39c043a2bba26daab476" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::divide_ceil</definition>
        <argsstring>(unsigned num, unsigned den)</argsstring>
        <name>divide_ceil</name>
        <param>
          <type>unsigned</type>
          <declname>num</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>den</declname>
        </param>
        <briefdescription>
<para>Performs an integer division rounding up. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">den</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the denominator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="34" column="27" bodyfile="include/srsgnb/support/math_utils.h" bodystart="34" bodyend="38"/>
        <referencedby refid="classsrsgnb_1_1bounded__bitset_1a511e7e076b37354738405afddd275b71" compoundref="bounded__bitset_8h" startline="705" endline="719">srsgnb::bounded_bitset&lt; uci_constants::MAX_NOF_HARQ_ACK_BITS &gt;::to_hex</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__segmenter__impl_1a414d7063dc81499bdbc5947b2b4482e4" compoundref="ldpc__segmenter__impl_8cpp" startline="79" endline="89">srsgnb::ldpc_segmenter_impl::compute_rm_length</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__segmenter__impl_1ac42240fce4bb7e502661967508115d76" compoundref="ldpc__segmenter__impl_8cpp" startline="133" endline="209">srsgnb::ldpc_segmenter_impl::segment</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__detector__simple__impl_1af439ed4a39c98d672be9afd14d863f3a" compoundref="prach__detector__simple__impl_8cpp" startline="22" endline="117">srsgnb::prach_detector_simple_impl::detect</referencedby>
        <referencedby refid="classsrsgnb_1_1rx__softbuffer__codeblock__pool_1a5d67da58f9d7b3cf1cac20676105a174" compoundref="rx__softbuffer__pool__impl_8h" startline="58" endline="68">srsgnb::rx_softbuffer_codeblock_pool::rx_softbuffer_codeblock_pool</referencedby>
        <referencedby refid="classsrsgnb_1_1vrb__to__prb__mapper_1a481bd08edede9b6b82bf9ecdc993590f" compoundref="vrb__to__prb__mapper_8cpp" startline="85" endline="106">srsgnb::vrb_to_prb_mapper::create_interleaved_coreset0</referencedby>
        <referencedby refid="classsrsgnb_1_1vrb__to__prb__mapper_1ace5eabc929800582a5659026b3f3d6c8" compoundref="vrb__to__prb__mapper_8cpp" startline="109" endline="134">srsgnb::vrb_to_prb_mapper::create_interleaved_common</referencedby>
        <referencedby refid="classsrsgnb_1_1vrb__to__prb__mapper_1aef120cb6aac7ab159ec3c269a7389d6b" compoundref="vrb__to__prb__mapper_8cpp" startline="137" endline="154">srsgnb::vrb_to_prb_mapper::create_interleaved_other</referencedby>
        <referencedby refid="namespacesrsgnb_1a3fd8bf9a94be3ee7dec8468f3226218e" compoundref="resource__block__group_8cpp" startline="30" endline="34">get_nof_rbgs</referencedby>
        <referencedby refid="namespacesrsgnb_1a5ec8043f9b3afc4244d6861092ef284b" compoundref="tbs__calculator_8cpp" startline="71" endline="110">tbs_calculator_table_find_smallest_not_less_than</referencedby>
        <referencedby refid="classsrsgnb_1_1bit__decoder_1ab73f3df8bc31f0c892fac7f0d06f4904" compoundref="bit__encoding_8cpp" startline="78" endline="90">srsgnb::bit_decoder::advance_bits</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa6e983e2bf0e5ec931e8323c27ab5032" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned srsgnb::pow2</definition>
        <argsstring>(unsigned power)</argsstring>
        <name>pow2</name>
        <param>
          <type>unsigned</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates the integer power of 2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">power</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the power of 2 to calculate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="44" column="27" bodyfile="include/srsgnb/support/math_utils.h" bodystart="44" bodyend="47"/>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__collection_1adf68bec8ccfd6f0ba80639e2cb06d3c5" compoundref="low__papr__sequence__collection_8h" startline="50" endline="76">srsgnb::low_papr_sequence_collection::low_papr_sequence_collection</referencedby>
        <referencedby refid="classsrsgnb_1_1cyclic__prefix_1a912612f8fa115e0924099fd22a718ac6" compoundref="cyclic__prefix_8h" startline="84" endline="95">srsgnb::cyclic_prefix::get_length</referencedby>
        <referencedby refid="classsrsgnb_1_1phy__time__unit_1a61391ed7d44d3aae421439e8aad97e39" compoundref="phy__time__unit_8h" startline="103" endline="106">srsgnb::phy_time_unit::to_Ta</referencedby>
        <referencedby refid="classsrsgnb_1_1pusch__demodulator__impl_1a1dd140986f6b6af92c25155823f25eaf" compoundref="pusch__demodulator__impl_8cpp" startline="18" endline="63">srsgnb::pusch_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1csi__rs__processor__impl_1affdb13875a9f5e03379ffa0987993681" compoundref="csi__rs__processor__impl_8cpp" startline="588" endline="616">srsgnb::csi_rs_processor_impl::generate_sequence</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdcch__processor__impl_1a3258e494264fa593b34c4ddceab24ac5" compoundref="dmrs__pdcch__processor__impl_8cpp" startline="18" endline="24">srsgnb::dmrs_pdcch_processor_impl::c_init</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1a1cc105e7a4d0123d7dc91a3b2d8997d7" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="47" endline="69">srsgnb::dmrs_pdsch_processor_impl::sequence_generation</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl_1a657ab3d994e577bf1a115d62ddf457e5" compoundref="dmrs__pucch__processor__format2__impl_8cpp" startline="17" endline="23">srsgnb::dmrs_pucch_processor_format2_impl::c_init</referencedby>
        <referencedby refid="namespacesrsgnb_1aad81a138785035912345b1bf477b9253" compoundref="tbs__calculator_8cpp" startline="65" endline="69">tbs_calculator_pdsch_get_scaling_factor</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a331983e46d8e554132555e591d92ada4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr float</type>
        <definition>constexpr float srsgnb::abs_sq</definition>
        <argsstring>(cf_t x)</argsstring>
        <name>abs_sq</name>
        <param>
          <type><ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculates the squared modulus of a complex value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Complex value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The squared absolute of the given value, i.e. <formula id="172">$\abs{x}^2=x\cdot\conj{x}=\Re(x)^2+\Im(x)^2$</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="52" column="24" bodyfile="include/srsgnb/support/math_utils.h" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa91e37127f185a5bc158964970704fc3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>constexpr Integer</type>
        <definition>constexpr Integer srsgnb::log2_ceil</definition>
        <argsstring>(Integer value)</argsstring>
        <name>log2_ceil</name>
        <param>
          <type>Integer</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calculates <formula id="173">$\left \lceil log_2(n) \right \rceil$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Integer</parametername>
</parameternamelist>
<parameterdescription>
<para>Any unsigned integer type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter <formula id="2">$n$</formula>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the calculation if <computeroutput>value</computeroutput> is not zero. Otherwise 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="64" column="26" bodyfile="include/srsgnb/support/math_utils.h" bodystart="64" bodyend="73"/>
        <referencedby refid="namespacesrsgnb_1ae3d59219a86271fe4a2d2623fda5915a" compoundref="dci__packing_8cpp" startline="16" endline="66">dci_1_0_p_rnti_pack</referencedby>
        <referencedby refid="namespacesrsgnb_1ab271e68693127a36a613fe0b2c66454f" compoundref="dci__packing_8cpp" startline="68" endline="95">dci_1_0_si_rnti_pack</referencedby>
        <referencedby refid="namespacesrsgnb_1a2401e3b23a5b3ce37bfc76c167f294ee" compoundref="dci__packing_8cpp" startline="97" endline="121">dci_1_0_ra_rnti_pack</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a689d6727d950c0f5972c629939e4ebb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float srsgnb::convert_dB_to_amplitude</definition>
        <argsstring>(float value)</argsstring>
        <name>convert_dB_to_amplitude</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a value in decibels to linear amplitude ratio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>is in decibels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant amplitude ratio </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="78" column="14" bodyfile="include/srsgnb/support/math_utils.h" bodystart="78" bodyend="81"/>
        <referencedby refid="classsrsgnb_1_1pdcch__processor__impl_1a587b4e2dd388ff5f095ca50aa1f03826" compoundref="pdcch__processor__impl_8cpp" startline="54" endline="111">srsgnb::pdcch_processor_impl::process</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__processor__impl_1a8a503b40c2e25533e55efbdf0dfd2bb1" compoundref="pdsch__processor__impl_8cpp" startline="70" endline="93">srsgnb::pdsch_processor_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__processor__impl_1a3f0f8272b6e750713823e32f4eece25c" compoundref="pdsch__processor__impl_8cpp" startline="95" endline="118">srsgnb::pdsch_processor_impl::put_dmrs</referencedby>
        <referencedby refid="classsrsgnb_1_1ssb__processor__impl_1a2c563b7416c71aeb7d08be55e0194726" compoundref="ssb__processor__impl_8cpp" startline="17" endline="95">srsgnb::ssb_processor_impl::process</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a50c45533df91c775fdc2f3ddd4d4b768" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float srsgnb::convert_dB_to_power</definition>
        <argsstring>(float value)</argsstring>
        <name>convert_dB_to_power</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a value in decibels to linear power ratio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>is in decibels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant power ratio </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="86" column="14" bodyfile="include/srsgnb/support/math_utils.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad9ee2c9046a00bf5ba455f90aa2c0ef3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float srsgnb::convert_amplitude_to_dB</definition>
        <argsstring>(float value)</argsstring>
        <name>convert_amplitude_to_dB</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a linear amplitude ratio to decibels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>is the linear amplitude </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant decibels </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="94" column="14" bodyfile="include/srsgnb/support/math_utils.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aab05139ce9d3b553e76c65aa02598fd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float srsgnb::convert_power_to_dB</definition>
        <argsstring>(float value)</argsstring>
        <name>convert_power_to_dB</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a linear power ratio to decibels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>is the linear power </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant decibels </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="102" column="14" bodyfile="include/srsgnb/support/math_utils.h" bodystart="102" bodyend="105"/>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1a927ce0f1b9136a01a080cb35781391b3" compoundref="channel__estimation_8h" startline="104" endline="107">srsgnb::channel_estimate::get_noise_variance_dB</referencedby>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1a5caa692819b484b8fb753e5195de66af" compoundref="channel__estimation_8h" startline="113" endline="116">srsgnb::channel_estimate::get_rsrp_dB</referencedby>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1aaad1fe301d33dda0330ab1d2306c569a" compoundref="channel__estimation_8h" startline="122" endline="125">srsgnb::channel_estimate::get_epre_dB</referencedby>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1a192e84c90465fd9aa955e790c6e2abd9" compoundref="channel__estimation_8h" startline="131" endline="134">srsgnb::channel_estimate::get_snr_dB</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__detector__simple__impl_1af439ed4a39c98d672be9afd14d863f3a" compoundref="prach__detector__simple__impl_8cpp" startline="22" endline="117">srsgnb::prach_detector_simple_impl::detect</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1ca84d77b0e7ace862675e8670d4a810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::prime_greater_than</definition>
        <argsstring>(unsigned n)</argsstring>
        <name>prime_greater_than</name>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Finds the smallest prime number greater than <computeroutput>n</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Only works for prime numbers not larger than 3299. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="109" column="10" bodyfile="lib/support/math_utils.cpp" bodystart="47" bodyend="56" declfile="include/srsgnb/support/math_utils.h" declline="109" declcolumn="10"/>
        <references refid="namespacesrsgnb_1a613a5281e40da0c57e8de772f36d558f" compoundref="error__handling_8h" startline="21" endline="26">srsgnb_terminate</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1bc17982f837ddc6616e0428f3a08e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::prime_lower_than</definition>
        <argsstring>(unsigned n)</argsstring>
        <name>prime_lower_than</name>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Finds the biggest prime number lesser than <computeroutput>n</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Only works for prime numbers not larger than 3299. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="113" column="10" bodyfile="lib/support/math_utils.cpp" bodystart="58" bodyend="69" declfile="include/srsgnb/support/math_utils.h" declline="113" declcolumn="10"/>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__generator__impl_1a97f5ef825cf8904c5e5ab2604ad67602" compoundref="low__papr__sequence__generator__impl_8cpp" startline="150" endline="163">srsgnb::low_papr_sequence_generator_impl::r_uv_arg_mprb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a68609cb80f5f8f752b020809bdc050f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t srsgnb::reverse_byte</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>reverse_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>Reverses the bits of a given byte. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="116" column="16" bodyfile="include/srsgnb/support/math_utils.h" bodystart="116" bodyend="150"/>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator__impl_1a6d343fa858f7d79f8df98e12611c8429" compoundref="pseudo__random__generator__impl_8cpp" startline="159" endline="237">srsgnb::pseudo_random_generator_impl::apply_xor_byte</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab5e5163882716bcc42633500948378c4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class CompareLess</type>
          </param>
        </templateparamlist>
        <type>constexpr const T &amp;</type>
        <definition>constexpr const T&amp; srsgnb::clamp</definition>
        <argsstring>(const T &amp;value, const T &amp;lower_bound, const T &amp;upper_bound, CompareLess comp)</argsstring>
        <name>clamp</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lower_bound</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>upper_bound</declname>
        </param>
        <param>
          <type>CompareLess</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>Ensures a value is between the given bounds, according to a specified order relation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Class of the value to clamp. A strict order relation (less than) should be definable between elements of class <computeroutput>T</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompareLess</parametername>
</parameternamelist>
<parameterdescription>
<para>Class of the comparison object (see below). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to clamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value after clamping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value after clamping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function object implementing an order relation between elements of <computeroutput>T</computeroutput>. The signature should be equivalent to <computeroutput>bool comp(const T&amp; a, const T&amp; b)</computeroutput> and should return <computeroutput>true</computeroutput> if <computeroutput>a &lt; b</computeroutput> (according to any order relation in <computeroutput>T</computeroutput>), <computeroutput>false</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to <computeroutput>lower_bound</computeroutput> if <computeroutput>value &lt; lower_bound</computeroutput>; a reference to <computeroutput>upper_bound</computeroutput> if <computeroutput>upper_bound &lt; value</computeroutput>; a reference to <computeroutput>value</computeroutput> itself otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="166" column="19" bodyfile="include/srsgnb/support/math_utils.h" bodystart="166" bodyend="169"/>
        <referencedby refid="namespacesrsgnb_1a2903689ae7a986f79b3514dc19295523" compoundref="math__utils_8h" startline="175" endline="178">clamp</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi__adaptor_1_1phy__to__fapi__results__event__translator_1aa91016ebe1746bce88cadb99d6d2af30" compoundref="phy__to__fapi__results__event__translator_8cpp" startline="41" endline="90">srsgnb::fapi_adaptor::phy_to_fapi_results_event_translator::on_new_prach_results</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2903689ae7a986f79b3514dc19295523" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr const T &amp;</type>
        <definition>constexpr const T&amp; srsgnb::clamp</definition>
        <argsstring>(const T &amp;value, const T &amp;lower_bound, const T &amp;upper_bound)</argsstring>
        <name>clamp</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lower_bound</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>upper_bound</declname>
        </param>
        <briefdescription>
<para>Ensures a value is between the given bounds, according to the default order relation. </para>
        </briefdescription>
        <detaileddescription>
<para>See the documentation for the extended form for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/math_utils.h" line="175" column="19" bodyfile="include/srsgnb/support/math_utils.h" bodystart="175" bodyend="178"/>
        <references refid="namespacesrsgnb_1ab5e5163882716bcc42633500948378c4" compoundref="math__utils_8h" startline="166" endline="169">clamp</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2ef51b95cf97382d36e5393fcb30edc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t srsgnb::compute_host_nof_hardware_threads</definition>
        <argsstring>()</argsstring>
        <name>compute_host_nof_hardware_threads</name>
        <briefdescription>
<para>Computes the number of threads that are usable in the given host. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="21" column="8" bodyfile="lib/support/unique_thread.cpp" bodystart="19" bodyend="26" declfile="include/srsgnb/support/unique_thread.h" declline="21" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad719858c021f7e21a1a7aef0b9fa955b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * srsgnb::this_thread_name</definition>
        <argsstring>()</argsstring>
        <name>this_thread_name</name>
        <briefdescription>
<para>Get caller thread name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Storage of current thread name, set via <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref>.</para>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="126" column="12" bodyfile="lib/support/unique_thread.cpp" bodystart="162" bodyend="167" declfile="include/srsgnb/support/unique_thread.h" declline="126" declcolumn="12"/>
        <referencedby refid="namespacesrsgnb_1ac5b61eb28147cc6eb4466ec1cdfcae5e" compoundref="unique__thread_8cpp" startline="169" endline="172">print_this_thread_priority</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac5b61eb28147cc6eb4466ec1cdfcae5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::print_this_thread_priority</definition>
        <argsstring>()</argsstring>
        <name>print_this_thread_priority</name>
        <briefdescription>
<para>Print caller thread priority. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="129" column="6" bodyfile="lib/support/unique_thread.cpp" bodystart="169" bodyend="172" declfile="include/srsgnb/support/unique_thread.h" declline="129" declcolumn="6"/>
        <references refid="namespacesrsgnb_1ad719858c021f7e21a1a7aef0b9fa955b" compoundref="unique__thread_8cpp" startline="162" endline="167">this_thread_name</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5fb411b304fa786765e2e02567f0c589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GetId</type>
          </param>
        </templateparamlist>
        <type><ref refid="structsrsgnb_1_1obj__id__comparator" kindref="compound">obj_id_comparator</ref>&lt; GetId &gt;</type>
        <definition>obj_id_comparator&lt;GetId&gt; srsgnb::make_id_comparator</definition>
        <argsstring>(GetId &amp;&amp;g)</argsstring>
        <name>make_id_comparator</name>
        <param>
          <type>GetId &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_diff_utils.h" line="39" column="19" bodyfile="lib/asn1/asn1_diff_utils.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a587e52c9e87b6a7958ab123523595508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AddModList</type>
          </param>
          <param>
            <type>typename RemoveList</type>
          </param>
          <param>
            <type>typename GetId</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::apply_addmodremlist_diff</definition>
        <argsstring>(const AddModList &amp;src_list, const AddModList &amp;add_diff_list, const RemoveList &amp;rm_diff_list, AddModList &amp;target_list, const GetId &amp;id_func)</argsstring>
        <name>apply_addmodremlist_diff</name>
        <param>
          <type>const AddModList &amp;</type>
          <declname>src_list</declname>
        </param>
        <param>
          <type>const AddModList &amp;</type>
          <declname>add_diff_list</declname>
        </param>
        <param>
          <type>const RemoveList &amp;</type>
          <declname>rm_diff_list</declname>
        </param>
        <param>
          <type>AddModList &amp;</type>
          <declname>target_list</declname>
        </param>
        <param>
          <type>const GetId &amp;</type>
          <declname>id_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply toAddModList/toRemoveList changes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src_list</parametername>
</parameternamelist>
<parameterdescription>
<para>original list of rrc fields </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_diff_list</parametername>
</parameternamelist>
<parameterdescription>
<para>added/modified elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm_diff_list</parametername>
</parameternamelist>
<parameterdescription>
<para>removed elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_list</parametername>
</parameternamelist>
<parameterdescription>
<para>resulting list. (Can be same as src_list) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_diff_utils.h" line="52" column="6" bodyfile="lib/asn1/asn1_diff_utils.h" bodystart="52" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a48984f87441d01285b50465f526c0d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AddModList</type>
          </param>
          <param>
            <type>typename RemoveList</type>
          </param>
          <param>
            <type>typename GetId</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::apply_addmodremlist_diff</definition>
        <argsstring>(AddModList &amp;src_and_dest_list, const AddModList &amp;add_diff_list, const RemoveList &amp;rm_diff_list, const GetId &amp;id_func)</argsstring>
        <name>apply_addmodremlist_diff</name>
        <param>
          <type>AddModList &amp;</type>
          <declname>src_and_dest_list</declname>
        </param>
        <param>
          <type>const AddModList &amp;</type>
          <declname>add_diff_list</declname>
        </param>
        <param>
          <type>const RemoveList &amp;</type>
          <declname>rm_diff_list</declname>
        </param>
        <param>
          <type>const GetId &amp;</type>
          <declname>id_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/asn1/asn1_diff_utils.h" line="89" column="6" bodyfile="lib/asn1/asn1_diff_utils.h" bodystart="89" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab479fa8e4136b25619653b3522460358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1sched__cell__configuration__request__message" kindref="compound">sched_cell_configuration_request_message</ref></type>
        <definition>sched_cell_configuration_request_message srsgnb::make_sched_cell_config_req</definition>
        <argsstring>(du_cell_index_t cell_index, const du_cell_config &amp;du_cfg, unsigned sib1_payload_size)</argsstring>
        <name>make_sched_cell_config_req</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abc" kindref="member">du_cell_index_t</ref></type>
          <declname>cell_index</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1du__cell__config" kindref="compound">du_cell_config</ref> &amp;</type>
          <declname>du_cfg</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>sib1_payload_size</declname>
        </param>
        <briefdescription>
<para>Derives Scheduler Cell Configuration from DU Cell Configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>SIB1 parameters.</para>
        </inbodydescription>
        <location file="lib/du_manager/converters/mac_cell_configuration_helpers.h" line="53" column="1" bodyfile="lib/du_manager/converters/mac_cell_configuration_helpers.h" bodystart="53" bodyend="80"/>
        <references refid="structsrsgnb_1_1du__cell__config_1a9829ffee5cd4cbe932bbc5b969370a51" compoundref="du__cell__config_8h" startline="49">srsgnb::du_cell_config::dl_cfg_common</references>
        <references refid="structsrsgnb_1_1du__cell__config_1ab3823a7a973cdae1fb5cf9c0207e7a8b" compoundref="du__cell__config_8h" startline="31">srsgnb::du_cell_config::scs_common</references>
        <references refid="structsrsgnb_1_1du__cell__config_1a9cd3debf64abd18480c082c3c21ef436" compoundref="du__cell__config_8h" startline="37">srsgnb::du_cell_config::coreset0_idx</references>
        <references refid="structsrsgnb_1_1du__cell__config_1a1b0212b53a8ab52d5c05df3080a81f98" compoundref="du__cell__config_8h" startline="40">srsgnb::du_cell_config::searchspace0_idx</references>
        <referencedby refid="namespacesrsgnb_1aeacef1d75f96501af26a5029cb3b1163" compoundref="mac__cell__configuration__helpers_8h" startline="83" endline="98">make_mac_cell_config</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aeacef1d75f96501af26a5029cb3b1163" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1mac__cell__creation__request" kindref="compound">mac_cell_creation_request</ref></type>
        <definition>mac_cell_creation_request srsgnb::make_mac_cell_config</definition>
        <argsstring>(du_cell_index_t cell_index, const du_cell_config &amp;du_cfg)</argsstring>
        <name>make_mac_cell_config</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abc" kindref="member">du_cell_index_t</ref></type>
          <declname>cell_index</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1du__cell__config" kindref="compound">du_cell_config</ref> &amp;</type>
          <declname>du_cfg</declname>
        </param>
        <briefdescription>
<para>Derives MAC Cell Configuration from DU Cell Configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/du_manager/converters/mac_cell_configuration_helpers.h" line="83" column="34" bodyfile="lib/du_manager/converters/mac_cell_configuration_helpers.h" bodystart="83" bodyend="98"/>
        <references refid="structsrsgnb_1_1du__cell__config_1ab3823a7a973cdae1fb5cf9c0207e7a8b" compoundref="du__cell__config_8h" startline="31">srsgnb::du_cell_config::scs_common</references>
        <references refid="structsrsgnb_1_1du__cell__config_1a0a11431295260442d8c9590f24031b68" compoundref="du__cell__config_8h" startline="44">srsgnb::du_cell_config::cell_barred</references>
        <references refid="structsrsgnb_1_1du__cell__config_1abb73814b8a63566f1f6168b0026aaad5" compoundref="du__cell__config_8h" startline="46">srsgnb::du_cell_config::intra_freq_resel</references>
        <references refid="namespacesrsgnb_1ab479fa8e4136b25619653b3522460358" compoundref="mac__cell__configuration__helpers_8h" startline="53" endline="80">make_sched_cell_config_req</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1acdf4ea3cddcfe5e32bb6c40d6af5dc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1nr__cell__global__identity" kindref="compound">nr_cell_global_identity</ref></type>
        <definition>nr_cell_global_identity srsgnb::cgi_from_asn1</definition>
        <argsstring>(const asn1::f1ap::nrcgi_s &amp;asn1_cgi)</argsstring>
        <name>cgi_from_asn1</name>
        <param>
          <type>const asn1::f1ap::nrcgi_s &amp;</type>
          <declname>asn1_cgi</declname>
        </param>
        <briefdescription>
<para>Converts ASN.1 CGI typo into internal struct. It also performs the byte to MCC/MNC conversion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">asn1_cgi</parametername>
</parameternamelist>
<parameterdescription>
<para>The ASN.1 encoded NR-CGI. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CGI converted to flat internal struct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/f1_interface/common/asn1_helpers.cpp" line="15" column="25" bodyfile="lib/f1_interface/common/asn1_helpers.cpp" bodystart="15" bodyend="28" declfile="lib/f1_interface/common/asn1_helpers.h" declline="22" declcolumn="25"/>
        <references refid="namespacesrsgnb_1a3cccd5692d5e3c29639f9d127bf1ec67" compoundref="bcd__helpers_8h" startline="200" endline="227">ngap_plmn_to_mccmnc</references>
        <references refid="structsrsgnb_1_1nr__cell__global__identity_1a258b59b56e3212536eec18217aea307c" compoundref="nr__cgi_8h" startline="27">srsgnb::nr_cell_global_identity::mnc</references>
        <references refid="structsrsgnb_1_1nr__cell__global__identity_1adfbaf01b01c61b025c5d6e19cb5123bc" compoundref="nr__cgi_8h" startline="28">srsgnb::nr_cell_global_identity::plmn</references>
        <references refid="structsrsgnb_1_1nr__cell__global__identity_1ac6c4261f265fbe9657c683ee9b6e55e0" compoundref="nr__cgi_8h" startline="29">srsgnb::nr_cell_global_identity::nci</references>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1f1ap__du__processor__adapter_1a88e55ee2587a0718b7922c20eeba863d" compoundref="f1ap__adapters_8h" startline="53" endline="63">srsgnb::srs_cu_cp::f1ap_du_processor_adapter::on_create_ue</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1du__processor_1acfd07da0fe09e9e8ca94e1b8e220df52" compoundref="du__processor_8cpp" startline="39" endline="84">srsgnb::srs_cu_cp::du_processor::handle_f1_setup_request</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__cu__cp_1_1f1ap__cu__impl_1a119e99e830418cb8200ed7907796fd28" compoundref="f1ap__cu__impl_8cpp" startline="243" endline="297">srsgnb::srs_cu_cp::f1ap_cu_impl::handle_initial_ul_rrc_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a25fef59741d8ca6ca35af3ee24a1a4c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srsgnb::get_cause_str</definition>
        <argsstring>(const asn1::f1ap::cause_c &amp;cause)</argsstring>
        <name>get_cause_str</name>
        <param>
          <type>const asn1::f1ap::cause_c &amp;</type>
          <declname>cause</declname>
        </param>
        <briefdescription>
<para>Get string with F1AP error cause. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/f1_interface/common/f1ap_asn1_utils.h" line="20" column="19" bodyfile="lib/f1_interface/common/f1ap_asn1_utils.h" bodystart="20" bodyend="36"/>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1f1ap__du__setup__procedure_1a050910b28ee5283f6cbaa5988360538a" compoundref="f1ap__du__setup__procedure_8cpp" startline="101" endline="122">srsgnb::srs_du::f1ap_du_setup_procedure::create_f1_setup_result</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aead91d225a5378b4c91e62573204935b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srsgnb::get_message_type_str</definition>
        <argsstring>(const asn1::f1ap::f1_ap_pdu_c &amp;pdu)</argsstring>
        <name>get_message_type_str</name>
        <param>
          <type>const asn1::f1ap::f1_ap_pdu_c &amp;</type>
          <declname>pdu</declname>
        </param>
        <briefdescription>
<para>Extracts message type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/f1_interface/common/f1ap_asn1_utils.h" line="39" column="19" bodyfile="lib/f1_interface/common/f1ap_asn1_utils.h" bodystart="39" bodyend="52"/>
        <references refid="namespacesrsgnb_1a640b0588b9e868d648b52e8abea44950" compoundref="error__handling_8h" startline="31" endline="34">report_fatal_error</references>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1f1ap__du__impl_1ac5c9e76c1502be565f405be507ab528d" compoundref="f1ap__du__impl_8cpp" startline="108" endline="134">srsgnb::srs_du::f1ap_du_impl::handle_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab9f9d251224335b187f0729bcbe3ba80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref>&lt; uint8_t &gt;</type>
        <definition>expected&lt;uint8_t&gt; srsgnb::get_transaction_id</definition>
        <argsstring>(const asn1::f1ap::init_msg_s &amp;out)</argsstring>
        <name>get_transaction_id</name>
        <param>
          <type>const asn1::f1ap::init_msg_s &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Extracts transaction id of Initiating message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/f1_interface/common/f1ap_asn1_utils.h" line="55" column="17" bodyfile="lib/f1_interface/common/f1ap_asn1_utils.h" bodystart="55" bodyend="72"/>
        <referencedby refid="namespacesrsgnb_1a549251890162d679d06440595e49220e" compoundref="f1ap__asn1__utils_8h" startline="115" endline="129">get_transaction_id</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1f1ap__du__impl_1ac5c9e76c1502be565f405be507ab528d" compoundref="f1ap__du__impl_8cpp" startline="108" endline="134">srsgnb::srs_du::f1ap_du_impl::handle_message</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1f1ap__du__impl_1a66ad8164a3768955119d56daff7654d4" compoundref="f1ap__du__impl_8cpp" startline="147" endline="157">srsgnb::srs_du::f1ap_du_impl::handle_successful_outcome</referencedby>
        <referencedby refid="classsrsgnb_1_1srs__du_1_1f1ap__du__impl_1a84c936306564e580fff5c341e4e688fb" compoundref="f1ap__du__impl_8cpp" startline="159" endline="169">srsgnb::srs_du::f1ap_du_impl::handle_unsuccessful_outcome</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a77a1ff76e701e3214833a5e6a2513204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref>&lt; uint8_t &gt;</type>
        <definition>expected&lt;uint8_t&gt; srsgnb::get_transaction_id</definition>
        <argsstring>(const asn1::f1ap::successful_outcome_s &amp;out)</argsstring>
        <name>get_transaction_id</name>
        <param>
          <type>const asn1::f1ap::successful_outcome_s &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Extracts transaction id of Successful Outcome message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/f1_interface/common/f1ap_asn1_utils.h" line="75" column="17" bodyfile="lib/f1_interface/common/f1ap_asn1_utils.h" bodystart="75" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa2bf1384af0f333574b4fa5479ba2ccb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref>&lt; uint8_t &gt;</type>
        <definition>expected&lt;uint8_t&gt; srsgnb::get_transaction_id</definition>
        <argsstring>(const asn1::f1ap::unsuccessful_outcome_s &amp;out)</argsstring>
        <name>get_transaction_id</name>
        <param>
          <type>const asn1::f1ap::unsuccessful_outcome_s &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Extracts transaction id of Unsuccessful Outcome message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/f1_interface/common/f1ap_asn1_utils.h" line="95" column="17" bodyfile="lib/f1_interface/common/f1ap_asn1_utils.h" bodystart="95" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a549251890162d679d06440595e49220e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref>&lt; uint8_t &gt;</type>
        <definition>expected&lt;uint8_t&gt; srsgnb::get_transaction_id</definition>
        <argsstring>(const asn1::f1ap::f1_ap_pdu_c &amp;pdu)</argsstring>
        <name>get_transaction_id</name>
        <param>
          <type>const asn1::f1ap::f1_ap_pdu_c &amp;</type>
          <declname>pdu</declname>
        </param>
        <briefdescription>
<para>Extracts transaction id of F1AP PDU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/f1_interface/common/f1ap_asn1_utils.h" line="115" column="17" bodyfile="lib/f1_interface/common/f1ap_asn1_utils.h" bodystart="115" bodyend="129"/>
        <references refid="namespacesrsgnb_1ab9f9d251224335b187f0729bcbe3ba80" compoundref="f1ap__asn1__utils_8h" startline="55" endline="72">get_transaction_id</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a6944ad72d52c2ea0ef3917fb64671ab1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1sched__ue__creation__request__message" kindref="compound">sched_ue_creation_request_message</ref></type>
        <definition>sched_ue_creation_request_message srsgnb::make_ue_creation_request</definition>
        <argsstring>(const mac_ue_create_request_message &amp;in)</argsstring>
        <name>make_ue_creation_request</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1mac__ue__create__request__message" kindref="compound">mac_ue_create_request_message</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Convert MAC UE Create Request Message to Scheduler UE Create Request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ctrl/sched_config_helpers.h" line="19" column="42" bodyfile="lib/mac/mac_ctrl/sched_config_helpers.h" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a49c137b3ca7c8b56fe6b22ed1ef500e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1sched__ue__reconfiguration__message" kindref="compound">sched_ue_reconfiguration_message</ref></type>
        <definition>sched_ue_reconfiguration_message srsgnb::make_ue_reconfiguration_request</definition>
        <argsstring>(const mac_ue_reconfiguration_request_message &amp;in)</argsstring>
        <name>make_ue_reconfiguration_request</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1mac__ue__reconfiguration__request__message" kindref="compound">mac_ue_reconfiguration_request_message</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Convert MAC UE Reconfiguration Request Message to Scheduler UE Reconfiguration Request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ctrl/sched_config_helpers.h" line="31" column="1" bodyfile="lib/mac/mac_ctrl/sched_config_helpers.h" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa98fde684570d7b2f5e839d417620312" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
        <definition>rnti_t srsgnb::decode_crnti_ce</definition>
        <argsstring>(byte_buffer_view payload)</argsstring>
        <name>decode_crnti_ce</name>
        <param>
          <type><ref refid="classsrsgnb_1_1byte__buffer__view" kindref="compound">byte_buffer_view</ref></type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Decode C-RNTI MAC CE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ul/mac_ul_sch_pdu.h" line="71" column="15" bodyfile="lib/mac/mac_ul/mac_ul_sch_pdu.h" bodystart="71" bodyend="79"/>
        <references refid="namespacesrsgnb_1a061fb0d6bbe0a7462c555854c5dace03" compoundref="rnti_8h" startline="38" endline="41">to_rnti</references>
        <referencedby refid="classsrsgnb_1_1pdu__rx__handler_1a4ebe8d65a7561ece46436fc28a215558" compoundref="pdu__rx__handler_8cpp" startline="193" endline="219">srsgnb::pdu_rx_handler::handle_crnti_ce</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5ac389395b6bc37c753bc8040ec115f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1lcg__bsr__report" kindref="compound">lcg_bsr_report</ref></type>
        <definition>lcg_bsr_report srsgnb::decode_sbsr</definition>
        <argsstring>(byte_buffer_view payload)</argsstring>
        <name>decode_sbsr</name>
        <param>
          <type><ref refid="classsrsgnb_1_1byte__buffer__view" kindref="compound">byte_buffer_view</ref></type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Decode Short BSR. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ul/ul_bsr.h" line="32" column="23" bodyfile="lib/mac/mac_ul/ul_bsr.h" bodystart="32" bodyend="39"/>
        <referencedby refid="classsrsgnb_1_1pdu__rx__handler_1a644439727a22fdabd3a2a3f73d0ddd1a" compoundref="pdu__rx__handler_8cpp" startline="119" endline="178">srsgnb::pdu_rx_handler::handle_mac_ce</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af427f34f9442768d27d24566775ad469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1long__bsr__report" kindref="compound">long_bsr_report</ref></type>
        <definition>long_bsr_report srsgnb::decode_lbsr</definition>
        <argsstring>(bsr_format format, byte_buffer_view payload)</argsstring>
        <name>decode_lbsr</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504" kindref="member">bsr_format</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1byte__buffer__view" kindref="compound">byte_buffer_view</ref></type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Decode Long BSR. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ul/ul_bsr.h" line="47" column="17" bodyfile="lib/mac/mac_ul/ul_bsr.cpp" bodystart="75" bodyend="110" declfile="lib/mac/mac_ul/ul_bsr.h" declline="47" declcolumn="17"/>
        <references refid="structsrsgnb_1_1long__bsr__report_1a20117c5a6ef736d78ff0493f2e12a878" compoundref="ul__bsr_8h" startline="43">srsgnb::long_bsr_report::list</references>
        <referencedby refid="classsrsgnb_1_1pdu__rx__handler_1a644439727a22fdabd3a2a3f73d0ddd1a" compoundref="pdu__rx__handler_8cpp" startline="119" endline="178">srsgnb::pdu_rx_handler::handle_mac_ce</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a8d29c90b95ca3b0aeaf482a8718dffa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t srsgnb::buff_size_field_to_bytes</definition>
        <argsstring>(size_t buff_size_index, bsr_format format)</argsstring>
        <name>buff_size_field_to_bytes</name>
        <param>
          <type>size_t</type>
          <declname>buff_size_index</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504" kindref="member">bsr_format</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts the buffer size field of a BSR (5 or 8-bit Buffer Size field) into Nof Bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buff_size_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer size field contained in the MAC PDU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The BSR format that determines the buffer size field length. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual buffer size level in Bytes.</para>
</simplesect>
Converts the buffer size field of a BSR (5 or 8-bit Buffer Size field) into Bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buff_size_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer size field contained in the MAC PDU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The BSR format that determines the buffer size field length. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual buffer size level in Bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ul/ul_bsr.h" line="53" column="10" bodyfile="lib/mac/mac_ul/ul_bsr.cpp" bodystart="116" bodyend="142" declfile="lib/mac/mac_ul/ul_bsr.h" declline="53" declcolumn="10"/>
        <referencedby refid="namespacesrsgnb_1ac4f2d2a0006e2f420958ee2df1ccefee" compoundref="ul__bsr_8cpp" startline="144" endline="147">make_sched_lcg_report</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac4f2d2a0006e2f420958ee2df1ccefee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1ul__bsr__lcg__report" kindref="compound">ul_bsr_lcg_report</ref></type>
        <definition>ul_bsr_lcg_report srsgnb::make_sched_lcg_report</definition>
        <argsstring>(const lcg_bsr_report &amp;ul_bsr_ce, bsr_format bsr_format)</argsstring>
        <name>make_sched_lcg_report</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1lcg__bsr__report" kindref="compound">lcg_bsr_report</ref> &amp;</type>
          <declname>ul_bsr_ce</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a8898334300e92805191a46aefe7d2504" kindref="member">bsr_format</ref></type>
          <declname>bsr_format</declname>
        </param>
        <briefdescription>
<para>Converts BSR MAC CE (See 38.321, 6.1.3.1) to Scheduler UL BSR event type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/mac/mac_ul/ul_bsr.h" line="56" column="19" bodyfile="lib/mac/mac_ul/ul_bsr.cpp" bodystart="144" bodyend="147" declfile="lib/mac/mac_ul/ul_bsr.h" declline="56" declcolumn="19"/>
        <references refid="namespacesrsgnb_1a8d29c90b95ca3b0aeaf482a8718dffa0" compoundref="ul__bsr_8cpp" startline="116" endline="142">buff_size_field_to_bytes</references>
        <referencedby refid="classsrsgnb_1_1pdu__rx__handler_1a644439727a22fdabd3a2a3f73d0ddd1a" compoundref="pdu__rx__handler_8cpp" startline="119" endline="178">srsgnb::pdu_rx_handler::handle_mac_ce</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a20bd5fea5c7401bce53db605b0c3073e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srsgnb::get_cause_str</definition>
        <argsstring>(const asn1::ngap::cause_c &amp;cause)</argsstring>
        <name>get_cause_str</name>
        <param>
          <type>const asn1::ngap::cause_c &amp;</type>
          <declname>cause</declname>
        </param>
        <briefdescription>
<para>Get string with NGAP error cause. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ngap/ngap_asn1_utils.h" line="20" column="19" bodyfile="lib/ngap/ngap_asn1_utils.h" bodystart="20" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5d74776d514d790ccfe4d59347a78ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srsgnb::get_message_type_str</definition>
        <argsstring>(const asn1::ngap::ngap_pdu_c &amp;pdu)</argsstring>
        <name>get_message_type_str</name>
        <param>
          <type>const asn1::ngap::ngap_pdu_c &amp;</type>
          <declname>pdu</declname>
        </param>
        <briefdescription>
<para>Extracts message type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ngap/ngap_asn1_utils.h" line="41" column="19" bodyfile="lib/ngap/ngap_asn1_utils.h" bodystart="41" bodyend="54"/>
        <references refid="namespacesrsgnb_1a640b0588b9e868d648b52e8abea44950" compoundref="error__handling_8h" startline="31" endline="34">report_fatal_error</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a919a1d703ada8f620a439cde2a2facdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1pdcch__processor" kindref="compound">pdcch_processor</ref> &gt;</type>
        <definition>std::unique_ptr&lt;pdcch_processor&gt; srsgnb::create_pdcch_processor</definition>
        <argsstring>(pdcch_processor_config_t &amp;config)</argsstring>
        <name>create_pdcch_processor</name>
        <param>
          <type><ref refid="structsrsgnb_1_1pdcch__processor__config__t" kindref="compound">pdcch_processor_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a generic PDCCH processor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/channel_processors/pdcch_processor_impl.h" line="72" column="17" declfile="lib/phy/upper/channel_processors/pdcch_processor_impl.h" declline="72" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1adf0de14f34490ba84d770e68336cd6cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::get_rg_subc_mask_reference</definition>
        <argsstring>(const bounded_bitset&lt; MAX_RB &gt; &amp;prb_mask)</argsstring>
        <name>get_rg_subc_mask_reference</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt; &amp;</type>
          <declname>prb_mask</declname>
        </param>
        <briefdescription>
<para>Helper function to calculate the subcarrier index reference for a resource grid allocation mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The lowest subcarrier index of the lowest selected PRB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/resource_grid_helpers.h" line="23" column="17" bodyfile="lib/phy/upper/resource_grid_helpers.h" bodystart="23" bodyend="34"/>
        <references refid="classsrsgnb_1_1bounded__bitset_1a8bb3b1a08877033b44f0c6ad6e076a16" compoundref="bounded__bitset_8h" startline="404" endline="404">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_lowest</references>
        <references refid="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" compoundref="constants_8h" startline="19">NRE</references>
        <referencedby refid="classsrsgnb_1_1pdcch__modulator__impl_1ab126ac2c0c48a0802e821aac34b8ea6b" compoundref="pdcch__modulator__impl_8cpp" startline="40" endline="65">srsgnb::pdcch_modulator_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdcch__processor__impl_1abf53c113b1b9347f7e3157bf114e5d1e" compoundref="dmrs__pdcch__processor__impl_8cpp" startline="51" endline="78">srsgnb::dmrs_pdcch_processor_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1abd59f0a94a5a45c82d5e767bc5ba25a9" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="134" endline="169">srsgnb::dmrs_pdsch_processor_impl::map</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a91f1622ff821b787192eb0b889692a87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; bool, <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> *<ref refid="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" kindref="member">NRE</ref> &gt;</type>
        <definition>static_vector&lt;bool, MAX_RB * NRE&gt; srsgnb::get_rg_subc_mask</definition>
        <argsstring>(const bounded_bitset&lt; MAX_RB &gt; &amp;prb_mask, const std::array&lt; bool, NRE &gt; &amp;prb_mask_re)</argsstring>
        <name>get_rg_subc_mask</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt; &amp;</type>
          <declname>prb_mask</declname>
        </param>
        <param>
          <type>const std::array&lt; bool, <ref refid="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" kindref="member">NRE</ref> &gt; &amp;</type>
          <declname>prb_mask_re</declname>
        </param>
        <briefdescription>
<para>Helper function to create an allocation mask from a PRB mask and a RE mask. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an allocation where PRB are selected from <computeroutput>prb_mask</computeroutput> and the RE within the PRB are selected using <computeroutput>prb_mask_re</computeroutput>.</para>
<para>The resultant mask is relative to to the lowest subcarrier of the lowest selected PRB. In other words, the first element of the resultant mask coincides with the lowest subcarrier of the first selected PRB in <computeroutput>prb_mask</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prb_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected PRB for the transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prb_mask_re</parametername>
</parameternamelist>
<parameterdescription>
<para>DMRS pattern within a PRB. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resultant mask. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacesrsgnb_1adf0de14f34490ba84d770e68336cd6cf" kindref="member">get_rg_subc_mask_reference</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/resource_grid_helpers.h" line="48" column="22" bodyfile="lib/phy/upper/resource_grid_helpers.h" bodystart="48" bodyend="83"/>
        <references refid="classsrsgnb_1_1bounded__bitset_1a8bb3b1a08877033b44f0c6ad6e076a16" compoundref="bounded__bitset_8h" startline="404" endline="404">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_lowest</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a74545186bfbbbf9519ac15da5f6c692c" compoundref="bounded__bitset_8h" startline="503" endline="503">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_highest</references>
        <references refid="namespacesrsgnb_1a1691e371d39f897676e1185dce645bb1" compoundref="constants_8h" startline="19">NRE</references>
        <references refid="classsrsgnb_1_1span_1a442489925fefe9d07eb0c62aff93867e" compoundref="span_8h" startline="207" endline="211">srsgnb::span&lt; T &gt;::subspan</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1aec33b2aa0ad1fe21801ba05f9fcc61d9" compoundref="bounded__bitset_8h" startline="331" endline="335">srsgnb::bounded_bitset&lt; N, reversed &gt;::test</references>
        <references refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" compoundref="span_8h" startline="179" endline="179">srsgnb::span&lt; T &gt;::begin</references>
        <referencedby refid="classsrsgnb_1_1pdcch__modulator__impl_1ab126ac2c0c48a0802e821aac34b8ea6b" compoundref="pdcch__modulator__impl_8cpp" startline="40" endline="65">srsgnb::pdcch_modulator_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdcch__processor__impl_1abf53c113b1b9347f7e3157bf114e5d1e" compoundref="dmrs__pdcch__processor__impl_8cpp" startline="51" endline="78">srsgnb::dmrs_pdcch_processor_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1abd59f0a94a5a45c82d5e767bc5ba25a9" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="134" endline="169">srsgnb::dmrs_pdsch_processor_impl::map</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab999d6a9ed05a024c1801337b143f322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1rx__softbuffer__pool" kindref="compound">rx_softbuffer_pool</ref> &gt;</type>
        <definition>std::unique_ptr&lt; rx_softbuffer_pool &gt; srsgnb::create_rx_softbuffer_pool</definition>
        <argsstring>(const rx_softbuffer_pool_description &amp;config)</argsstring>
        <name>create_rx_softbuffer_pool</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1rx__softbuffer__pool__description" kindref="compound">rx_softbuffer_pool_description</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/rx_softbuffer_pool_impl.h" line="309" column="17" bodyfile="lib/phy/upper/rx_softbuffer_pool_impl.cpp" bodystart="80" bodyend="83" declfile="lib/phy/upper/rx_softbuffer_pool_impl.h" declline="309" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae2d30c4388048bade793f07399b085cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1low__papr__sequence__generator" kindref="compound">low_papr_sequence_generator</ref> &gt;</type>
        <definition>std::unique_ptr&lt; low_papr_sequence_generator &gt; srsgnb::create_low_papr_sequence_generator</definition>
        <argsstring>()</argsstring>
        <name>create_low_papr_sequence_generator</name>
        <briefdescription>
<para>Creates a generic low PAPR sequence generator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/sequence_generators/low_papr_sequence_generator_impl.h" line="90" column="17" bodyfile="lib/phy/upper/sequence_generators/low_papr_sequence_generator_impl.cpp" bodystart="203" bodyend="206" declfile="lib/phy/upper/sequence_generators/low_papr_sequence_generator_impl.h" declline="90" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac256a6ea6adc1dfe53431799cab8eb68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::dmrs_sequence_generate</definition>
        <argsstring>(span&lt; cf_t &gt; sequence, pseudo_random_generator &amp;prg, float amplitude, unsigned reference_point_k_rb, unsigned nof_dmrs_per_rb, const bounded_bitset&lt; MAX_RB &gt; &amp;rb_mask)</argsstring>
        <name>dmrs_sequence_generate</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="namespacesrsgnb_1af4b08850893ef20c607d3b426a8a32e5" kindref="member">cf_t</ref> &gt;</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1pseudo__random__generator" kindref="compound">pseudo_random_generator</ref> &amp;</type>
          <declname>prg</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>reference_point_k_rb</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nof_dmrs_per_rb</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt; &amp;</type>
          <declname>rb_mask</declname>
        </param>
        <briefdescription>
<para>Helper function to generate DMRS sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates DMRS sequences based on a pseudo-random sequence generation. It generates <computeroutput>nof_dmrs_per_rb</computeroutput> for every active resource block given in <computeroutput>rb_mask</computeroutput> and skips the <computeroutput>nof_dmrs_per_rb</computeroutput> for every inactive resource block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the destination storage for the generated sequence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">prg</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the pseudo-random generator to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the sequence amplitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reference_point_k_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the RB index for reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nof_dmrs_per_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the number of DMRS to generate per active RB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rb_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the active resource blocks. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>It assumes that the pseudo-random generator is initialized. </para>
</simplesect>
<simplesect kind="note"><para>The sequence size must be consistent with the number of active RBs and the number of DMRS per RB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/upper/signal_processors/dmrs_helper.h" line="32" column="13" bodyfile="lib/phy/upper/signal_processors/dmrs_helper.h" bodystart="32" bodyend="82"/>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1aec33b2aa0ad1fe21801ba05f9fcc61d9" compoundref="bounded__bitset_8h" startline="331" endline="335">srsgnb::bounded_bitset&lt; N, reversed &gt;::test</references>
        <references refid="classsrsgnb_1_1pseudo__random__generator_1a0c01e57d497085eb57cb1c99fed9d8a1">srsgnb::pseudo_random_generator::advance</references>
        <references refid="classsrsgnb_1_1pseudo__random__generator_1abeffc99fcef15e1de5896ebe056d9850">srsgnb::pseudo_random_generator::generate</references>
        <references refid="classsrsgnb_1_1span_1aadc9956ed7b3870d1e25e82e4f34e782" compoundref="span_8h" startline="192" endline="196">srsgnb::span&lt; T &gt;::first</references>
        <references refid="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" compoundref="span_8h" startline="200" endline="204">srsgnb::span&lt; T &gt;::last</references>
        <references refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" compoundref="span_8h" startline="143" endline="143">srsgnb::span&lt; T &gt;::size</references>
        <referencedby refid="classsrsgnb_1_1dmrs__pdcch__processor__impl_1aba8043b0a44c6be73a0c157976a106d9" compoundref="dmrs__pdcch__processor__impl_8cpp" startline="26" endline="36">srsgnb::dmrs_pdcch_processor_impl::sequence_generation</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1a1cc105e7a4d0123d7dc91a3b2d8997d7" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="47" endline="69">srsgnb::dmrs_pdsch_processor_impl::sequence_generation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5c5317e395f78893278614836128c850" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::string_to_mcc</definition>
        <argsstring>(std::string str, uint16_t *mcc)</argsstring>
        <name>string_to_mcc</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>mcc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert between string and BCD-coded MCC. Digits are represented by 4-bit nibbles. Unused nibbles are filled with 0xf. MCC 001 results in 0xf001 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="22" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="22" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1af3add694d52b4b069ba0e66fc21cbaf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::mcc_to_string</definition>
        <argsstring>(uint16_t mcc, std::string *str)</argsstring>
        <name>mcc_to_string</name>
        <param>
          <type>uint16_t</type>
          <declname>mcc</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="38" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="38" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a933749902da1155a4588ef351efff096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::bytes_to_mcc</definition>
        <argsstring>(const uint8_t *bytes, uint16_t *mcc)</argsstring>
        <name>bytes_to_mcc</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>mcc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert between array of bytes and BCD-coded MCC. Digits are represented by 4-bit nibbles. Unused nibbles are filled with 0xf. MCC 001 results in 0xf001 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="53" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1c133224f93040b9e8ca9fb85ce4c577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::mcc_to_bytes</definition>
        <argsstring>(uint16_t mcc, uint8_t *bytes)</argsstring>
        <name>mcc_to_bytes</name>
        <param>
          <type>uint16_t</type>
          <declname>mcc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="62" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="62" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a830ce25e68c19fde3ab6fb471ab26d8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string srsgnb::mcc_bytes_to_string</definition>
        <argsstring>(uint8_t *mcc_bytes)</argsstring>
        <name>mcc_bytes_to_string</name>
        <param>
          <type>uint8_t *</type>
          <declname>mcc_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="73" column="20" bodyfile="lib/ran/bcd_helpers.h" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a94e3fe72482cbc9435f89ba340e56817" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::string_to_mnc</definition>
        <argsstring>(std::string str, uint16_t *mnc)</argsstring>
        <name>string_to_mnc</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>mnc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert between string and BCD-coded MNC. Digits are represented by 4-bit nibbles. Unused nibbles are filled with 0xf. MNC 001 results in 0xf001 MNC 01 results in 0xff01 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="88" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="88" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2ee67254ae0e933eef5791556be78a22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::mnc_to_string</definition>
        <argsstring>(uint16_t mnc, std::string *str)</argsstring>
        <name>mnc_to_string</name>
        <param>
          <type>uint16_t</type>
          <declname>mnc</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="115" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="115" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a0eaaf818d38e38f10780c165ea3256a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::bytes_to_mnc</definition>
        <argsstring>(const uint8_t *bytes, uint16_t *mnc, uint8_t len)</argsstring>
        <name>bytes_to_mnc</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>mnc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert between array of bytes and BCD-coded MNC. Digits are represented by 4-bit nibbles. Unused nibbles are filled with 0xf. MNC 001 results in 0xf001 MNC 01 results in 0xff01 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="133" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="133" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3dfae8773f98cba287e484160d453771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::mnc_to_bytes</definition>
        <argsstring>(uint16_t mnc, uint8_t *bytes, uint8_t *len)</argsstring>
        <name>mnc_to_bytes</name>
        <param>
          <type>uint16_t</type>
          <declname>mnc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="151" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="151" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7ad875219cd3c57d4390ab24fc7c75a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Vec</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool srsgnb::mnc_to_bytes</definition>
        <argsstring>(uint16_t mnc, Vec &amp;vec)</argsstring>
        <name>mnc_to_bytes</name>
        <param>
          <type>uint16_t</type>
          <declname>mnc</declname>
        </param>
        <param>
          <type>Vec &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="168" column="6" bodyfile="lib/ran/bcd_helpers.h" bodystart="168" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a494fd1676711a5486a80115ca322c0e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string srsgnb::mnc_bytes_to_string</definition>
        <argsstring>(uint8_t *mnc_bytes, uint32_t nof_bytes)</argsstring>
        <name>mnc_bytes_to_string</name>
        <param>
          <type>uint8_t *</type>
          <declname>mnc_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nof_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="178" column="20" bodyfile="lib/ran/bcd_helpers.h" bodystart="178" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aee322a1a47600483aeef6ea89f6cc689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Vec</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string srsgnb::mnc_bytes_to_string</definition>
        <argsstring>(Vec mnc_bytes)</argsstring>
        <name>mnc_bytes_to_string</name>
        <param>
          <type>Vec</type>
          <declname>mnc_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="190" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3cccd5692d5e3c29639f9d127bf1ec67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::ngap_plmn_to_mccmnc</definition>
        <argsstring>(uint32_t plmn, uint16_t *mcc, uint16_t *mnc)</argsstring>
        <name>ngap_plmn_to_mccmnc</name>
        <param>
          <type>uint32_t</type>
          <declname>plmn</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>mcc</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>mnc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert PLMN to BCD-coded MCC and MNC. Digits are represented by 4-bit nibbles. Unused nibbles are filled with 0xf. MNC 001 represented as 0xf001 MNC 01 represented as 0xff01 PLMN encoded as per TS 38.413 sec 9.3.3.5 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="200" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="200" bodyend="227"/>
        <referencedby refid="namespacesrsgnb_1acdf4ea3cddcfe5e32bb6c40d6af5dc89" compoundref="asn1__helpers_8cpp" startline="15" endline="28">cgi_from_asn1</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae48d88323135b13f064722d33b8dfeb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::ngap_mccmnc_to_plmn</definition>
        <argsstring>(uint16_t mcc, uint16_t mnc, uint32_t *plmn)</argsstring>
        <name>ngap_mccmnc_to_plmn</name>
        <param>
          <type>uint16_t</type>
          <declname>mcc</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>mnc</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>plmn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert BCD-coded MCC and MNC to PLMN. Digits are represented by 4-bit nibbles. Unused nibbles are filled with 0xf. MNC 001 represented as 0xf001 MNC 01 represented as 0xff01 PLMN encoded as per TS 38.413 sec 9.3.3.5 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/bcd_helpers.h" line="234" column="13" bodyfile="lib/ran/bcd_helpers.h" bodystart="234" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad6bcae65d3c1914f1be8a1ca4ab47c23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::log_proc_started</definition>
        <argsstring>(srslog::basic_logger &amp;logger, du_ue_index_t ue_index, rnti_t rnti, const char *proc_name)</argsstring>
        <name>log_proc_started</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_index</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
          <declname>rnti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="75" column="13" bodyfile="lib/ran/gnb_format.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3335ca39705242f26e558c4dae80c4be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::log_proc_started</definition>
        <argsstring>(srslog::basic_logger &amp;logger, du_ue_index_t ue_index, const char *proc_name)</argsstring>
        <name>log_proc_started</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="80" column="13" bodyfile="lib/ran/gnb_format.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac7b372de17b22819df1c314ea8915464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::log_proc_completed</definition>
        <argsstring>(srslog::basic_logger &amp;logger, du_ue_index_t ue_index, rnti_t rnti, const char *proc_name)</argsstring>
        <name>log_proc_completed</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_index</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
          <declname>rnti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="85" column="13" bodyfile="lib/ran/gnb_format.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3dd79348ec85c143958d6d4baee23b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::log_proc_failure</definition>
        <argsstring>(srslog::basic_logger &amp;logger, du_ue_index_t ue_index, const char *proc_name, const char *cause_fmt=&quot;&quot;, Args &amp;&amp;... args)</argsstring>
        <name>log_proc_failure</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cause_fmt</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="91" column="6" bodyfile="lib/ran/gnb_format.h" bodystart="91" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab7d3c17e6b749c5efaacfc3bb4470477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::log_proc_failure</definition>
        <argsstring>(srslog::basic_logger &amp;logger, du_ue_index_t ue_index, rnti_t rnti, const char *proc_name, const char *cause_fmt=&quot;&quot;, Args &amp;&amp;... args)</argsstring>
        <name>log_proc_failure</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_index</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
          <declname>rnti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cause_fmt</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="106" column="6" bodyfile="lib/ran/gnb_format.h" bodystart="106" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ae8afbb69d30f35fb5ad985fe9d4069dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::log_proc_event</definition>
        <argsstring>(srslog::basic_logger &amp;logger, du_ue_index_t ue_index, const char *proc_name, const char *cause_fmt, Args &amp;&amp;... args)</argsstring>
        <name>log_proc_event</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cause_fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="122" column="6" bodyfile="lib/ran/gnb_format.h" bodystart="122" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a69ac13d32dd254257059bd1cc6dbab5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::log_ue_event</definition>
        <argsstring>(srslog::basic_logger &amp;logger, const ue_event_prefix &amp;ue_prefix, const char *cause_fmt, Args &amp;&amp;... args)</argsstring>
        <name>log_ue_event</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1ue__event__prefix" kindref="compound">ue_event_prefix</ref> &amp;</type>
          <declname>ue_prefix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cause_fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="134" column="6" bodyfile="lib/ran/gnb_format.h" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a579af0a95c31be94e2ff38fafad14910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::log_ue_proc_event</definition>
        <argsstring>(srslog::log_channel &amp;log_ch, const ue_event_prefix &amp;ue_prefix, const char *proc_name, const char *cause_fmt, Args &amp;&amp;... args)</argsstring>
        <name>log_ue_proc_event</name>
        <param>
          <type><ref refid="classsrslog_1_1log__channel" kindref="compound">srslog::log_channel</ref> &amp;</type>
          <declname>log_ch</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1ue__event__prefix" kindref="compound">ue_event_prefix</ref> &amp;</type>
          <declname>ue_prefix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cause_fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="145" column="6" bodyfile="lib/ran/gnb_format.h" bodystart="145" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac102652e1ca652a54ee8fd2b040bfd65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::log_ul_pdu</definition>
        <argsstring>(srslog::basic_logger &amp;logger, du_ue_index_t ue_index, rnti_t rnti, du_cell_index_t cell_index, const char *ch, const char *cause_fmt, Args &amp;&amp;... args)</argsstring>
        <name>log_ul_pdu</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aa13f1b28a1a8fe4bb461b7eeee862c0c" kindref="member">du_ue_index_t</ref></type>
          <declname>ue_index</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
          <declname>rnti</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abc" kindref="member">du_cell_index_t</ref></type>
          <declname>cell_index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cause_fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="161" column="6" bodyfile="lib/ran/gnb_format.h" bodystart="161" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa4e8ac408e48dcb0eb338830bcf42c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::log_ul_pdu</definition>
        <argsstring>(srslog::basic_logger &amp;logger, rnti_t rnti, du_cell_index_t cc, const char *cause_fmt, Args &amp;&amp;... args)</argsstring>
        <name>log_ul_pdu</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1logger__impl" kindref="compound">srslog::basic_logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a7d970d1b6cf837cfcd3cca0714c3a46f" kindref="member">rnti_t</ref></type>
          <declname>rnti</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a0b7aa50c296e2ce222601286a8655abc" kindref="member">du_cell_index_t</ref></type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cause_fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/ran/gnb_format.h" line="173" column="6" bodyfile="lib/ran/gnb_format.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1dc6e815443684e7dc686a2366523580" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_am_pdu_header_min_size</definition>
        <argsstring>(rlc_am_sn_size sn_size)</argsstring>
        <name>rlc_am_pdu_header_min_size</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241" kindref="member">rlc_am_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="32" column="18" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1abb82544f04941c315e68989fb9ebb00d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_am_pdu_header_max_size</definition>
        <argsstring>(rlc_am_sn_size sn_size)</argsstring>
        <name>rlc_am_pdu_header_max_size</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241" kindref="member">rlc_am_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="44" column="18" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ab15a255a74ac398665a4683d2705e0f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::rlc_am_read_data_pdu_header</definition>
        <argsstring>(const byte_buffer &amp;pdu, const rlc_am_sn_size sn_size, rlc_am_pdu_header *header)</argsstring>
        <name>rlc_am_read_data_pdu_header</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref> &amp;</type>
          <declname>pdu</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesrsgnb_1a7ac4af27ff03947500988b24328e3241" kindref="member">rlc_am_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <param>
          <type><ref refid="structsrsgnb_1_1rlc__am__pdu__header" kindref="compound">rlc_am_pdu_header</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="155" column="13" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="155" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1adf133ec9c3e0d1e8ffbf07051e3f4513" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::rlc_am_write_data_pdu_header</definition>
        <argsstring>(const rlc_am_pdu_header &amp;header, byte_buffer &amp;pdu)</argsstring>
        <name>rlc_am_write_data_pdu_header</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1rlc__am__pdu__header" kindref="compound">rlc_am_pdu_header</ref> &amp;</type>
          <declname>header</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref> &amp;</type>
          <declname>pdu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_am_pdu.h" line="204" column="13" bodyfile="lib/rlc/rlc_am_pdu.h" bodystart="204" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a3a699e3cc21be8bcef86a7bde395cc4f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_um_pdu_header_size_no_so</definition>
        <argsstring>(rlc_um_sn_size sn_size)</argsstring>
        <name>rlc_um_pdu_header_size_no_so</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a025e5cc1228682e3e9accdef0914a93c" kindref="member">rlc_um_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="22" column="18" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="22" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aece316366c51c62aa533a0b20336e10b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t srsgnb::rlc_um_pdu_header_size_with_so</definition>
        <argsstring>(rlc_um_sn_size sn_size)</argsstring>
        <name>rlc_um_pdu_header_size_with_so</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a025e5cc1228682e3e9accdef0914a93c" kindref="member">rlc_um_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="37" column="18" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="37" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac41fab02e29a2b746819a3ccd45383e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::rlc_um_read_data_pdu_header</definition>
        <argsstring>(const byte_buffer_view &amp;pdu, const rlc_um_sn_size sn_size, rlc_um_pdu_header *header)</argsstring>
        <name>rlc_um_read_data_pdu_header</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1byte__buffer__view" kindref="compound">byte_buffer_view</ref> &amp;</type>
          <declname>pdu</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesrsgnb_1a025e5cc1228682e3e9accdef0914a93c" kindref="member">rlc_um_sn_size</ref></type>
          <declname>sn_size</declname>
        </param>
        <param>
          <type><ref refid="structsrsgnb_1_1rlc__um__pdu__header" kindref="compound">rlc_um_pdu_header</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="67" column="1" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="67" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aeea4afef236270cdab5f9fe1c9610d0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t srsgnb::rlc_um_nr_packed_length</definition>
        <argsstring>(const rlc_um_pdu_header &amp;header)</argsstring>
        <name>rlc_um_nr_packed_length</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1rlc__um__pdu__header" kindref="compound">rlc_um_pdu_header</ref> &amp;</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="128" column="15" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="128" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1afc0bb36466eb7a64a43c2c87977b7efa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::rlc_um_write_data_pdu_header</definition>
        <argsstring>(const rlc_um_pdu_header &amp;header, byte_buffer &amp;pdu)</argsstring>
        <name>rlc_um_write_data_pdu_header</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1rlc__um__pdu__header" kindref="compound">rlc_um_pdu_header</ref> &amp;</type>
          <declname>header</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1byte__buffer" kindref="compound">byte_buffer</ref> &amp;</type>
          <declname>pdu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/rlc/rlc_um_pdu.h" line="150" column="13" bodyfile="lib/rlc/rlc_um_pdu.h" bodystart="150" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ac37046979c3e23c29f66f49b7bb02aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::nof_slots_per_tdd_period</definition>
        <argsstring>(const tdd_ul_dl_config_common &amp;cfg)</argsstring>
        <name>nof_slots_per_tdd_period</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1tdd__ul__dl__config__common" kindref="compound">tdd_ul_dl_config_common</ref> &amp;</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Calculates number of slots, using TDD reference SCS, of the TDD UL-DL configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/cell/cell_configuration.h" line="19" column="10" bodyfile="lib/scheduler/cell/cell_configuration.cpp" bodystart="18" bodyend="22" declfile="lib/scheduler/cell/cell_configuration.h" declline="19" declcolumn="10"/>
        <references refid="structsrsgnb_1_1tdd__ul__dl__pattern_1a757f5ad081d9ef103e28f5dcbbdf5c04" compoundref="tdd__ul__dl__config_8h" startline="9">srsgnb::tdd_ul_dl_pattern::dl_ul_tx_period_nof_slots</references>
        <referencedby refid="namespacesrsgnb_1a06984d7256480a44cd46842d6f5faedd" compoundref="cell__configuration_8cpp" startline="24" endline="46">slot_is_dl</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a06984d7256480a44cd46842d6f5faedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::slot_is_dl</definition>
        <argsstring>(const tdd_ul_dl_config_common &amp;cfg, slot_point slot)</argsstring>
        <name>slot_is_dl</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1tdd__ul__dl__config__common" kindref="compound">tdd_ul_dl_config_common</ref> &amp;</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>slot</declname>
        </param>
        <briefdescription>
<para>Checks whether provided slot corresponds to a DL slot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/cell/cell_configuration.h" line="22" column="6" bodyfile="lib/scheduler/cell/cell_configuration.cpp" bodystart="24" bodyend="46" declfile="lib/scheduler/cell/cell_configuration.h" declline="22" declcolumn="6"/>
        <references refid="namespacesrsgnb_1ac37046979c3e23c29f66f49b7bb02aa3" compoundref="cell__configuration_8cpp" startline="18" endline="22">nof_slots_per_tdd_period</references>
        <references refid="classsrsgnb_1_1slot__point_1a7a7cfffb183af6291f83ab1d12ac37d6" compoundref="slot__point_8h" startline="86" endline="86">srsgnb::slot_point::numerology</references>
        <references refid="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" compoundref="subcarrier__spacing_8h" startline="38" endline="41">to_numerology_value</references>
        <references refid="structsrsgnb_1_1tdd__ul__dl__config__common_1ae7c8155a4d6a1f75eb88bc108520d328" compoundref="tdd__ul__dl__config_8h" startline="24">srsgnb::tdd_ul_dl_config_common::ref_scs</references>
        <references refid="namespacesrsgnb_1ac7af21fff7f536782c70d0eb0fd09b47" compoundref="slot__point_8h" startline="258" endline="268">set_slot_numerology</references>
        <references refid="structsrsgnb_1_1tdd__ul__dl__pattern_1a757f5ad081d9ef103e28f5dcbbdf5c04" compoundref="tdd__ul__dl__config_8h" startline="9">srsgnb::tdd_ul_dl_pattern::dl_ul_tx_period_nof_slots</references>
        <references refid="structsrsgnb_1_1tdd__ul__dl__pattern_1a281a5df58bccb2c10a75ed70d0e318d5" compoundref="tdd__ul__dl__config_8h" startline="11">srsgnb::tdd_ul_dl_pattern::nof_dl_slots</references>
        <references refid="structsrsgnb_1_1tdd__ul__dl__pattern_1af34906d3bc89ee9a8cdaedae756092f8" compoundref="tdd__ul__dl__config_8h" startline="13">srsgnb::tdd_ul_dl_pattern::nof_dl_symbols</references>
        <referencedby refid="namespacesrsgnb_1aa0dab8cc4999410468059797137dc096" compoundref="cell__configuration_8cpp" startline="48" endline="52">slot_is_ul</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aa0dab8cc4999410468059797137dc096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::slot_is_ul</definition>
        <argsstring>(const tdd_ul_dl_config_common &amp;cfg, slot_point slot)</argsstring>
        <name>slot_is_ul</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1tdd__ul__dl__config__common" kindref="compound">tdd_ul_dl_config_common</ref> &amp;</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>slot</declname>
        </param>
        <briefdescription>
<para>Checks whether provided slot corresponds to an UL slot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/cell/cell_configuration.h" line="25" column="6" bodyfile="lib/scheduler/cell/cell_configuration.cpp" bodystart="48" bodyend="52" declfile="lib/scheduler/cell/cell_configuration.h" declline="25" declcolumn="6"/>
        <references refid="namespacesrsgnb_1a06984d7256480a44cd46842d6f5faedd" compoundref="cell__configuration_8cpp" startline="24" endline="46">slot_is_dl</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a81a8a059e7a5d8b187c466ed8db8cb0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
        <definition>crb_interval srsgnb::get_carrier_rb_dims</definition>
        <argsstring>(const scs_specific_carrier &amp;carrier_cfg)</argsstring>
        <name>get_carrier_rb_dims</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1scs__specific__carrier" kindref="compound">scs_specific_carrier</ref> &amp;</type>
          <declname>carrier_cfg</declname>
        </param>
        <briefdescription>
<para>Derives Carrier CRB limits from scs-SpecificCarrier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/cell/resource_grid.h" line="61" column="21" bodyfile="lib/scheduler/cell/resource_grid.h" bodystart="61" bodyend="64"/>
        <references refid="structsrsgnb_1_1scs__specific__carrier_1a2fa47990024f5edaf4470adc8cff7f43" compoundref="bwp__configuration_8h" startline="204">srsgnb::scs_specific_carrier::offset_to_carrier</references>
        <references refid="structsrsgnb_1_1scs__specific__carrier_1af106d027a83ecdd2bd5001a7adc1f7cc" compoundref="bwp__configuration_8h" startline="207">srsgnb::scs_specific_carrier::carrier_bandwidth</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a268ae95e964f71f644227aefad360a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Other</type>
          </param>
        </templateparamlist>
        <type><ref refid="structsrsgnb_1_1bwp__rb__bitmap" kindref="compound">bwp_rb_bitmap</ref></type>
        <definition>bwp_rb_bitmap srsgnb::operator|</definition>
        <argsstring>(const bwp_rb_bitmap &amp;lhs, const Other &amp;rhs)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1bwp__rb__bitmap" kindref="compound">bwp_rb_bitmap</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Other &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/cell/scheduler_prb.h" line="112" column="15" bodyfile="lib/scheduler/cell/scheduler_prb.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a890506b2184eacc8a9091b7349eda0bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::get_msg3_delay</definition>
        <argsstring>(const pusch_time_domain_resource_allocation &amp;pusch_td_res_alloc, subcarrier_spacing pusch_scs)</argsstring>
        <name>get_msg3_delay</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1pusch__time__domain__resource__allocation" kindref="compound">pusch_time_domain_resource_allocation</ref> &amp;</type>
          <declname>pusch_td_res_alloc</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>pusch_scs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get MSG3 Delay. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pusch_td_res_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>PUSCH-TimeDomainResourceAllocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pusch_scs</parametername>
</parameternamelist>
<parameterdescription>
<para>SCS used by initial UL BWP. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Msg3 delay in number of slots. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/common_scheduling/ra_scheduler.h" line="26" column="10" bodyfile="lib/scheduler/common_scheduling/ra_scheduler.cpp" bodystart="21" bodyend="35" declfile="lib/scheduler/common_scheduling/ra_scheduler.h" declline="26" declcolumn="10"/>
        <references refid="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" compoundref="subcarrier__spacing_8h" startline="38" endline="41">to_numerology_value</references>
        <references refid="structsrsgnb_1_1pusch__time__domain__resource__allocation_1a58a13c680c9e0e5eba14ce2b973d46be" compoundref="bwp__configuration_8h" startline="178">srsgnb::pusch_time_domain_resource_allocation::k2</references>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1a218ba7f4d2fe7d8d8f3f6b6e8eb82066" compoundref="ra__scheduler_8cpp" startline="139" endline="225">srsgnb::ra_scheduler::run_slot</referencedby>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa3f2f6f48a91de48e48819b317045439" compoundref="ra__scheduler_8cpp" startline="227" endline="318">srsgnb::ra_scheduler::schedule_rar</referencedby>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa7f5ee78860e7768890012a950bb289c" compoundref="ra__scheduler_8cpp" startline="320" endline="410">srsgnb::ra_scheduler::fill_rar_grant</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a42a3cddf5672000e229f3c0cdc34f467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t srsgnb::get_ra_rnti</definition>
        <argsstring>(const rach_indication_message &amp;rach_ind, bool is_sul=false)</argsstring>
        <name>get_ra_rnti</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1rach__indication__message" kindref="compound">rach_indication_message</ref> &amp;</type>
          <declname>rach_ind</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_sul</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get RA-RNTI based on PRACH parameters. <simplesect kind="remark"><para>See 38.321, 5.1.3 - Random Access Preamble transmission </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/common_scheduling/ra_scheduler.h" line="30" column="10" bodyfile="lib/scheduler/common_scheduling/ra_scheduler.cpp" bodystart="37" bodyend="48" declfile="lib/scheduler/common_scheduling/ra_scheduler.h" declline="30" declcolumn="10"/>
        <references refid="structsrsgnb_1_1rach__indication__message_1ae2b79a8ddd289f0bb48a849f3e70cc2d" compoundref="scheduler__configurator_8h" startline="140">srsgnb::rach_indication_message::symbol_index</references>
        <references refid="classsrsgnb_1_1slot__point_1a3c10067548735ef432b9c9186f127b8e" compoundref="slot__point_8h" startline="90" endline="90">srsgnb::slot_point::slot_index</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7013d933970c0511708f306fb66cb5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
        <definition>subcarrier_spacing srsgnb::ssb_case_to_scs</definition>
        <argsstring>(ssb_pattern_case ssb_case)</argsstring>
        <name>ssb_case_to_scs</name>
        <param>
          <type><ref refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ff" kindref="member">ssb_pattern_case</ref></type>
          <declname>ssb_case</declname>
        </param>
        <briefdescription>
<para>Derive SSB Subcarrier Spacing from SSB pattern case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/common_scheduling/ssb_scheduler.h" line="26" column="20" bodyfile="lib/scheduler/common_scheduling/ssb_scheduler.cpp" bodystart="19" bodyend="35" declfile="lib/scheduler/common_scheduling/ssb_scheduler.h" declline="26" declcolumn="20"/>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa7fc56270e7a70fa81a5935b72eacbe29">A</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa9d5ed678fe57bcca610140957afab571">B</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa0d61f8370cad1d412f80b84d143e1257">C</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffaf623e75af30e62bbd73d6df5b50bb7b5">D</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa3a3ea00cfc35332cedf6e5e9a32e94da">E</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7b61af2239baf4702a09b33f3c499532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::schedule_ssb</definition>
        <argsstring>(cell_slot_resource_allocator &amp;slot_allocator, const slot_point &amp;sl_point, const cell_configuration &amp;cell_cfg)</argsstring>
        <name>schedule_ssb</name>
        <param>
          <type><ref refid="structsrsgnb_1_1cell__slot__resource__allocator" kindref="compound">cell_slot_resource_allocator</ref> &amp;</type>
          <declname>slot_allocator</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref> &amp;</type>
          <declname>sl_point</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1cell__configuration" kindref="compound">cell_configuration</ref> &amp;</type>
          <declname>cell_cfg</declname>
        </param>
        <briefdescription>
<para>Schedule grant for SSB. </para>
        </briefdescription>
        <detaileddescription>
<para>The functions schedules the SSB according to a given periodicity, depending on the frequency and SSB case</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">slot_allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot allocator object with SSB grants and DL PRBs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sl_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot point carrying information about current slot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cell_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to scheduler cell configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function only works for FR1, or L_max = 4 or 8. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/common_scheduling/ssb_scheduler.h" line="37" column="6" bodyfile="lib/scheduler/common_scheduling/ssb_scheduler.cpp" bodystart="165" bodyend="209" declfile="lib/scheduler/common_scheduling/ssb_scheduler.h" declline="37" declcolumn="6"/>
        <references refid="structsrsgnb_1_1cell__slot__resource__allocator_1a8724d6f3f22a6c17ae31694f3b528153" compoundref="lib_2scheduler_2cell_2resource__grid_8h" startline="181">srsgnb::cell_slot_resource_allocator::result</references>
        <references refid="structsrsgnb_1_1dl__sched__result_1a9aed1362f53b91b4132a5ffdeafe1a71" compoundref="scheduler__slot__handler_8h" startline="228">srsgnb::dl_sched_result::bc</references>
        <references refid="classsrsgnb_1_1cell__configuration_1afa3744e766857243070aff9b242d63b9" compoundref="lib_2scheduler_2cell_2cell__configuration_8h" startline="48">srsgnb::cell_configuration::dl_carrier</references>
        <references refid="structsrsgnb_1_1carrier__configuration_1adf475848f2b45f881020d79a4c64e270" compoundref="carrier__configuration_8h" startline="24">srsgnb::carrier_configuration::arfcn</references>
        <references refid="namespacesrsgnb_1ab8686341cd5376a5c8fb8499ee1c51f1" compoundref="sched__consts_8h" startline="23">FR1_MAX_FREQUENCY_ARFCN</references>
        <references refid="namespacesrsgnb_1a68bf38c281ace99aa904480dcb767cd5" compoundref="ssb__properties_8h" startline="24" endline="27">ssb_periodicity_to_value</references>
        <references refid="structsrsgnb_1_1ssb__configuration_1a47d732e45e5aa7b7db150a6d5a30280d" compoundref="ssb__configuration_8h" startline="29">srsgnb::ssb_configuration::ssb_period</references>
        <references refid="classsrsgnb_1_1slot__point_1a7a7cfffb183af6291f83ab1d12ac37d6" compoundref="slot__point_8h" startline="86" endline="86">srsgnb::slot_point::numerology</references>
        <references refid="classsrsgnb_1_1slot__point_1ad15b0688ae249ad97771acc2e199858e" compoundref="slot__point_8h" startline="99" endline="99">srsgnb::slot_point::nof_slots_per_subframe</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa7fc56270e7a70fa81a5935b72eacbe29">A</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa0d61f8370cad1d412f80b84d143e1257">C</references>
        <references refid="namespacesrsgnb_1a17b953996ae0c7dda753d3fddda378f2" compoundref="sched__consts_8h" startline="25">CUTOFF_FREQ_ARFCN_CASE_A_B_C</references>
        <references refid="namespacesrsgnb_1a570e4d7e1acf25c785c63350fd0f1c24" compoundref="sched__consts_8h" startline="27">CUTOFF_FREQ_ARFCN_CASE_C_UNPAIRED</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffa9d5ed678fe57bcca610140957afab571">B</references>
        <references refid="namespacesrsgnb_1ac2182602fc78153abfadb424ff33f6ffafedb2d84cafe20862cb4399751a8a7e3">invalid</references>
        <references refid="structsrsgnb_1_1cell__slot__resource__allocator_1af1df59d8b7ca78390815806e0a552d8e" compoundref="lib_2scheduler_2cell_2resource__grid_8h" startline="184">srsgnb::cell_slot_resource_allocator::dl_res_grid</references>
        <references refid="classsrsgnb_1_1cell__slot__resource__grid_1abf35ef94e4fda289536095561faded14" compoundref="resource__grid_8cpp" startline="110" endline="116">srsgnb::cell_slot_resource_grid::fill</references>
        <referencedby refid="classsrsgnb_1_1scheduler__impl_1ae334a7d64a4c9f958c391dc0ddceedf1" compoundref="scheduler__impl_8cpp" startline="53" endline="77">srsgnb::scheduler_impl::slot_indication</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5bcb84db93ea7deff3c22938b2567a25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::is_pdcch_monitoring_active</definition>
        <argsstring>(slot_point sl, const search_space_configuration &amp;ss_cfg)</argsstring>
        <name>is_pdcch_monitoring_active</name>
        <param>
          <type><ref refid="classsrsgnb_1_1slot__point" kindref="compound">slot_point</ref></type>
          <declname>sl</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1search__space__configuration" kindref="compound">search_space_configuration</ref> &amp;</type>
          <declname>ss_cfg</declname>
        </param>
        <briefdescription>
<para>Helper function to check whether a SearchSpace PDCCH is monitored by the UE for a given slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sl</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot in which the SearchSpace is being monitored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ss_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>SearchSpace configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the SearchSpace is being monitored. False, otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/pdcch_scheduling/pdcch_config_helpers.h" line="25" column="13" bodyfile="lib/scheduler/pdcch_scheduling/pdcch_config_helpers.h" bodystart="25" bodyend="36"/>
        <references refid="structsrsgnb_1_1search__space__configuration_1a9bacc4ccd1ead9b95278ced82cea0510" compoundref="bwp__configuration_8h" startline="63">srsgnb::search_space_configuration::monitoring_slot_period</references>
        <references refid="structsrsgnb_1_1search__space__configuration_1a8444e9c5e8aac47f1f90b65cf71e6456" compoundref="bwp__configuration_8h" startline="65">srsgnb::search_space_configuration::monitoring_slot_offset</references>
        <references refid="structsrsgnb_1_1search__space__configuration_1a92c3318540c072c830614bf0a8d74c9b" compoundref="bwp__configuration_8h" startline="67">srsgnb::search_space_configuration::duration</references>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1a218ba7f4d2fe7d8d8f3f6b6e8eb82066" compoundref="ra__scheduler_8cpp" startline="139" endline="225">srsgnb::ra_scheduler::run_slot</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1add70ad37922ae596af89bfb278b5ed4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a112edd1c16d511ee5d0197173bfdabcb" kindref="member">prb_index_list</ref></type>
        <definition>prb_index_list srsgnb::cce_to_prb_mapping</definition>
        <argsstring>(const bwp_configuration &amp;bwp_cfg, const coreset_configuration &amp;cs_cfg, pci_t pci, aggregation_level aggr_lvl, unsigned ncce)</argsstring>
        <name>cce_to_prb_mapping</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1bwp__configuration" kindref="compound">bwp_configuration</ref> &amp;</type>
          <declname>bwp_cfg</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1coreset__configuration" kindref="compound">coreset_configuration</ref> &amp;</type>
          <declname>cs_cfg</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aeade94aaea718e0825ce98aadf28d60e" kindref="member">pci_t</ref></type>
          <declname>pci</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a1e0dbb8f05429dc6d5ab1311059e01c1" kindref="member">aggregation_level</ref></type>
          <declname>aggr_lvl</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>ncce</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/pdcch_scheduling/pdcch_config_helpers.h" line="38" column="23" bodyfile="lib/scheduler/pdcch_scheduling/pdcch_config_helpers.h" bodystart="38" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a90d5a7ea5534bf82cb0b5f81bb720188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classsrsgnb_1_1scheduler__policy" kindref="compound">scheduler_policy</ref> &gt;</type>
        <definition>std::unique_ptr&lt; scheduler_policy &gt; srsgnb::create_scheduler_strategy</definition>
        <argsstring>(const scheduler_strategy_params &amp;params)</argsstring>
        <name>create_scheduler_strategy</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1scheduler__strategy__params" kindref="compound">scheduler_strategy_params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/policy/scheduler_policy_factory.h" line="22" column="17" bodyfile="lib/scheduler/policy/scheduler_policy_factory.cpp" bodystart="16" bodyend="19" declfile="lib/scheduler/policy/scheduler_policy_factory.h" declline="22" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a4521d0c47fbcc8346716c0a9ab2b68b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::prb_to_crb</definition>
        <argsstring>(const bwp_configuration &amp;bwp_cfg, unsigned prb)</argsstring>
        <name>prb_to_crb</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1bwp__configuration" kindref="compound">bwp_configuration</ref> &amp;</type>
          <declname>bwp_cfg</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>prb</declname>
        </param>
        <briefdescription>
<para>Convert PRB within a BWP into a Common RB, which use pointA as reference point. The CRB and PRB are assumed to have the same numerology of the provided BWP configuration. The existence of a CORESET#0 may also affect the rules for CRB&lt;-&gt;PRB conversion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bwp_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>BWP configuration of the respective PRB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prb</parametername>
</parameternamelist>
<parameterdescription>
<para>PRB to be converted to CRB. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Calculated CRB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/bwp_helpers.h" line="23" column="17" bodyfile="lib/scheduler/support/bwp_helpers.h" bodystart="23" bodyend="27"/>
        <references refid="structsrsgnb_1_1bwp__configuration_1af8ceaeaae0eccfbacd463cfc855e28d1" compoundref="bwp__configuration_8h" startline="112">srsgnb::bwp_configuration::crbs</references>
        <references refid="classsrsgnb_1_1interval_1afaa426e56c4e96208758552d97a7b43c" compoundref="interval_8h" startline="45" endline="45">srsgnb::interval&lt; T &gt;::length</references>
        <referencedby refid="classpdcch__scheduler__impl_1_1pdcch__slot__allocator_1a2945a1dbbcb2eb53b0d03707b80e1b39" compoundref="pdcch__scheduler__impl_8cpp" startline="169" endline="201">srsgnb::pdcch_scheduler_impl::pdcch_slot_allocator::allocate_cce</referencedby>
        <referencedby refid="namespacesrsgnb_1adb886764dffd0738ce1fb4d1bc4dfd7d" compoundref="bwp__helpers_8h" startline="34" endline="37">prb_to_crb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1adb886764dffd0738ce1fb4d1bc4dfd7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
        <definition>crb_interval srsgnb::prb_to_crb</definition>
        <argsstring>(const bwp_configuration &amp;bwp_cfg, prb_interval prbs)</argsstring>
        <name>prb_to_crb</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1bwp__configuration" kindref="compound">bwp_configuration</ref> &amp;</type>
          <declname>bwp_cfg</declname>
        </param>
        <param>
          <type><ref refid="structsrsgnb_1_1prb__interval" kindref="compound">prb_interval</ref></type>
          <declname>prbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert PRBs within a BWP into Common RBs, which use pointA as reference point. CRBs and PRBs are assumed to have the same numerology of the provided BWP configuration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bwp_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>BWP configuration of the respective PRB interval. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prbs</parametername>
</parameternamelist>
<parameterdescription>
<para>PRBs to be converted to CRBs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Calculated CRB interval. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/bwp_helpers.h" line="34" column="21" bodyfile="lib/scheduler/support/bwp_helpers.h" bodystart="34" bodyend="37"/>
        <references refid="namespacesrsgnb_1a4521d0c47fbcc8346716c0a9ab2b68b5" compoundref="bwp__helpers_8h" startline="23" endline="27">prb_to_crb</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1adaef08fc34c2214394a362de4f1182bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::crb_to_prb</definition>
        <argsstring>(const bwp_configuration &amp;bwp_cfg, unsigned crb)</argsstring>
        <name>crb_to_prb</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1bwp__configuration" kindref="compound">bwp_configuration</ref> &amp;</type>
          <declname>bwp_cfg</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>crb</declname>
        </param>
        <briefdescription>
<para>Convert CRB within a BWP into a PRB. The CRB and PRB are assumed to use the same numerology as reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bwp_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>BWP configuration of the respective CRB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crb</parametername>
</parameternamelist>
<parameterdescription>
<para>CRB to be converted to PRB. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Calculated PRB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/bwp_helpers.h" line="44" column="17" bodyfile="lib/scheduler/support/bwp_helpers.h" bodystart="44" bodyend="51"/>
        <references refid="structsrsgnb_1_1bwp__configuration_1af8ceaeaae0eccfbacd463cfc855e28d1" compoundref="bwp__configuration_8h" startline="112">srsgnb::bwp_configuration::crbs</references>
        <references refid="classsrsgnb_1_1interval_1ac280e002d3db0cc5815bf63dbc770955" compoundref="interval_8h" startline="99" endline="99">srsgnb::interval&lt; T &gt;::contains</references>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa7f5ee78860e7768890012a950bb289c" compoundref="ra__scheduler_8cpp" startline="320" endline="410">srsgnb::ra_scheduler::fill_rar_grant</referencedby>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a9273e6714497a71a3b4fc86660e88727" compoundref="sib__scheduler_8cpp" startline="220" endline="274">srsgnb::sib1_scheduler::fill_sib1_grant</referencedby>
        <referencedby refid="namespacesrsgnb_1a14f12eda297f37a4101214346d862438" compoundref="bwp__helpers_8h" startline="55" endline="59">crb_to_prb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a14f12eda297f37a4101214346d862438" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1prb__interval" kindref="compound">prb_interval</ref></type>
        <definition>prb_interval srsgnb::crb_to_prb</definition>
        <argsstring>(const bwp_configuration &amp;bwp_cfg, crb_interval crbs)</argsstring>
        <name>crb_to_prb</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1bwp__configuration" kindref="compound">bwp_configuration</ref> &amp;</type>
          <declname>bwp_cfg</declname>
        </param>
        <param>
          <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
          <declname>crbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert CRBs to PRBs within a BWP. CRBs and PRBs are assumed to have the same numerology of the provided BWP configuration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/bwp_helpers.h" line="55" column="21" bodyfile="lib/scheduler/support/bwp_helpers.h" bodystart="55" bodyend="59"/>
        <references refid="namespacesrsgnb_1adaef08fc34c2214394a362de4f1182bc" compoundref="bwp__helpers_8h" startline="44" endline="51">crb_to_prb</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1ad4f660af5791f7af81a8de014e465019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="structsrsgnb_1_1pusch__time__domain__resource__allocation" kindref="compound">pusch_time_domain_resource_allocation</ref> &gt;</type>
        <definition>span&lt;const pusch_time_domain_resource_allocation&gt; srsgnb::get_pusch_time_domain_resource_table</definition>
        <argsstring>(const pusch_config_common &amp;pusch_cfg)</argsstring>
        <name>get_pusch_time_domain_resource_table</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1pusch__config__common" kindref="compound">pusch_config_common</ref> &amp;</type>
          <declname>pusch_cfg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the time resource allocation table for PUSCH. <simplesect kind="remark"><para>See TS 38.214, Section 6.1.2.1.1 - Determination of the resource allocation table to be used for PUSCH. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/config_helpers.h" line="20" column="1" bodyfile="lib/scheduler/support/config_helpers.h" bodystart="20" bodyend="27"/>
        <references refid="structsrsgnb_1_1pusch__config__common_1a605245abaef61a7bf04b5ff774e7f0b9" compoundref="bwp__configuration_8h" startline="187">srsgnb::pusch_config_common::pusch_td_alloc_list</references>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1a218ba7f4d2fe7d8d8f3f6b6e8eb82066" compoundref="ra__scheduler_8cpp" startline="139" endline="225">srsgnb::ra_scheduler::run_slot</referencedby>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa3f2f6f48a91de48e48819b317045439" compoundref="ra__scheduler_8cpp" startline="227" endline="318">srsgnb::ra_scheduler::schedule_rar</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5f8601e7f87ff7ac0726c767b145ae1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::get_coreset_nof_prbs</definition>
        <argsstring>(const coreset_configuration &amp;cs_cfg)</argsstring>
        <name>get_coreset_nof_prbs</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1coreset__configuration" kindref="compound">coreset_configuration</ref> &amp;</type>
          <declname>cs_cfg</declname>
        </param>
        <briefdescription>
<para>Computes the number of RBs used to represent the CORESET. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/config_helpers.h" line="30" column="17" bodyfile="lib/scheduler/support/config_helpers.h" bodystart="30" bodyend="37"/>
        <references refid="classsrsgnb_1_1interval_1afaa426e56c4e96208758552d97a7b43c" compoundref="interval_8h" startline="45" endline="45">srsgnb::interval&lt; T &gt;::length</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1ac144398b8b6c75c17e986b6027a7fea4" compoundref="bounded__bitset_8h" startline="591" endline="598">srsgnb::bounded_bitset&lt; N, reversed &gt;::count</references>
        <referencedby refid="namespacesrsgnb_1a843bb84acff200e7fd6684725c76a3d7" compoundref="config__helpers_8h" startline="51" endline="55">get_coreset0_crbs</referencedby>
        <referencedby refid="namespacesrsgnb_1a7f1c09762a1477bc1698a03f6df0d9af" compoundref="config__helpers_8h" startline="58" endline="62">get_coreset_nof_cces</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a2932e903fa0b2f74ed093619577ff78e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::get_coreset_start_crb</definition>
        <argsstring>(const coreset_configuration &amp;cs_cfg)</argsstring>
        <name>get_coreset_start_crb</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1coreset__configuration" kindref="compound">coreset_configuration</ref> &amp;</type>
          <declname>cs_cfg</declname>
        </param>
        <briefdescription>
<para>Computes the lowest RB used by the CORESET. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/config_helpers.h" line="40" column="17" bodyfile="lib/scheduler/support/config_helpers.h" bodystart="40" bodyend="48"/>
        <references refid="classsrsgnb_1_1bounded__bitset_1a6fee80b0e9a17208ca9de4a0869c535b" compoundref="bounded__bitset_8h" startline="684" endline="688">srsgnb::bounded_bitset&lt; N, reversed &gt;::to_uint64</references>
        <references refid="namespacesrsgnb_1a06afb1454d06e33c0c6ee5800a5cc2ac" compoundref="bounded__bitset_8h" startline="184" endline="187">find_first_lsb_one</references>
        <referencedby refid="namespacesrsgnb_1a843bb84acff200e7fd6684725c76a3d7" compoundref="config__helpers_8h" startline="51" endline="55">get_coreset0_crbs</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a843bb84acff200e7fd6684725c76a3d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
        <definition>crb_interval srsgnb::get_coreset0_crbs</definition>
        <argsstring>(const pdcch_config_common &amp;pdcch_cfg)</argsstring>
        <name>get_coreset0_crbs</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1pdcch__config__common" kindref="compound">pdcch_config_common</ref> &amp;</type>
          <declname>pdcch_cfg</declname>
        </param>
        <briefdescription>
<para>Computes the CRB interval that delimits CORESET#0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/config_helpers.h" line="51" column="21" bodyfile="lib/scheduler/support/config_helpers.h" bodystart="51" bodyend="55"/>
        <references refid="namespacesrsgnb_1a2932e903fa0b2f74ed093619577ff78e" compoundref="config__helpers_8h" startline="40" endline="48">get_coreset_start_crb</references>
        <references refid="structsrsgnb_1_1pdcch__config__common_1af4e2c23c3d6704ddcd0343371cd1deea" compoundref="bwp__configuration_8h" startline="84">srsgnb::pdcch_config_common::coreset0</references>
        <references refid="namespacesrsgnb_1a5f8601e7f87ff7ac0726c767b145ae1c" compoundref="config__helpers_8h" startline="30" endline="37">get_coreset_nof_prbs</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7f1c09762a1477bc1698a03f6df0d9af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::get_coreset_nof_cces</definition>
        <argsstring>(const coreset_configuration &amp;cs_cfg)</argsstring>
        <name>get_coreset_nof_cces</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1coreset__configuration" kindref="compound">coreset_configuration</ref> &amp;</type>
          <declname>cs_cfg</declname>
        </param>
        <briefdescription>
<para>Calculates number of CCEs in CORESET. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/config_helpers.h" line="58" column="17" bodyfile="lib/scheduler/support/config_helpers.h" bodystart="58" bodyend="62"/>
        <references refid="namespacesrsgnb_1a5f8601e7f87ff7ac0726c767b145ae1c" compoundref="config__helpers_8h" startline="30" endline="37">get_coreset_nof_prbs</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a9662f8d27892bec94a286c40ec5d361c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::search_space_supports_dl_dci_format</definition>
        <argsstring>(const search_space_configuration &amp;ss_cfg, dci_dl_format dci_fmt)</argsstring>
        <name>search_space_supports_dl_dci_format</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1search__space__configuration" kindref="compound">search_space_configuration</ref> &amp;</type>
          <declname>ss_cfg</declname>
        </param>
        <param>
          <type>dci_dl_format</type>
          <declname>dci_fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/config_helpers.h" line="64" column="13" bodyfile="lib/scheduler/support/config_helpers.h" bodystart="64" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a718a2341f4bda7584e2c51ea6ebed5dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::calculate_nof_dmrs_per_rb</definition>
        <argsstring>(const dmrs_information &amp;dmrs)</argsstring>
        <name>calculate_nof_dmrs_per_rb</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1dmrs__information" kindref="compound">dmrs_information</ref> &amp;</type>
          <declname>dmrs</declname>
        </param>
        <briefdescription>
<para>Calculates the number of RE used for DMRS per RB in PDSCH and PUSCH transmissions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/dmrs_helpers.h" line="21" column="17" bodyfile="lib/scheduler/support/dmrs_helpers.h" bodystart="21" bodyend="35"/>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a32b9bcfcc6ae452c2d0516a8518d8d16" compoundref="sib__scheduler_8cpp" startline="155" endline="218">srsgnb::sib1_scheduler::allocate_sib1</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a4c96541c857fc1232a058629534d341e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1dmrs__information" kindref="compound">dmrs_information</ref></type>
        <definition>dmrs_information srsgnb::make_dmrs_info_common</definition>
        <argsstring>(const pdsch_config_common &amp;pdsch_cfg, uint8_t time_resource, pci_t pci, dmrs_typeA_position dmrs_typeA_pos)</argsstring>
        <name>make_dmrs_info_common</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1pdsch__config__common" kindref="compound">pdsch_config_common</ref> &amp;</type>
          <declname>pdsch_cfg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>time_resource</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1aeade94aaea718e0825ce98aadf28d60e" kindref="member">pci_t</ref></type>
          <declname>pci</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1abb6ad055937d8532d1b9c7ea61354ab1" kindref="member">dmrs_typeA_position</ref></type>
          <declname>dmrs_typeA_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper factory of a default DM-RS Information object for DCI f1_0 or for when higher layer configuration parameters are not yet available. TODO: generalize to other cases (e.g. mapping type B). <simplesect kind="remark"><para>See TS 38.214, 5.1.6.2 - DM-RS reception procedure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/dmrs_helpers.h" line="41" column="25" bodyfile="lib/scheduler/support/dmrs_helpers.h" bodystart="41" bodyend="79"/>
        <references refid="structsrsgnb_1_1pdsch__config__common_1a9ae93edd088068b36ce29029781ed84b" compoundref="bwp__configuration_8h" startline="133">srsgnb::pdsch_config_common::pdsch_td_alloc_list</references>
        <references refid="structsrsgnb_1_1pdsch__dmrs__symbol__mask__mapping__type__A__single__configuration_1a08563d74bf59339cc01b5b8c8f3d5bc8" compoundref="pdsch__dmrs__symbol__mask_8h" startline="23">srsgnb::pdsch_dmrs_symbol_mask_mapping_type_A_single_configuration::typeA_pos</references>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa7f5ee78860e7768890012a950bb289c" compoundref="ra__scheduler_8cpp" startline="320" endline="410">srsgnb::ra_scheduler::fill_rar_grant</referencedby>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a32b9bcfcc6ae452c2d0516a8518d8d16" compoundref="sib__scheduler_8cpp" startline="155" endline="218">srsgnb::sib1_scheduler::allocate_sib1</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aeb296a5d337b5268ac46ba7ae349acd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__description" kindref="compound">pdcch_type0_css_occasion_pattern1_description</ref></type>
        <definition>pdcch_type0_css_occasion_pattern1_description srsgnb::pdcch_type0_css_occasions_get_pattern1</definition>
        <argsstring>(const pdcch_type0_css_occasion_pattern1_configuration &amp;config)</argsstring>
        <name>pdcch_type0_css_occasions_get_pattern1</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__configuration" kindref="compound">pdcch_type0_css_occasion_pattern1_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get Type0-PDCCH CSS occasions for multiplexing pattern 1 as per TS38.213 Section 13. </para>
        </briefdescription>
        <detaileddescription>
<para>The Type0-PDCCH CSS occasions are retrieved from TS38.213 Table 13-11 for FR1 and Table 13-12 for FR2.</para>
<para>An assertion is triggered if <computeroutput>config</computeroutput> is not valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the necessary parameters to calculate the occasions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid Type0-PDCCH CSS occasion for multiplexing pattern 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/pdcch/pdcch_type0_css_occasions.h" line="63" column="1" bodyfile="lib/scheduler/support/pdcch/pdcch_type0_css_occasions.cpp" bodystart="16" bodyend="77" declfile="lib/scheduler/support/pdcch/pdcch_type0_css_occasions.h" declline="63" declcolumn="1"/>
        <references refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__configuration_1ac3fab716f5e0560c13af7c94f2b36d49" compoundref="pdcch__type0__css__occasions_8h" startline="20">srsgnb::pdcch_type0_css_occasion_pattern1_configuration::is_fr2</references>
        <references refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__configuration_1a4c49312c0582dbd9e1b148853a40a83b" compoundref="pdcch__type0__css__occasions_8h" startline="22">srsgnb::pdcch_type0_css_occasion_pattern1_configuration::ss_zero_index</references>
        <references refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__description_1a47526ad8201396d1e2cf61c9f734bb71" compoundref="pdcch__type0__css__occasions_8h" startline="51">srsgnb::pdcch_type0_css_occasion_pattern1_description::start_symbol</references>
        <references refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__description_1af8220503c266d9512f311894917a610f" compoundref="pdcch__type0__css__occasions_8h" startline="42">srsgnb::pdcch_type0_css_occasion_pattern1_description::MAX_NOF_OCCASIONS_PER_SLOT</references>
        <references refid="structsrsgnb_1_1pdcch__type0__css__occasion__pattern1__configuration_1a996a3bde23c0e3bff1455a5c0215ffa2" compoundref="pdcch__type0__css__occasions_8h" startline="24">srsgnb::pdcch_type0_css_occasion_pattern1_configuration::nof_symb_coreset</references>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1ac41cb886463a4c8f6033c66cc1e91934" compoundref="sib__scheduler_8cpp" startline="127" endline="153">srsgnb::sib1_scheduler::precompute_sib1_n0</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a1110939afab0834e72249ae182d7e3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1pdsch__default__time__allocation__config" kindref="compound">pdsch_default_time_allocation_config</ref></type>
        <definition>pdsch_default_time_allocation_config srsgnb::pdsch_default_time_allocation_default_A_get</definition>
        <argsstring>(cyclic_prefix cp, unsigned row_index, dmrs_typeA_position dmrs_pos)</argsstring>
        <name>pdsch_default_time_allocation_default_A_get</name>
        <param>
          <type><ref refid="classsrsgnb_1_1cyclic__prefix" kindref="compound">cyclic_prefix</ref></type>
          <declname>cp</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>row_index</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1abb6ad055937d8532d1b9c7ea61354ab1" kindref="member">dmrs_typeA_position</ref></type>
          <declname>dmrs_pos</declname>
        </param>
        <briefdescription>
<para>Determines the default PDSCH time-domain resource allocation A. </para>
        </briefdescription>
        <detaileddescription>
<para>The time domain allocation configuration is described in TS38.214 Table 5.1.2.1.1-2 for normal cyclic prefix and TS38.214 Table 5.1.2.1.1-3 for extended cyclic prefix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cp</parametername>
</parameternamelist>
<parameterdescription>
<para>Cyclic prefix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">row_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dmrs_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>DM-RS for mapping Type A position. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid PDSCH time-domain allocation configuration is the provided parameters are valid. Otherwise, PDSCH_DEFAULT_TIME_ALLOCATION_RESERVED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/pdsch/pdsch_default_time_allocation.h" line="49" column="1" bodyfile="lib/scheduler/support/pdsch/pdsch_default_time_allocation.cpp" bodystart="97" bodyend="106" declfile="lib/scheduler/support/pdsch/pdsch_default_time_allocation.h" declline="49" declcolumn="1"/>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ae49c4ab8646a82adaaf309ba3c2eb467" compoundref="cyclic__prefix_8h" startline="29">srsgnb::cyclic_prefix::NORMAL</references>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ab3d17759472e137f642546ebceceb485" compoundref="cyclic__prefix_8h" startline="31">srsgnb::cyclic_prefix::EXTENDED</references>
        <referencedby refid="namespacesrsgnb_1a13783ee6fdaf00842d6a18fd6b8c3fac" compoundref="pdsch__default__time__allocation_8cpp" startline="109" endline="133">pdsch_default_time_allocations_default_A_table</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a13783ee6fdaf00842d6a18fd6b8c3fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const <ref refid="structsrsgnb_1_1pdsch__time__domain__resource__allocation" kindref="compound">pdsch_time_domain_resource_allocation</ref> &gt;</type>
        <definition>span&lt; const pdsch_time_domain_resource_allocation &gt; srsgnb::pdsch_default_time_allocations_default_A_table</definition>
        <argsstring>(cyclic_prefix cp, dmrs_typeA_position dmrs_pos)</argsstring>
        <name>pdsch_default_time_allocations_default_A_table</name>
        <param>
          <type><ref refid="classsrsgnb_1_1cyclic__prefix" kindref="compound">cyclic_prefix</ref></type>
          <declname>cp</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1abb6ad055937d8532d1b9c7ea61354ab1" kindref="member">dmrs_typeA_position</ref></type>
          <declname>dmrs_pos</declname>
        </param>
        <briefdescription>
<para>Determines the table of default PDSCH time-domain resource allocation A. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cp</parametername>
</parameternamelist>
<parameterdescription>
<para>Cyclic prefix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dmrs_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>DM-RS for mapping Type A position. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of valid PDSCH time-domain allocation configurations to choose from. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/pdsch/pdsch_default_time_allocation.h" line="57" column="1" bodyfile="lib/scheduler/support/pdsch/pdsch_default_time_allocation.cpp" bodystart="109" bodyend="133" declfile="lib/scheduler/support/pdsch/pdsch_default_time_allocation.h" declline="57" declcolumn="1"/>
        <references refid="namespacesrsgnb_1a1110939afab0834e72249ae182d7e3a1" compoundref="pdsch__default__time__allocation_8cpp" startline="97" endline="106">pdsch_default_time_allocation_default_A_get</references>
        <references refid="structsrsgnb_1_1pdsch__default__time__allocation__config_1a712d041fdf3e5fea15a3baa01854c480" compoundref="pdsch__default__time__allocation_8h" startline="28">srsgnb::pdsch_default_time_allocation_config::pdcch_to_pdsch_delay</references>
        <references refid="structsrsgnb_1_1pdsch__default__time__allocation__config_1a1070323f32976b5d4d0d4b8ebd55f470" compoundref="pdsch__default__time__allocation_8h" startline="26">srsgnb::pdsch_default_time_allocation_config::mapping_type</references>
        <references refid="structsrsgnb_1_1pdsch__default__time__allocation__config_1afdfa1f6b551ae998f39c354e905c5db6" compoundref="pdsch__default__time__allocation_8h" startline="30">srsgnb::pdsch_default_time_allocation_config::start_symbol</references>
        <references refid="structsrsgnb_1_1pdsch__default__time__allocation__config_1a03d428a952bca992e3eba714bfc55fb1" compoundref="pdsch__default__time__allocation_8h" startline="32">srsgnb::pdsch_default_time_allocation_config::duration</references>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ae49c4ab8646a82adaaf309ba3c2eb467" compoundref="cyclic__prefix_8h" startline="29">srsgnb::cyclic_prefix::NORMAL</references>
        <referencedby refid="classsrsgnb_1_1ue__cell__configuration_1a7603437885e696e48c0142feb6771653" compoundref="ue__configuration_8cpp" startline="142" endline="163">srsgnb::ue_cell_configuration::get_pdsch_time_domain_list</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a48021c3390e89dd4e72c8dab5554cecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesrsgnb_1a09493a1533975003c552024f78c38923" kindref="member">dmrs_symbol_mask</ref></type>
        <definition>dmrs_symbol_mask srsgnb::pdsch_dmrs_symbol_mask_mapping_type_A_single_get</definition>
        <argsstring>(const pdsch_dmrs_symbol_mask_mapping_type_A_single_configuration &amp;config)</argsstring>
        <name>pdsch_dmrs_symbol_mask_mapping_type_A_single_get</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1pdsch__dmrs__symbol__mask__mapping__type__A__single__configuration" kindref="compound">pdsch_dmrs_symbol_mask_mapping_type_A_single_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Calculates the DMRS for PDSCH symbol mask for single duration. </para>
        </briefdescription>
        <detaileddescription>
<para>It is implemented as per TS38.211 Table 5.1.2.1.1-2.</para>
<para>Any configuration that is not covered in the table triggers an assertion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/pdsch/pdsch_dmrs_symbol_mask.h" line="43" column="18" bodyfile="lib/scheduler/support/pdsch/pdsch_dmrs_symbol_mask.cpp" bodystart="15" bodyend="73" declfile="lib/scheduler/support/pdsch/pdsch_dmrs_symbol_mask.h" declline="43" declcolumn="18"/>
        <references refid="structsrsgnb_1_1pdsch__dmrs__symbol__mask__mapping__type__A__single__configuration_1a08563d74bf59339cc01b5b8c8f3d5bc8" compoundref="pdsch__dmrs__symbol__mask_8h" startline="23">srsgnb::pdsch_dmrs_symbol_mask_mapping_type_A_single_configuration::typeA_pos</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a885ad687d7d0c7ccfb874a30eac45806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1pdsch__prbs__tbs" kindref="compound">pdsch_prbs_tbs</ref></type>
        <definition>pdsch_prbs_tbs srsgnb::get_nof_prbs</definition>
        <argsstring>(const prbs_calculator_pdsch_config &amp;pdsch_config)</argsstring>
        <name>get_nof_prbs</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1prbs__calculator__pdsch__config" kindref="compound">prbs_calculator_pdsch_config</ref> &amp;</type>
          <declname>pdsch_config</declname>
        </param>
        <briefdescription>
<para>Computes the required number of PRBs necessary to transmit a given payload size. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements the inverse procedure of the TBS calculation procedure (as per TS38.214 Section 5.1.3.2) to derive the number of PRBs from a given payload in bytes.</para>
<para><simplesect kind="remark"><para>This function only works for payload size &lt;= 478 bytes (3824 bits). </para>
</simplesect>
<simplesect kind="remark"><para>If the TBS that corresponds to input payload exceeds the maximum 478 bytes, the function is working outside its range. In that case, the function returns the max num. of PRBs such that the corresponding TBS won&apos;t exceed the max value of 478 bytes. Note that this value would not be enough to fit the payload. It is up to the caller to handle this case.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structsrsgnb_1_1pdsch__config" kindref="compound">pdsch_config</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>is a struct with the PDSCH configuration to compute the num. of PRBs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a struct with the number of PRBs and the corresponding TBS. If the payload_size is greater than 478 bytes (3824 bits), it returns the number of PRBs and TBS corresponding to maximum allowed payload size of 478 bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/prbs_calculator.h" line="78" column="16" bodyfile="lib/scheduler/support/prbs_calculator.cpp" bodystart="16" bodyend="79" declfile="lib/scheduler/support/prbs_calculator.h" declline="78" declcolumn="16"/>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1aa575c459dda473cf7fc6e13fb767de20" compoundref="prbs__calculator_8h" startline="23">srsgnb::prbs_calculator_pdsch_config::payload_size_bytes</references>
        <references refid="namespacesrsgnb_1a5ec8043f9b3afc4244d6861092ef284b" compoundref="tbs__calculator_8cpp" startline="71" endline="110">tbs_calculator_table_find_smallest_not_less_than</references>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1a3bc2967f7bcdde5152f8babcedc7a3ff" compoundref="prbs__calculator_8h" startline="43">srsgnb::prbs_calculator_pdsch_config::target_code_rate</references>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1ab1e065f1d1df01a47e0b3183b68dd494" compoundref="prbs__calculator_8h" startline="41">srsgnb::prbs_calculator_pdsch_config::mod_order</references>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1a6654d33dbe2d529db0c38d6c5494d84d" compoundref="prbs__calculator_8h" startline="49">srsgnb::prbs_calculator_pdsch_config::nof_layers</references>
        <references refid="namespacesrsgnb_1aad81a138785035912345b1bf477b9253" compoundref="tbs__calculator_8cpp" startline="65" endline="69">tbs_calculator_pdsch_get_scaling_factor</references>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1aa4320710e474ff6a68e9ccb1629f3d07" compoundref="prbs__calculator_8h" startline="53">srsgnb::prbs_calculator_pdsch_config::tb_scaling_field</references>
        <references refid="namespacesrsgnb_1ac7b08b474fef6046774e360d801bc753" compoundref="resource__block_8h" startline="23">NOF_SUBCARRIERS_PER_RB</references>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1a3f8a787082874144a3a9630342f1a335" compoundref="prbs__calculator_8h" startline="25">srsgnb::prbs_calculator_pdsch_config::nof_symb_sh</references>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1a9fe22df455282c17ac2d52f955e75d1f" compoundref="prbs__calculator_8h" startline="27">srsgnb::prbs_calculator_pdsch_config::nof_dmrs_prb</references>
        <references refid="structsrsgnb_1_1prbs__calculator__pdsch__config_1a26d6f75056da2c62a5373cb9c9009d93" compoundref="prbs__calculator_8h" startline="37">srsgnb::prbs_calculator_pdsch_config::nof_oh_prb</references>
        <references refid="namespacesrsgnb_1a5c971875d38d9f26f657a05a63bf4b89" compoundref="tbs__calculator_8cpp" startline="112" endline="124">tbs_calculator_pdsch_calculate</references>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a32b9bcfcc6ae452c2d0516a8518d8d16" compoundref="sib__scheduler_8cpp" startline="155" endline="218">srsgnb::sib1_scheduler::allocate_sib1</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a20af606a25f23562c41bb0dc51ca20c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
        <definition>crb_interval srsgnb::find_next_empty_interval</definition>
        <argsstring>(const prb_bitmap &amp;used_rb_bitmap, size_t start_crb_idx=0, size_t last_crb_idx=MAX_NOF_PRBS)</argsstring>
        <name>find_next_empty_interval</name>
        <param>
          <type>const <ref refid="namespacesrsgnb_1aeb085d261a3b2f11c25da1e4596ef25f" kindref="member">prb_bitmap</ref> &amp;</type>
          <declname>used_rb_bitmap</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start_crb_idx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>last_crb_idx</declname>
          <defval><ref refid="namespacesrsgnb_1a1d2a8109fbd41e51c8237141a29edf2a" kindref="member">MAX_NOF_PRBS</ref></defval>
        </param>
        <briefdescription>
<para>Finds the next contiguous range of PRBs whose respective bit in provided RB bitmap is set to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>used_rb_bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap of RBs, where 1&apos;s represent used RBs and 0&apos;s empty RBs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_crb_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum RB index from where the search is initiated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_crb_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum RB index (excluding) that limits the range of RBs where the search is carried out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An interval of contiguous RBs where the respective bits are set to zero. If no interval was found, an empty interval is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/rb_find_algorithm.h" line="25" column="1" bodyfile="lib/scheduler/support/rb_find_algorithm.h" bodystart="25" bodyend="33"/>
        <references refid="classsrsgnb_1_1bounded__bitset_1a8bb3b1a08877033b44f0c6ad6e076a16" compoundref="bounded__bitset_8h" startline="404" endline="404">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_lowest</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <referencedby refid="namespacesrsgnb_1a7c24c2d559727ab4fb6e0e4db881f0b4" compoundref="rb__find__algorithm_8h" startline="44" endline="62">find_empty_interval_of_length</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a7c24c2d559727ab4fb6e0e4db881f0b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1crb__interval" kindref="compound">crb_interval</ref></type>
        <definition>crb_interval srsgnb::find_empty_interval_of_length</definition>
        <argsstring>(const prb_bitmap &amp;used_rb_bitmap, size_t nof_rbs, uint32_t start_crb_idx=0)</argsstring>
        <name>find_empty_interval_of_length</name>
        <param>
          <type>const <ref refid="namespacesrsgnb_1aeb085d261a3b2f11c25da1e4596ef25f" kindref="member">prb_bitmap</ref> &amp;</type>
          <declname>used_rb_bitmap</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nof_rbs</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start_crb_idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Finds a range of contiguous RBs, whose value in the provided RB bitmap is set to zero. The returned range length should be at most &quot;nof_rbs&quot; RBs. If no range with length &quot;nof_rbs&quot; is found, the longest valid range of RBs set to zero in &quot;used_rb_bitmap&quot; is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>used_rb_bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap of RBs, where 1&apos;s represent used RBs and 0&apos;s empty RBs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nof_rbs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum range of RBs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_crb_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum RB index from where the search is initiated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An interval of RBs with maximum length equal to &quot;nof_rbs&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/rb_find_algorithm.h" line="44" column="1" bodyfile="lib/scheduler/support/rb_find_algorithm.h" bodystart="44" bodyend="62"/>
        <references refid="namespacesrsgnb_1a20af606a25f23562c41bb0dc51ca20c7" compoundref="rb__find__algorithm_8h" startline="25" endline="33">find_next_empty_interval</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1interval_1afaa426e56c4e96208758552d97a7b43c" compoundref="interval_8h" startline="45" endline="45">srsgnb::interval&lt; T &gt;::length</references>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa3f2f6f48a91de48e48819b317045439" compoundref="ra__scheduler_8cpp" startline="227" endline="318">srsgnb::ra_scheduler::schedule_rar</referencedby>
        <referencedby refid="classsrsgnb_1_1sib1__scheduler_1a32b9bcfcc6ae452c2d0516a8518d8d16" compoundref="sib__scheduler_8cpp" startline="155" endline="218">srsgnb::sib1_scheduler::allocate_sib1</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aad81a138785035912345b1bf477b9253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float srsgnb::tbs_calculator_pdsch_get_scaling_factor</definition>
        <argsstring>(unsigned scaling)</argsstring>
        <name>tbs_calculator_pdsch_get_scaling_factor</name>
        <param>
          <type>unsigned</type>
          <declname>scaling</declname>
        </param>
        <briefdescription>
<para>Converts TB scaling field into Scaling Factor S (see Table 5.1.3.2-2, TS 38.214). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>is the TB scaling field, possible values are {0,1,2}. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Scaling factor S corresponding to scaling. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/tbs_calculator.h" line="69" column="7" bodyfile="lib/scheduler/support/tbs_calculator.cpp" bodystart="65" bodyend="69" declfile="lib/scheduler/support/tbs_calculator.h" declline="69" declcolumn="7"/>
        <references refid="namespacesrsgnb_1aa6e983e2bf0e5ec931e8323c27ab5032" compoundref="math__utils_8h" startline="44" endline="47">pow2</references>
        <referencedby refid="namespacesrsgnb_1a885ad687d7d0c7ccfb874a30eac45806" compoundref="prbs__calculator_8cpp" startline="16" endline="79">get_nof_prbs</referencedby>
        <referencedby refid="namespacesrsgnb_1a5c971875d38d9f26f657a05a63bf4b89" compoundref="tbs__calculator_8cpp" startline="112" endline="124">tbs_calculator_pdsch_calculate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5ec8043f9b3afc4244d6861092ef284b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::tbs_calculator_table_find_smallest_not_less_than</definition>
        <argsstring>(unsigned nof_info_prime)</argsstring>
        <name>tbs_calculator_table_find_smallest_not_less_than</name>
        <param>
          <type>unsigned</type>
          <declname>nof_info_prime</declname>
        </param>
        <briefdescription>
<para>Get smallest TBS in bits (from Table 5.1.3.2-1, TS 38.214) greater than or equal to a given value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nof_info_prime</parametername>
</parameternamelist>
<parameterdescription>
<para>is the quantized intermediate num. of information bits, as per Section 5.1.3.2, TS 38.214. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>nof_info_prime must not be greater than 3824 bits. </para>
</simplesect>
<simplesect kind="return"><para>The smallest TBS from Table 5.1.3.2-1, TS 38.214 that is greater than or equal to nof_info_prime. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/tbs_calculator.h" line="76" column="10" bodyfile="lib/scheduler/support/tbs_calculator.cpp" bodystart="71" bodyend="110" declfile="lib/scheduler/support/tbs_calculator.h" declline="76" declcolumn="10"/>
        <references refid="namespacesrsgnb_1a6026a6056e7f39c043a2bba26daab476" compoundref="math__utils_8h" startline="34" endline="38">divide_ceil</references>
        <referencedby refid="namespacesrsgnb_1a885ad687d7d0c7ccfb874a30eac45806" compoundref="prbs__calculator_8cpp" startline="16" endline="79">get_nof_prbs</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1a5c971875d38d9f26f657a05a63bf4b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::tbs_calculator_pdsch_calculate</definition>
        <argsstring>(const tbs_calculator_pdsch_configuration &amp;config)</argsstring>
        <name>tbs_calculator_pdsch_calculate</name>
        <param>
          <type>const <ref refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration" kindref="compound">tbs_calculator_pdsch_configuration</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Calculates the TBS for a given PDSCH transmission. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented as per TS38.214 Section 5.1.3.2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/support/tbs_calculator.h" line="81" column="10" bodyfile="lib/scheduler/support/tbs_calculator.cpp" bodystart="112" bodyend="124" declfile="lib/scheduler/support/tbs_calculator.h" declline="81" declcolumn="10"/>
        <references refid="namespacesrsgnb_1ac7b08b474fef6046774e360d801bc753" compoundref="resource__block_8h" startline="23">NOF_SUBCARRIERS_PER_RB</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1ae8f3c3f6bfda3bdfec4d964b5b55bba6" compoundref="tbs__calculator_8h" startline="20">srsgnb::tbs_calculator_pdsch_configuration::nof_symb_sh</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1a9f1167071243ac92333e86c9e676aa60" compoundref="tbs__calculator_8h" startline="24">srsgnb::tbs_calculator_pdsch_configuration::nof_dmrs_prb</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1a351dae7b3f16d85064b04b606827737a" compoundref="tbs__calculator_8h" startline="34">srsgnb::tbs_calculator_pdsch_configuration::nof_oh_prb</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1a9681909a1c34ee0847131f8f271f852d" compoundref="tbs__calculator_8h" startline="63">srsgnb::tbs_calculator_pdsch_configuration::n_prb</references>
        <references refid="namespacesrsgnb_1aad81a138785035912345b1bf477b9253" compoundref="tbs__calculator_8cpp" startline="65" endline="69">tbs_calculator_pdsch_get_scaling_factor</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1a2797be0ff8ea9a12a3ee04b87b8a38ab" compoundref="tbs__calculator_8h" startline="59">srsgnb::tbs_calculator_pdsch_configuration::tb_scaling_field</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1a86ef7d579344c67ebe074eb7a6f272e4" compoundref="tbs__calculator_8h" startline="36">srsgnb::tbs_calculator_pdsch_configuration::tcr</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1aeffd20818335b5fadb4a109d72fc30ca" compoundref="tbs__calculator_8h" startline="44">srsgnb::tbs_calculator_pdsch_configuration::modulation_order</references>
        <references refid="structsrsgnb_1_1tbs__calculator__pdsch__configuration_1aadc3c1559d60d66dc04052da525386a7" compoundref="tbs__calculator_8h" startline="50">srsgnb::tbs_calculator_pdsch_configuration::nof_layers</references>
        <referencedby refid="namespacesrsgnb_1a885ad687d7d0c7ccfb874a30eac45806" compoundref="prbs__calculator_8cpp" startline="16" endline="79">get_nof_prbs</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacesrsgnb_1aee99f1b9947b0b90b670a374ffd24f53" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacesrsgnb_1a5ca7f9bafa9885386c1b0a3f75d02c20" kindref="member">harq_id_t</ref></type>
        <definition>constexpr harq_id_t srsgnb::to_harq_id</definition>
        <argsstring>(unsigned h_id)</argsstring>
        <name>to_harq_id</name>
        <param>
          <type>unsigned</type>
          <declname>h_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/scheduler/ue_scheduling/harq_process.h" line="25" column="28" bodyfile="lib/scheduler/ue_scheduling/harq_process.h" bodystart="25" bodyend="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logical Channel Group and UL Buffer Size format definition and levels according to 3GPP TS 38.321 version 15.3.0. </para>
    </briefdescription>
    <detaileddescription>
<para>Notice that we are not using any implementation specific header files. We are decoupled.</para>
<para>In this file, we implement several algorithms used to add/mod/release asn.1 objects in lists based on their ids. This operations are commonly used during the application of Diffs/Deltas when the UE has to be reconfigured.</para>
<para>This factory header file depends on the PDCP entity interfaces (see above include list). It is kept separate as clients of the PDCP entity interfaces dont need to call factory methods.</para>
<para>This header is currently used only by the MAC to compute extra SSB parameters (needed for scheduling) from those provided by DU.</para>
<para>This factory header file depends on the SDAP entity interfaces (see above include list). It is kept separate as clients of the SDAP entity interfaces dont need to call factory methods.</para>
<para>This factory header file depends on the SDAP interfaces (see above include list). It is kept separate as clients of the SDAP interfaces dont need to call factory methods.</para>
<para>This class implementation is decoupled from other concrete class implementations as it only depend on public interfaces. </para>
    </detaileddescription>
    <location file="include/srsgnb/adt/bitmap_utils.h" line="17" column="16"/>
  </compounddef>
</doxygen>
