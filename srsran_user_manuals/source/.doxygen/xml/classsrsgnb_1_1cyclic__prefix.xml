<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1cyclic__prefix" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::cyclic_prefix</compoundname>
    <includes refid="cyclic__prefix_8h" local="no">cyclic_prefix.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24" prot="public" static="no" strong="no">
        <type></type>
        <name>options</name>
        <enumvalue id="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ae49c4ab8646a82adaaf309ba3c2eb467" prot="public">
          <name>NORMAL</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Indicates normal cyclic prefix length. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ab3d17759472e137f642546ebceceb485" prot="public">
          <name>EXTENDED</name>
          <briefdescription>
<para>Indicates extended cyclic prefix length. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Cyclic Prefix types, as described in TS 38.211. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="27" column="15" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="27" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1cyclic__prefix_1a9fd16e1d3abc22f2bbfafa9402c27026" prot="public" static="no" mutable="no">
        <type><ref refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24" kindref="member">options</ref></type>
        <definition>options srsgnb::cyclic_prefix::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= <ref refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ae49c4ab8646a82adaaf309ba3c2eb467" kindref="member">NORMAL</ref></initializer>
        <briefdescription>
<para>Indicates the cyclic prefix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="35" column="11" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="35" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1cyclic__prefix_1a1ebd5939b41e04615a88336aa84c6f95" compoundref="cyclic__prefix_8h" startline="47" endline="47">operator options</referencedby>
        <referencedby refid="classsrsgnb_1_1cyclic__prefix_1aa99c2073949a6527930dea607a9a7480" compoundref="cyclic__prefix_8h" startline="50" endline="56">to_string</referencedby>
        <referencedby refid="classsrsgnb_1_1cyclic__prefix_1a29ba774a74dff3237823f4129e962e28" compoundref="cyclic__prefix_8h" startline="65" endline="78">is_valid</referencedby>
        <referencedby refid="classsrsgnb_1_1cyclic__prefix_1a912612f8fa115e0924099fd22a718ac6" compoundref="cyclic__prefix_8h" startline="84" endline="95">get_length</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1cyclic__prefix_1a80b257d68b1ee126768ef210a944150c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::cyclic_prefix::cyclic_prefix</definition>
        <argsstring>()=default</argsstring>
        <name>cyclic_prefix</name>
        <briefdescription>
<para>Default constructor as normal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="38" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1cyclic__prefix_1ad23d79cb07c2cb161a32b70d59d41206" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::cyclic_prefix::cyclic_prefix</definition>
        <argsstring>(options opt)</argsstring>
        <name>cyclic_prefix</name>
        <param>
          <type><ref refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24" kindref="member">options</ref></type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Construct from value. It allows implicit conversion from a cyclic prefix option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="41" column="13" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1cyclic__prefix_1a206a2bde5bf2c36595f586ea4d28b15b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::cyclic_prefix::cyclic_prefix</definition>
        <argsstring>(const cyclic_prefix &amp;other)</argsstring>
        <name>cyclic_prefix</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1cyclic__prefix" kindref="compound">cyclic_prefix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from another cyclic prefix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="44" column="13" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1cyclic__prefix_1a1ebd5939b41e04615a88336aa84c6f95" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::cyclic_prefix::operator options</definition>
        <argsstring>() const</argsstring>
        <name>operator options</name>
        <briefdescription>
<para>Implicit conversion to enumerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="47" column="13" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="47" bodyend="47"/>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a9fd16e1d3abc22f2bbfafa9402c27026" compoundref="cyclic__prefix_8h" startline="35">value</references>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1cyclic__prefix_1aa99c2073949a6527930dea607a9a7480" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string srsgnb::cyclic_prefix::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>Get the string value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="50" column="15" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="50" bodyend="56"/>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a9fd16e1d3abc22f2bbfafa9402c27026" compoundref="cyclic__prefix_8h" startline="35">value</references>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ae49c4ab8646a82adaaf309ba3c2eb467" compoundref="cyclic__prefix_8h" startline="29">NORMAL</references>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1cyclic__prefix_1a29ba774a74dff3237823f4129e962e28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::cyclic_prefix::is_valid</definition>
        <argsstring>(subcarrier_spacing scs, unsigned dft_size) const</argsstring>
        <name>is_valid</name>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dft_size</declname>
        </param>
        <briefdescription>
<para>Checks the validity of the DFT size and subcarrier spacing for the current cyclic prefix. </para>
        </briefdescription>
        <detaileddescription>
<para>A cyclic prefix is valid if it results in an integer number of samples. Othwerwise, it is not valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scs</parametername>
</parameternamelist>
<parameterdescription>
<para>Subcarrier spacing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dft_size</parametername>
</parameternamelist>
<parameterdescription>
<para>DFT size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the cyclic prefix is valid for the given SCS and DFT size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="65" column="8" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="65" bodyend="78"/>
        <references refid="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" compoundref="subcarrier__spacing_8h" startline="38" endline="41">srsgnb::to_numerology_value</references>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a9fd16e1d3abc22f2bbfafa9402c27026" compoundref="cyclic__prefix_8h" startline="35">value</references>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ab3d17759472e137f642546ebceceb485" compoundref="cyclic__prefix_8h" startline="31">EXTENDED</references>
        <references refid="classsrsgnb_1_1phy__time__unit_1ac4e440469aa865f3f67323e42b73faf5" compoundref="phy__time__unit_8h" startline="137" endline="140">srsgnb::phy_time_unit::from_units_of_kappa</references>
        <references refid="classsrsgnb_1_1phy__time__unit_1a9503cc94a24c04accf7003b7ed44a5de" compoundref="phy__time__unit_8h" startline="70" endline="75">srsgnb::phy_time_unit::is_sample_accurate</references>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1cyclic__prefix_1a912612f8fa115e0924099fd22a718ac6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classsrsgnb_1_1phy__time__unit" kindref="compound">phy_time_unit</ref></type>
        <definition>constexpr phy_time_unit srsgnb::cyclic_prefix::get_length</definition>
        <argsstring>(unsigned symbol_idx, subcarrier_spacing scs) const</argsstring>
        <name>get_length</name>
        <param>
          <type>unsigned</type>
          <declname>symbol_idx</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a249e926de5b299d3da9f403c93168d98" kindref="member">subcarrier_spacing</ref></type>
          <declname>scs</declname>
        </param>
        <briefdescription>
<para>Calculates the cyclic prefix length in samples as per TS38.211 Section 5.3.1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">symbol_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol index within the subframe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scs</parametername>
</parameternamelist>
<parameterdescription>
<para>Subcarrier spacing numerology. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cyclic prefix length in PHY time units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/ran/cyclic_prefix.h" line="84" column="27" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="84" bodyend="95"/>
        <references refid="namespacesrsgnb_1a1aaa9631bfc12855cc12d7ae3f6ce3a8" compoundref="subcarrier__spacing_8h" startline="38" endline="41">srsgnb::to_numerology_value</references>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a9fd16e1d3abc22f2bbfafa9402c27026" compoundref="cyclic__prefix_8h" startline="35">value</references>
        <references refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ab3d17759472e137f642546ebceceb485" compoundref="cyclic__prefix_8h" startline="31">EXTENDED</references>
        <references refid="namespacesrsgnb_1aa6e983e2bf0e5ec931e8323c27ab5032" compoundref="math__utils_8h" startline="44" endline="47">srsgnb::pow2</references>
        <references refid="classsrsgnb_1_1phy__time__unit_1ac4e440469aa865f3f67323e42b73faf5" compoundref="phy__time__unit_8h" startline="137" endline="140">srsgnb::phy_time_unit::from_units_of_kappa</references>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1a568ae22931f2fc32f8262ff9c4158f58" compoundref="ofdm__demodulator__impl_8cpp" startline="47" endline="59">srsgnb::ofdm_symbol_demodulator_impl::get_cp_offset</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1acfc1edc79e5e564998fec17482f4aa46" compoundref="ofdm__demodulator__impl_8cpp" startline="61" endline="101">srsgnb::ofdm_symbol_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1aa8e0ac68a0b3f93bb2c74d05f4f7d8f8" compoundref="ofdm__demodulator__impl_8h" startline="67" endline="70">srsgnb::ofdm_symbol_demodulator_impl::get_symbol_size</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__modulator__impl_1a1cff8fbd637007a914121b91a99affc9" compoundref="ofdm__modulator__impl_8cpp" startline="43" endline="87">srsgnb::ofdm_symbol_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__modulator__impl_1a7a8dc4e2f6ea7e3ca0ad65eb86e76a96" compoundref="ofdm__modulator__impl_8h" startline="57" endline="60">srsgnb::ofdm_symbol_modulator_impl::get_symbol_size</referencedby>
        <referencedby refid="classsrsgnb_1_1phase__compensation__lut_1ae37a449b492ec3f4d1280844c108faae" compoundref="phase__compensation__lut_8h" startline="37" endline="71">srsgnb::phase_compensation_lut::phase_compensation_lut</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes a cyclic prefix configuration with its helper methods. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::cyclic_prefix</label>
        <link refid="classsrsgnb_1_1cyclic__prefix"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/ran/cyclic_prefix.h" line="24" column="1" bodyfile="include/srsgnb/ran/cyclic_prefix.h" bodystart="23" bodyend="96"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a80b257d68b1ee126768ef210a944150c" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>cyclic_prefix</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1ad23d79cb07c2cb161a32b70d59d41206" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>cyclic_prefix</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a206a2bde5bf2c36595f586ea4d28b15b" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>cyclic_prefix</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ab3d17759472e137f642546ebceceb485" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>EXTENDED</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a912612f8fa115e0924099fd22a718ac6" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>get_length</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a29ba774a74dff3237823f4129e962e28" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>is_valid</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24ae49c4ab8646a82adaaf309ba3c2eb467" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>NORMAL</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a1ebd5939b41e04615a88336aa84c6f95" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>operator options</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a05cdec23029c21ec1e47b1d90dbd0b24" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>options</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1aa99c2073949a6527930dea607a9a7480" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>to_string</name></member>
      <member refid="classsrsgnb_1_1cyclic__prefix_1a9fd16e1d3abc22f2bbfafa9402c27026" prot="public" virt="non-virtual"><scope>srsgnb::cyclic_prefix</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
