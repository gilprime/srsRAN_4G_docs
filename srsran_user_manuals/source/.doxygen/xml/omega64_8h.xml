<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="omega64_8h" kind="file" language="C++">
    <compoundname>omega64.h</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includedby refid="fftx__dftbat__1__1024__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_1024_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__12288__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_12288_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__128__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_128_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__1536__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_1536_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__18432__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_18432_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__2048__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_2048_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__2304__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_2304_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__24576__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_24576_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__256__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_256_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__3072__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_3072_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__36864__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_36864_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__384__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_384_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__4096__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_4096_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__4608__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_4608_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__49152__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_49152_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__512__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_512_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__6144__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_6144_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__768__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_768_1d_CPU.cpp</includedby>
    <includedby refid="fftx__dftbat__1__9216__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/fftx_dftbat_1_9216_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__1024__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_1024_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__12288__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_12288_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__128__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_128_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__1536__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_1536_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__18432__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_18432_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__2048__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_2048_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__2304__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_2304_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__24576__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_24576_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__256__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_256_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__3072__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_3072_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__36864__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_36864_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__384__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_384_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__4096__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_4096_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__4608__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_4608_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__49152__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_49152_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__512__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_512_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__6144__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_6144_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__768__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_768_1d_CPU.cpp</includedby>
    <includedby refid="fftx__idftbat__1__9216__1d__CPU_8cpp" local="yes">lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/fftx_idftbat_1_9216_1d_CPU.cpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>lib/phy/generic_functions/fftx/omega64.h</label>
        <link refid="omega64_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structcomplex__t" prot="public">complex_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="omega64_8h_1a598a3330b3c21701223ee0ca14316eca" prot="public" static="no">
        <name>PI</name>
        <initializer>3.14159265358979323846</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="17" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a1653115d0d2feabc5e8c6362c36759e2" prot="public" static="no">
        <name>creal</name>
        <param><defname>c</defname></param>
        <initializer>((c).r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="39" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a88ac53264a986d39c174778e96943b96" prot="public" static="no">
        <name>cimag</name>
        <param><defname>c</defname></param>
        <initializer>((c).i)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="40" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a2473dc562adfb895ea6e03eab1d21aad" prot="public" static="no">
        <name>RE_CPX</name>
        <param><defname>x</defname></param>
        <initializer>((x).r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="93" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a962c406062a89a8e645d6dccdbbdc91f" prot="public" static="no">
        <name>IM_CPX</name>
        <param><defname>x</defname></param>
        <initializer>((x).i)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="94" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1af54f219d4130cad19f47ad221b3afa59" prot="public" static="no">
        <name>CPX</name>
        <initializer><ref refid="structcomplex__t" kindref="compound">complex_t</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="95" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a9dbb7e16d2b3a91604baabd07684e0d6" prot="public" static="no">
        <name>MAX_INT_INT</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>  ({                                                                                                                   \
    __typeof__(a) _a = (a);                                                                                            \
    __typeof__(b) _b = (b);                                                                                            \
    _a &gt; _b ? _a : _b;                                                                                                 \
  })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="97" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a32cfe18a9cdc1220c585cab1dfe752ca" prot="public" static="no">
        <name>MIN_INT_INT</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>  ({                                                                                                                   \
    __typeof__(a) _a = (a);                                                                                            \
    __typeof__(b) _b = (b);                                                                                            \
    _a &lt; _b ? _a : _b;                                                                                                 \
  })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="103" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a5d38d89d1c0ea7e9c598f826d1b13433" prot="public" static="no">
        <name>MAX_FLT_FLT</name>
        <initializer>MAX_INT_INT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="110" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="omega64_8h_1a9ebd4b9f1125f80a3b9eb1e665450abf" prot="public" static="no">
        <name>MIN_FLT_FLT</name>
        <initializer>MIN_INT_INT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="111" column="9" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="omega64_8h_1a0470fefc87a2d51468ad533ee02b4c90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcomplex__t" kindref="compound">complex_t</ref></type>
        <definition>static complex_t COMPLEX</definition>
        <argsstring>(double r, double i)</argsstring>
        <name>COMPLEX</name>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="23" column="18" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="omega64_8h_1a95866089458fe4fbab675301b82b5b77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcomplex__t" kindref="compound">complex_t</ref></type>
        <definition>static complex_t omega</definition>
        <argsstring>(int N, int k)</argsstring>
        <name>omega</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="31" column="18" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="omega64_8h_1a1ddfa23f2e2a79910a351514dd72a4a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double cospi</definition>
        <argsstring>(double a)</argsstring>
        <name>cospi</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="43" column="15" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="43" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="omega64_8h_1a2d57e4efdbb7e2de07b1d8a175580224" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double sinpi</definition>
        <argsstring>(double a)</argsstring>
        <name>sinpi</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="70" column="15" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="omega64_8h_1adb2e4fd8bab47b7f1396bc31e6eba0a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int powmod</definition>
        <argsstring>(int phi, int g, int exp, int N)</argsstring>
        <name>powmod</name>
        <param>
          <type>int</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="75" column="12" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="omega64_8h_1a241356ac61453e124bcdd5bf9ab72649" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double fr</definition>
        <argsstring>(int m, int i, double r)</argsstring>
        <name>fr</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/phy/generic_functions/fftx/omega64.h" line="85" column="15" bodyfile="lib/phy/generic_functions/fftx/omega64.h" bodystart="85" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wall&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-variable&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-function&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Waggressive-loop-optimizations&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PI<sp/>3.14159265358979323846</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structcomplex__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>i;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/><ref refid="structcomplex__t" kindref="compound">complex_t</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcomplex__t" kindref="compound">complex_t</ref><sp/>COMPLEX(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="structcomplex__t" kindref="compound">complex_t</ref><sp/>cplx;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>cplx.r<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>cplx.i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cplx;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcomplex__t" kindref="compound">complex_t</ref><sp/>omega(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="structcomplex__t" kindref="compound">complex_t</ref><sp/>w;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>w.r<sp/>=<sp/>cos(2<sp/>*<sp/>PI<sp/>*<sp/>k<sp/>/<sp/>N);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>w.i<sp/>=<sp/>sin(2<sp/>*<sp/>PI<sp/>*<sp/>k<sp/>/<sp/>N);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>creal(c)<sp/>((c).r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cimag(c)<sp/>((c).i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>More<sp/>accurate<sp/>cosine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cospi(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{<sp/></highlight><highlight class="comment">/*return<sp/>cos(PI*a);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>+1.0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a<sp/>&gt;=<sp/>2.0)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>2.0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>2.0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>1.0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sign;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>0.25)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sign<sp/>*<sp/>0.70710678118654752440;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>0.5)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>0.5)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>0.5;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-sign<sp/>*<sp/>sin(PI<sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sign<sp/>*<sp/>cos(PI<sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sinpi(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{<sp/></highlight><highlight class="comment">/*return<sp/>sin(PI*a);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cospi(0.5<sp/>-<sp/>a);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>powmod(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal,<sp/>i;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>retVal<sp/>=<sp/>phi<sp/>%<sp/>N;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>exp;<sp/>i++)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>(retVal<sp/>*<sp/>g)<sp/>%<sp/>N;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(retVal);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fr(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r<sp/>+<sp/>2<sp/>*<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)i<sp/>/<sp/>2))<sp/>/<sp/>m;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(2<sp/>-<sp/>r<sp/>+<sp/>2<sp/>*<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)i<sp/>/<sp/>2))<sp/>/<sp/>m;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RE_CPX(x)<sp/>((x).r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IM_CPX(x)<sp/>((x).i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CPX<sp/>complex_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_INT_INT(a,<sp/>b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__typeof__(a)<sp/>_a<sp/>=<sp/>(a);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__typeof__(b)<sp/>_b<sp/>=<sp/>(b);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_a<sp/>&gt;<sp/>_b<sp/>?<sp/>_a<sp/>:<sp/>_b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN_INT_INT(a,<sp/>b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__typeof__(a)<sp/>_a<sp/>=<sp/>(a);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__typeof__(b)<sp/>_b<sp/>=<sp/>(b);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_a<sp/>&lt;<sp/>_b<sp/>?<sp/>_a<sp/>:<sp/>_b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_FLT_FLT<sp/>MAX_INT_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN_FLT_FLT<sp/>MIN_INT_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/phy/generic_functions/fftx/omega64.h"/>
  </compounddef>
</doxygen>
