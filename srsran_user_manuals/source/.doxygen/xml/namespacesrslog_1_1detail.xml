<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacesrslog_1_1detail" kind="namespace" language="C++">
    <compoundname>srslog::detail</compoundname>
    <innerclass refid="classsrslog_1_1detail_1_1any" prot="public">srslog::detail::any</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1cond__var__scoped__lock" prot="public">srslog::detail::cond_var_scoped_lock</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1condition__variable" prot="public">srslog::detail::condition_variable</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1dyn__arg__store__pool" prot="public">srslog::detail::dyn_arg_store_pool</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1error__string" prot="public">srslog::detail::error_string</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1flush__backend__cmd" prot="public">srslog::detail::flush_backend_cmd</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1in__place__type__t" prot="public">srslog::detail::in_place_type_t</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1index__sequence" prot="public">srslog::detail::index_sequence</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1index__sequence__helper" prot="public">srslog::detail::index_sequence_helper</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1index__sequence__helper_3_010U_00_01Next_8_8_8_01_4" prot="public">srslog::detail::index_sequence_helper&lt; 0U, Next... &gt;</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1is__byte__iterable" prot="public">srslog::detail::is_byte_iterable</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1is__byte__iterable_3_01T_00_01void__t_3_01decltype_07_09_09std_1_1decl4ba565acfe63d60eb3ec9f6fae9759ae" prot="public">srslog::detail::is_byte_iterable&lt; T, void_t&lt; decltype(++std::declval&lt; T &gt;()), typename std::enable_if&lt; std::is_same&lt; typename T::value_type, uint8_t &gt;::value, int &gt;::type &gt; &gt;</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1is__in__place__type__t" prot="public">srslog::detail::is_in_place_type_t</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1is__in__place__type__t_3_01in__place__type__t_3_01T_01_4_01_4" prot="public">srslog::detail::is_in_place_type_t&lt; in_place_type_t&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1is__logger" prot="public">srslog::detail::is_logger</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1is__logger_3_01logger__impl_3_01T_00_01Enum_01_4_01_4" prot="public">srslog::detail::is_logger&lt; logger_impl&lt; T, Enum &gt; &gt;</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1log__backend" prot="public">srslog::detail::log_backend</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1log__context" prot="public">srslog::detail::log_context</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1log__entry" prot="public">srslog::detail::log_entry</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1log__entry__metadata" prot="public">srslog::detail::log_entry_metadata</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1logger__impl" prot="public">srslog::detail::logger_impl</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1memory__buffer" prot="public">srslog::detail::memory_buffer</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1metrics__container" prot="public">srslog::detail::metrics_container</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1mutex" prot="public">srslog::detail::mutex</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1scoped__complete__event" prot="public">srslog::detail::scoped_complete_event</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1scoped__lock" prot="public">srslog::detail::scoped_lock</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1shared__variable" prot="public">srslog::detail::shared_variable</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1tuple__index" prot="public">srslog::detail::tuple_index</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1tuple__index_3_01T_00_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_01_4" prot="public">srslog::detail::tuple_index&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</innerclass>
    <innerclass refid="structsrslog_1_1detail_1_1tuple__index_3_01T_00_01std_1_1tuple_3_01U_00_01Ts_8_8_8_01_4_01_4" prot="public">srslog::detail::tuple_index&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</innerclass>
    <innerclass refid="classsrslog_1_1detail_1_1work__queue" prot="public">srslog::detail::work_queue</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacesrslog_1_1detail_1add3dc9fc7aefb0bdb628678aee674827" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Name</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structsrslog_1_1metric__set" kindref="compound">metric_set</ref>&lt; Name, typename std::decay&lt; Ts &gt;::type... &gt;</type>
        <definition>using srslog::detail::build_metric_set_type = typedef metric_set&lt;Name, typename std::decay&lt;Ts&gt;::type...&gt;</definition>
        <argsstring></argsstring>
        <name>build_metric_set_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds a metric set type using a list of metric, metric sets or list types. eg: using my_metric_t = srslog::build_metric_set_type&lt;m1_t, set1_t, m2_t&gt;; NOTE: Adding duplicated types into the list is not allowed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/context.h" line="163" column="1" bodyfile="include/srsgnb/srslog/context.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrslog_1_1detail_1a29545f3fc9fd41026f66fd7bd763a798" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structsrslog_1_1detail_1_1index__sequence__helper" kindref="compound">index_sequence_helper</ref>&lt; N &gt;::type</type>
        <definition>using srslog::detail::make_index_sequence = typedef typename index_sequence_helper&lt;N&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_index_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/detail/support/tmpl_utils.h" line="38" column="1" bodyfile="include/srsgnb/srslog/detail/support/tmpl_utils.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesrslog_1_1detail_1ae15f774afb687e9c60daa357aa73c408" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using srslog::detail::void_t = typedef void</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Traits to restrict template parameter to iterators over uint8_t, e.g. for byte_buffer and friends. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/detail/support/tmpl_utils.h" line="68" column="1" bodyfile="include/srsgnb/srslog/detail/support/tmpl_utils.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacesrslog_1_1detail_1a2f36c68598e7eb0e4e35cda038853727" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">any</ref></type>
        <definition>any srslog::detail::make_any</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_any</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an any object containing an object of type T, passing the provided arguments to T&apos;s constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/detail/support/any.h" line="140" column="12" bodyfile="include/srsgnb/srslog/detail/support/any.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrslog_1_1detail_1a8deb4a5453a293b6cb53d9d925480cd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* srslog::detail::any_cast</definition>
        <argsstring>(any *operand)</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">any</ref> *</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When the requested T matches that of the contents of operand, a pointer to the value contained by operand is returned, otherwise returns a nullptr. Non-const overload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/detail/support/any.h" line="149" column="10" bodyfile="include/srsgnb/srslog/detail/support/any.h" bodystart="149" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrslog_1_1detail_1a58d3bfcd3bc3c7ab6442e8a4aa572b91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* srslog::detail::any_cast</definition>
        <argsstring>(const any *operand)</argsstring>
        <name>any_cast</name>
        <param>
          <type>const <ref refid="classsrslog_1_1detail_1_1any" kindref="compound">any</ref> *</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When the requested T matches that of the contents of operand, a pointer to the value contained by operand is returned, otherwise returns a nullptr. Const overload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/detail/support/any.h" line="165" column="16" bodyfile="include/srsgnb/srslog/detail/support/any.h" bodystart="165" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrslog_1_1detail_1a0c908b25e1777da5192b336e0e0b53e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srslog::detail::swap</definition>
        <argsstring>(any &amp;lhs, any &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">any</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">any</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/detail/support/any.h" line="177" column="13" bodyfile="include/srsgnb/srslog/detail/support/any.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrslog_1_1detail_1a2cc22728c2ddfe4e3166de1f4d3b6121" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t srslog::detail::get_type_index_in_tuple</definition>
        <argsstring>()</argsstring>
        <name>get_type_index_in_tuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/detail/support/tmpl_utils.h" line="58" column="23" bodyfile="include/srsgnb/srslog/detail/support/tmpl_utils.h" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacesrslog_1_1detail_1a43a9fb2fb67b1769690f11c4f82c7b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">detail::any</ref> *</type>
        <definition>detail::any * srslog::detail::fetch_logger</definition>
        <argsstring>(const std::string &amp;id, detail::any &amp;&amp;logger)</argsstring>
        <name>fetch_logger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">detail::any</ref> &amp;&amp;</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
<para>Internal helper functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog.h" line="58" column="13" bodyfile="lib/srslog/srslog.cpp" bodystart="259" bodyend="263" declfile="include/srsgnb/srslog/srslog.h" declline="58" declcolumn="13"/>
        <references refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" compoundref="srslog__instance_8h" startline="51" endline="55">srslog::srslog_instance::get</references>
        <references refid="classsrslog_1_1object__repository_1aea81f476da7ed577413889e28792c2b4" compoundref="object__repository_8h" startline="45" endline="50">srslog::object_repository&lt; K, V &gt;::emplace</references>
      </memberdef>
      <memberdef kind="function" id="namespacesrslog_1_1detail_1aeec69f2c96c9de1d95b7b7e372c2f887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrslog_1_1detail_1_1any" kindref="compound">detail::any</ref> *</type>
        <definition>detail::any * srslog::detail::find_logger</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>find_logger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logger management function implementations.</para>
<para>Finds a logger with the specified id string and type in the repository. On success returns a pointer to the requested logger, otherwise nullptr. NOTE: T should be a type that is a logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog.h" line="59" column="13" bodyfile="lib/srslog/srslog.cpp" bodystart="254" bodyend="257" declfile="include/srsgnb/srslog/srslog.h" declline="59" declcolumn="13"/>
        <references refid="classsrslog_1_1srslog__instance_1adedc20b552bfedd56cfa321904a456ee" compoundref="srslog__instance_8h" startline="51" endline="55">srslog::srslog_instance::get</references>
        <references refid="classsrslog_1_1object__repository_1aefba74e68ddc74ebe79e089d04312ef0" compoundref="object__repository_8h" startline="54" endline="59">srslog::object_repository&lt; K, V &gt;::find</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Logger management functions. </para>
    </detaileddescription>
    <location file="include/srsgnb/srslog/context.h" line="25" column="16"/>
  </compounddef>
</doxygen>
