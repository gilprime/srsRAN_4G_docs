<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacesrsgnb_1_1srsvec_1_1detail" kind="namespace" language="C++">
    <compoundname>srsgnb::srsvec::detail</compoundname>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1get__first__type__in__pack" prot="public">srsgnb::srsvec::detail::get_first_type_in_pack</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1is__arithmetic__span__compatible" prot="public">srsgnb::srsvec::detail::is_arithmetic_span_compatible</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1is__arithmetic__span__compatible_3_01T_00_01std_1_1enable__i552fad1ffe1be48f10fcd6895554494e" prot="public">srsgnb::srsvec::detail::is_arithmetic_span_compatible&lt; T, std::enable_if_t&lt; std::is_convertible&lt; T, span&lt; value_type_of_t&lt; T &gt; &gt; &gt;::value &amp;&amp;std::is_arithmetic&lt; value_type_of_t&lt; T &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1is__integral__span__compatible" prot="public">srsgnb::srsvec::detail::is_integral_span_compatible</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1is__integral__span__compatible_3_01T_00_01std_1_1enable__if_b56f83f80db3ec24d3e8bfe32ddd1b2e" prot="public">srsgnb::srsvec::detail::is_integral_span_compatible&lt; T, std::enable_if_t&lt; std::is_convertible&lt; T, span&lt; value_type_of_t&lt; T &gt; &gt; &gt;::value &amp;&amp;std::is_integral&lt; value_type_of_t&lt; T &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1is__span__compatible" prot="public">srsgnb::srsvec::detail::is_span_compatible</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1is__span__compatible_3_01T_00_01std_1_1enable__if__t_3_01std93c2180f3d3a52f4ad37add9d49e5a96" prot="public">srsgnb::srsvec::detail::is_span_compatible&lt; T, std::enable_if_t&lt; std::is_convertible&lt; T, span&lt; value_type_of_t&lt; T &gt; &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1value__type__of__container" prot="public">srsgnb::srsvec::detail::value_type_of_container</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1value__type__of__container_3_01T_3_01U_00_01N_01_4_01_4" prot="public">srsgnb::srsvec::detail::value_type_of_container&lt; T&lt; U, N &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1value__type__of__container_3_01T_3_01U_8_8_8_01_4_01_4" prot="public">srsgnb::srsvec::detail::value_type_of_container&lt; T&lt; U... &gt; &gt;</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1value__type__of__impl" prot="public">srsgnb::srsvec::detail::value_type_of_impl</innerclass>
    <innerclass refid="structsrsgnb_1_1srsvec_1_1detail_1_1value__type__of__impl_3_01T_07_6_08_0fN_0e_4" prot="public">srsgnb::srsvec::detail::value_type_of_impl&lt; T(&amp;)[N]&gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="traits_8h_1a05b62d0a7c1af36e49d5643b33c35547" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
        <definition>using srsgnb::srsvec::detail::remove_cvref_t = typedef std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>remove_cvref_t</name>
        <briefdescription>
<para>Remove const, volatile qualifiers and references. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/detail/traits.h" line="27" column="1" bodyfile="include/srsgnb/srsvec/detail/traits.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="traits_8h_1a7bbc9b4da77c4f53984a3fb5d1190292" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structsrsgnb_1_1srsvec_1_1detail_1_1value__type__of__impl" kindref="compound">value_type_of_impl</ref>&lt; T &gt;::type</type>
        <definition>using srsgnb::srsvec::detail::value_type_of_t = typedef typename value_type_of_impl&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>value_type_of_t</name>
        <briefdescription>
<para>Deduces the value type of different containers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/detail/traits.h" line="55" column="1" bodyfile="include/srsgnb/srsvec/detail/traits.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="aligned__vec_8h_1a79689be1052562979d3fec03c9bbc9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * srsgnb::srsvec::detail::mem_alloc</definition>
        <argsstring>(std::size_t size)</argsstring>
        <name>mem_alloc</name>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/aligned_vec.h" line="19" column="6" bodyfile="lib/srsvec/aligned_vec.cpp" bodystart="16" bodyend="22" declfile="include/srsgnb/srsvec/aligned_vec.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="aligned__vec_8h_1a50c95d626d6c3637ba1a20098a692cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::srsvec::detail::mem_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>mem_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/aligned_vec.h" line="20" column="7" bodyfile="lib/srsvec/aligned_vec.cpp" bodystart="24" bodyend="27" declfile="include/srsgnb/srsvec/aligned_vec.h" declline="20" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="compare_8h_1a4dc01584b87c8e64620561a243f36bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * srsgnb::srsvec::detail::find</definition>
        <argsstring>(span&lt; const char &gt; input, char value)</argsstring>
        <name>find</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; const char &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srsvec/compare.h" line="20" column="12" bodyfile="lib/srsvec/compare.cpp" bodystart="20" bodyend="51" declfile="include/srsgnb/srsvec/compare.h" declline="20" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/srsgnb/srsvec/aligned_vec.h" line="18" column="16"/>
  </compounddef>
</doxygen>
