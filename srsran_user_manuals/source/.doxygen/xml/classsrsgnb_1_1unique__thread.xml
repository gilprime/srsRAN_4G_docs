<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1unique__thread" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::unique_thread</compoundname>
    <includes refid="unique__thread_8h" local="no">unique_thread.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1unique__thread_1a3bdd5fe1dba3b6d5200eb0e7a3a4f1ee" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string srsgnb::unique_thread::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Thread name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="120" column="15" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="120" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1unique__thread_1a8b868c3a0a4d3867d41f54a66558e42e" compoundref="unique__thread_8h" startline="101" endline="101">get_name</referencedby>
        <referencedby refid="classsrsgnb_1_1unique__thread_1aace816d08454c88bf02f69cee113186a" compoundref="unique__thread_8cpp" startline="126" endline="129">print_priority</referencedby>
        <referencedby refid="classsrsgnb_1_1unique__thread_1a131c59f8644cfa4841e1a41e33933414" compoundref="unique__thread_8cpp" startline="133" endline="160">make_thread</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classsrsgnb_1_1unique__thread_1a9b0136cfc44598e08d9472a6d2c0b159" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread srsgnb::unique_thread::thread_handle</definition>
        <argsstring></argsstring>
        <name>thread_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="122" column="15" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1ab8d0c2f4bf5ce901ffba3d8562f38743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>srsgnb::unique_thread::unique_thread</definition>
        <argsstring>()=default</argsstring>
        <name>unique_thread</name>
        <briefdescription>
<para>Creates a <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> object with no associated OS thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="52" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a2e7b9eb25106db99a56966e1fad19ed7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>srsgnb::unique_thread::unique_thread</definition>
        <argsstring>(std::string name_, os_thread_realtime_priority prio, const os_sched_affinity_bitmask &amp;cpu_mask, Callable &amp;&amp;c)</argsstring>
        <name>unique_thread</name>
        <param>
          <type>std::string</type>
          <declname>name_</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a6e493313fc102cb1b0efb1ed96f073cb" kindref="member">os_thread_realtime_priority</ref></type>
          <declname>prio</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1os__sched__affinity__bitmask" kindref="compound">os_sched_affinity_bitmask</ref> &amp;</type>
          <declname>cpu_mask</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> object with an associated OS thread with custom attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="56" column="3" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a1cbfd3ccadaf5849a6560865d4e89a5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>srsgnb::unique_thread::unique_thread</definition>
        <argsstring>(std::string name_, os_thread_realtime_priority prio, Callable &amp;&amp;c)</argsstring>
        <name>unique_thread</name>
        <param>
          <type>std::string</type>
          <declname>name_</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a6e493313fc102cb1b0efb1ed96f073cb" kindref="member">os_thread_realtime_priority</ref></type>
          <declname>prio</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> object with an associated OS thread with custom scheduling priority. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="65" column="3" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a95d69ef18a5471c2e3d6b89f645e7dd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>srsgnb::unique_thread::unique_thread</definition>
        <argsstring>(std::string name_, const os_sched_affinity_bitmask &amp;cpu_mask, Callable &amp;&amp;c)</argsstring>
        <name>unique_thread</name>
        <param>
          <type>std::string</type>
          <declname>name_</declname>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1os__sched__affinity__bitmask" kindref="compound">os_sched_affinity_bitmask</ref> &amp;</type>
          <declname>cpu_mask</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> object with an associated OS thread with custom cpu affinity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="71" column="3" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1ae085a585bacdf712d71e625ef8817029" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>srsgnb::unique_thread::unique_thread</definition>
        <argsstring>(std::string name_, Callable &amp;&amp;c)</argsstring>
        <name>unique_thread</name>
        <param>
          <type>std::string</type>
          <declname>name_</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> object with an associated OS thread with default attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="78" column="3" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1ab9cd37a7bc5faf6f776fe320fa8318aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>srsgnb::unique_thread::unique_thread</definition>
        <argsstring>(const unique_thread &amp;)=delete</argsstring>
        <name>unique_thread</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="82" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a4bd54e62251d100238502f786af39a5b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::unique_thread::unique_thread</definition>
        <argsstring>(unique_thread &amp;&amp;other) noexcept=default</argsstring>
        <name>unique_thread</name>
        <param>
          <type><ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="84" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a0aff79ddd190594a82f1f66467b47fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::unique_thread::~unique_thread</definition>
        <argsstring>()</argsstring>
        <name>~unique_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="86" column="3" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a9c438d484257464e52f63da82a8e199f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> &amp;</type>
        <definition>unique_thread&amp; srsgnb::unique_thread::operator=</definition>
        <argsstring>(const unique_thread &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="88" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1abf1440d4549735c21f383e028c2301e6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> &amp;</type>
        <definition>unique_thread&amp; srsgnb::unique_thread::operator=</definition>
        <argsstring>(unique_thread &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsrsgnb_1_1unique__thread" kindref="compound">unique_thread</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="90" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a346e79fe23d942683fbb6af0bfcb86f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::unique_thread::join</definition>
        <argsstring>()</argsstring>
        <name>join</name>
        <briefdescription>
<para>Joins thread if it is running. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="93" column="8" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a8b868c3a0a4d3867d41f54a66558e42e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srsgnb::unique_thread::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Gets thread name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="101" column="14" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="101" bodyend="101"/>
        <references refid="classsrsgnb_1_1unique__thread_1a3bdd5fe1dba3b6d5200eb0e7a3a4f1ee" compoundref="unique__thread_8h" startline="120">name</references>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a94619cc5d677b8ba5410b8dc672fb39f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::thread::id</type>
        <definition>std::thread::id srsgnb::unique_thread::get_id</definition>
        <argsstring>() const</argsstring>
        <name>get_id</name>
        <briefdescription>
<para>Gets C++ thread id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="104" column="19" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a1da2455f286cfbd84b6cd1b46ded46e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::unique_thread::running</definition>
        <argsstring>() const</argsstring>
        <name>running</name>
        <briefdescription>
<para>Checks whether thread is running. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="107" column="8" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1aace816d08454c88bf02f69cee113186a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unique_thread::print_priority</definition>
        <argsstring>()</argsstring>
        <name>print_priority</name>
        <briefdescription>
<para>Print to console the current thread priority. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="110" column="8" bodyfile="lib/support/unique_thread.cpp" bodystart="126" bodyend="129"/>
        <references refid="classsrsgnb_1_1unique__thread_1a3bdd5fe1dba3b6d5200eb0e7a3a4f1ee" compoundref="unique__thread_8h" startline="120">name</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classsrsgnb_1_1unique__thread_1a131c59f8644cfa4841e1a41e33933414" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::thread</type>
        <definition>std::thread unique_thread::make_thread</definition>
        <argsstring>(const std::string &amp;name, unique_function&lt; void()&gt; callable, os_thread_realtime_priority prio=os_thread_realtime_priority::NO_REALTIME, const os_sched_affinity_bitmask &amp;cpu_mask={})</argsstring>
        <name>make_thread</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classsrsgnb_1_1unique__function" kindref="compound">unique_function</ref>&lt; void()&gt;</type>
          <declname>callable</declname>
        </param>
        <param>
          <type><ref refid="namespacesrsgnb_1a6e493313fc102cb1b0efb1ed96f073cb" kindref="member">os_thread_realtime_priority</ref></type>
          <declname>prio</declname>
          <defval>os_thread_realtime_priority::NO_REALTIME</defval>
        </param>
        <param>
          <type>const <ref refid="structsrsgnb_1_1os__sched__affinity__bitmask" kindref="compound">os_sched_affinity_bitmask</ref> &amp;</type>
          <declname>cpu_mask</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Starts thread with provided name and attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/unique_thread.h" line="114" column="22" bodyfile="lib/support/unique_thread.cpp" bodystart="133" bodyend="160"/>
        <references refid="classsrsgnb_1_1unique__thread_1a3bdd5fe1dba3b6d5200eb0e7a3a4f1ee" compoundref="unique__thread_8h" startline="120">name</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Unique thread wrapper that ensures the thread is joined on destruction and provides an interface to set/get the thread name, priority, cpu mask. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::unique_thread</label>
        <link refid="classsrsgnb_1_1unique__thread"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/support/unique_thread.h" line="49" column="1" bodyfile="include/srsgnb/support/unique_thread.h" bodystart="48" bodyend="123"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1unique__thread_1a94619cc5d677b8ba5410b8dc672fb39f" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>get_id</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a8b868c3a0a4d3867d41f54a66558e42e" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>get_name</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a346e79fe23d942683fbb6af0bfcb86f8" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>join</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a131c59f8644cfa4841e1a41e33933414" prot="private" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>make_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a3bdd5fe1dba3b6d5200eb0e7a3a4f1ee" prot="private" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>name</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a9c438d484257464e52f63da82a8e199f" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1abf1440d4549735c21f383e028c2301e6" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1aace816d08454c88bf02f69cee113186a" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>print_priority</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a1da2455f286cfbd84b6cd1b46ded46e4" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>running</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a9b0136cfc44598e08d9472a6d2c0b159" prot="private" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>thread_handle</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1ab8d0c2f4bf5ce901ffba3d8562f38743" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>unique_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a2e7b9eb25106db99a56966e1fad19ed7" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>unique_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a1cbfd3ccadaf5849a6560865d4e89a5a" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>unique_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a95d69ef18a5471c2e3d6b89f645e7dd8" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>unique_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1ae085a585bacdf712d71e625ef8817029" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>unique_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1ab9cd37a7bc5faf6f776fe320fa8318aa" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>unique_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a4bd54e62251d100238502f786af39a5b" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>unique_thread</name></member>
      <member refid="classsrsgnb_1_1unique__thread_1a0aff79ddd190594a82f1f66467b47fb3" prot="public" virt="non-virtual"><scope>srsgnb::unique_thread</scope><name>~unique_thread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
