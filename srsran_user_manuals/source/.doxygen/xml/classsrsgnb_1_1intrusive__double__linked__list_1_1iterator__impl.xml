<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kind="class" language="C++" prot="private">
    <compoundname>srsgnb::intrusive_double_linked_list::iterator_impl</compoundname>
    <templateparamlist>
      <param>
        <type>typename U</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a51fc38b801edf933729c223e619d9723" prot="private" static="no">
        <type>typename std::conditional&lt; std::is_const&lt; U &gt;::value, const <ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">node_t</ref>, <ref refid="structsrsgnb_1_1intrusive__double__linked__list__element" kindref="compound">node_t</ref> &gt;::type</type>
        <definition>using srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::elem_t =  typename std::conditional&lt;std::is_const&lt;U&gt;::value, const node_t, node_t&gt;::type</definition>
        <argsstring></argsstring>
        <name>elem_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="140" column="5" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a7721bb4128071ad6780433d6562a7475" prot="public" static="no">
        <type>std::bidirectional_iterator_tag</type>
        <definition>using srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::iterator_category =  std::bidirectional_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="143" column="5" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a95fbcbae192c3a71627157f4933e9a0b" prot="public" static="no">
        <type>U</type>
        <definition>using srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::value_type =  U</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="144" column="5" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a5d2109805e552d44965609b275991224" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="145" column="5" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a8d191c70f3c62ba4d0848de54302ef5d" prot="public" static="no">
        <type>U *</type>
        <definition>using srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::pointer =  U*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="146" column="5" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1aad0964e5523c1413fa76a29a76662754" prot="public" static="no">
        <type>U &amp;</type>
        <definition>using srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::reference =  U&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="147" column="5" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1af1aab27102ba5e9569371230e19e1a88" prot="private" static="no" mutable="no">
        <type>elem_t *</type>
        <definition>elem_t* srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="167" column="12" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1aff2b35d428eaeb43678f9e6d5e620348" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::iterator_impl</definition>
        <argsstring>(elem_t *node_=nullptr)</argsstring>
        <name>iterator_impl</name>
        <param>
          <type>elem_t *</type>
          <declname>node_</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="149" column="14" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1af1da60a8213afc36dd3f16a8cb1a5bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl</ref>&lt; U &gt; &amp;</type>
        <definition>iterator_impl&lt;U&gt;&amp; srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="150" column="19" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a87b7771d62a0565c456737169e302f1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl</ref>&lt; U &gt; &amp;</type>
        <definition>iterator_impl&lt;U&gt;&amp; srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="155" column="19" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1aabe63f824e9a03ff244fc9ac7b4b9472" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="160" column="15" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1afcbe8f45fbf34ad398c5c772538e62ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="161" column="15" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a1a3a3f5001dcb202e584fa20ef4cb12d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::operator==</definition>
        <argsstring>(const iterator_impl&lt; U &gt; &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="163" column="10" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1acc6f8934c1d020a347311e46c5ac1153" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;::operator!=</definition>
        <argsstring>(const iterator_impl&lt; U &gt; &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl" kindref="compound">iterator_impl</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/intrusive_list.h" line="164" column="10" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="164" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Iterator implementation for <ref refid="classsrsgnb_1_1intrusive__double__linked__list" kindref="compound">intrusive_double_linked_list</ref>. It is used to define &quot;iterator&quot; and &quot;const_iterator&quot;. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::intrusive_double_linked_list&lt; T, Tag &gt;::iterator_impl&lt; U &gt;</label>
        <link refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/adt/intrusive_list.h" line="139" column="1" bodyfile="include/srsgnb/adt/intrusive_list.h" bodystart="138" bodyend="168"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a5d2109805e552d44965609b275991224" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>difference_type</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a51fc38b801edf933729c223e619d9723" prot="private" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>elem_t</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a7721bb4128071ad6780433d6562a7475" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>iterator_category</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1aff2b35d428eaeb43678f9e6d5e620348" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>iterator_impl</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1af1aab27102ba5e9569371230e19e1a88" prot="private" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>node</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1acc6f8934c1d020a347311e46c5ac1153" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>operator!=</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1afcbe8f45fbf34ad398c5c772538e62ab" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>operator*</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1af1da60a8213afc36dd3f16a8cb1a5bc4" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>operator++</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a87b7771d62a0565c456737169e302f1a" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>operator--</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1aabe63f824e9a03ff244fc9ac7b4b9472" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>operator-&gt;</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a1a3a3f5001dcb202e584fa20ef4cb12d" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>operator==</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a8d191c70f3c62ba4d0848de54302ef5d" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>pointer</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1aad0964e5523c1413fa76a29a76662754" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>reference</name></member>
      <member refid="classsrsgnb_1_1intrusive__double__linked__list_1_1iterator__impl_1a95fbcbae192c3a71627157f4933e9a0b" prot="public" virt="non-virtual"><scope>srsgnb::intrusive_double_linked_list::iterator_impl</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
