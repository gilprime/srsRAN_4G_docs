<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1expected" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::expected</compoundname>
    <includes refid="expected_8h" local="no">expected.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename E</type>
        <defval><ref refid="structsrsgnb_1_1default__error__t" kindref="compound">default_error_t</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1expected_1aba17f729fc27c23ea588aa0df0d8fac3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool srsgnb::expected&lt; T, E &gt;::has_val</definition>
        <argsstring></argsstring>
        <name>has_val</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="227" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrsgnb_1_1expected_1a372394e808d434b378868d54a4577022" prot="private" static="no" mutable="no">
        <type>union srsgnb::expected::@3</type>
        <definition>union srsgnb::expected::@3 srsgnb::expected&lt; T, E &gt;::@4</definition>
        <argsstring></argsstring>
        <name>@4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="231" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1expected_1a13fdb568e633020726c44e9047a5447f" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T srsgnb::expected&lt; T, E &gt;::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="229" column="7" bodyfile="include/srsgnb/adt/expected.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrsgnb_1_1expected_1acdafa04d1171620855945526778863f4" prot="public" static="no" mutable="no">
        <type>E</type>
        <definition>E srsgnb::expected&lt; T, E &gt;::unexpected</definition>
        <argsstring></argsstring>
        <name>unexpected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="230" column="7" bodyfile="include/srsgnb/adt/expected.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1expected_1add4b8faf3f461099729220a10d41410d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>()</argsstring>
        <name>expected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="43" column="13" bodyfile="include/srsgnb/adt/expected.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1abce822b3cafc7bbf9ea6ca9cc7449cfb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>(T &amp;&amp;t) noexcept</argsstring>
        <name>expected</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="44" column="3" bodyfile="include/srsgnb/adt/expected.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1afe3e919a4361cd90bb47e70f79914af3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>(const T &amp;t) noexcept</argsstring>
        <name>expected</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="45" column="3" bodyfile="include/srsgnb/adt/expected.h" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a8cf8d2fd61f40a7848e42e92d79d3ee3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>(E &amp;&amp;e) noexcept</argsstring>
        <name>expected</name>
        <param>
          <type>E &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="46" column="3" bodyfile="include/srsgnb/adt/expected.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1aa6367149a00a5dc98716843068af8d7b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>(const E &amp;e) noexcept</argsstring>
        <name>expected</name>
        <param>
          <type>const E &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="47" column="3" bodyfile="include/srsgnb/adt/expected.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a3f6449790f80ded6072f918afee6803f" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; U, T &gt;::value and not <ref refid="structsrsgnb_1_1detail_1_1is__expected" kindref="compound">detail::is_expected</ref>&lt; typename std::decay&lt; U &gt;::type &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>(U &amp;&amp;u) noexcept</argsstring>
        <name>expected</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="52" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a40a92ab8586bdef1d2474a6eba144736" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>(const expected &amp;other)</argsstring>
        <name>expected</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="55" column="3" bodyfile="include/srsgnb/adt/expected.h" bodystart="55" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a3f4eb0b9d36209f40db8359d1e28066f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::expected</definition>
        <argsstring>(expected &amp;&amp;other) noexcept</argsstring>
        <name>expected</name>
        <param>
          <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="63" column="3" bodyfile="include/srsgnb/adt/expected.h" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a9b8dc840404fb1f521213012baddd16b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
        <definition>expected&amp; srsgnb::expected&lt; T, E &gt;::operator=</definition>
        <argsstring>(const expected &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="71" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a4250e28e4f6a8916060240e45fa93e86" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
        <definition>expected&amp; srsgnb::expected&lt; T, E &gt;::operator=</definition>
        <argsstring>(expected &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="78" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a067bcedd8ea4d9a75c1fbd3898e60bcd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
        <definition>expected&amp; srsgnb::expected&lt; T, E &gt;::operator=</definition>
        <argsstring>(const T &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="83" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="83" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a5bba124c8a8a5615288433d9a2d85609" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
        <definition>expected&amp; srsgnb::expected&lt; T, E &gt;::operator=</definition>
        <argsstring>(T &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="94" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="94" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1af7414b722572c50edc00e9c01964f76d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
        <definition>expected&amp; srsgnb::expected&lt; T, E &gt;::operator=</definition>
        <argsstring>(const E &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const E &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="105" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="105" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1aeaf1120879abee051bad02f88256cc97" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
        <definition>expected&amp; srsgnb::expected&lt; T, E &gt;::operator=</definition>
        <argsstring>(E &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>E &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="116" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a7a294866a833d1f0e8627a262324a647" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::~expected</definition>
        <argsstring>()</argsstring>
        <name>~expected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="127" column="3" bodyfile="include/srsgnb/adt/expected.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a65fd901224569f49eb914db0042ee4bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::set_error</definition>
        <argsstring>()</argsstring>
        <name>set_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="129" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="129" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a6b13e319cac63f35a48693fa88d47ceb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::set_error</definition>
        <argsstring>(U &amp;&amp;other)</argsstring>
        <name>set_error</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="139" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1accfdc525952444e15e8ecc24dea5e7a8" prot="public" static="no" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::expected&lt; T, E &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="149" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a395f83f6201dcd38fc93de155aee8b7e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::expected&lt; T, E &gt;::has_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>has_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="150" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a40670ca1339ebe3abc2d10cb522c5c5f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::expected&lt; T, E &gt;::is_error</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="151" column="12" bodyfile="include/srsgnb/adt/expected.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1ab3ba1f5f70e3d81b16e8603614ce0e26" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; srsgnb::expected&lt; T, E &gt;::value</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="152" column="11" bodyfile="include/srsgnb/adt/expected.h" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1aaeb48b861e62d3e936de8ae96c812c45" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; srsgnb::expected&lt; T, E &gt;::value</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="157" column="5" bodyfile="include/srsgnb/adt/expected.h" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a21e7f241939022de8a6258f9cf8344a7" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T srsgnb::expected&lt; T, E &gt;::value</definition>
        <argsstring>() &amp;&amp;noexcept</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="162" column="5" bodyfile="include/srsgnb/adt/expected.h" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1abefd8125061dc5b7909f4d6d62d6890d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const E &amp;</type>
        <definition>const E&amp; srsgnb::expected&lt; T, E &gt;::error</definition>
        <argsstring>() const noexcept</argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="167" column="11" bodyfile="include/srsgnb/adt/expected.h" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a86d48dac0b9d252bab528f049d144fa3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>E &amp;</type>
        <definition>E&amp; srsgnb::expected&lt; T, E &gt;::error</definition>
        <argsstring>() noexcept</argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="172" column="5" bodyfile="include/srsgnb/adt/expected.h" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a1142d59d53f4933213d234bc1fa53f73" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::swap</definition>
        <argsstring>(expected &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classsrsgnb_1_1expected" kindref="compound">expected</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="178" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="178" bodyend="195"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a0f1524d12ee756ace7d7e2c62efae23c" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::construct_val</definition>
        <argsstring>(const T &amp;v) noexcept</argsstring>
        <name>construct_val</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="198" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a27655604529f7545813640370959c0af" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::construct_val</definition>
        <argsstring>(T &amp;&amp;v) noexcept</argsstring>
        <name>construct_val</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="203" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a25681ca9a8487727001e64bf427019c0" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::construct_error</definition>
        <argsstring>(const E &amp;e) noexcept</argsstring>
        <name>construct_error</name>
        <param>
          <type>const E &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="208" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1affe62b3cce434299f1b85eab9e3ab0f1" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::construct_error</definition>
        <argsstring>(E &amp;&amp;e) noexcept</argsstring>
        <name>construct_error</name>
        <param>
          <type>E &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="213" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1expected_1a0dd8802bdbf7915007fddde5fe7a7ed7" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::expected&lt; T, E &gt;::destroy</definition>
        <argsstring>() noexcept</argsstring>
        <name>destroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/expected.h" line="218" column="8" bodyfile="include/srsgnb/adt/expected.h" bodystart="218" bodyend="225"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class that can either hold a value type T, in case of success, or an error type E, in case of failure. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of success value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>type of error value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::expected&lt; T, E &gt;</label>
        <link refid="classsrsgnb_1_1expected"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+unexpected</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>srsgnb::default_error_t</label>
        <link refid="structsrsgnb_1_1default__error__t"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/adt/expected.h" line="23" column="1" bodyfile="include/srsgnb/adt/expected.h" bodystart="23" bodyend="-1"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1expected_1a25681ca9a8487727001e64bf427019c0" prot="private" virt="non-virtual"><scope>srsgnb::expected</scope><name>construct_error</name></member>
      <member refid="classsrsgnb_1_1expected_1affe62b3cce434299f1b85eab9e3ab0f1" prot="private" virt="non-virtual"><scope>srsgnb::expected</scope><name>construct_error</name></member>
      <member refid="classsrsgnb_1_1expected_1a0f1524d12ee756ace7d7e2c62efae23c" prot="private" virt="non-virtual"><scope>srsgnb::expected</scope><name>construct_val</name></member>
      <member refid="classsrsgnb_1_1expected_1a27655604529f7545813640370959c0af" prot="private" virt="non-virtual"><scope>srsgnb::expected</scope><name>construct_val</name></member>
      <member refid="classsrsgnb_1_1expected_1a0dd8802bdbf7915007fddde5fe7a7ed7" prot="private" virt="non-virtual"><scope>srsgnb::expected</scope><name>destroy</name></member>
      <member refid="classsrsgnb_1_1expected_1abefd8125061dc5b7909f4d6d62d6890d" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>error</name></member>
      <member refid="classsrsgnb_1_1expected_1a86d48dac0b9d252bab528f049d144fa3" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>error</name></member>
      <member refid="classsrsgnb_1_1expected_1add4b8faf3f461099729220a10d41410d" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1abce822b3cafc7bbf9ea6ca9cc7449cfb" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1afe3e919a4361cd90bb47e70f79914af3" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1a8cf8d2fd61f40a7848e42e92d79d3ee3" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1aa6367149a00a5dc98716843068af8d7b" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1a3f6449790f80ded6072f918afee6803f" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1a40a92ab8586bdef1d2474a6eba144736" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1a3f4eb0b9d36209f40db8359d1e28066f" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>expected</name></member>
      <member refid="classsrsgnb_1_1expected_1aba17f729fc27c23ea588aa0df0d8fac3" prot="private" virt="non-virtual"><scope>srsgnb::expected</scope><name>has_val</name></member>
      <member refid="classsrsgnb_1_1expected_1a395f83f6201dcd38fc93de155aee8b7e" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>has_value</name></member>
      <member refid="classsrsgnb_1_1expected_1a40670ca1339ebe3abc2d10cb522c5c5f" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>is_error</name></member>
      <member refid="classsrsgnb_1_1expected_1accfdc525952444e15e8ecc24dea5e7a8" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>operator bool</name></member>
      <member refid="classsrsgnb_1_1expected_1a9b8dc840404fb1f521213012baddd16b" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1expected_1a4250e28e4f6a8916060240e45fa93e86" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1expected_1a067bcedd8ea4d9a75c1fbd3898e60bcd" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1expected_1a5bba124c8a8a5615288433d9a2d85609" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1expected_1af7414b722572c50edc00e9c01964f76d" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1expected_1aeaf1120879abee051bad02f88256cc97" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1expected_1a65fd901224569f49eb914db0042ee4bf" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>set_error</name></member>
      <member refid="classsrsgnb_1_1expected_1a6b13e319cac63f35a48693fa88d47ceb" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>set_error</name></member>
      <member refid="classsrsgnb_1_1expected_1a1142d59d53f4933213d234bc1fa53f73" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>swap</name></member>
      <member refid="classsrsgnb_1_1expected_1acdafa04d1171620855945526778863f4" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>unexpected</name></member>
      <member refid="classsrsgnb_1_1expected_1a13fdb568e633020726c44e9047a5447f" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>val</name></member>
      <member refid="classsrsgnb_1_1expected_1ab3ba1f5f70e3d81b16e8603614ce0e26" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>value</name></member>
      <member refid="classsrsgnb_1_1expected_1aaeb48b861e62d3e936de8ae96c812c45" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>value</name></member>
      <member refid="classsrsgnb_1_1expected_1a21e7f241939022de8a6258f9cf8344a7" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>value</name></member>
      <member refid="classsrsgnb_1_1expected_1a7a294866a833d1f0e8627a262324a647" prot="public" virt="non-virtual"><scope>srsgnb::expected</scope><name>~expected</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
