<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structsrsgnb_1_1base__resumable__procedure" kind="struct" language="C++" prot="public" abstract="yes">
    <compoundname>srsgnb::base_resumable_procedure</compoundname>
    <includes refid="async__procedure_8h" local="no">async_procedure.h</includes>
    <templateparamlist>
      <param>
        <type>typename FutureType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structsrsgnb_1_1base__resumable__procedure_1adfdf7a5894fc0bad1dc8402106f7735b" prot="public" static="no">
        <type>FutureType</type>
        <definition>using srsgnb::base_resumable_procedure&lt; FutureType &gt;::future_type =  FutureType</definition>
        <argsstring></argsstring>
        <name>future_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="21" column="3" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsrsgnb_1_1base__resumable__procedure_1ab07afba424fffc82e45718aee75e9a5a" prot="public" static="no">
        <type>typename FutureType::promise_type</type>
        <definition>using srsgnb::base_resumable_procedure&lt; FutureType &gt;::promise_type =  typename FutureType::promise_type</definition>
        <argsstring></argsstring>
        <name>promise_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="22" column="3" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsrsgnb_1_1base__resumable__procedure_1acd86cd0657a1c744f7c21a383ff36e17" prot="public" static="no">
        <type>typename FutureType::result_type</type>
        <definition>using srsgnb::base_resumable_procedure&lt; FutureType &gt;::result_type =  typename FutureType::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="23" column="3" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" prot="private" static="no" mutable="no">
        <type><ref refid="structsrsgnb_1_1detail_1_1base__coro__frame" kindref="compound">detail::base_coro_frame</ref>&lt; promise_type &gt; *</type>
        <definition>detail::base_coro_frame&lt;promise_type&gt;* srsgnb::base_resumable_procedure&lt; FutureType &gt;::frame_ptr</definition>
        <argsstring></argsstring>
        <name>frame_ptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>pointer to coroutine frame </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="121" column="27" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="121" bodyend="-1"/>
        <referencedby refid="structsrsgnb_1_1base__resumable__procedure_1a988a7a5f546b1bba009d44187ac608d2" compoundref="async__procedure_8h" startline="29" endline="39">srsgnb::base_resumable_procedure&lt; FutureType &gt;::operator()</referencedby>
        <referencedby refid="structsrsgnb_1_1base__resumable__procedure_1ab8342e0dadc34e1b73c78605411d8bcf" compoundref="async__procedure_8h" startline="44" endline="68">srsgnb::base_resumable_procedure&lt; FutureType &gt;::async_await</referencedby>
        <referencedby refid="structsrsgnb_1_1base__resumable__procedure_1a43a027c03e9d64f43be9d5d58f98f091" compoundref="async__procedure_8h" startline="72" endline="76">srsgnb::base_resumable_procedure&lt; FutureType &gt;::async_return</referencedby>
        <referencedby refid="structsrsgnb_1_1base__resumable__procedure_1a520c1a0d1cdf4bf6a328bd975ca96c7e" compoundref="async__procedure_8h" startline="108" endline="111">srsgnb::base_resumable_procedure&lt; FutureType &gt;::await_resume_helper</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structsrsgnb_1_1base__resumable__procedure_1a496e51249cded725f49afaf792052f99" prot="private" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; srsgnb::base_resumable_procedure&lt; FutureType &gt;::resume_method</definition>
        <argsstring></argsstring>
        <name>resume_method</name>
        <briefdescription>
<para>next method to call on resume </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="122" column="34" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="122" bodyend="-1"/>
        <referencedby refid="structsrsgnb_1_1base__resumable__procedure_1a988a7a5f546b1bba009d44187ac608d2" compoundref="async__procedure_8h" startline="29" endline="39">srsgnb::base_resumable_procedure&lt; FutureType &gt;::operator()</referencedby>
        <referencedby refid="structsrsgnb_1_1base__resumable__procedure_1ab8342e0dadc34e1b73c78605411d8bcf" compoundref="async__procedure_8h" startline="44" endline="68">srsgnb::base_resumable_procedure&lt; FutureType &gt;::async_await</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1a26d91f0b60a4ea2d51d6630fe89682f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void srsgnb::base_resumable_procedure&lt; FutureType &gt;::start</definition>
        <argsstring>()=0</argsstring>
        <name>start</name>
        <briefdescription>
<para>Initiation of the resumable task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="26" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1a988a7a5f546b1bba009d44187ac608d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::base_resumable_procedure&lt; FutureType &gt;::operator()</definition>
        <argsstring>(detail::base_coro_frame&lt; promise_type &gt; &amp;ctx)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="structsrsgnb_1_1detail_1_1base__coro__frame" kindref="compound">detail::base_coro_frame</ref>&lt; promise_type &gt; &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Resume method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="29" column="8" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="29" bodyend="39"/>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" compoundref="async__procedure_8h" startline="121">srsgnb::base_resumable_procedure&lt; FutureType &gt;::frame_ptr</references>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1ab8342e0dadc34e1b73c78605411d8bcf" compoundref="async__procedure_8h" startline="44" endline="68">srsgnb::base_resumable_procedure&lt; FutureType &gt;::async_await</references>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a496e51249cded725f49afaf792052f99" compoundref="async__procedure_8h" startline="122">srsgnb::base_resumable_procedure&lt; FutureType &gt;::resume_method</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1ab8342e0dadc34e1b73c78605411d8bcf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Awaitable</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void srsgnb::base_resumable_procedure&lt; FutureType &gt;::async_await</definition>
        <argsstring>(Awaitable &amp;&amp;a, void(Derived::*action)(Args...))</argsstring>
        <name>async_await</name>
        <param>
          <type>Awaitable &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void(Derived::*)(Args...)</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Called by resumable task to await Awaitable object to finish. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="44" column="8" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="44" bodyend="68"/>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" compoundref="async__procedure_8h" startline="121">srsgnb::base_resumable_procedure&lt; FutureType &gt;::frame_ptr</references>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a496e51249cded725f49afaf792052f99" compoundref="async__procedure_8h" startline="122">srsgnb::base_resumable_procedure&lt; FutureType &gt;::resume_method</references>
        <references refid="structsrsgnb_1_1detail_1_1base__coro__frame_1aa3134bd060c0b560ad8d97f3d7bba562" compoundref="coroutine_8h" startline="130" endline="149">srsgnb::detail::base_coro_frame&lt; Promise &gt;::on_await_call</references>
        <referencedby refid="structsrsgnb_1_1base__resumable__procedure_1a988a7a5f546b1bba009d44187ac608d2" compoundref="async__procedure_8h" startline="29" endline="39">srsgnb::base_resumable_procedure&lt; FutureType &gt;::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1a43a027c03e9d64f43be9d5d58f98f091" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
            <defval>result_type</defval>
          </param>
        </templateparamlist>
        <type>detail::enable_if_void&lt; R &gt;</type>
        <definition>detail::enable_if_void&lt;R&gt; srsgnb::base_resumable_procedure&lt; FutureType &gt;::async_return</definition>
        <argsstring>()</argsstring>
        <name>async_return</name>
        <briefdescription>
<para>Called on resumable task completion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="72" column="26" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="72" bodyend="76"/>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" compoundref="async__procedure_8h" startline="121">srsgnb::base_resumable_procedure&lt; FutureType &gt;::frame_ptr</references>
        <references refid="structsrsgnb_1_1detail_1_1base__coro__frame_1ae2a97164f35eb783b14273c6dc6d1780" compoundref="coroutine_8h" startline="120" endline="120">srsgnb::detail::base_coro_frame&lt; Promise &gt;::promise</references>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1a6619e6c880619383984954ad349a839f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename R</type>
            <defval>result_type</defval>
          </param>
        </templateparamlist>
        <type>detail::enable_if_nonvoid&lt; R, void &gt;</type>
        <definition>detail::enable_if_nonvoid&lt;R, void&gt; srsgnb::base_resumable_procedure&lt; FutureType &gt;::async_return</definition>
        <argsstring>(U &amp;&amp;r)</argsstring>
        <name>async_return</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Called on resumable task completion with non-void return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="80" column="29" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="80" bodyend="85"/>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" compoundref="async__procedure_8h" startline="121">srsgnb::base_resumable_procedure&lt; FutureType &gt;::frame_ptr</references>
        <references refid="structsrsgnb_1_1detail_1_1base__coro__frame_1ae2a97164f35eb783b14273c6dc6d1780" compoundref="coroutine_8h" startline="120" endline="120">srsgnb::detail::base_coro_frame&lt; Promise &gt;::promise</references>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1a3e0d6e84bb43d96f9aa13700bec7a43f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>srsgnb::base_resumable_procedure&lt; FutureType &gt;::~base_resumable_procedure</definition>
        <argsstring>()=default</argsstring>
        <name>~base_resumable_procedure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="87" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1ab34591ee8893bad7bd492905482600c3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::base_resumable_procedure&lt; FutureType &gt;::final_await</definition>
        <argsstring>()</argsstring>
        <name>final_await</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="90" column="8" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="90" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1a520c1a0d1cdf4bf6a328bd975ca96c7e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Awaitable</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>detail::enable_if_nonvoid&lt; detail::awaitable_result_t&lt; Awaitable &gt;, void &gt;</type>
        <definition>detail::enable_if_nonvoid&lt;detail::awaitable_result_t&lt;Awaitable&gt;, void&gt; srsgnb::base_resumable_procedure&lt; FutureType &gt;::await_resume_helper</definition>
        <argsstring>(void(Derived::*action)(Arg))</argsstring>
        <name>await_resume_helper</name>
        <param>
          <type>void(Derived::*)(Arg)</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Called when Awaitable returns a non-void value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="108" column="3" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="108" bodyend="111"/>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" compoundref="async__procedure_8h" startline="121">srsgnb::base_resumable_procedure&lt; FutureType &gt;::frame_ptr</references>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1base__resumable__procedure_1ab229a91b30aec093e88d79be419af9bf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Awaitable</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>detail::enable_if_void&lt; detail::awaitable_result_t&lt; Awaitable &gt; &gt;</type>
        <definition>detail::enable_if_void&lt;detail::awaitable_result_t&lt;Awaitable&gt; &gt; srsgnb::base_resumable_procedure&lt; FutureType &gt;::await_resume_helper</definition>
        <argsstring>(void(Derived::*action)())</argsstring>
        <name>await_resume_helper</name>
        <param>
          <type>void(Derived::*)()</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Called when Awaitable returns void. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/async_procedure.h" line="115" column="26" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="115" bodyend="119"/>
        <references refid="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" compoundref="async__procedure_8h" startline="121">srsgnb::base_resumable_procedure&lt; FutureType &gt;::frame_ptr</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for resumable tasks that are not coroutines. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>srsgnb::detail::base_coro_frame&lt; promise_type &gt;</label>
        <link refid="structsrsgnb_1_1detail_1_1base__coro__frame"/>
      </node>
      <node id="1">
        <label>srsgnb::base_resumable_procedure&lt; FutureType &gt;</label>
        <link refid="structsrsgnb_1_1base__resumable__procedure"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-frame_ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/support/async/async_procedure.h" line="20" column="31" bodyfile="include/srsgnb/support/async/async_procedure.h" bodystart="20" bodyend="123"/>
    <listofallmembers>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1ab8342e0dadc34e1b73c78605411d8bcf" prot="protected" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>async_await</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a43a027c03e9d64f43be9d5d58f98f091" prot="protected" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>async_return</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a6619e6c880619383984954ad349a839f" prot="protected" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>async_return</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a520c1a0d1cdf4bf6a328bd975ca96c7e" prot="private" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>await_resume_helper</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1ab229a91b30aec093e88d79be419af9bf" prot="private" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>await_resume_helper</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1ab34591ee8893bad7bd492905482600c3" prot="private" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>final_await</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a6693695fe87afb0b0e568999aeafbc77" prot="private" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>frame_ptr</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1adfdf7a5894fc0bad1dc8402106f7735b" prot="public" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>future_type</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a988a7a5f546b1bba009d44187ac608d2" prot="public" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>operator()</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1ab07afba424fffc82e45718aee75e9a5a" prot="public" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>promise_type</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1acd86cd0657a1c744f7c21a383ff36e17" prot="public" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>result_type</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a496e51249cded725f49afaf792052f99" prot="private" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>resume_method</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a26d91f0b60a4ea2d51d6630fe89682f9" prot="public" virt="pure-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>start</name></member>
      <member refid="structsrsgnb_1_1base__resumable__procedure_1a3e0d6e84bb43d96f9aa13700bec7a43f" prot="protected" virt="non-virtual"><scope>srsgnb::base_resumable_procedure</scope><name>~base_resumable_procedure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
