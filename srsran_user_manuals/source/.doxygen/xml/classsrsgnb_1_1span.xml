<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1span" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::span</compoundname>
    <derivedcompoundref refid="classsrsgnb_1_1srsvec_1_1aligned__vec" prot="public" virt="non-virtual">srsgnb::srsvec::aligned_vec&lt; T &gt;</derivedcompoundref>
    <includes refid="span_8h" local="no">span.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" prot="public" static="no">
        <type>T</type>
        <definition>using srsgnb::span&lt; T &gt;::element_type =  T</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
<para>Member types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="82" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1a1a58034217e8a15fcbdaf1710a94f1b6" prot="public" static="no">
        <type>typename std::remove_cv&lt; T &gt;::type</type>
        <definition>using srsgnb::span&lt; T &gt;::value_type =  typename std::remove_cv&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="83" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1a09ded70bc1acf0e0a51aecc22cc234d0" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using srsgnb::span&lt; T &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="84" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1aab19fb5d4ef86a89d639f139a643f68e" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using srsgnb::span&lt; T &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="85" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1af28b2dcb7cdcd27e369c4be88ee6f188" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> *</type>
        <definition>using srsgnb::span&lt; T &gt;::pointer =  element_type*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="86" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1a023f227343e443f8e6357ba9f15d4e10" prot="public" static="no">
        <type>const <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> *</type>
        <definition>using srsgnb::span&lt; T &gt;::const_pointer =  const element_type*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="87" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1a618a5fcc08c009973951318fedec2811" prot="public" static="no">
        <type><ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> &amp;</type>
        <definition>using srsgnb::span&lt; T &gt;::reference =  element_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="88" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1a8cda80af527922694d30559389779aa6" prot="public" static="no">
        <type>const <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> &amp;</type>
        <definition>using srsgnb::span&lt; T &gt;::const_reference =  const element_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="89" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1a270ebd3e0787dcf54f6191d9336c6441" prot="public" static="no">
        <type>pointer</type>
        <definition>using srsgnb::span&lt; T &gt;::iterator =  pointer</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="90" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsrsgnb_1_1span_1a38abbe755ef5a66799af81570a77d694" prot="public" static="no">
        <type>std::reverse_iterator&lt; iterator &gt;</type>
        <definition>using srsgnb::span&lt; T &gt;::reverse_iterator =  std::reverse_iterator&lt;iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="91" column="3" bodyfile="include/srsgnb/adt/span.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1span_1ab9ea673754178b00b75f71632517f725" prot="private" static="no" mutable="no">
        <type>pointer</type>
        <definition>pointer srsgnb::span&lt; T &gt;::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="217" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsrsgnb_1_1span_1aecc20be91b6046168f8234956dd00d5b" prot="private" static="no" mutable="no">
        <type>size_type</type>
        <definition>size_type srsgnb::span&lt; T &gt;::len</definition>
        <argsstring></argsstring>
        <name>len</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="218" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1span_1ab7357a6031b754370200d7e356af634d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>span</name>
        <briefdescription>
<para>Constructs an empty span with <ref refid="classsrsgnb_1_1span_1aba4308bbfa76f662c5e7cf1b4afd78c5" kindref="member">data()</ref> == nullptr and <ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size()</ref> == 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="94" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a0757845ed3765f93b6625ca0e8f177b5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(pointer ptr_, size_type len_) noexcept</argsstring>
        <name>span</name>
        <param>
          <type>pointer</type>
          <declname>ptr_</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>len_</declname>
        </param>
        <briefdescription>
<para>Constructs a span that is a view over the range [ptr, ptr + len). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="97" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a876bb3bdedfef0b1c8898caa10064ccb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(pointer first, pointer last) noexcept</argsstring>
        <name>span</name>
        <param>
          <type>pointer</type>
          <declname>first</declname>
        </param>
        <param>
          <type>pointer</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Constructs a span that is a view over the range [first, last). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="100" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1aaddd92cfdfed9eb60c5c7003a5088b80" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(element_type(&amp;arr)[N]) noexcept</argsstring>
        <name>span</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref>(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Constructs a span that is a view over the array arr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="104" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="104" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a935478e8461ba17ba5d59b62bfd9feca" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; U(*)[], <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref>(*)[]&gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(std::array&lt; U, N &gt; &amp;arr) noexcept</argsstring>
        <name>span</name>
        <param>
          <type>std::array&lt; U, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>Constructs a span that is a view over the array arr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="111" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="111" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a0e074ce75e4e305a661878693c287eec" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; const U(*)[], <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref>(*)[]&gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(const std::array&lt; U, N &gt; &amp;arr) noexcept</argsstring>
        <name>span</name>
        <param>
          <type>const std::array&lt; U, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>Constructs a span that is a view over the array arr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="118" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="118" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1aa8c19709553a7af81a0580b3e58470c8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structsrsgnb_1_1detail_1_1is__container__compatible" kindref="compound">detail::is_container_compatible</ref>&lt; Container, <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(Container &amp;c) noexcept</argsstring>
        <name>span</name>
        <param>
          <type>Container &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Constructs a span that is a view over the container c. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="124" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="124" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a5c1e0cdcddd11035deddd55d1c82cfc5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structsrsgnb_1_1detail_1_1is__container__compatible" kindref="compound">detail::is_container_compatible</ref>&lt; const Container, <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(const Container &amp;c) noexcept</argsstring>
        <name>span</name>
        <param>
          <type>const Container &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Constructs a span that is a view over the container c. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="131" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="131" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1ae457f0bc6c5bfc6ed5ba2cd2cf5224bb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; U(*)[], <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref>(*)[]&gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr srsgnb::span&lt; T &gt;::span</definition>
        <argsstring>(const span&lt; U &gt; &amp;other) noexcept</argsstring>
        <name>span</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="135" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="135" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1ae207287e99489d1221e97f16d554559c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref> &amp;</type>
        <definition>span&amp; srsgnb::span&lt; T &gt;::operator=</definition>
        <argsstring>(const span &amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1span" kindref="compound">span</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="138" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1abaca130a6919fb9d8c99a2a44519efc6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>srsgnb::span&lt; T &gt;::~span</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="140" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr size_type</type>
        <definition>constexpr size_type srsgnb::span&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of elements in the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="143" column="23" bodyfile="include/srsgnb/adt/span.h" bodystart="143" bodyend="143"/>
        <referencedby refid="classsrsgnb_1_1span_1a595cf1b0fe0385603307ba67012f820c" compoundref="span_8h" startline="149" endline="149">srsgnb::span&lt; const uint8_t &gt;::empty</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a950df1182a4ea5b6a12d773464e5fc0b" compoundref="span_8h" startline="161" endline="165">srsgnb::span&lt; const uint8_t &gt;::back</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" compoundref="span_8h" startline="182" endline="182">srsgnb::span&lt; const uint8_t &gt;::end</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1aadc9956ed7b3870d1e25e82e4f34e782" compoundref="span_8h" startline="192" endline="196">srsgnb::span&lt; const uint8_t &gt;::first</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" compoundref="span_8h" startline="200" endline="204">srsgnb::span&lt; const uint8_t &gt;::last</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a442489925fefe9d07eb0c62aff93867e" compoundref="span_8h" startline="207" endline="211">srsgnb::span&lt; const uint8_t &gt;::subspan</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a573fd29dfaeea509dc07f4324dfc3303" compoundref="message__builders_8h" startline="569" endline="590">srsgnb::fapi::dl_pdsch_pdu_builder::set_cbg_re_tx_ctrl_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a42877d7b5bbe66baad7f0122ebb9819e" compoundref="message__builders_8h" startline="629" endline="663">srsgnb::fapi::dl_pdsch_pdu_builder::set_maintenance_v3_rm_references_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1tx__data__request__builder_1a895de754da32fcfb9dbecfcf1fe5e9bb" compoundref="message__builders_8h" startline="1067" endline="1080">srsgnb::fapi::tx_data_request_builder::add_pdu_custom_payload</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pucch__pdu__builder_1a58350f8321234cc0f10cc1a8c988229d" compoundref="message__builders_8h" startline="2054" endline="2075">srsgnb::fapi::ul_pucch_pdu_builder::add_uci_part1_part2_corresnpondence_v3</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pusch__pdu__builder_1a4cdc714146c840b5378480dcf8bfbc84" compoundref="message__builders_8h" startline="2288" endline="2309">srsgnb::fapi::ul_pusch_pdu_builder::add_uci_part1_part2_corresnpondence_v3</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__type_1aa69ed66127c1e0fa6f7c4b0714f98b46" compoundref="dmrs__mapping_8h" startline="67" endline="97">srsgnb::dmrs_type::get_dmrs_pattern</referencedby>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__collection_1adf68bec8ccfd6f0ba80639e2cb06d3c5" compoundref="low__papr__sequence__collection_8h" startline="50" endline="76">srsgnb::low_papr_sequence_collection::low_papr_sequence_collection</referencedby>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator_1adc8fa5c4507d0990d393b551b266d8fd" compoundref="pseudo__random__generator_8h" startline="110" endline="110">srsgnb::pseudo_random_generator::generate</referencedby>
        <referencedby refid="dot__prod_8h_1a705554a00576c17a141e529124f3954a" compoundref="dot__prod_8h" startline="73" endline="80">srsgnb::srsvec::average_power</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__fftw__impl_1a7ec69bb8432b381bdd364c318eaf1490" compoundref="dft__processor__fftw__impl_8h" startline="96" endline="96">srsgnb::dft_processor_fftw_impl::get_size</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__fftx__impl_1a7df4096d77804f0253b8f70764874cb5" compoundref="dft__processor__fftx__impl_8cpp" startline="75" endline="83">srsgnb::dft_processor_fftx_impl::run</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__fftx__impl_1a453213f18257488fc6ef08fbc638db14" compoundref="dft__processor__fftx__impl_8h" startline="35" endline="35">srsgnb::dft_processor_fftx_impl::get_size</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__generic__impl_1a2523ad69634a735ccfaa494f06c7c497" compoundref="dft__processor__generic__impl_8h" startline="42" endline="42">srsgnb::dft_processor_generic_impl::get_size</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1acfc1edc79e5e564998fec17482f4aa46" compoundref="ofdm__demodulator__impl_8cpp" startline="61" endline="101">srsgnb::ofdm_symbol_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__demodulator__impl_1a074b6bd669a83a0d65ed79b4ff753e0f" compoundref="ofdm__demodulator__impl_8cpp" startline="116" endline="133">srsgnb::ofdm_slot_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__modulator__impl_1a1cff8fbd637007a914121b91a99affc9" compoundref="ofdm__modulator__impl_8cpp" startline="43" endline="87">srsgnb::ofdm_symbol_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__modulator__impl_1ae31bb9b40eed78f1cb23270fbdea3433" compoundref="ofdm__modulator__impl_8cpp" startline="102" endline="126">srsgnb::ofdm_slot_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__processor__worker_1af0b61e18f411fda99a3cb88aba2a3db9" compoundref="prach__processor__worker_8cpp" startline="65" endline="98">srsgnb::prach_processor_worker::accumulate_samples</referencedby>
        <referencedby refid="classsrsgnb_1_1resource__grid__impl_1a1cb1f8bfe6c48b00727229550bb30dd5" compoundref="resource__grid__impl_8cpp" startline="29" endline="51">srsgnb::resource_grid_impl::put</referencedby>
        <referencedby refid="classsrsgnb_1_1resource__grid__impl_1a3b2aaa5701690dfca005c7b55167bb3a" compoundref="resource__grid__impl_8cpp" startline="110" endline="124">srsgnb::resource_grid_impl::get</referencedby>
        <referencedby refid="classsrsgnb_1_1crc__calculator__impl_1ab8940795248617961d7b0662f6e54504" compoundref="crc__calculator__impl_8cpp" startline="105" endline="151">srsgnb::crc_calculator_impl::calculate_bit</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__impl_1a534a3ef7bf924ae15f8b7f56a69ab767" compoundref="ldpc__decoder__impl_8cpp" startline="46" endline="110">srsgnb::ldpc_decoder_impl::decode</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1aa464c8d4d35e87ee9986d130c814e0fc" compoundref="ldpc__decoder__impl_8cpp" startline="147" endline="159">srsgnb::ldpc_decoder_generic::compute_var_to_check_msgs</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1a0d39947ea370fb3395306c7124ced052" compoundref="ldpc__decoder__impl_8cpp" startline="251" endline="257">srsgnb::ldpc_decoder_generic::get_hard_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__encoder__impl_1a7b07f2de9d496971220825ce198c0789" compoundref="ldpc__encoder__impl_8cpp" startline="35" endline="72">srsgnb::ldpc_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__encoder__generic_1a9dce03bda20070de9818fa8fc6538664" compoundref="ldpc__encoder__impl_8cpp" startline="157" endline="163">srsgnb::ldpc_encoder_generic::write_codeblock</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1ace370290b571f592a6a637f84ae143a3" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="29" endline="85">srsgnb::ldpc_rate_dematcher_impl::rate_dematch</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1a6c1341a2d4c38f5481a805691e488203" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="87" endline="113">srsgnb::ldpc_rate_dematcher_impl::allot_llrs</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1a428b4cddb53d522e0580ef0c34757b02" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="115" endline="125">srsgnb::ldpc_rate_dematcher_impl::deinterleave_llrs</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__matcher__impl_1aa3bd50a08db612abd4fc6a3e8c35fa6d" compoundref="ldpc__rate__matcher__impl_8cpp" startline="28" endline="74">srsgnb::ldpc_rate_matcher_impl::rate_match</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__matcher__impl_1a03724a6fceca36b11c53caffc77de00f" compoundref="ldpc__rate__matcher__impl_8cpp" startline="76" endline="119">srsgnb::ldpc_rate_matcher_impl::select_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__segmenter__impl_1ac42240fce4bb7e502661967508115d76" compoundref="ldpc__segmenter__impl_8cpp" startline="133" endline="209">srsgnb::ldpc_segmenter_impl::segment</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__interleaver__impl_1aa710efeb13534f36c35ead60df52ac95" compoundref="polar__interleaver__impl_8cpp" startline="25" endline="44">srsgnb::polar_interleaver_impl::interleave</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" compoundref="short__block__detector__impl_8cpp" startline="107" endline="135">srsgnb::short_block_detector_impl::detect_3_11</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a19623e946a11e01acf68e233517b5816" compoundref="short__block__detector__impl_8cpp" startline="150" endline="183">srsgnb::short_block_detector_impl::detect</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__encoder__impl_1a9e874fc2f6b85564deb48c666e0023fa" compoundref="short__block__encoder__impl_8cpp" startline="116" endline="137">srsgnb::short_block_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1demodulation__mapper__impl_1a41fe683ab1a2139de42ddb8e776aa866" compoundref="demodulation__mapper__impl_8cpp" startline="365" endline="397">srsgnb::demodulation_mapper_impl::demodulate_soft</referencedby>
        <referencedby refid="classsrsgnb_1_1modulation__mapper__impl_1a6b15ec922595693c948d3c5eae8f0497" compoundref="modulation__mapper__impl_8cpp" startline="141" endline="171">srsgnb::modulation_mapper_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1aa502b30e5c2158bd3056be7038ddb041" compoundref="pbch__encoder__impl_8cpp" startline="29" endline="66">srsgnb::pbch_encoder_impl::payload_generate</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1a05e78e10a81b6296d1f0db7ee5847cfa" compoundref="pbch__encoder__impl_8cpp" startline="113" endline="128">srsgnb::pbch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1a9087cf72c33c902d3597ca5509805055" compoundref="pbch__encoder__impl_8cpp" startline="130" endline="145">srsgnb::pbch_encoder_impl::channel_coding</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1a6454408dcc79daf811485718fdbd1eb4" compoundref="pbch__encoder__impl_8cpp" startline="147" endline="153">srsgnb::pbch_encoder_impl::rate_matching</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1a8ec5357153ec31bed53417524ab60a47" compoundref="pbch__encoder__impl_8cpp" startline="155" endline="178">srsgnb::pbch_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__modulator__impl_1a498bcca23662d14d4f9caa382783addf" compoundref="pbch__modulator__impl_8cpp" startline="80" endline="96">srsgnb::pbch_modulator_impl::put</referencedby>
        <referencedby refid="classsrsgnb_1_1pdcch__encoder__impl_1a5e17395ec5c3c84d7a43a2ba257fd5d3" compoundref="pdcch__encoder__impl_8cpp" startline="22" endline="48">srsgnb::pdcch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1pdcch__encoder__impl_1ae1af6f66fb8ae9286685e25f9d63a34c" compoundref="pdcch__encoder__impl_8cpp" startline="50" endline="62">srsgnb::pdcch_encoder_impl::channel_coding</referencedby>
        <referencedby refid="classsrsgnb_1_1pdcch__encoder__impl_1a328dbf4585eb760e2b74540640742f47" compoundref="pdcch__encoder__impl_8cpp" startline="69" endline="89">srsgnb::pdcch_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__encoder__impl_1af587f25d5b07c2f5362e35873aa0f91c" compoundref="pdsch__encoder__impl_8cpp" startline="15" endline="39">srsgnb::pdsch_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
        <referencedby refid="classsrsgnb_1_1pusch__decoder__impl_1a98e7d82f83456aee2dbcb0e15b2a6ade" compoundref="pusch__decoder__impl_8cpp" startline="118" endline="210">srsgnb::pusch_decoder_impl::decode</referencedby>
        <referencedby refid="structsrsgnb_1_1re__pattern_1a8fc78e95d1602645c2317f3b7970731f" compoundref="re__pattern_8cpp" startline="23" endline="45">srsgnb::re_pattern::get_inclusion_mask</referencedby>
        <referencedby refid="structsrsgnb_1_1re__pattern_1a84ec64f68577a00dea6ac8098724a0e5" compoundref="re__pattern_8cpp" startline="47" endline="69">srsgnb::re_pattern::get_exclusion_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rx__softbuffer__impl_1a82b18d6dd0abec4c2ebaeafb312d542a" compoundref="rx__softbuffer__pool__impl_8h" startline="259" endline="271">srsgnb::rx_softbuffer_impl::get_codeblock_data_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__generator__impl_1a97f5ef825cf8904c5e5ab2604ad67602" compoundref="low__papr__sequence__generator__impl_8cpp" startline="150" endline="163">srsgnb::low_papr_sequence_generator_impl::r_uv_arg_mprb</referencedby>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__generator__impl_1a2da15f34893ca8831dd0b321abc708ff" compoundref="low__papr__sequence__generator__impl_8cpp" startline="165" endline="182">srsgnb::low_papr_sequence_generator_impl::r_uv_arg</referencedby>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__generator__impl_1aea28f49f1ff7e19f27bf4e0751c6d33d" compoundref="low__papr__sequence__generator__impl_8cpp" startline="184" endline="189">srsgnb::low_papr_sequence_generator_impl::cexp</referencedby>
        <referencedby refid="classsrsgnb_1_1low__papr__sequence__generator__impl_1a2615847dc1d1cc85c8f61cb414dba87c" compoundref="low__papr__sequence__generator__impl_8cpp" startline="191" endline="201">srsgnb::low_papr_sequence_generator_impl::generate</referencedby>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator__impl_1ab342c0fa23bc900d75e7c49290df8818" compoundref="pseudo__random__generator__impl_8cpp" startline="107" endline="158">srsgnb::pseudo_random_generator_impl::generate</referencedby>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator__impl_1a6d343fa858f7d79f8df98e12611c8429" compoundref="pseudo__random__generator__impl_8cpp" startline="159" endline="237">srsgnb::pseudo_random_generator_impl::apply_xor_byte</referencedby>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator__impl_1aa6dea6ec9aed8d04091c0827133b6cb9" compoundref="pseudo__random__generator__impl_8cpp" startline="239" endline="296">srsgnb::pseudo_random_generator_impl::apply_xor_bit</referencedby>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator__impl_1a9b86d8909b11e1f9415a59e362e79751" compoundref="pseudo__random__generator__impl_8cpp" startline="297" endline="355">srsgnb::pseudo_random_generator_impl::apply_xor</referencedby>
        <referencedby refid="classsrsgnb_1_1csi__rs__processor__impl_1a7425b83569913fb6791e0e1a0de5343f" compoundref="csi__rs__processor__impl_8cpp" startline="480" endline="545">srsgnb::csi_rs_processor_impl::build_grid_allocation</referencedby>
        <referencedby refid="classsrsgnb_1_1csi__rs__processor__impl_1a63f9f6281757db403a365317d75a8503" compoundref="csi__rs__processor__impl_8cpp" startline="705" endline="767">srsgnb::csi_rs_processor_impl::apply_cdm</referencedby>
        <referencedby refid="namespacesrsgnb_1ac256a6ea6adc1dfe53431799cab8eb68" compoundref="dmrs__helper_8h" startline="32" endline="82">srsgnb::dmrs_sequence_generate</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1aa6aed4e5ed838d9ee66e3e814aa32380" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="71" endline="132">srsgnb::dmrs_pdsch_processor_impl::mapping</referencedby>
        <referencedby refid="classsrsgnb_1_1ra__scheduler_1aa7f5ee78860e7768890012a950bb289c" compoundref="ra__scheduler_8cpp" startline="320" endline="410">srsgnb::ra_scheduler::fill_rar_grant</referencedby>
        <referencedby refid="dot__prod_8h_1a7084939f03719cce6da5f94776b8b223" compoundref="dot__prod_8cpp" startline="17" endline="45">srsgnb::srsvec::dot_prod</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a5fca62075144c661305169a0579003eb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr size_type</type>
        <definition>constexpr size_type srsgnb::span&lt; T &gt;::size_bytes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size_bytes</name>
        <briefdescription>
<para>Returns the size of the sequence in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="146" column="23" bodyfile="include/srsgnb/adt/span.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a595cf1b0fe0385603307ba67012f820c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool srsgnb::span&lt; T &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Checks if the span is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="149" column="18" bodyfile="include/srsgnb/adt/span.h" bodystart="149" bodyend="149"/>
        <referencedby refid="classsrsgnb_1_1span_1a3e9f4dfc20fd702027063b3209367654" compoundref="span_8h" startline="153" endline="157">srsgnb::span&lt; const uint8_t &gt;::front</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a950df1182a4ea5b6a12d773464e5fc0b" compoundref="span_8h" startline="161" endline="165">srsgnb::span&lt; const uint8_t &gt;::back</referencedby>
        <referencedby refid="dot__prod_8h_1a705554a00576c17a141e529124f3954a" compoundref="dot__prod_8h" startline="73" endline="80">srsgnb::srsvec::average_power</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format1__impl_1ac5313350b1757ad95063899c4b0ceb1e" compoundref="dmrs__pucch__processor__format1__impl_8cpp" startline="90" endline="108">srsgnb::dmrs_pucch_processor_format1_impl::sequence_generation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a3e9f4dfc20fd702027063b3209367654" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference srsgnb::span&lt; T &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the span. NOTE: Calling front on an empty span results in undefined behavior. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="153" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a950df1182a4ea5b6a12d773464e5fc0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference srsgnb::span&lt; T &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the span. NOTE: Calling back on an empty span results in undefined behavior. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="161" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a205cc025c279a0c59299338f979f0e2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference srsgnb::span&lt; T &gt;::operator[]</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the idx-th element of the sequence. NOTE: The behavior is undefined if idx is out of range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="169" column="13" bodyfile="include/srsgnb/adt/span.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1aba4308bbfa76f662c5e7cf1b4afd78c5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr pointer</type>
        <definition>constexpr pointer srsgnb::span&lt; T &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a pointer to the beginning of the sequence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="176" column="21" bodyfile="include/srsgnb/adt/span.h" bodystart="176" bodyend="176"/>
        <referencedby refid="classsrsgnb_1_1byte__buffer_1a39647fb0bd0ecacd3a8db26eaa1706e3" compoundref="byte__buffer_8h" startline="349" endline="356">srsgnb::byte_buffer::deep_copy</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a3e9f4dfc20fd702027063b3209367654" compoundref="span_8h" startline="153" endline="157">srsgnb::span&lt; const uint8_t &gt;::front</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a950df1182a4ea5b6a12d773464e5fc0b" compoundref="span_8h" startline="161" endline="165">srsgnb::span&lt; const uint8_t &gt;::back</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" compoundref="span_8h" startline="179" endline="179">srsgnb::span&lt; const uint8_t &gt;::begin</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" compoundref="span_8h" startline="182" endline="182">srsgnb::span&lt; const uint8_t &gt;::end</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1a442489925fefe9d07eb0c62aff93867e" compoundref="span_8h" startline="207" endline="211">srsgnb::span&lt; const uint8_t &gt;::subspan</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1tx__data__request__builder_1a895de754da32fcfb9dbecfcf1fe5e9bb" compoundref="message__builders_8h" startline="1067" endline="1080">srsgnb::fapi::tx_data_request_builder::add_pdu_custom_payload</referencedby>
        <referencedby refid="classsrsgnb_1_1pseudo__random__generator_1adc8fa5c4507d0990d393b551b266d8fd" compoundref="pseudo__random__generator_8h" startline="110" endline="110">srsgnb::pseudo_random_generator::generate</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__fftw__impl_1ac20cf8ef7569a264c9673861e219791c" compoundref="dft__processor__fftw__impl_8cpp" startline="61" endline="102">srsgnb::dft_processor_fftw_impl::dft_processor_fftw_impl</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__generic__impl_1ac9938d3915c621b312004257d9854f97" compoundref="dft__processor__generic__impl_8cpp" startline="305" endline="313">srsgnb::dft_processor_generic_impl::run</referencedby>
        <referencedby refid="classsrsgnb_1_1crc__calculator__impl_1ab8940795248617961d7b0662f6e54504" compoundref="crc__calculator__impl_8cpp" startline="105" endline="151">srsgnb::crc_calculator_impl::calculate_bit</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__code__impl_1af7d151b66d58049d326f9c01a186f8a6" compoundref="polar__code__impl_8cpp" startline="413" endline="492">srsgnb::polar_code_impl::set</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__decoder__impl_1a5e129182f5013265956ded0f6a0940ab" compoundref="polar__decoder__impl_8cpp" startline="243" endline="291">srsgnb::polar_decoder_impl::rate_r_node</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__rate__matcher__impl_1aa25881e05c7dc61ecf70d4f80d0f4d75" compoundref="polar__rate__matcher__impl_8cpp" startline="77" endline="97">srsgnb::polar_rate_matcher_impl::rate_match</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1a05e78e10a81b6296d1f0db7ee5847cfa" compoundref="pbch__encoder__impl_8cpp" startline="113" endline="128">srsgnb::pbch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl_1a5abdc76577587c098307ff8dc50bce00" compoundref="dmrs__pucch__processor__format2__impl_8cpp" startline="56" endline="120">srsgnb::dmrs_pucch_processor_format2_impl::estimate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr iterator</type>
        <definition>constexpr iterator srsgnb::span&lt; T &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an iterator to the first element of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="179" column="22" bodyfile="include/srsgnb/adt/span.h" bodystart="179" bodyend="179"/>
        <referencedby refid="classsrsgnb_1_1span_1ae5b64425656227542d6baaadb96ac08a" compoundref="span_8h" startline="188" endline="188">srsgnb::span&lt; const uint8_t &gt;::rend</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1aa370205bd8d8d550b349c6b7a4b4ded1" compoundref="span_8h" startline="214" endline="214">srsgnb::span&lt; const uint8_t &gt;::equals</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a573fd29dfaeea509dc07f4324dfc3303" compoundref="message__builders_8h" startline="569" endline="590">srsgnb::fapi::dl_pdsch_pdu_builder::set_cbg_re_tx_ctrl_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a42877d7b5bbe66baad7f0122ebb9819e" compoundref="message__builders_8h" startline="629" endline="663">srsgnb::fapi::dl_pdsch_pdu_builder::set_maintenance_v3_rm_references_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a25d050c1673b8f09b361d6ede597333e" compoundref="message__builders_8h" startline="739" endline="753">srsgnb::fapi::dl_pdsch_pdu_builder::set_maintenance_v4_basic_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1crc__indication__message__builder_1a589efd53c3a9028dcadac5bf70cd41f4" compoundref="message__builders_8h" startline="1106" endline="1169">srsgnb::fapi::crc_indication_message_builder::add_pdu</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pusch__pdu__builder_1a67153ffe5ca8b292a22ff2946783dc72" compoundref="message__builders_8h" startline="1378" endline="1389">srsgnb::fapi::uci_pusch_pdu_builder::set_harq_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pusch__pdu__builder_1a71e4fb3109ff025927757949c8117f55" compoundref="message__builders_8h" startline="1394" endline="1404">srsgnb::fapi::uci_pusch_pdu_builder::set_csi_part1_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pusch__pdu__builder_1a2bd554717bebb5ef91995eb37ff0d2a2" compoundref="message__builders_8h" startline="1409" endline="1419">srsgnb::fapi::uci_pusch_pdu_builder::set_csi_part2_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__0__1__builder_1ae943c1d976004f69dd8cd7cf9786ba19" compoundref="message__builders_8h" startline="1514" endline="1523">srsgnb::fapi::uci_pucch_pdu_format_0_1_builder::set_harq_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1af76e4f6a236bbcd598f924ba2382e157" compoundref="message__builders_8h" startline="1603" endline="1614">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_sr_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1a738bfb4d086c22f382c009971d54fb02" compoundref="message__builders_8h" startline="1619" endline="1630">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_harq_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1ac2df711bcef3ea3c462dfcd77f2a7bd7" compoundref="message__builders_8h" startline="1635" endline="1645">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_csi_part1_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1ac556053833f94351f7dbee642ad24820" compoundref="message__builders_8h" startline="1650" endline="1660">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_csi_part2_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1aaca398b54c74493664c97affd6b75631" compoundref="message__builders_8h" startline="1666" endline="1677">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_uci_part1_payload</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1aff18cd7581b59ae52c639e4762b1b3f6" compoundref="message__builders_8h" startline="1683" endline="1694">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_uci_part2_payload</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pucch__pdu__builder_1a58350f8321234cc0f10cc1a8c988229d" compoundref="message__builders_8h" startline="2054" endline="2075">srsgnb::fapi::ul_pucch_pdu_builder::add_uci_part1_part2_corresnpondence_v3</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pucch__pdu__builder_1aab6673b7151d4cb6724b89d0198f396b" compoundref="message__builders_8h" startline="2079" endline="2085">srsgnb::fapi::ul_pucch_pdu_builder::set_uci_part1_part2_corresnpondence_v3_basic_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pusch__pdu__builder_1a4cdc714146c840b5378480dcf8bfbc84" compoundref="message__builders_8h" startline="2288" endline="2309">srsgnb::fapi::ul_pusch_pdu_builder::add_uci_part1_part2_corresnpondence_v3</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pusch__pdu__builder_1a3aebf8800d11f5f336c8f874628c8607" compoundref="message__builders_8h" startline="2317" endline="2335">srsgnb::fapi::ul_pusch_pdu_builder::add_optional_pusch_data</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pusch__pdu__builder_1a22db9afbf850f7051814c92e4b04188d" compoundref="message__builders_8h" startline="2364" endline="2379">srsgnb::fapi::ul_pusch_pdu_builder::add_optional_pusch_ptrs</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__type_1aa69ed66127c1e0fa6f7c4b0714f98b46" compoundref="dmrs__mapping_8h" startline="67" endline="97">srsgnb::dmrs_type::get_dmrs_pattern</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__fftx__impl_1a7df4096d77804f0253b8f70764874cb5" compoundref="dft__processor__fftx__impl_8cpp" startline="75" endline="83">srsgnb::dft_processor_fftx_impl::run</referencedby>
        <referencedby refid="classsrsgnb_1_1resource__grid__impl_1a3b2aaa5701690dfca005c7b55167bb3a" compoundref="resource__grid__impl_8cpp" startline="110" endline="124">srsgnb::resource_grid_impl::get</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1a109c53d3e128f880125c799378d2e396" compoundref="ldpc__decoder__impl_8cpp" startline="112" endline="124">srsgnb::ldpc_decoder_generic::load_soft_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1aa464c8d4d35e87ee9986d130c814e0fc" compoundref="ldpc__decoder__impl_8cpp" startline="147" endline="159">srsgnb::ldpc_decoder_generic::compute_var_to_check_msgs</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1a0d39947ea370fb3395306c7124ced052" compoundref="ldpc__decoder__impl_8cpp" startline="251" endline="257">srsgnb::ldpc_decoder_generic::get_hard_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__encoder__generic_1a69821bbfcf84e437d33135ad38e28865" compoundref="ldpc__encoder__impl_8cpp" startline="100" endline="132">srsgnb::ldpc_encoder_generic::preprocess_systematic_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1a6c1341a2d4c38f5481a805691e488203" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="87" endline="113">srsgnb::ldpc_rate_dematcher_impl::allot_llrs</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__matcher__impl_1a03724a6fceca36b11c53caffc77de00f" compoundref="ldpc__rate__matcher__impl_8cpp" startline="76" endline="119">srsgnb::ldpc_rate_matcher_impl::select_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" compoundref="short__block__detector__impl_8cpp" startline="107" endline="135">srsgnb::short_block_detector_impl::detect_3_11</referencedby>
        <referencedby refid="classsrsgnb_1_1demodulation__mapper__impl_1a41fe683ab1a2139de42ddb8e776aa866" compoundref="demodulation__mapper__impl_8cpp" startline="365" endline="397">srsgnb::demodulation_mapper_impl::demodulate_soft</referencedby>
        <referencedby refid="classsrsgnb_1_1pdcch__encoder__impl_1a5e17395ec5c3c84d7a43a2ba257fd5d3" compoundref="pdcch__encoder__impl_8cpp" startline="22" endline="48">srsgnb::pdcch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1adb89f3b5110d488d6a098b43a60bc53c" compoundref="pdsch__modulator__impl_8cpp" startline="160" endline="232">srsgnb::pdsch_modulator_impl::map_to_prb_other</referencedby>
        <referencedby refid="classsrsgnb_1_1pusch__decoder__impl_1a98e7d82f83456aee2dbcb0e15b2a6ade" compoundref="pusch__decoder__impl_8cpp" startline="118" endline="210">srsgnb::pusch_decoder_impl::decode</referencedby>
        <referencedby refid="namespacesrsgnb_1a91f1622ff821b787192eb0b889692a87" compoundref="resource__grid__helpers_8h" startline="48" endline="83">srsgnb::get_rg_subc_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr iterator</type>
        <definition>constexpr iterator srsgnb::span&lt; T &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an iterator to the element following the last element of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="182" column="22" bodyfile="include/srsgnb/adt/span.h" bodystart="182" bodyend="182"/>
        <referencedby refid="classsrsgnb_1_1span_1ab25b409be264cc1d728da233adccb958" compoundref="span_8h" startline="185" endline="185">srsgnb::span&lt; const uint8_t &gt;::rbegin</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1aa370205bd8d8d550b349c6b7a4b4ded1" compoundref="span_8h" startline="214" endline="214">srsgnb::span&lt; const uint8_t &gt;::equals</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a573fd29dfaeea509dc07f4324dfc3303" compoundref="message__builders_8h" startline="569" endline="590">srsgnb::fapi::dl_pdsch_pdu_builder::set_cbg_re_tx_ctrl_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a42877d7b5bbe66baad7f0122ebb9819e" compoundref="message__builders_8h" startline="629" endline="663">srsgnb::fapi::dl_pdsch_pdu_builder::set_maintenance_v3_rm_references_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1dl__pdsch__pdu__builder_1a25d050c1673b8f09b361d6ede597333e" compoundref="message__builders_8h" startline="739" endline="753">srsgnb::fapi::dl_pdsch_pdu_builder::set_maintenance_v4_basic_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1crc__indication__message__builder_1a589efd53c3a9028dcadac5bf70cd41f4" compoundref="message__builders_8h" startline="1106" endline="1169">srsgnb::fapi::crc_indication_message_builder::add_pdu</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pusch__pdu__builder_1a67153ffe5ca8b292a22ff2946783dc72" compoundref="message__builders_8h" startline="1378" endline="1389">srsgnb::fapi::uci_pusch_pdu_builder::set_harq_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pusch__pdu__builder_1a71e4fb3109ff025927757949c8117f55" compoundref="message__builders_8h" startline="1394" endline="1404">srsgnb::fapi::uci_pusch_pdu_builder::set_csi_part1_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pusch__pdu__builder_1a2bd554717bebb5ef91995eb37ff0d2a2" compoundref="message__builders_8h" startline="1409" endline="1419">srsgnb::fapi::uci_pusch_pdu_builder::set_csi_part2_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__0__1__builder_1ae943c1d976004f69dd8cd7cf9786ba19" compoundref="message__builders_8h" startline="1514" endline="1523">srsgnb::fapi::uci_pucch_pdu_format_0_1_builder::set_harq_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1af76e4f6a236bbcd598f924ba2382e157" compoundref="message__builders_8h" startline="1603" endline="1614">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_sr_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1a738bfb4d086c22f382c009971d54fb02" compoundref="message__builders_8h" startline="1619" endline="1630">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_harq_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1ac2df711bcef3ea3c462dfcd77f2a7bd7" compoundref="message__builders_8h" startline="1635" endline="1645">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_csi_part1_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1ac556053833f94351f7dbee642ad24820" compoundref="message__builders_8h" startline="1650" endline="1660">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_csi_part2_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1aaca398b54c74493664c97affd6b75631" compoundref="message__builders_8h" startline="1666" endline="1677">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_uci_part1_payload</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1uci__pucch__pdu__format__2__3__4__builder_1aff18cd7581b59ae52c639e4762b1b3f6" compoundref="message__builders_8h" startline="1683" endline="1694">srsgnb::fapi::uci_pucch_pdu_format_2_3_4_builder::set_uci_part2_payload</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pucch__pdu__builder_1a58350f8321234cc0f10cc1a8c988229d" compoundref="message__builders_8h" startline="2054" endline="2075">srsgnb::fapi::ul_pucch_pdu_builder::add_uci_part1_part2_corresnpondence_v3</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pucch__pdu__builder_1aab6673b7151d4cb6724b89d0198f396b" compoundref="message__builders_8h" startline="2079" endline="2085">srsgnb::fapi::ul_pucch_pdu_builder::set_uci_part1_part2_corresnpondence_v3_basic_parameters</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pusch__pdu__builder_1a4cdc714146c840b5378480dcf8bfbc84" compoundref="message__builders_8h" startline="2288" endline="2309">srsgnb::fapi::ul_pusch_pdu_builder::add_uci_part1_part2_corresnpondence_v3</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pusch__pdu__builder_1a3aebf8800d11f5f336c8f874628c8607" compoundref="message__builders_8h" startline="2317" endline="2335">srsgnb::fapi::ul_pusch_pdu_builder::add_optional_pusch_data</referencedby>
        <referencedby refid="classsrsgnb_1_1fapi_1_1ul__pusch__pdu__builder_1a22db9afbf850f7051814c92e4b04188d" compoundref="message__builders_8h" startline="2364" endline="2379">srsgnb::fapi::ul_pusch_pdu_builder::add_optional_pusch_ptrs</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__type_1aa69ed66127c1e0fa6f7c4b0714f98b46" compoundref="dmrs__mapping_8h" startline="67" endline="97">srsgnb::dmrs_type::get_dmrs_pattern</referencedby>
        <referencedby refid="classsrsgnb_1_1dft__processor__fftx__impl_1a7df4096d77804f0253b8f70764874cb5" compoundref="dft__processor__fftx__impl_8cpp" startline="75" endline="83">srsgnb::dft_processor_fftx_impl::run</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1a109c53d3e128f880125c799378d2e396" compoundref="ldpc__decoder__impl_8cpp" startline="112" endline="124">srsgnb::ldpc_decoder_generic::load_soft_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1aa464c8d4d35e87ee9986d130c814e0fc" compoundref="ldpc__decoder__impl_8cpp" startline="147" endline="159">srsgnb::ldpc_decoder_generic::compute_var_to_check_msgs</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__encoder__generic_1a69821bbfcf84e437d33135ad38e28865" compoundref="ldpc__encoder__impl_8cpp" startline="100" endline="132">srsgnb::ldpc_encoder_generic::preprocess_systematic_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1a6c1341a2d4c38f5481a805691e488203" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="87" endline="113">srsgnb::ldpc_rate_dematcher_impl::allot_llrs</referencedby>
        <referencedby refid="classsrsgnb_1_1short__block__detector__impl_1a3f073481f79894aa41a92b52807a9deb" compoundref="short__block__detector__impl_8cpp" startline="107" endline="135">srsgnb::short_block_detector_impl::detect_3_11</referencedby>
        <referencedby refid="classsrsgnb_1_1demodulation__mapper__impl_1a41fe683ab1a2139de42ddb8e776aa866" compoundref="demodulation__mapper__impl_8cpp" startline="365" endline="397">srsgnb::demodulation_mapper_impl::demodulate_soft</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1adb89f3b5110d488d6a098b43a60bc53c" compoundref="pdsch__modulator__impl_8cpp" startline="160" endline="232">srsgnb::pdsch_modulator_impl::map_to_prb_other</referencedby>
        <referencedby refid="classsrsgnb_1_1pusch__decoder__impl_1a98e7d82f83456aee2dbcb0e15b2a6ade" compoundref="pusch__decoder__impl_8cpp" startline="118" endline="210">srsgnb::pusch_decoder_impl::decode</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1ab25b409be264cc1d728da233adccb958" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr reverse_iterator</type>
        <definition>constexpr reverse_iterator srsgnb::span&lt; T &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns a reverse iterator to the first element of the reversed span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="185" column="30" bodyfile="include/srsgnb/adt/span.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1ae5b64425656227542d6baaadb96ac08a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr reverse_iterator</type>
        <definition>constexpr reverse_iterator srsgnb::span&lt; T &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns a reverse iterator to the element following the last element of the reversed span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="188" column="30" bodyfile="include/srsgnb/adt/span.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1aadc9956ed7b3870d1e25e82e4f34e782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> &gt;</type>
        <definition>span&lt;element_type&gt; srsgnb::span&lt; T &gt;::first</definition>
        <argsstring>(size_type count) const</argsstring>
        <name>first</name>
        <param>
          <type>size_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a span that is a view over the first count elements of this span. NOTE: The behavior is undefined if count &gt; <ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="192" column="8" bodyfile="include/srsgnb/adt/span.h" bodystart="192" bodyend="196"/>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__demodulator__impl_1a074b6bd669a83a0d65ed79b4ff753e0f" compoundref="ofdm__demodulator__impl_8cpp" startline="116" endline="133">srsgnb::ofdm_slot_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__modulator__impl_1a1cff8fbd637007a914121b91a99affc9" compoundref="ofdm__modulator__impl_8cpp" startline="43" endline="87">srsgnb::ofdm_symbol_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__modulator__impl_1ae31bb9b40eed78f1cb23270fbdea3433" compoundref="ofdm__modulator__impl_8cpp" startline="102" endline="126">srsgnb::ofdm_slot_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__processor__worker_1af0b61e18f411fda99a3cb88aba2a3db9" compoundref="prach__processor__worker_8cpp" startline="65" endline="98">srsgnb::prach_processor_worker::accumulate_samples</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__impl_1a534a3ef7bf924ae15f8b7f56a69ab767" compoundref="ldpc__decoder__impl_8cpp" startline="46" endline="110">srsgnb::ldpc_decoder_impl::decode</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1af6e86738011dabd1e6d8ad4234a727a5" compoundref="ldpc__decoder__impl_8cpp" startline="126" endline="145">srsgnb::ldpc_decoder_generic::update_variable_to_check_messages</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__encoder__generic_1a69821bbfcf84e437d33135ad38e28865" compoundref="ldpc__encoder__impl_8cpp" startline="100" endline="132">srsgnb::ldpc_encoder_generic::preprocess_systematic_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__dematcher__impl_1ace370290b571f592a6a637f84ae143a3" compoundref="ldpc__rate__dematcher__impl_8cpp" startline="29" endline="85">srsgnb::ldpc_rate_dematcher_impl::rate_dematch</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__matcher__impl_1aa3bd50a08db612abd4fc6a3e8c35fa6d" compoundref="ldpc__rate__matcher__impl_8cpp" startline="28" endline="74">srsgnb::ldpc_rate_matcher_impl::rate_match</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__code__impl_1af7d151b66d58049d326f9c01a186f8a6" compoundref="polar__code__impl_8cpp" startline="413" endline="492">srsgnb::polar_code_impl::set</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__decoder__impl_1a469dee8915213006d3066de1ad8a6fe1" compoundref="polar__decoder__impl_8cpp" startline="163" endline="191">srsgnb::polar_decoder_impl::init</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1a05e78e10a81b6296d1f0db7ee5847cfa" compoundref="pbch__encoder__impl_8cpp" startline="113" endline="128">srsgnb::pbch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1pdcch__encoder__impl_1a5e17395ec5c3c84d7a43a2ba257fd5d3" compoundref="pdcch__encoder__impl_8cpp" startline="22" endline="48">srsgnb::pdcch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__encoder__impl_1af587f25d5b07c2f5362e35873aa0f91c" compoundref="pdsch__encoder__impl_8cpp" startline="15" endline="39">srsgnb::pdsch_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__detector__simple__impl_1af439ed4a39c98d672be9afd14d863f3a" compoundref="prach__detector__simple__impl_8cpp" startline="22" endline="117">srsgnb::prach_detector_simple_impl::detect</referencedby>
        <referencedby refid="classsrsgnb_1_1rx__softbuffer__impl_1a82b18d6dd0abec4c2ebaeafb312d542a" compoundref="rx__softbuffer__pool__impl_8h" startline="259" endline="271">srsgnb::rx_softbuffer_impl::get_codeblock_data_bits</referencedby>
        <referencedby refid="namespacesrsgnb_1ac256a6ea6adc1dfe53431799cab8eb68" compoundref="dmrs__helper_8h" startline="32" endline="82">srsgnb::dmrs_sequence_generate</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pdsch__processor__impl_1aa6aed4e5ed838d9ee66e3e814aa32380" compoundref="dmrs__pdsch__processor__impl_8cpp" startline="71" endline="132">srsgnb::dmrs_pdsch_processor_impl::mapping</referencedby>
        <referencedby refid="classsrsgnb_1_1pss__processor__impl_1a333a51b1a9491ea91ab6d863484289b2" compoundref="pss__processor__impl_8cpp" startline="41" endline="55">srsgnb::pss_processor_impl::generation</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format2__impl_1a7e9592ce2d6ba28e0009400800f02fb1" compoundref="dmrs__pucch__processor__format2__impl_8cpp" startline="25" endline="38">srsgnb::dmrs_pucch_processor_format2_impl::sequence_generation</referencedby>
        <referencedby refid="classsrsgnb_1_1sss__processor__impl_1af82833a106eadd861b5ff63648180b39" compoundref="sss__processor__impl_8cpp" startline="66" endline="82">srsgnb::sss_processor_impl::generation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> &gt;</type>
        <definition>span&lt;element_type&gt; srsgnb::span&lt; T &gt;::last</definition>
        <argsstring>(size_type count) const</argsstring>
        <name>last</name>
        <param>
          <type>size_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a span that is a view over the last count elements of this span. NOTE: The behavior is undefined if count &gt; <ref refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" kindref="member">size()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="200" column="8" bodyfile="include/srsgnb/adt/span.h" bodystart="200" bodyend="204"/>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__demodulator__impl_1acfc1edc79e5e564998fec17482f4aa46" compoundref="ofdm__demodulator__impl_8cpp" startline="61" endline="101">srsgnb::ofdm_symbol_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__demodulator__impl_1a074b6bd669a83a0d65ed79b4ff753e0f" compoundref="ofdm__demodulator__impl_8cpp" startline="116" endline="133">srsgnb::ofdm_slot_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__symbol__modulator__impl_1a1cff8fbd637007a914121b91a99affc9" compoundref="ofdm__modulator__impl_8cpp" startline="43" endline="87">srsgnb::ofdm_symbol_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__slot__modulator__impl_1ae31bb9b40eed78f1cb23270fbdea3433" compoundref="ofdm__modulator__impl_8cpp" startline="102" endline="126">srsgnb::ofdm_slot_modulator_impl::modulate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1resource__grid__impl_1aa72db8feab1175997eff3bbed6a7a5cc" compoundref="resource__grid__impl_8cpp" startline="53" endline="81">srsgnb::resource_grid_impl::put</referencedby>
        <referencedby refid="classsrsgnb_1_1resource__grid__impl_1a1fb30903c08e291bb3dc1f58ac81c4d1" compoundref="resource__grid__impl_8cpp" startline="127" endline="150">srsgnb::resource_grid_impl::get</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__encoder__generic_1a69821bbfcf84e437d33135ad38e28865" compoundref="ldpc__encoder__impl_8cpp" startline="100" endline="132">srsgnb::ldpc_encoder_generic::preprocess_systematic_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1pbch__encoder__impl_1a05e78e10a81b6296d1f0db7ee5847cfa" compoundref="pbch__encoder__impl_8cpp" startline="113" endline="128">srsgnb::pbch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1pdcch__encoder__impl_1a5e17395ec5c3c84d7a43a2ba257fd5d3" compoundref="pdcch__encoder__impl_8cpp" startline="22" endline="48">srsgnb::pdcch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__detector__simple__impl_1af439ed4a39c98d672be9afd14d863f3a" compoundref="prach__detector__simple__impl_8cpp" startline="22" endline="117">srsgnb::prach_detector_simple_impl::detect</referencedby>
        <referencedby refid="namespacesrsgnb_1ac256a6ea6adc1dfe53431799cab8eb68" compoundref="dmrs__helper_8h" startline="32" endline="82">srsgnb::dmrs_sequence_generate</referencedby>
        <referencedby refid="classsrsgnb_1_1pss__processor__impl_1a333a51b1a9491ea91ab6d863484289b2" compoundref="pss__processor__impl_8cpp" startline="41" endline="55">srsgnb::pss_processor_impl::generation</referencedby>
        <referencedby refid="classsrsgnb_1_1sss__processor__impl_1af82833a106eadd861b5ff63648180b39" compoundref="sss__processor__impl_8cpp" startline="66" endline="82">srsgnb::sss_processor_impl::generation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1a442489925fefe9d07eb0c62aff93867e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref>&lt; <ref refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" kindref="member">element_type</ref> &gt;</type>
        <definition>span&lt;element_type&gt; srsgnb::span&lt; T &gt;::subspan</definition>
        <argsstring>(size_type offset, size_type count) const</argsstring>
        <name>subspan</name>
        <param>
          <type>size_type</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Obtains a span that is a view over the count elements of this span starting at offset offset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="207" column="8" bodyfile="include/srsgnb/adt/span.h" bodystart="207" bodyend="211"/>
        <referencedby refid="classsrsgnb_1_1span_1aadc9956ed7b3870d1e25e82e4f34e782" compoundref="span_8h" startline="192" endline="196">srsgnb::span&lt; const uint8_t &gt;::first</referencedby>
        <referencedby refid="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" compoundref="span_8h" startline="200" endline="204">srsgnb::span&lt; const uint8_t &gt;::last</referencedby>
        <referencedby refid="classsrsgnb_1_1baseband__gateway__buffer__dynamic_1aa03037776bb6e9f45f1c0397a40985b8" compoundref="baseband__gateway__buffer_8h" startline="69" endline="76">srsgnb::baseband_gateway_buffer_dynamic::get_channel_buffer</referencedby>
        <referencedby refid="classsrsgnb_1_1channel__estimate_1a75d18f903b1a1e50fbf98c243ea2fd6b" compoundref="channel__estimation_8h" startline="139" endline="144">srsgnb::channel_estimate::get_path_ch_estimate</referencedby>
        <referencedby refid="classsrsgnb_1_1ofdm__prach__demodulator__impl_1ad6c351530f5dc139e1f2971dbaeb9482" compoundref="ofdm__prach__demodulator__impl_8cpp" startline="19" endline="105">srsgnb::ofdm_prach_demodulator_impl::demodulate</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__processor__worker_1af0b61e18f411fda99a3cb88aba2a3db9" compoundref="prach__processor__worker_8cpp" startline="65" endline="98">srsgnb::prach_processor_worker::accumulate_samples</referencedby>
        <referencedby refid="classsrsgnb_1_1prach__buffer__static_1a32149a36df6db6c574865a0e23cd13f5" compoundref="prach__buffer__impl_8h" startline="34" endline="41">srsgnb::prach_buffer_static&lt; SEQ_LEN, MAX_NOF_SYMB &gt;::get_symbol</referencedby>
        <referencedby refid="classsrsgnb_1_1resource__grid__impl_1aa72db8feab1175997eff3bbed6a7a5cc" compoundref="resource__grid__impl_8cpp" startline="53" endline="81">srsgnb::resource_grid_impl::put</referencedby>
        <referencedby refid="classsrsgnb_1_1resource__grid__impl_1a1fb30903c08e291bb3dc1f58ac81c4d1" compoundref="resource__grid__impl_8cpp" startline="127" endline="150">srsgnb::resource_grid_impl::get</referencedby>
        <referencedby refid="classsrsgnb_1_1crc__calculator__impl_1ab8940795248617961d7b0662f6e54504" compoundref="crc__calculator__impl_8cpp" startline="105" endline="151">srsgnb::crc_calculator_impl::calculate_bit</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__decoder__generic_1af6e86738011dabd1e6d8ad4234a727a5" compoundref="ldpc__decoder__impl_8cpp" startline="126" endline="145">srsgnb::ldpc_decoder_generic::update_variable_to_check_messages</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__encoder__generic_1a69821bbfcf84e437d33135ad38e28865" compoundref="ldpc__encoder__impl_8cpp" startline="100" endline="132">srsgnb::ldpc_encoder_generic::preprocess_systematic_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__rate__matcher__impl_1a03724a6fceca36b11c53caffc77de00f" compoundref="ldpc__rate__matcher__impl_8cpp" startline="76" endline="119">srsgnb::ldpc_rate_matcher_impl::select_bits</referencedby>
        <referencedby refid="classsrsgnb_1_1ldpc__segmenter__impl_1a75d65c4074bcbe5c3931bfa3544154a9" compoundref="ldpc__segmenter__impl_8cpp" startline="225" endline="277">srsgnb::ldpc_segmenter_impl::segment</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__code__impl_1af7d151b66d58049d326f9c01a186f8a6" compoundref="polar__code__impl_8cpp" startline="413" endline="492">srsgnb::polar_code_impl::set</referencedby>
        <referencedby refid="classsrsgnb_1_1polar__decoder__impl_1aead52b3b5a95a2065f33346d47743553" compoundref="polar__decoder__impl_8cpp" startline="211" endline="241">srsgnb::polar_decoder_impl::rate_1_node</referencedby>
        <referencedby refid="classsrsgnb_1_1pdcch__encoder__impl_1a5e17395ec5c3c84d7a43a2ba257fd5d3" compoundref="pdcch__encoder__impl_8cpp" startline="22" endline="48">srsgnb::pdcch_encoder_impl::crc_attach</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__encoder__impl_1af587f25d5b07c2f5362e35873aa0f91c" compoundref="pdsch__encoder__impl_8cpp" startline="15" endline="39">srsgnb::pdsch_encoder_impl::encode</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1adb89f3b5110d488d6a098b43a60bc53c" compoundref="pdsch__modulator__impl_8cpp" startline="160" endline="232">srsgnb::pdsch_modulator_impl::map_to_prb_other</referencedby>
        <referencedby refid="classsrsgnb_1_1pusch__decoder__impl_1a98e7d82f83456aee2dbcb0e15b2a6ade" compoundref="pusch__decoder__impl_8cpp" startline="118" endline="210">srsgnb::pusch_decoder_impl::decode</referencedby>
        <referencedby refid="namespacesrsgnb_1a91f1622ff821b787192eb0b889692a87" compoundref="resource__grid__helpers_8h" startline="48" endline="83">srsgnb::get_rg_subc_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1csi__rs__processor__impl_1a30c332617ff3e1d643e6a61e5dfe86db" compoundref="csi__rs__processor__impl_8cpp" startline="652" endline="703">srsgnb::csi_rs_processor_impl::map</referencedby>
        <referencedby refid="classsrsgnb_1_1dmrs__pucch__processor__format1__impl_1a70192cadc4585598521887b8d46274a0" compoundref="dmrs__pucch__processor__format1__impl_8cpp" startline="118" endline="217">srsgnb::dmrs_pucch_processor_format1_impl::estimate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1span_1aa370205bd8d8d550b349c6b7a4b4ded1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::span&lt; T &gt;::equals</definition>
        <argsstring>(span rhs) const</argsstring>
        <name>equals</name>
        <param>
          <type><ref refid="classsrsgnb_1_1span" kindref="compound">span</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if the input span has the same elements as this. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/adt/span.h" line="214" column="8" bodyfile="include/srsgnb/adt/span.h" bodystart="214" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The class template span describes an object that can refer to a contiguous sequence of objects with the first element of the sequence at position zero. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>srsgnb::srsvec::aligned_vec&lt; T &gt;</label>
        <link refid="classsrsgnb_1_1srsvec_1_1aligned__vec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>srsgnb::span&lt; T &gt;</label>
        <link refid="classsrsgnb_1_1span"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>srsgnb::span&lt; T &gt;</label>
        <link refid="classsrsgnb_1_1span"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/adt/span.h" line="24" column="1" bodyfile="include/srsgnb/adt/span.h" bodystart="24" bodyend="-1"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1span_1a950df1182a4ea5b6a12d773464e5fc0b" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>back</name></member>
      <member refid="classsrsgnb_1_1span_1add5e683519422d8051fb3e3ff5baae58" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>begin</name></member>
      <member refid="classsrsgnb_1_1span_1a023f227343e443f8e6357ba9f15d4e10" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>const_pointer</name></member>
      <member refid="classsrsgnb_1_1span_1a8cda80af527922694d30559389779aa6" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>const_reference</name></member>
      <member refid="classsrsgnb_1_1span_1aba4308bbfa76f662c5e7cf1b4afd78c5" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>data</name></member>
      <member refid="classsrsgnb_1_1span_1aab19fb5d4ef86a89d639f139a643f68e" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>difference_type</name></member>
      <member refid="classsrsgnb_1_1span_1ac415c101bcd457f25faa6a462db6b101" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>element_type</name></member>
      <member refid="classsrsgnb_1_1span_1a595cf1b0fe0385603307ba67012f820c" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>empty</name></member>
      <member refid="classsrsgnb_1_1span_1a90e1d530a1fce8c5e5f992aca6ef19ec" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>end</name></member>
      <member refid="classsrsgnb_1_1span_1aa370205bd8d8d550b349c6b7a4b4ded1" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>equals</name></member>
      <member refid="classsrsgnb_1_1span_1aadc9956ed7b3870d1e25e82e4f34e782" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>first</name></member>
      <member refid="classsrsgnb_1_1span_1a3e9f4dfc20fd702027063b3209367654" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>front</name></member>
      <member refid="classsrsgnb_1_1span_1a270ebd3e0787dcf54f6191d9336c6441" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>iterator</name></member>
      <member refid="classsrsgnb_1_1span_1acb878c9e21d2f073cad3b36e19463ec8" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>last</name></member>
      <member refid="classsrsgnb_1_1span_1aecc20be91b6046168f8234956dd00d5b" prot="private" virt="non-virtual"><scope>srsgnb::span</scope><name>len</name></member>
      <member refid="classsrsgnb_1_1span_1ae207287e99489d1221e97f16d554559c" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>operator=</name></member>
      <member refid="classsrsgnb_1_1span_1a205cc025c279a0c59299338f979f0e2e" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>operator[]</name></member>
      <member refid="classsrsgnb_1_1span_1af28b2dcb7cdcd27e369c4be88ee6f188" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>pointer</name></member>
      <member refid="classsrsgnb_1_1span_1ab9ea673754178b00b75f71632517f725" prot="private" virt="non-virtual"><scope>srsgnb::span</scope><name>ptr</name></member>
      <member refid="classsrsgnb_1_1span_1ab25b409be264cc1d728da233adccb958" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>rbegin</name></member>
      <member refid="classsrsgnb_1_1span_1a618a5fcc08c009973951318fedec2811" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>reference</name></member>
      <member refid="classsrsgnb_1_1span_1ae5b64425656227542d6baaadb96ac08a" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>rend</name></member>
      <member refid="classsrsgnb_1_1span_1a38abbe755ef5a66799af81570a77d694" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>reverse_iterator</name></member>
      <member refid="classsrsgnb_1_1span_1a6408cc7b1d5db1eac20b53b8eaa5188e" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>size</name></member>
      <member refid="classsrsgnb_1_1span_1a5fca62075144c661305169a0579003eb" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>size_bytes</name></member>
      <member refid="classsrsgnb_1_1span_1a09ded70bc1acf0e0a51aecc22cc234d0" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>size_type</name></member>
      <member refid="classsrsgnb_1_1span_1ab7357a6031b754370200d7e356af634d" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1a0757845ed3765f93b6625ca0e8f177b5" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1a876bb3bdedfef0b1c8898caa10064ccb" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1aaddd92cfdfed9eb60c5c7003a5088b80" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1a935478e8461ba17ba5d59b62bfd9feca" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1a0e074ce75e4e305a661878693c287eec" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1aa8c19709553a7af81a0580b3e58470c8" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1a5c1e0cdcddd11035deddd55d1c82cfc5" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1ae457f0bc6c5bfc6ed5ba2cd2cf5224bb" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>span</name></member>
      <member refid="classsrsgnb_1_1span_1a442489925fefe9d07eb0c62aff93867e" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>subspan</name></member>
      <member refid="classsrsgnb_1_1span_1a1a58034217e8a15fcbdaf1710a94f1b6" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>value_type</name></member>
      <member refid="classsrsgnb_1_1span_1abaca130a6919fb9d8c99a2a44519efc6" prot="public" virt="non-virtual"><scope>srsgnb::span</scope><name>~span</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
