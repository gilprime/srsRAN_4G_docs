<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsrsgnb_1_1rb__allocation" kind="class" language="C++" prot="public">
    <compoundname>srsgnb::rb_allocation</compoundname>
    <includes refid="rb__allocation_8h" local="no">rb_allocation.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" prot="private" static="no" mutable="no">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt;</type>
        <definition>bounded_bitset&lt;MAX_RB&gt; srsgnb::rb_allocation::vrb_mask</definition>
        <argsstring></argsstring>
        <name>vrb_mask</name>
        <briefdescription>
<para>Indicates, with a mask, the VRBs selected for the transmission. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="49" column="18" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="49" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a8279c561931b5271c12e9abcd34cebab" compoundref="rb__allocation_8h" startline="110" endline="113">operator==</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a536c619a116091af2f8f15ce8727f07b" compoundref="rb__allocation_8h" startline="122" endline="122">is_contiguous</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a2c63757dc8d9d86f4f24d8b848f93d8b" compoundref="rb__allocation_8h" startline="127" endline="135">get_prb_begin</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1ab89c4464249b9d5bbd423db57dd89b2e" compoundref="rb__allocation_8h" startline="140" endline="148">get_prb_end</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1ab044a4da9226fa0c0906f863bf28805f" compoundref="rb__allocation_8h" startline="151" endline="151">get_nof_rb</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a9bc5e2a809540b3284ee3a111556a6b4" compoundref="rb__allocation_8cpp" startline="15" endline="42">get_contiguous_prb_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a075985c56ef0e385f9c1c69039d72672" compoundref="rb__allocation_8cpp" startline="44" endline="60">get_other_prb_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" compoundref="rb__allocation_8cpp" startline="113" endline="129">get_prb_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a9e9c90b67ebb0b15838289d73ce6475c" compoundref="rb__allocation_8cpp" startline="131" endline="153">get_prb_indices</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" prot="private" static="no" mutable="no">
        <type><ref refid="classsrsgnb_1_1vrb__to__prb__mapper" kindref="compound">vrb_to_prb_mapper</ref></type>
        <definition>vrb_to_prb_mapper srsgnb::rb_allocation::vrb_to_prb_map</definition>
        <argsstring></argsstring>
        <name>vrb_to_prb_map</name>
        <briefdescription>
<para>VRB-to-PRB mapper. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="51" column="21" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="51" bodyend="-1"/>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a8279c561931b5271c12e9abcd34cebab" compoundref="rb__allocation_8h" startline="110" endline="113">operator==</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a536c619a116091af2f8f15ce8727f07b" compoundref="rb__allocation_8h" startline="122" endline="122">is_contiguous</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a2c63757dc8d9d86f4f24d8b848f93d8b" compoundref="rb__allocation_8h" startline="127" endline="135">get_prb_begin</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1ab89c4464249b9d5bbd423db57dd89b2e" compoundref="rb__allocation_8h" startline="140" endline="148">get_prb_end</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a9bc5e2a809540b3284ee3a111556a6b4" compoundref="rb__allocation_8cpp" startline="15" endline="42">get_contiguous_prb_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a075985c56ef0e385f9c1c69039d72672" compoundref="rb__allocation_8cpp" startline="44" endline="60">get_other_prb_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" compoundref="rb__allocation_8cpp" startline="113" endline="129">get_prb_mask</referencedby>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a9e9c90b67ebb0b15838289d73ce6475c" compoundref="rb__allocation_8cpp" startline="131" endline="153">get_prb_indices</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a9bc5e2a809540b3284ee3a111556a6b4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt;</type>
        <definition>bounded_bitset&lt; MAX_RB &gt; rb_allocation::get_contiguous_prb_mask</definition>
        <argsstring>(unsigned bwp_start_rb, unsigned bwp_size_rb) const</argsstring>
        <name>get_contiguous_prb_mask</name>
        <param>
          <type>unsigned</type>
          <declname>bwp_start_rb</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bwp_size_rb</declname>
        </param>
        <briefdescription>
<para>Computes the PRB allocation mask if the resultant allocation is contiguous and non-interleaved. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bwp_start_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP start PRB index relative to CRB0 (PointA). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bwp_size_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP size in PRB units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="57" column="18" bodyfile="lib/phy/upper/rb_allocation.cpp" bodystart="15" bodyend="42"/>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
        <references refid="classsrsgnb_1_1vrb__to__prb__mapper_1a09336fee704340cfa72cf39852bf390e" compoundref="vrb__to__prb__mapper_8h" startline="129" endline="129">srsgnb::vrb_to_prb_mapper::get_coreset_start</references>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1ac144398b8b6c75c17e986b6027a7fea4" compoundref="bounded__bitset_8h" startline="591" endline="598">srsgnb::bounded_bitset&lt; N, reversed &gt;::count</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a8bb3b1a08877033b44f0c6ad6e076a16" compoundref="bounded__bitset_8h" startline="404" endline="404">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_lowest</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a74545186bfbbbf9519ac15da5f6c692c" compoundref="bounded__bitset_8h" startline="503" endline="503">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_highest</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a7e3a54e061a9173d147eb8b202867fc5" compoundref="bounded__bitset_8h" startline="353" endline="364">srsgnb::bounded_bitset&lt; N, reversed &gt;::fill</references>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" compoundref="rb__allocation_8cpp" startline="113" endline="129">get_prb_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a075985c56ef0e385f9c1c69039d72672" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt;</type>
        <definition>bounded_bitset&lt; MAX_RB &gt; rb_allocation::get_other_prb_mask</definition>
        <argsstring>(unsigned bwp_start_rb, unsigned bwp_size_rb) const</argsstring>
        <name>get_other_prb_mask</name>
        <param>
          <type>unsigned</type>
          <declname>bwp_start_rb</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bwp_size_rb</declname>
        </param>
        <briefdescription>
<para>Computes the PRB allocation mask for the cases not covered by <ref refid="classsrsgnb_1_1rb__allocation_1a9bc5e2a809540b3284ee3a111556a6b4" kindref="member">get_contiguous_prb_mask()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bwp_start_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP start PRB index relative to CRB0 (PointA). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bwp_size_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP size in PRB units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="63" column="18" bodyfile="lib/phy/upper/rb_allocation.cpp" bodystart="44" bodyend="60"/>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
        <references refid="classsrsgnb_1_1vrb__to__prb__mapper_1aac8db67cffbf371950907e01628291fc" compoundref="vrb__to__prb__mapper_8cpp" startline="156" endline="167">srsgnb::vrb_to_prb_mapper::get_allocation_indices</references>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1aec33b2aa0ad1fe21801ba05f9fcc61d9" compoundref="bounded__bitset_8h" startline="331" endline="335">srsgnb::bounded_bitset&lt; N, reversed &gt;::test</references>
        <referencedby refid="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" compoundref="rb__allocation_8cpp" startline="113" endline="129">get_prb_mask</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a254f919ff625a377e0d7d292576cd981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>srsgnb::rb_allocation::rb_allocation</definition>
        <argsstring>()=default</argsstring>
        <name>rb_allocation</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>It constructs an empty allocation with default VRB-to-PRB mapping. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="69" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a8279c561931b5271c12e9abcd34cebab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::rb_allocation::operator==</definition>
        <argsstring>(const rb_allocation &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1rb__allocation" kindref="compound">rb_allocation</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares two frequency domain allocations. </para>
        </briefdescription>
        <detaileddescription>
<para>Two allocations are considered equal if:<itemizedlist>
<listitem><para>their VRB masks are equal, and</para>
</listitem><listitem><para>the VRB-to-PRB mapping is equal. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="110" column="8" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="110" bodyend="113"/>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a536c619a116091af2f8f15ce8727f07b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::rb_allocation::is_contiguous</definition>
        <argsstring>() const</argsstring>
        <name>is_contiguous</name>
        <briefdescription>
<para>Determines if resultant VRB-to-PRB allocation is contiguous in frequency domain. </para>
        </briefdescription>
        <detaileddescription>
<para>The PRB allocation is contiguous if:<itemizedlist>
<listitem><para>the VRB allocated for the transmission are contiguous, and</para>
</listitem><listitem><para>the VRB-to-PRB mapping is not interleaved.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>True if the PRB allocation is contiguous. Otherwise, false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="122" column="8" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="122" bodyend="122"/>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1afa969406028f34c1dcb2f8b466df4321" compoundref="bounded__bitset_8h" startline="561" endline="587">srsgnb::bounded_bitset&lt; N, reversed &gt;::is_contiguous</references>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
        <references refid="classsrsgnb_1_1vrb__to__prb__mapper_1ac84cebc61846343b70e84059a04ecd52" compoundref="vrb__to__prb__mapper_8h" startline="122" endline="122">srsgnb::vrb_to_prb_mapper::is_interleaved</references>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a99d144ad4330e7b1851df0de1b8ca6f0" compoundref="pdsch__modulator__impl_8cpp" startline="234" endline="286">srsgnb::pdsch_modulator_impl::modulate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a2c63757dc8d9d86f4f24d8b848f93d8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::rb_allocation::get_prb_begin</definition>
        <argsstring>(unsigned bwp_start_rb) const</argsstring>
        <name>get_prb_begin</name>
        <param>
          <type>unsigned</type>
          <declname>bwp_start_rb</declname>
        </param>
        <briefdescription>
<para>Gets the lowest allocated PRB index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bwp_start_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP lowest PRB index relative to CRB0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A PRB index relative to CRB0 (PointA) if there are active VRB. Otherwise, zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="127" column="12" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="127" bodyend="135"/>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a8bb3b1a08877033b44f0c6ad6e076a16" compoundref="bounded__bitset_8h" startline="404" endline="404">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_lowest</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
        <references refid="classsrsgnb_1_1vrb__to__prb__mapper_1a09336fee704340cfa72cf39852bf390e" compoundref="vrb__to__prb__mapper_8h" startline="129" endline="129">srsgnb::vrb_to_prb_mapper::get_coreset_start</references>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1ab89c4464249b9d5bbd423db57dd89b2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::rb_allocation::get_prb_end</definition>
        <argsstring>(unsigned bwp_start_rb) const</argsstring>
        <name>get_prb_end</name>
        <param>
          <type>unsigned</type>
          <declname>bwp_start_rb</declname>
        </param>
        <briefdescription>
<para>Gets the highest allocated PRB index plus one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bwp_start_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP lowest PRB index relative to CRB0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-zero PRB index relative to CRB0 (PointA) if there are active VRB. Otherwise, zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="140" column="12" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="140" bodyend="148"/>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a74545186bfbbbf9519ac15da5f6c692c" compoundref="bounded__bitset_8h" startline="503" endline="503">srsgnb::bounded_bitset&lt; N, reversed &gt;::find_highest</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
        <references refid="classsrsgnb_1_1vrb__to__prb__mapper_1a09336fee704340cfa72cf39852bf390e" compoundref="vrb__to__prb__mapper_8h" startline="129" endline="129">srsgnb::vrb_to_prb_mapper::get_coreset_start</references>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1a145754bd9128828ee0e7770563b5534b" compoundref="pdsch__modulator__impl_8cpp" startline="87" endline="158">srsgnb::pdsch_modulator_impl::map_to_contiguous_prb</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1ab044a4da9226fa0c0906f863bf28805f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned srsgnb::rb_allocation::get_nof_rb</definition>
        <argsstring>() const</argsstring>
        <name>get_nof_rb</name>
        <briefdescription>
<para>Gets the number of allocated VRB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="151" column="12" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="151" bodyend="151"/>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1ac144398b8b6c75c17e986b6027a7fea4" compoundref="bounded__bitset_8h" startline="591" endline="598">srsgnb::bounded_bitset&lt; N, reversed &gt;::count</references>
        <referencedby refid="classsrsgnb_1_1pdsch__processor__impl_1ad7f3fc8d1b12b86035f4802afa77c4b5" compoundref="pdsch__processor__impl_8cpp" startline="16" endline="38">srsgnb::pdsch_processor_impl::compute_nof_data_re</referencedby>
        <referencedby refid="classsrsgnb_1_1pusch__demodulator__impl_1a1dd140986f6b6af92c25155823f25eaf" compoundref="pusch__demodulator__impl_8cpp" startline="18" endline="63">srsgnb::pusch_demodulator_impl::demodulate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt;</type>
        <definition>bounded_bitset&lt; MAX_RB &gt; rb_allocation::get_prb_mask</definition>
        <argsstring>(unsigned bwp_start_rb, unsigned bwp_size_rb) const</argsstring>
        <name>get_prb_mask</name>
        <param>
          <type>unsigned</type>
          <declname>bwp_start_rb</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bwp_size_rb</declname>
        </param>
        <briefdescription>
<para>Generates the PRB allocation mask for the frequency domain allocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the PRB allocation mask considering the BWP frequency allocation, the VRB mask and the VRB-to-PRB mapping.</para>
<para>The resultant mask is represented in a <computeroutput><ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset&lt;MAX_RB&gt;</ref></computeroutput> of size <formula id="70">$N_{BWP,i}^{start}+N_{BWP,i}^{size}$</formula> in which every set bit represents an active PRB. The first bit of the mask belongs to CRB0 (PointA).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bwp_start_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP lowest PRB index relative to CRB0 (PointA) as <formula id="71">$N_{BWP,i}^{start}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bwp_size_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP size in PRB as <formula id="72">$N_{BWP,i}^{size}$</formula>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PRB allocation mask represented as a bounded bitset. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="164" column="18" bodyfile="lib/phy/upper/rb_allocation.cpp" bodystart="113" bodyend="129"/>
        <references refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" compoundref="constants_8h" startline="16">srsgnb::MAX_RB</references>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1afa969406028f34c1dcb2f8b466df4321" compoundref="bounded__bitset_8h" startline="561" endline="587">srsgnb::bounded_bitset&lt; N, reversed &gt;::is_contiguous</references>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
        <references refid="classsrsgnb_1_1vrb__to__prb__mapper_1ac84cebc61846343b70e84059a04ecd52" compoundref="vrb__to__prb__mapper_8h" startline="122" endline="122">srsgnb::vrb_to_prb_mapper::is_interleaved</references>
        <references refid="classsrsgnb_1_1rb__allocation_1a9bc5e2a809540b3284ee3a111556a6b4" compoundref="rb__allocation_8cpp" startline="15" endline="42">get_contiguous_prb_mask</references>
        <references refid="classsrsgnb_1_1rb__allocation_1a075985c56ef0e385f9c1c69039d72672" compoundref="rb__allocation_8cpp" startline="44" endline="60">get_other_prb_mask</references>
        <referencedby refid="classsrsgnb_1_1pdsch__processor__impl_1ad7f3fc8d1b12b86035f4802afa77c4b5" compoundref="pdsch__processor__impl_8cpp" startline="16" endline="38">srsgnb::pdsch_processor_impl::compute_nof_data_re</referencedby>
        <referencedby refid="classsrsgnb_1_1pdsch__processor__impl_1a3f0f8272b6e750713823e32f4eece25c" compoundref="pdsch__processor__impl_8cpp" startline="95" endline="118">srsgnb::pdsch_processor_impl::put_dmrs</referencedby>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a9e9c90b67ebb0b15838289d73ce6475c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1static__vector" kindref="compound">static_vector</ref>&lt; uint16_t, <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt;</type>
        <definition>static_vector&lt; uint16_t, MAX_RB &gt; rb_allocation::get_prb_indices</definition>
        <argsstring>(unsigned bwp_start_rb, unsigned bwp_size_rb) const</argsstring>
        <name>get_prb_indices</name>
        <param>
          <type>unsigned</type>
          <declname>bwp_start_rb</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>bwp_size_rb</declname>
        </param>
        <briefdescription>
<para>Generates the PRB allocation indexes for the frequency domain allocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the PRB allocation indexes considering the BWP frequency allocation, the VRB mask and the VRB-to-PRB mapping.</para>
<para>The resultant indices are represented in a <computeroutput>static_vector&lt;uint16_t,MAX_RB&gt;</computeroutput> of size <formula id="70">$N_{BWP,i}^{start}+N_{BWP,i}^{size}$</formula>. The indices are relative to CRB0 (PointA) and they are indexed in VRB increasing order. In other words, the first index indicates the PRB index of the lowest active VRB. Correspondingly, the last index corresponds to the highest active VRB.</para>
<para>This method is intended for non-contiguous and/or interleaved allocation. For contiguous non-interleaved transmission use <computeroutput><ref refid="classsrsgnb_1_1rb__allocation_1a2c63757dc8d9d86f4f24d8b848f93d8b" kindref="member">get_prb_begin()</ref></computeroutput> and <computeroutput><ref refid="classsrsgnb_1_1rb__allocation_1ab89c4464249b9d5bbd423db57dd89b2e" kindref="member">get_prb_end()</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bwp_start_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP lowest PRB index relative to CRB0 (PointA) as <formula id="71">$N_{BWP,i}^{start}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bwp_size_rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the BWP size in PRB as <formula id="72">$N_{BWP,i}^{size}$</formula>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resultant PRB allocation indices represented as a static vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="182" column="17" bodyfile="lib/phy/upper/rb_allocation.cpp" bodystart="131" bodyend="153"/>
        <references refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" compoundref="constants_8h" startline="16">srsgnb::MAX_RB</references>
        <references refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" compoundref="rb__allocation_8h" startline="49">vrb_mask</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1a5fc3c696fe29cd4275460b7ebdfb7ce4" compoundref="bounded__bitset_8h" startline="248" endline="248">srsgnb::bounded_bitset&lt; N, reversed &gt;::size</references>
        <references refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" compoundref="rb__allocation_8h" startline="51">vrb_to_prb_map</references>
        <references refid="classsrsgnb_1_1vrb__to__prb__mapper_1aac8db67cffbf371950907e01628291fc" compoundref="vrb__to__prb__mapper_8cpp" startline="156" endline="167">srsgnb::vrb_to_prb_mapper::get_allocation_indices</references>
        <references refid="classsrsgnb_1_1bounded__bitset_1aec33b2aa0ad1fe21801ba05f9fcc61d9" compoundref="bounded__bitset_8h" startline="331" endline="335">srsgnb::bounded_bitset&lt; N, reversed &gt;::test</references>
        <referencedby refid="classsrsgnb_1_1pdsch__modulator__impl_1adb89f3b5110d488d6a098b43a60bc53c" compoundref="pdsch__modulator__impl_8cpp" startline="160" endline="232">srsgnb::pdsch_modulator_impl::map_to_prb_other</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a1e2db3104b705647484dc0e5db7d7bd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1rb__allocation" kindref="compound">rb_allocation</ref></type>
        <definition>rb_allocation srsgnb::rb_allocation::make_type0</definition>
        <argsstring>(const bounded_bitset&lt; MAX_RB &gt; &amp;vrb_bitmap, const optional&lt; vrb_to_prb_mapper &gt; &amp;vrb_to_prb_map_={})</argsstring>
        <name>make_type0</name>
        <param>
          <type>const <ref refid="classsrsgnb_1_1bounded__bitset" kindref="compound">bounded_bitset</ref>&lt; <ref refid="namespacesrsgnb_1a093e25254bb1f64f3af8faafd11a9120" kindref="member">MAX_RB</ref> &gt; &amp;</type>
          <declname>vrb_bitmap</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classsrsgnb_1_1vrb__to__prb__mapper" kindref="compound">vrb_to_prb_mapper</ref> &gt; &amp;</type>
          <declname>vrb_to_prb_map_</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Creates a Type 0 RB allocation object. </para>
        </briefdescription>
        <detaileddescription>
<para>Type 0 allocation is described in TS38.214 Section 5.1.2.2.1 for PDSCH and Section 6.1.2.2.1 for PUSCH.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vrb_bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>VRB allocation bitmap in which each entry represents an active RB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vrb_to_prb_map_</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional VRB-to-PRB mapping (for PDSCH only). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An RB allocation instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="78" column="24" bodyfile="lib/phy/upper/rb_allocation.cpp" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1a290d032540ab2531c96e4ac28e2418e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1rb__allocation" kindref="compound">rb_allocation</ref></type>
        <definition>rb_allocation srsgnb::rb_allocation::make_type1</definition>
        <argsstring>(unsigned rb_start, unsigned rb_count, const optional&lt; vrb_to_prb_mapper &gt; &amp;vrb_to_prb_map_={})</argsstring>
        <name>make_type1</name>
        <param>
          <type>unsigned</type>
          <declname>rb_start</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>rb_count</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classsrsgnb_1_1vrb__to__prb__mapper" kindref="compound">vrb_to_prb_mapper</ref> &gt; &amp;</type>
          <declname>vrb_to_prb_map_</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Creates a Type 1 RB allocation object. </para>
        </briefdescription>
        <detaileddescription>
<para>Type 1 allocation is described in TS38.214 Section 5.1.2.2.2 for PDSCH and Section 6.1.2.2.2 for PUSCH.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rb_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the lowest VRB used for this transmission as <formula id="68">$RB_{start}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rb_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the number of consecutive active VRB for this transmission as <formula id="69">$L_{RB_s}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vrb_to_prb_map_</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional VRB-to-PRB mapping (for PDSCH only). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An RB allocation instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="90" column="3" bodyfile="lib/phy/upper/rb_allocation.cpp" bodystart="76" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classsrsgnb_1_1rb__allocation_1ae0613ed8f956661a7d337750b2ae1c45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsrsgnb_1_1rb__allocation" kindref="compound">rb_allocation</ref></type>
        <definition>rb_allocation srsgnb::rb_allocation::make_custom</definition>
        <argsstring>(std::initializer_list&lt; const unsigned &gt; vrb_indexes, const optional&lt; vrb_to_prb_mapper &gt; &amp;vrb_to_prb_map_={})</argsstring>
        <name>make_custom</name>
        <param>
          <type>std::initializer_list&lt; const unsigned &gt;</type>
          <declname>vrb_indexes</declname>
        </param>
        <param>
          <type>const <ref refid="classsrsgnb_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classsrsgnb_1_1vrb__to__prb__mapper" kindref="compound">vrb_to_prb_mapper</ref> &gt; &amp;</type>
          <declname>vrb_to_prb_map_</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Creates a custom allocation object using a list of VRB indexes. </para>
        </briefdescription>
        <detaileddescription>
<para>The custom allocation is indexed for testing and it is not described in the TS. The VRB mask is constructed from an integer initializer list that indicates the VRBs used for the PDSCH or PUSCH transmission.</para>
<para>The index list order is irrelevant and the index zero represents VRB0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vrb_indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides the VRB indexes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vrb_to_prb_map_</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional VRB-to-PRB mapping (for PDSCH only). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An RB allocation instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/phy/upper/rb_allocation.h" line="102" column="24" bodyfile="lib/phy/upper/rb_allocation.cpp" bodystart="92" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes the frequency allocation for PDSCH and PUSCH transmissions. </para>
    </briefdescription>
    <detaileddescription>
<para>The frequency allocation is defined at VRB level and it can be of type 0, type 1 or custom. Frequency allocation Types 0 and 1 are described in TS38.214 Section 5.1.2.2 for PDSCH and Section 6.1.2.2 for PUSCH.</para>
<para>The VRB allocation is made using one of the maker methods:<itemizedlist>
<listitem><para><ref refid="classsrsgnb_1_1rb__allocation_1a1e2db3104b705647484dc0e5db7d7bd0" kindref="member">make_type0()</ref> for making a type0 allocation,</para>
</listitem><listitem><para><ref refid="classsrsgnb_1_1rb__allocation_1a290d032540ab2531c96e4ac28e2418e6" kindref="member">make_type1()</ref> for making a type1 allocation, or</para>
</listitem><listitem><para><ref refid="classsrsgnb_1_1rb__allocation_1ae0613ed8f956661a7d337750b2ae1c45" kindref="member">make_custom()</ref> for making a custom allocation.</para>
</listitem></itemizedlist>
</para>
<para>Each of the makers optionally take a VRB-to-PRB mapper for PDSCH transmissions. If the VRB-to-PRB mapper is not provided, the VRB-to-PRB is defaulted. The default VRB-to-PRB mapper corresponds to non-interleaved and to a PDSCH transmission is not scheduled in a common SS.</para>
<para><simplesect kind="see"><para><ref refid="classsrsgnb_1_1vrb__to__prb__mapper" kindref="compound">vrb_to_prb_mapper</ref> for more information regarding the VRB-to-PRB mapping for PDSCH.</para>
</simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>The default constructor <ref refid="classsrsgnb_1_1rb__allocation_1a254f919ff625a377e0d7d292576cd981" kindref="member">rb_allocation()</ref> does not allocate any VRB.</para>
</listitem><listitem><para>Use <ref refid="classsrsgnb_1_1rb__allocation_1a536c619a116091af2f8f15ce8727f07b" kindref="member">is_contiguous()</ref> to determine whether the resultant allocation on the resource grid is contiguous.</para>
</listitem><listitem><para>Use <ref refid="classsrsgnb_1_1rb__allocation_1a9e9c90b67ebb0b15838289d73ce6475c" kindref="member">get_prb_indices()</ref> to generate the list of PRB indices.</para>
</listitem><listitem><para>If the resultant physical allocation is contiguous, the methods <ref refid="classsrsgnb_1_1rb__allocation_1a2c63757dc8d9d86f4f24d8b848f93d8b" kindref="member">get_prb_begin()</ref> and <ref refid="classsrsgnb_1_1rb__allocation_1ab89c4464249b9d5bbd423db57dd89b2e" kindref="member">get_prb_end()</ref> can be used to determine the first and last PRB indices without requiring to generate a list of PRB indices.</para>
</listitem><listitem><para>Independently of the allocation type and VRB-to-PRB mapping, the method <ref refid="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" kindref="member">get_prb_mask()</ref> generates a mask indicating the PRB used for the transmission. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>srsgnb::vrb_to_prb_mapper</label>
        <link refid="classsrsgnb_1_1vrb__to__prb__mapper"/>
      </node>
      <node id="1">
        <label>srsgnb::rb_allocation</label>
        <link refid="classsrsgnb_1_1rb__allocation"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-vrb_to_prb_map</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>-vrb_mask</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>srsgnb::bounded_bitset&lt; MAX_RB &gt;</label>
        <link refid="classsrsgnb_1_1bounded__bitset"/>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/phy/upper/rb_allocation.h" line="46" column="1" bodyfile="include/srsgnb/phy/upper/rb_allocation.h" bodystart="45" bodyend="183"/>
    <listofallmembers>
      <member refid="classsrsgnb_1_1rb__allocation_1a9bc5e2a809540b3284ee3a111556a6b4" prot="private" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>get_contiguous_prb_mask</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1ab044a4da9226fa0c0906f863bf28805f" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>get_nof_rb</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a075985c56ef0e385f9c1c69039d72672" prot="private" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>get_other_prb_mask</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a2c63757dc8d9d86f4f24d8b848f93d8b" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>get_prb_begin</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1ab89c4464249b9d5bbd423db57dd89b2e" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>get_prb_end</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a9e9c90b67ebb0b15838289d73ce6475c" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>get_prb_indices</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a4742e3a79eea3d38e3aaba7d17301ac4" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>get_prb_mask</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a536c619a116091af2f8f15ce8727f07b" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>is_contiguous</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1ae0613ed8f956661a7d337750b2ae1c45" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>make_custom</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a1e2db3104b705647484dc0e5db7d7bd0" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>make_type0</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a290d032540ab2531c96e4ac28e2418e6" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>make_type1</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a8279c561931b5271c12e9abcd34cebab" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>operator==</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a254f919ff625a377e0d7d292576cd981" prot="public" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>rb_allocation</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1a534159975adcb99438ad204163927e65" prot="private" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>vrb_mask</name></member>
      <member refid="classsrsgnb_1_1rb__allocation_1ae17cd13e490069597513b574aab6c8ea" prot="private" virt="non-virtual"><scope>srsgnb::rb_allocation</scope><name>vrb_to_prb_map</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
