<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter" kind="struct" language="C++" prot="public">
    <compoundname>srsgnb::eager_async_task::promise_type::final_awaiter</compoundname>
    <includes refid="eager__async__task_8h" local="no">eager_async_task.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1ae89a3cd7bd7527a5b8f861ddab5b523e" prot="public" static="no" mutable="no">
        <type><ref refid="structsrsgnb_1_1eager__async__task_1_1promise__type" kindref="compound">promise_type</ref> *</type>
        <definition>promise_type* srsgnb::eager_async_task&lt; R &gt;::promise_type::final_awaiter::me</definition>
        <argsstring></argsstring>
        <name>me</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/eager_async_task.h" line="29" column="20" bodyfile="include/srsgnb/support/async/eager_async_task.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1af529e546441024c3c1ceaf2d19d3d6dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool srsgnb::eager_async_task&lt; R &gt;::promise_type::final_awaiter::await_ready</definition>
        <argsstring>() const</argsstring>
        <name>await_ready</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/eager_async_task.h" line="31" column="12" bodyfile="include/srsgnb/support/async/eager_async_task.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1a4b74baf1f9b6fb778ecdfb85ff0b1c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1coro__handle" kindref="compound">coro_handle</ref></type>
        <definition>coro_handle srsgnb::eager_async_task&lt; R &gt;::promise_type::final_awaiter::await_suspend</definition>
        <argsstring>(coro_handle&lt; promise_type &gt; h)</argsstring>
        <name>await_suspend</name>
        <param>
          <type><ref refid="structsrsgnb_1_1coro__handle" kindref="compound">coro_handle</ref>&lt; <ref refid="structsrsgnb_1_1eager__async__task_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tail-resumes continuation, if it was previously stored via an AWAIT call. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>suspending coroutine. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/eager_async_task.h" line="35" column="8" bodyfile="include/srsgnb/support/async/eager_async_task.h" bodystart="35" bodyend="38"/>
        <references refid="structsrsgnb_1_1detail_1_1task__promise__base_1a4a7b617bf869109b6f7113e57c029b8b" compoundref="base__task_8h" startline="23">srsgnb::detail::task_promise_base::continuation</references>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1ad3722fe2a04200bc8929d9b4a5c91aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void srsgnb::eager_async_task&lt; R &gt;::promise_type::final_awaiter::await_resume</definition>
        <argsstring>()</argsstring>
        <name>await_resume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/eager_async_task.h" line="40" column="12" bodyfile="include/srsgnb/support/async/eager_async_task.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1a2915c5f6c51ebdb60310a813eb3f2c94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter" kindref="compound">final_awaiter</ref> &amp;</type>
        <definition>final_awaiter&amp; srsgnb::eager_async_task&lt; R &gt;::promise_type::final_awaiter::get_awaiter</definition>
        <argsstring>()</argsstring>
        <name>get_awaiter</name>
        <briefdescription>
<para>Points to itself as an awaiter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/support/async/eager_async_task.h" line="43" column="21" bodyfile="include/srsgnb/support/async/eager_async_task.h" bodystart="43" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>base_task final awaiter type. It runs pending continuations and suspends </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>srsgnb::detail::promise_data&lt; result_type, detail::task_promise_base &gt;</label>
        <link refid="structsrsgnb_1_1detail_1_1promise__data"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>srsgnb::coro_handle&lt; Promise &gt;</label>
        <link refid="structsrsgnb_1_1coro__handle"/>
      </node>
      <node id="4">
        <label>srsgnb::detail::task_promise_base</label>
        <link refid="structsrsgnb_1_1detail_1_1task__promise__base"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+continuation</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>srsgnb::eager_async_task&lt; R &gt;::promise_type::final_awaiter</label>
        <link refid="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+me</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>srsgnb::eager_async_task&lt; R &gt;::promise_type</label>
        <link refid="structsrsgnb_1_1eager__async__task_1_1promise__type"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/srsgnb/support/async/eager_async_task.h" line="28" column="24" bodyfile="include/srsgnb/support/async/eager_async_task.h" bodystart="28" bodyend="44"/>
    <listofallmembers>
      <member refid="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1af529e546441024c3c1ceaf2d19d3d6dd" prot="public" virt="non-virtual"><scope>srsgnb::eager_async_task::promise_type::final_awaiter</scope><name>await_ready</name></member>
      <member refid="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1ad3722fe2a04200bc8929d9b4a5c91aa2" prot="public" virt="non-virtual"><scope>srsgnb::eager_async_task::promise_type::final_awaiter</scope><name>await_resume</name></member>
      <member refid="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1a4b74baf1f9b6fb778ecdfb85ff0b1c67" prot="public" virt="non-virtual"><scope>srsgnb::eager_async_task::promise_type::final_awaiter</scope><name>await_suspend</name></member>
      <member refid="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1a2915c5f6c51ebdb60310a813eb3f2c94" prot="public" virt="non-virtual"><scope>srsgnb::eager_async_task::promise_type::final_awaiter</scope><name>get_awaiter</name></member>
      <member refid="structsrsgnb_1_1eager__async__task_1_1promise__type_1_1final__awaiter_1ae89a3cd7bd7527a5b8f861ddab5b523e" prot="public" virt="non-virtual"><scope>srsgnb::eager_async_task::promise_type::final_awaiter</scope><name>me</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
