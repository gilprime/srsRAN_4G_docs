<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="srslog__c_8h" kind="file" language="C++">
    <compoundname>srslog_c.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includedby refid="srslog__c_8cpp" local="yes">lib/srslog/srslog_c.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/srsgnb/srslog/srslog_c.h</label>
        <link refid="srslog__c_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="srslog__c_8h_1a363b4cfafd0b329743dad9e4a5d94d0b" prot="public" static="no" strong="no">
        <type></type>
        <name>srslog_log_levels</name>
        <enumvalue id="srslog__c_8h_1a363b4cfafd0b329743dad9e4a5d94d0ba3a11846522a744a46d81f5c0b47c6be1" prot="public">
          <name>srslog_lvl_none</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>disable logger </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="srslog__c_8h_1a363b4cfafd0b329743dad9e4a5d94d0bacb7557a5e9b08af16a0598952a3ee1d6" prot="public">
          <name>srslog_lvl_error</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>error logging level </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="srslog__c_8h_1a363b4cfafd0b329743dad9e4a5d94d0ba19f17a18acd3ce898f16bea452a32cf1" prot="public">
          <name>srslog_lvl_warning</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>warning logging level </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="srslog__c_8h_1a363b4cfafd0b329743dad9e4a5d94d0ba759ecde0fa946a39a95cb1dfc4f528c4" prot="public">
          <name>srslog_lvl_info</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>info logging level </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="srslog__c_8h_1a363b4cfafd0b329743dad9e4a5d94d0ba436709ee3c2eb3451b9453854b6b65db" prot="public">
          <name>srslog_lvl_debug</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>debug logging level </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="114" column="14" bodyfile="include/srsgnb/srslog/srslog_c.h" bodystart="114" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="srslog__c_8h_1a39192ff8d57f34545828a6d370d06fbc" prot="public" static="no">
        <type>int</type>
        <definition>typedef int srslog_bool</definition>
        <argsstring></argsstring>
        <name>srslog_bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="26" column="43" bodyfile="include/srsgnb/srslog/srslog_c.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="srslog__c_8h_1a71159e4ce297d3d85ad393c94b53a841" prot="public" static="no">
        <type>struct srslog_opaque_sink</type>
        <definition>typedef struct srslog_opaque_sink srslog_sink</definition>
        <argsstring></argsstring>
        <name>srslog_sink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="26" column="43" bodyfile="include/srsgnb/srslog/srslog_c.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="srslog__c_8h_1a41180566814686c41883d0be541661a1" prot="public" static="no">
        <type>struct srslog_opaque_log_channel</type>
        <definition>typedef struct srslog_opaque_log_channel srslog_log_channel</definition>
        <argsstring></argsstring>
        <name>srslog_log_channel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="26" column="43" bodyfile="include/srsgnb/srslog/srslog_c.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="srslog__c_8h_1a76db61b639a233852581264c7e3819e4" prot="public" static="no">
        <type>struct srslog_opaque_basic_logger</type>
        <definition>typedef struct srslog_opaque_basic_logger srslog_logger</definition>
        <argsstring></argsstring>
        <name>srslog_logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="26" column="43" bodyfile="include/srsgnb/srslog/srslog_c.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="srslog__c_8h_1afc0e015d32687951ef3ea873fd4d4289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_init</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the logging framework. It must be called before any log entry is generated. NOTE: Calling this function more than once has no side effects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="36" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="31" bodyend="34" declfile="include/srsgnb/srslog/srslog_c.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1aef01f06bbfef7771ad007aaca04157c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_set_default_sink</definition>
        <argsstring>(srslog_sink *s)</argsstring>
        <name>srslog_set_default_sink</name>
        <param>
          <type>srslog_sink *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Installs the specified sink to be used as the default one by new log channels and loggers. The initial default sink writes to stdout. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="43" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="36" bodyend="40" declfile="include/srsgnb/srslog/srslog_c.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a5808bb48be6e6dcbb3e3b9e992df02e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_get_default_sink</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_get_default_sink</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the instance of the default sink being used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="48" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="42" bodyend="45" declfile="include/srsgnb/srslog/srslog_c.h" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1afe5eb374adcdc9e7f0755185c2eb091c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_log_channel *</type>
        <definition>srslog_log_channel* srslog_fetch_log_channel</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_fetch_log_channel</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a log_channel with the specified id that writes to the default sink using the default log channel configuration. NOTE: Any &apos;#&apos; characters in the id will get removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="55" column="20" bodyfile="lib/srslog/srslog_c.cpp" bodystart="47" bodyend="50" declfile="include/srsgnb/srslog/srslog_c.h" declline="55" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a1e5a2fb2b0aec2c46f8b790b63f39c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_log_channel *</type>
        <definition>srslog_log_channel* srslog_find_log_channel</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_find_log_channel</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds a log channel with the specified id string in the repository. On success returns a pointer to the requested log channel, otherwise NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="61" column="20" bodyfile="lib/srslog/srslog_c.cpp" bodystart="52" bodyend="55" declfile="include/srsgnb/srslog/srslog_c.h" declline="61" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a1a02ee60a1e485293afb6557578e6e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_set_log_channel_enabled</definition>
        <argsstring>(srslog_log_channel *channel, srslog_bool enabled)</argsstring>
        <name>srslog_set_log_channel_enabled</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>srslog_bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controls whether the specified channel accepts incoming log entries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="66" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="57" bodyend="61" declfile="include/srsgnb/srslog/srslog_c.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a1f6195b259e666db8106167cf2ca1aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_bool</type>
        <definition>srslog_bool srslog_is_log_channel_enabled</definition>
        <argsstring>(srslog_log_channel *channel)</argsstring>
        <name>srslog_is_log_channel_enabled</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns 1 if the specified channel is accepting incoming log entries, otherwise 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="72" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="63" bodyend="67" declfile="include/srsgnb/srslog/srslog_c.h" declline="72" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a8121fb1522c5e49e5c0a87539ebdd772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srslog_get_log_channel_id</definition>
        <argsstring>(srslog_log_channel *channel)</argsstring>
        <name>srslog_get_log_channel_id</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the id string of the specified channel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="77" column="12" bodyfile="lib/srslog/srslog_c.cpp" bodystart="69" bodyend="73" declfile="include/srsgnb/srslog/srslog_c.h" declline="77" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1ab11ae4e36be351468f06700858c492dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_log</definition>
        <argsstring>(srslog_log_channel *channel, const char *fmt,...)</argsstring>
        <name>srslog_log</name>
        <param>
          <type>srslog_log_channel *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logs the provided log entry using the specified log channel. When the channel is disabled the log entry wil be discarded. NOTE: Only printf style formatting is supported when using the C API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="84" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="75" bodyend="83" declfile="include/srsgnb/srslog/srslog_c.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a1bda2ac4617505f453f099c68ceae2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_logger *</type>
        <definition>srslog_logger* srslog_fetch_default_logger</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_fetch_default_logger</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a basic logger (see basic_logger type) with the specified id string. All logger channels will write into the default sink. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="90" column="15" bodyfile="lib/srslog/srslog_c.cpp" bodystart="85" bodyend="88" declfile="include/srsgnb/srslog/srslog_c.h" declline="90" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a0dfec02c16bd6d5232617e8566d2f8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_logger *</type>
        <definition>srslog_logger* srslog_find_default_logger</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_find_default_logger</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds a logger with the specified id string in the repository. On success returns a pointer to the requested log channel, otherwise NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="96" column="15" bodyfile="lib/srslog/srslog_c.cpp" bodystart="90" bodyend="93" declfile="include/srsgnb/srslog/srslog_c.h" declline="96" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a46bddfec95b664010a8d0b95404ff4db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_debug</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_debug</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These functions log the provided log entry using the specified logger. Entries are automatically discarded depending on the configured level of the logger. NOTE: Only printf style formatting is supported when using the C API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="104" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="95" bodyend="103" declfile="include/srsgnb/srslog/srslog_c.h" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a64f79bade55bdc7ed16f8f50cb227910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_info</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_info</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="105" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="105" bodyend="113" declfile="include/srsgnb/srslog/srslog_c.h" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a060f4dc873921b5d13eee8e57ee35043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_warning</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_warning</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="106" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="115" bodyend="123" declfile="include/srsgnb/srslog/srslog_c.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a66b14cb12b58e66c69c656c4737bee75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_error</definition>
        <argsstring>(srslog_logger *log, const char *fmt,...)</argsstring>
        <name>srslog_error</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="107" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="125" bodyend="133" declfile="include/srsgnb/srslog/srslog_c.h" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a8a7537ca139b9e342d40407589ba3c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* srslog_get_logger_id</definition>
        <argsstring>(srslog_logger *log)</argsstring>
        <name>srslog_get_logger_id</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the id string of the specified logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="112" column="12" bodyfile="lib/srslog/srslog_c.cpp" bodystart="135" bodyend="139" declfile="include/srsgnb/srslog/srslog_c.h" declline="112" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1ad319229f9f4a56597d514edf686188d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srslog_set_logger_level</definition>
        <argsstring>(srslog_logger *log, srslog_log_levels lvl)</argsstring>
        <name>srslog_set_logger_level</name>
        <param>
          <type>srslog_logger *</type>
          <declname>log</declname>
        </param>
        <param>
          <type>srslog_log_levels</type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the logging level into the specified logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="125" column="6" bodyfile="lib/srslog/srslog_c.cpp" bodystart="161" bodyend="165" declfile="include/srsgnb/srslog/srslog_c.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a29eb215c101665e70d8c11d6bb5a35d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_find_sink</definition>
        <argsstring>(const char *id)</argsstring>
        <name>srslog_find_sink</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds a sink with the specified id string in the repository. On success returns a pointer to the requested sink, otherwise NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="131" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="167" bodyend="170" declfile="include/srsgnb/srslog/srslog_c.h" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a207b18557543cd82be3cee52b19a780f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_fetch_stdout_sink</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_fetch_stdout_sink</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a sink that writes to the stdout stream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="136" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="172" bodyend="175" declfile="include/srsgnb/srslog/srslog_c.h" declline="136" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a309128c09f65077a7a5ca999df805ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_fetch_stderr_sink</definition>
        <argsstring>(void)</argsstring>
        <name>srslog_fetch_stderr_sink</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a sink that writes to the stderr stream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="141" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="177" bodyend="180" declfile="include/srsgnb/srslog/srslog_c.h" declline="141" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="srslog__c_8h_1a2ccf9f0df2fb90aedafcd8aa09b69903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>srslog_sink *</type>
        <definition>srslog_sink* srslog_fetch_file_sink</definition>
        <argsstring>(const char *path, size_t max_size, srslog_bool force_flush)</argsstring>
        <name>srslog_fetch_file_sink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_size</declname>
        </param>
        <param>
          <type>srslog_bool</type>
          <declname>force_flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an instance of a sink that writes into a file in the specified path. Specifying a max_size value different to zero will make the sink create a new file each time the current file exceeds this value. The units of max_size are bytes. Setting force_flush to true will flush the sink after every write. NOTE: Any &apos;#&apos; characters in the id will get removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/srsgnb/srslog/srslog_c.h" line="151" column="13" bodyfile="lib/srslog/srslog_c.cpp" bodystart="182" bodyend="185" declfile="include/srsgnb/srslog/srslog_c.h" declline="151" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2013-2022<sp/>Software<sp/>Radio<sp/>Systems<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>By<sp/>using<sp/>this<sp/>file,<sp/>you<sp/>agree<sp/>to<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>set</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>forth<sp/>in<sp/>the<sp/>LICENSE<sp/>file<sp/>which<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>top<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srslog_bool;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srslog_opaque_sink<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srslog_sink;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srslog_opaque_log_channel<sp/><sp/>srslog_log_channel;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srslog_opaque_basic_logger<sp/>srslog_logger;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_set_default_sink(srslog_sink*<sp/>s);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">srslog_sink*<sp/>srslog_get_default_sink(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">srslog_log_channel*<sp/>srslog_fetch_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">srslog_log_channel*<sp/>srslog_find_log_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_set_log_channel_enabled(srslog_log_channel*<sp/>channel,<sp/>srslog_bool<sp/>enabled);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">srslog_bool<sp/>srslog_is_log_channel_enabled(srslog_log_channel*<sp/>channel);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>srslog_get_log_channel_id(srslog_log_channel*<sp/>channel);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_log(srslog_log_channel*<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">srslog_logger*<sp/>srslog_fetch_default_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">srslog_logger*<sp/>srslog_find_default_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_debug(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_info(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_warning(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_error(srslog_logger*<sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>srslog_get_logger_id(srslog_logger*<sp/>log);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>srslog_lvl_none,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>srslog_lvl_error,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>srslog_lvl_warning,<sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>srslog_lvl_info,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>srslog_lvl_debug<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/>srslog_log_levels;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srslog_set_logger_level(srslog_logger*<sp/>log,<sp/>srslog_log_levels<sp/>lvl);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">srslog_sink*<sp/>srslog_find_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">srslog_sink*<sp/>srslog_fetch_stdout_sink(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">srslog_sink*<sp/>srslog_fetch_stderr_sink(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">srslog_sink*<sp/>srslog_fetch_file_sink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_size,<sp/>srslog_bool<sp/>force_flush);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/srsgnb/srslog/srslog_c.h"/>
  </compounddef>
</doxygen>
